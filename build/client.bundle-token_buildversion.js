/******/ (function(modules) { // webpackBootstrap
/******/ 	// install a JSONP callback for chunk loading
/******/ 	var parentJsonpFunction = window["webpackJsonp"];
/******/ 	window["webpackJsonp"] = function webpackJsonpCallback(chunkIds, moreModules, executeModules) {
/******/ 		// add "moreModules" to the modules object,
/******/ 		// then flag all "chunkIds" as loaded and fire callback
/******/ 		var moduleId, chunkId, i = 0, resolves = [], result;
/******/ 		for(;i < chunkIds.length; i++) {
/******/ 			chunkId = chunkIds[i];
/******/ 			if(installedChunks[chunkId]) {
/******/ 				resolves.push(installedChunks[chunkId][0]);
/******/ 			}
/******/ 			installedChunks[chunkId] = 0;
/******/ 		}
/******/ 		for(moduleId in moreModules) {
/******/ 			if(Object.prototype.hasOwnProperty.call(moreModules, moduleId)) {
/******/ 				modules[moduleId] = moreModules[moduleId];
/******/ 			}
/******/ 		}
/******/ 		if(parentJsonpFunction) parentJsonpFunction(chunkIds, moreModules, executeModules);
/******/ 		while(resolves.length) {
/******/ 			resolves.shift()();
/******/ 		}
/******/
/******/ 	};
/******/
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// objects to store loaded and loading chunks
/******/ 	var installedChunks = {
/******/ 		6: 0,
/******/ 		7: 0
/******/ 	};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/ 	// This file contains only the entry chunk.
/******/ 	// The chunk loading function for additional chunks
/******/ 	__webpack_require__.e = function requireEnsure(chunkId) {
/******/ 		var installedChunkData = installedChunks[chunkId];
/******/ 		if(installedChunkData === 0) {
/******/ 			return new Promise(function(resolve) { resolve(); });
/******/ 		}
/******/
/******/ 		// a Promise means "currently loading".
/******/ 		if(installedChunkData) {
/******/ 			return installedChunkData[2];
/******/ 		}
/******/
/******/ 		// setup Promise in chunk cache
/******/ 		var promise = new Promise(function(resolve, reject) {
/******/ 			installedChunkData = installedChunks[chunkId] = [resolve, reject];
/******/ 		});
/******/ 		installedChunkData[2] = promise;
/******/
/******/ 		// start chunk loading
/******/ 		var head = document.getElementsByTagName('head')[0];
/******/ 		var script = document.createElement('script');
/******/ 		script.type = "text/javascript";
/******/ 		script.charset = 'utf-8';
/******/ 		script.async = true;
/******/ 		script.timeout = 120000;
/******/
/******/ 		if (__webpack_require__.nc) {
/******/ 			script.setAttribute("nonce", __webpack_require__.nc);
/******/ 		}
/******/ 		script.src = __webpack_require__.p + "" + ({"0":"header","1":"onboardingmaster","2":"letter","3":"masterpopup","4":"existinguserloader","5":"formattingcontainer"}[chunkId]||chunkId) + ".bundle-token_buildversion.js";
/******/ 		var timeout = setTimeout(onScriptComplete, 120000);
/******/ 		script.onerror = script.onload = onScriptComplete;
/******/ 		function onScriptComplete() {
/******/ 			// avoid mem leaks in IE.
/******/ 			script.onerror = script.onload = null;
/******/ 			clearTimeout(timeout);
/******/ 			var chunk = installedChunks[chunkId];
/******/ 			if(chunk !== 0) {
/******/ 				if(chunk) {
/******/ 					chunk[1](new Error('Loading chunk ' + chunkId + ' failed.'));
/******/ 				}
/******/ 				installedChunks[chunkId] = undefined;
/******/ 			}
/******/ 		};
/******/ 		head.appendChild(script);
/******/
/******/ 		return promise;
/******/ 	};
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build-letter/build/";
/******/
/******/ 	// on error function for async loading
/******/ 	__webpack_require__.oe = function(err) { console.error(err); throw err; };
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 78);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(79);
} else {
  module.exports = __webpack_require__(80);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 1 */
/***/ (function(module, exports) {

// shim for using process in browser
var process = module.exports = {};

// cached from whatever global is present so that test runners that stub it
// don't break things.  But we need to wrap it in a try catch in case it is
// wrapped in strict mode code which doesn't define any globals.  It's inside a
// function because try/catches deoptimize in certain engines.

var cachedSetTimeout;
var cachedClearTimeout;

function defaultSetTimout() {
    throw new Error('setTimeout has not been defined');
}
function defaultClearTimeout () {
    throw new Error('clearTimeout has not been defined');
}
(function () {
    try {
        if (typeof setTimeout === 'function') {
            cachedSetTimeout = setTimeout;
        } else {
            cachedSetTimeout = defaultSetTimout;
        }
    } catch (e) {
        cachedSetTimeout = defaultSetTimout;
    }
    try {
        if (typeof clearTimeout === 'function') {
            cachedClearTimeout = clearTimeout;
        } else {
            cachedClearTimeout = defaultClearTimeout;
        }
    } catch (e) {
        cachedClearTimeout = defaultClearTimeout;
    }
} ())
function runTimeout(fun) {
    if (cachedSetTimeout === setTimeout) {
        //normal enviroments in sane situations
        return setTimeout(fun, 0);
    }
    // if setTimeout wasn't available but was latter defined
    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
        cachedSetTimeout = setTimeout;
        return setTimeout(fun, 0);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedSetTimeout(fun, 0);
    } catch(e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
            return cachedSetTimeout.call(null, fun, 0);
        } catch(e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
            return cachedSetTimeout.call(this, fun, 0);
        }
    }


}
function runClearTimeout(marker) {
    if (cachedClearTimeout === clearTimeout) {
        //normal enviroments in sane situations
        return clearTimeout(marker);
    }
    // if clearTimeout wasn't available but was latter defined
    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
        cachedClearTimeout = clearTimeout;
        return clearTimeout(marker);
    }
    try {
        // when when somebody has screwed with setTimeout but no I.E. maddness
        return cachedClearTimeout(marker);
    } catch (e){
        try {
            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
            return cachedClearTimeout.call(null, marker);
        } catch (e){
            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
            // Some versions of I.E. have different rules for clearTimeout vs setTimeout
            return cachedClearTimeout.call(this, marker);
        }
    }



}
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    if (!draining || !currentQueue) {
        return;
    }
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = runTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    runClearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        runTimeout(drainQueue);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;
process.prependListener = noop;
process.prependOnceListener = noop;

process.listeners = function (name) { return [] }

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };


/***/ }),
/* 2 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

if (process.env.NODE_ENV !== 'production') {
  var ReactIs = __webpack_require__(19);

  // By explicitly using `prop-types` you are opting into new development behavior.
  // http://fb.me/prop-types-in-prod
  var throwOnDirectAccess = true;
  module.exports = __webpack_require__(91)(ReactIs.isElement, throwOnDirectAccess);
} else {
  // By explicitly using `prop-types` you are opting into new production behavior.
  // http://fb.me/prop-types-in-prod
  module.exports = __webpack_require__(92)();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 3 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var invariant = function(condition, format, a, b, c, d, e, f) {
  if (process.env.NODE_ENV !== 'production') {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  }

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error(
        'Minified exception occurred; use the non-minified dev environment ' +
        'for the full error message and additional helpful warnings.'
      );
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(
        format.replace(/%s/g, function() { return args[argIndex++]; })
      );
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
};

module.exports = invariant;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 4 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
var DOCUMENT_SAVE_COMPLETE = exports.DOCUMENT_SAVE_COMPLETE = "DOCUMENT_SAVE_COMPLETE";
var DOCUMENT_GET_SUCCESS = exports.DOCUMENT_GET_SUCCESS = "DOCUMENT_GET_SUCCESS";
var DOCUMENT_CREATE_ID = exports.DOCUMENT_CREATE_ID = "DOCUMENT_CREATE_ID";

var SET_MAX_SECTION_COUNT = exports.SET_MAX_SECTION_COUNT = "SET_MAX_SECTION_COUNT";

var LOAD_DOCUMENT = exports.LOAD_DOCUMENT = "LOAD_DOCUMENT";
var ADD_SECTIONS = exports.ADD_SECTIONS = "ADD_SECTIONS";
var SET_SELECTED_SECTION_INDEX = exports.SET_SELECTED_SECTION_INDEX = "SET_SELECTED_SECTION_INDEX";
var UPDATE_DOC_STYLES = exports.UPDATE_DOC_STYLES = "UPDATE_DOC_STYLES";
var REORDER_SECTIONS = exports.REORDER_SECTIONS = "REORDER_SECTIONS";
var REORDER_PARA = exports.REORDER_PARA = "REORDER_PARA";

var BEGIN_AJAX_CALL = exports.BEGIN_AJAX_CALL = "BEGIN_AJAX_CALL";
var AJAX_CALL_ERROR = exports.AJAX_CALL_ERROR = "AJAX_CALL_ERROR";
var END_AJAX_CALL = exports.END_AJAX_CALL = "END_AJAX_CALL";

//----------------------------------------------
var CHOOSE_TEMPLATE = exports.CHOOSE_TEMPLATE = "CHOOSE_TEMPLATE";
var UPDATE_TEMPLATE = exports.UPDATE_TEMPLATE = "UPDATE_TEMPLATE";
var UPDATE_TEMPLATE_SKINS = exports.UPDATE_TEMPLATE_SKINS = "UPDATE_TEMPLATE_SKINS";
var REGISTER_GUEST_USER = exports.REGISTER_GUEST_USER = "REGISTER_GUEST_USER";
var REGISTER_USER = exports.REGISTER_USER = "REGISTER_USER";
var LOGIN_USER = exports.LOGIN_USER = "LOGIN_USER";
var UPDATE_USER = exports.UPDATE_USER = "UPDATE_USER";
var UPDATE_DOC_USER = exports.UPDATE_DOC_USER = "UPDATE_DOC_USER";
var USER_CREATED_ON = exports.USER_CREATED_ON = "USER_CREATED_ON";
var UPDATE_USER_CONTACT = exports.UPDATE_USER_CONTACT = "UPDATE_USER_CONTACT";

//new reducer const
var REMOVE_PARAGRAPH = exports.REMOVE_PARAGRAPH = "REMOVE_PARAGRAPH";
var ADD_PARAGRAPH = exports.ADD_PARAGRAPH = "ADD_PARAGRAPH";
var UPDATE_PARAGRAPH = exports.UPDATE_PARAGRAPH = "UPDATE_PARAGRAPH";
var REMOVE_SECTION = exports.REMOVE_SECTION = "REMOVE_SECTION";
var ADD_SECTION = exports.ADD_SECTION = "ADD_SECTION";
var UPDATE_SECTIONS = exports.UPDATE_SECTIONS = "UPDATE_SECTIONS";

//Content-TTC
var GET_TEXT_TUNER_CONTENT = exports.GET_TEXT_TUNER_CONTENT = "GET_TEXT_TUNER_CONTENT";

//Summary
var SUMMARY_MODIFIED = exports.SUMMARY_MODIFIED = "SUMMARY_MODIFIED";
var LOAD_SUMMARY = exports.LOAD_SUMMARY = "LOAD_SUMMARY";
var SET_SUMMARY_SECTION_INDEX = exports.SET_SUMMARY_SECTION_INDEX = "SET_SUMMARY_SECTION_INDEX";
var ADD_UPDATE_SUMMARYPARA = exports.ADD_UPDATE_SUMMARYPARA = "ADD_UPDATE_SUMMARYPARA";
var REMOVE_SUMMARY_SECTION = exports.REMOVE_SUMMARY_SECTION = "REMOVE_SUMMARY_SECTION";

//Contact Section
var SAVE_CONTACT = exports.SAVE_CONTACT = "SAVE_CONTACT";
var SAVE_CONTACT_SUCCESS = exports.SAVE_CONTACT_SUCCESS = "SAVE_CONTACT_SUCCESS";
var SAVE_CONTACT_FAIL = exports.SAVE_CONTACT_FAIL = "ADD_CONTACT_FAIL";
var LOAD_CONTACT = exports.LOAD_CONTACT = "LOAD_CONTACT";
var SET_CONTACT_SECTION_INDEX = exports.SET_CONTACT_SECTION_INDEX = "SET_CONTACT_SECTION_INDEX";

var SAVE_NAMESECTION = exports.SAVE_NAMESECTION = "SAVE_NAMESECTION";
var SAVE_CONTACTSECTION = exports.SAVE_CONTACTSECTION = "SAVE_CONTACTSECTION";

var SAVE_NAMESECTIONPARA = exports.SAVE_NAMESECTIONPARA = "SAVE_NAMESECTIONPARA";
var SAVE_CONTACTSECTIONPARA = exports.SAVE_CONTACTSECTIONPARA = "SAVE_CONTACTSECTIONPARA";

//Additional Section
var ADDITIONAL_SECTION_MODIFIED = exports.ADDITIONAL_SECTION_MODIFIED = "ADDITIONAL_SECTION_MODIFIED";
var UPDATE_ADDITIONAL_SECTION = exports.UPDATE_ADDITIONAL_SECTION = "UPDATE_ADDITIONAL_SECTION";
var REMOVE_ADDITIONAL_SECTION = exports.REMOVE_ADDITIONAL_SECTION = "REMOVE_ADDITIONAL_SECTION";
var INSERT_ADDITONAL_SECTION = exports.INSERT_ADDITONAL_SECTION = "INSERT_ADDITONAL_SECTION";
var SET_ADDITIONAL_SECTION_INDEX = exports.SET_ADDITIONAL_SECTION_INDEX = "SET_ADDITIONAL_SECTION_INDEX";
var ADDED_ADDITONAL_SECTION = exports.ADDED_ADDITONAL_SECTION = "ADDED_ADDITONAL_SECTION";
var UPDATE_ADDITIONAL_SECTION_PARA = exports.UPDATE_ADDITIONAL_SECTION_PARA = "UPDATE_ADDITIONAL_SECTION_PARA";

var LOAD_EXPERIENCE1 = exports.LOAD_EXPERIENCE1 = "LOAD_EXPERIENCE1";
var HIDE_TIPS_COMPONENT = exports.HIDE_TIPS_COMPONENT = "HIDE_TIPS_COMPONENT";
//Get Skins
var GET_SKIN = exports.GET_SKIN = "GET_SKIN";

var GET_TEMPLATES = exports.GET_TEMPLATES = "GET_TEMPLATES";

var RENAME_DOCUMENT = exports.RENAME_DOCUMENT = "RENAME_DOCUMENT";
var RENAME_SUMMARY_SECTION = exports.RENAME_SUMMARY_SECTION = "RENAME_SUMMARY_SECTION";
var RENAME_SKILL_SECTION = exports.RENAME_SKILL_SECTION = "RENAME_SKILL_SECTION";
var RENAME_EDUCATION_SECTION = exports.RENAME_EDUCATION_SECTION = "RENAME_EDUCATION_SECTION";
var RENAME_EXPERIENCE_SECTION = exports.RENAME_EXPERIENCE_SECTION = "RENAME_EXPERIENCE_SECTION";
var RENAME_EXECUTIVE_EXPERIENCE_SECTION = exports.RENAME_EXECUTIVE_EXPERIENCE_SECTION = "RENAME_EXECUTIVE_EXPERIENCE_SECTION";
var RENAME_MILITARY_EXPERIENCE_SECTION = exports.RENAME_MILITARY_EXPERIENCE_SECTION = "RENAME_MILITARY_EXPERIENCE_SECTION";
var RENAME_WORK_HISTORY_SECTION = exports.RENAME_WORK_HISTORY_SECTION = "RENAME_WORK_HISTORY_SECTION";
var UPDATE_SKIN = exports.UPDATE_SKIN = "UPDATE_SKIN";
var UPDATE_TEMPLATEID = exports.UPDATE_TEMPLATEID = "UPDATE_TEMPLATEID";

var RESET_DOCUMENT = exports.RESET_DOCUMENT = "RESET_DOCUMENT";
var RESET_USER = exports.RESET_USER = "RESET_USER ";
var RESET_COMMON = exports.RESET_COMMON = "RESET_COMMON";
var RESET_AJAXSTATUS = exports.RESET_AJAXSTATUS = "RESET_AJAXSTATUS";
var SET_JOBTITLE = exports.SET_JOBTITLE = "SET_JOBTITLE";
var UPDATE_DOC_PREFERENCE = exports.UPDATE_DOC_PREFERENCE = "UPDATE_DOC_PREFERENCE";

var STORE_SECTIONS = exports.STORE_SECTIONS = "STORE_SECTIONS";
var SET_ENTERBUILDER = exports.SET_ENTERBUILDER = "SET_ENTERBUILDER";
var SET_DOCUMENTTYPE = exports.SET_DOCUMENTTYPE = "SET_DOCUMENTTYPE";
var SET_LOGINVIEWED = exports.SET_LOGINVIEWED = "SET_LOGINVIEWED";
//Common Actions
var GET_JOB_TITLES = exports.GET_JOB_TITLES = "GET_JOB_TITLES";
var GET_EMPLOYERS = exports.GET_EMPLOYERS = "GET_EMPLOYERS";
var GET_DEGREES = exports.GET_DEGREES = "GET_DEGREES";
var GET_SCHOOLS = exports.GET_SCHOOLS = "GET_SCHOOLS";
var GET_JOBTITLES_SKILLS = exports.GET_JOBTITLES_SKILLS = "GET_JOBTITLES_SKILLS";

//Onboarding Actions
var SAVE_ONBOARDING_STEP_ARR = exports.SAVE_ONBOARDING_STEP_ARR = "SAVE_ONBOARDING_STEP_ARR";
var SAVE_ONBOARDING_USER_INPUT = exports.SAVE_ONBOARDING_USER_INPUT = "SAVE_ONBOARDING_USER_INPUT";
var SAVE_JOB_SKILLS_LIST = exports.SAVE_JOB_SKILLS_LIST = "SAVE_JOB_SKILLS_LIST";
var SAVE_PREVIOUS_FLOW_ARR = exports.SAVE_PREVIOUS_FLOW_ARR = "SAVE_PREVIOUS_FLOW_ARR";
var SET_INPUT_MODIFIED = exports.SET_INPUT_MODIFIED = "SET_INPUT_MODIFIED";
var UPDATE_REVIEW_STATE = exports.UPDATE_REVIEW_STATE = "SAVE_REVIEW_BACKUP";
var RESET_ONBOARDING_DATA = exports.RESET_ONBOARDING_DATA = "RESET_ONBOARDING_DATA";
var SET_SKIP_STEPS_ARR = exports.SET_SKIP_STEPS_ARR = "SET_SKIP_STEPS_ARR";
var SAVE_RESUME_ARR = exports.SAVE_RESUME_ARR = "SAVE_RESUME_ARR";
var DOC_FROM_RESUME = exports.DOC_FROM_RESUME = "DOC_FROM_RESUME";
var SAVE_REVIEW_ARR = exports.SAVE_REVIEW_ARR = "SAVE_REVIEW_ARR";
var RESET_RESUME_ONBOARDING = exports.RESET_RESUME_ONBOARDING = "RESET_RESUME_ONBOARDING";
var SAVE_RESUME_USER_INPUT = exports.SAVE_RESUME_USER_INPUT = "SAVE_RESUME_USER_INPUT";
var SAVE_CUSTOM_SKILLS = exports.SAVE_CUSTOM_SKILLS = "SAVE_CUSTOM_SKILLS";
var SET_SIGN_UP_MODAL_SKIP = exports.SET_SIGN_UP_MODAL_SKIP = "SET_SIGN_UP_MODAL_SKIP";
var SAVE_DOC_COLOR = exports.SAVE_DOC_COLOR = "SAVE_DOC_COLOR";
var CONTACT_SIGNUP_STATUS = exports.CONTACT_SIGNUP_STATUS = "CONTACT_SIGNUP_STATUS";
var SAVE_UPLOAD_REVIEW_ARR = exports.SAVE_UPLOAD_REVIEW_ARR = "SAVE_UPLOAD_REVIEW_ARR";
var SET_PERSONALIZATION_INPUT_MODIFIED = exports.SET_PERSONALIZATION_INPUT_MODIFIED = "SET_PERSONALIZATION_INPUT_MODIFIED";
var SET_USER_INTERACTED_ON_YOE = exports.SET_USER_INTERACTED_ON_YOE = "SET_USER_INTERACTED_ON_YOE";
var SET_SHOW_JOB_IN_PREVIEW = exports.SET_SHOW_JOB_IN_PREVIEW = "SET_SHOW_JOB_IN_PREVIEW";
var SAVE_ENHANCED_SKILLS_LIST = exports.SAVE_ENHANCED_SKILLS_LIST = "SAVE_ENHANCED_SKILLS_LIST";
var SET_ONBOARDING_HISTORY_LENGTH = exports.SET_ONBOARDING_HISTORY_LENGTH = "SET_ONBOARDING_HISTORY_LENGTH";

/***/ }),
/* 5 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var __DEV__ = process.env.NODE_ENV !== 'production';

var warning = function() {};

if (__DEV__) {
  var printWarning = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);
    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }
    var argIndex = 0;
    var message = 'Warning: ' +
      format.replace(/%s/g, function() {
        return args[argIndex++];
      });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  }

  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
          '`warning(condition, format, ...args)` requires a warning ' +
          'message argument'
      );
    }
    if (!condition) {
      printWarning.apply(null, [format].concat(args));
    }
  };
}

module.exports = warning;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 6 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.HighlighterSections = exports.SocialProofContents = exports.JobHierarchy = exports.imageDownloadOption = exports.verticalProgressBarNodes = exports.commonBuilderKeys = exports.SIGNATURE_LOCALIZATION = exports.registrationOnContactStatus = undefined;
exports.SignatureCategory = exports.transformedSkillVariance = exports.errorCodes = exports.rnSkins = exports.finalizePageEnhancementStyles = exports.chooseTemplateTemplateEnhancements = exports.clickTypes = exports.exportOptions = exports.onboardingQSStepMapping = exports.letterTypes = exports.employmentPosition = exports.companyLocation = exports.bannerTypes = exports.bannerClick = exports.reInitProperties = exports.themeChange = exports.customSectionsTypeCdArr = exports.TemplateTypes = exports.CLUserActions = exports.TTCAutoPopulateObjArr = exports.BuilderBasedTTCAutoPopulateObjArr = exports.letterZoomTypes = exports.fixedSections = exports.sectionHoverStyleJT = exports.sectionHoverProp = exports.emailFormats = exports.sliderLabels = exports.customTemplateTags = exports.autoCompleteType = exports.ltrPreviewIncludedSecArr = exports.docPreference = exports.onBoardingStepsV2Grouping = exports.arrBBFOnboardingSpecificSections = exports.onBoardingStepsV2 = exports.OnboardingStepDocTitle = exports.reviewStepIndexObj = exports.MaxOptions = exports.dependencyType = exports.reviewScreenCategories = exports.userTraits = exports.progressBarGroupingDivision = exports.onBoardingUserInput = exports.lstBBFSpecificKeys = exports.otherFieldsToVerifyChangeKeys = exports.fieldsToUpdateKeys = exports.gender = exports.dataObjMappingKeys = exports.BuilderBasedTTCSections = exports.tagType = exports.schoolType = exports.viewTypes = exports.commonFields = exports.subject = exports.emailFrom = exports.emailTo = exports.customskills = exports.phoneNumber = exports.date = exports.closer = exports.company = exports.state = exports.city = exports.faxPhoneNumber = exports.otherPhoneNumber = exports.cellPhoneNumber = exports.homePhoneNumber = exports.zip = exports.phoneRegexPlusInclude = exports.allowedVulnerableTags = exports.regexNumSplCharsPhn = exports.regexNumOnlyPhn = exports.regexNumOnly = exports.streetaddress = exports.Regex = exports.ForageKeyNames = exports.PopupDescriptionAriaAttr = exports.PopUpNames = exports.DoerTemplates = exports.QueryStringParams = exports.Path = exports.userStages = exports.docFileTypeCD = exports.styleSliders = exports.optimizelyEventTypes = exports.userPreferenceKeys = exports.traitsPropsKey = exports.eventPropsValues = exports.eventPropsKeys = exports.eventTypes = exports.colorNames = exports.letterName = exports.password = exports.email = exports.lastName = exports.documentTitle = exports.firstName = exports.countryCode = exports.customFields = exports.customFieldsId = exports.experimentsObj = undefined;

var _BuilderBasedTTCSecti, _dataObjMappingKeys, _onBoardingUserInput, _ConfidentialityTTC, _TRA, _TRA2, _SPS, _MOD, _TRA3, _SPS2, _TRA4, _MOD2, _CNT, _RBN, _MOD3, _CNT2, _CNT3, _EMP, _EXC, _PRO, _CLE, _CLE2, _CLD, _CLD2, _MOD4, _CLD3, _CLD4, _CLD5, _CTP, _EMP2, _CLD6, _EMP3, _CLD7, _MLE, _TRA5, _TRA6, _SPS3, _MOD5, _TRA7, _SPS4, _TRA8, _MOD6, _CNT4;

var _typeCodes = __webpack_require__(6);

var typeCd = _interopRequireWildcard(_typeCodes);

var _helper = __webpack_require__(7);

var _CommonUtils = __webpack_require__(8);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

var experimentsObj = exports.experimentsObj = {
  TemplatePageSocialProof: {
    lbl_traditional: "Traditional",
    number_Of_People_Downloaded: "2342",
    lbl_headingText: "Find your next job! Our customers have been hired by:",
    lbl_sectionTitle: "What our customers are saying",
    lbl_sectionData: '<strong>{0}</strong> people have downloaded their cover\n     letter in the <strong> last 24 hours </strong>',
    lbl_choose_template_heading: "Choose a template for your<span class ='highlight-text'> cover letter</span>",
    lbl_choose_template_subHeading: "You can change the template and customize it later.",
    lbl_creative_heading: "<b>Creative</b>",
    lbl_creative_subHeading: '<b>“When your lost for words or just tired of using ' + 'the same cover letter for 5 different positions,<mark> cover letter offers' + 'creative pre-written sentences </mark> which describe you in the best out look possible.”</b>',
    lbl_creative_authorName: "Natalie Curry",
    lbl_creative_authorImg: "blobcontent/clb/clnjt/images/trustpilot/testimonial-1.png",
    lbl_recommend_heading: "<b>High recommend</b>",
    lbl_recommend_subHeading: '<b>“I lost my job and felt paralyzed until I found Cover-Letter-Now, helped me write' + 'several Cover Letters.<mark>  I highly recommend their services </mark> .”</b>',
    lbl_recommend_authorName: "J Mark Woodson",
    lbl_recommend_authorImg: "blobcontent/clb/clnjt/images/trustpilot/testimonial.png",
    lbl_help_heading: "<b>Great help</b>",
    lbl_help_subHeading: '<b>“<mark> Great help,</mark>  was an asset to in easing my worries. Thank you.”</b>',
    lbl_help_authorName: "Darlene Mason",
    lbl_help_authorImg: "blobcontent/clb/clnjt/images/trustpilot/testimonial-3.png",
    lbl_job_heading: "<b>Great Job<b>",
    lbl_job_subHeading: '<b>“I was very happy with the service. <mark> Landed the job I was after.' + '</mark>  do believe it was due to revised cover letters and resume helped.”</b>',
    lbl_job_authorName: "Tracy Williams",
    lbl_job_authorImg: "blobcontent/clb/clnjt/images/trustpilot/testimonial-4.png",
    lbl_brilliant_heading: "<b>Brilliant<b>",
    lbl_brilliant_subHeading: '<b>“How can I fault this site service. Perhaps that it auto corrects my ' + 'spoken English to American English....only kidding. The assistance was fantastic.</b>' + '<b>I had applied for 92 jobs with my own very well written Resume & Cover Letter but no success.</b>' + '<b>Using Cover-Letter-Now not only did I get interviews for the only 2 jobs I applied for but got' + 'job offers from both.”</b>',
    lbl_brilliant_authorMessage: "I'll be resubscribing once I complete this current 6 month contract.",
    lbl_brilliant_authorName: "Gavin - Sweden",
    lbl_brilliant_authorImg: "blobcontent/clb/clnjt/images/trustpilot/testimonial-5.png"

  },
  SkipTemplate: {
    lbl_choose_temp: "Choose this template"
  }
};
var customFieldsId = exports.customFieldsId = {
  contactCity: "contact_city",
  recipientCompany: "recipient_company",
  company: "company",
  jobTitle: "jobTitle",
  school: "school",
  degree: "degree",
  fieldOfStudy: "field_of_study",
  fName: "fName",
  lName: "lName",
  emailTo: "email_to",
  emailFrom: "email_from",
  emailSubject: "email_subject",
  phone: "phone",
  state: "state",
  zip: "zip",
  street: "street",
  previousCompany: "previous_company",
  numberOfYears: "number_of_years",
  recipientFName: "recipient_fName",
  recipientLName: "recipient_lName",
  recipientCity: "recipient_city",
  recipientState: "recipient_state",
  recipientZip: "recipient_zip",
  recipientStreet: "recipient_street",
  autoCompleteforAttrCity: "given-name",
  autCompletedforAttrCompany: "organization"
};

//Custom/static fields or constants
var customFields = exports.customFields = {
  G_LOCALITY: "locality",
  G_ADMINISTRATIVE_AREA_LEVEL_1: "administrative_area_level_1",
  G_POSTAL_CODE: "postal_code",
  To: "TO",
  Subject: "Subject",
  From: "FROM",
  name: "name",
  value: "value",
  code: "code",
  True: "True",
  function: "function"
};
var countryCode = exports.countryCode = {
  US: "US"
};
var firstName = exports.firstName = {
  name: _helper.TypeCodes.fieldCd.FirstName,
  labelName: window.RDL.Localization.lbl_fName,
  errorMessage: window.RDL.Localization.lbl_nameErrorMessage,
  showError: false,
  maxLength: 35,
  id: 'fName',
  regEx: RegExp(window.RDL.nameRegex),
  value: '',
  type: 'name'
};

var documentTitle = exports.documentTitle = {
  name: _helper.TypeCodes.sectionTypeCd.DocumentTitle,
  labelName: window.RDL.Localization.lbl_documentTitle,
  errorMessage: window.RDL.Localization.lbl_documentTitleErrorMessage,
  showError: false,
  maxLength: 100,
  id: 'docTitle',
  regEx: RegExp(window.RDL.nameRegex),
  value: ''
};

var lastName = exports.lastName = {
  name: _helper.TypeCodes.fieldCd.LastName,
  labelName: window.RDL.Localization.lbl_lName,
  errorMessage: window.RDL.Localization.lbl_nameErrorMessage,
  showError: false,
  maxLength: 35,
  id: 'lName',
  regEx: RegExp(window.RDL.nameRegex),
  value: '',
  type: 'name'
};

var email = exports.email = {
  name: _helper.TypeCodes.fieldCd.Email,
  labelName: window.RDL.Localization.lbl_email,
  type: 'email',
  errorMessage: window.RDL.Localization.lbl_emailErrorMessage,
  showError: false,
  maxLength: 50,
  id: "email",
  value: '',
  autoFocus: true,
  regEx: RegExp(window.RDL.emailRegex),
  required: false
};

var password = exports.password = {
  name: _helper.TypeCodes.fieldCd.Password,
  labelName: window.RDL.Localization.lbl_password,
  type: 'password',
  showError: false,
  maxLength: 16,
  id: "pswd",
  // parentClass: 'form-group custom-placeholder-wrap mb-0',
  errorMessage: window.RDL.Localization.lbl_passwordErrorMessage,
  value: '',
  autoFocus: false,
  regEx: /^.{6,16}$/,
  required: true
};

var letterName = exports.letterName = {
  name: 'letterName',
  maxLength: 50,
  value: '',
  autocompleteAttr: "off",
  errorMessage: window.RDL.Localization.lbl_letter_name_validation_text,
  showError: false,
  title: "Letter Name"
};

var colorNames = exports.colorNames = {
  default: "default",
  "#34393D": "assertive asphalt",
  "#AF9B95": "gracious gray",
  "#144181": "loyal blue",
  "#4585DD": "balanced blue",
  "#00A4C0": "team teal",
  "#2C806F": "empathic emerald",
  "#F6911E": "creative marigold",
  "#CB454E": "ambitious red",
  "#B21F32": "ambitious red",
  "#934251": "cooper rust",
  "#B74827": "ochre orange",
  "#EA9123": "creative marigold",
  "#5AB041": "lucky lime",
  "#1C6B60": "empathic emerald",
  "#0C6BA1": "balance blue",
  "#122D71": "loyal blue",
  "#404040": "assertive asphalt"
};

var eventTypes = exports.eventTypes = {
  builderUsage: "builder usage",
  enterBuilder: "enter builder",
  exitBuilder: "exit builder",
  letterTypeClicks: "letter type clicks",
  templateTypeClicks: "template clicks",
  docCreated: "document created",
  coverLetterCreated: "cover letter created",
  docDownloaded: "document downloaded",
  profSkillSelected: "professional skills selected",
  softSkillSelected: "soft skills selected",
  textTunerContent: "text tuner content",
  identify: 'identify',
  reviewAnswers: "review answers",
  covid19Banner: "covid-19 banner",
  finalizeToDesktop: "cover letter finalize mobile to desktop modal",
  templateSelected: "template selected",
  customProfSkillSelected: "custom professional skills added",
  downloadConfirmationModal: "download confirmation modal",
  documentEmailed: "document emailed",
  softToHardRegModal: "soft to hard reg modal",
  colorPicker: "color picker",
  uploadReviewAnswer: "review answers",
  ttcSearchResultClicks: "ttc skills search results clicks",
  popupBlockerDetected: "popup blocker detected"
};

var eventPropsKeys = exports.eventPropsKeys = {
  action: 'action',
  platform: 'Platform',
  flowName: 'flow name',
  screenName: 'screen name',
  featureSet: 'Feature Set',
  builderType: 'builder type',
  clickOption: 'click option',
  location: 'location',
  templateName: 'template name',
  templateCategory: 'template category',
  letterType: 'letter type',
  ttcString: 'ttc string',
  loginStatus: 'Login Status',
  exitPagePath: 'exit page path',
  documentType: 'document type',
  documentFormat: 'document format',
  skillName: 'skill name',
  event: 'event',
  category: 'category',
  section: 'section',
  blankSectionName: 'blank section name',
  virtualurl: 'virtualurl',
  futureJobTitle: 'future job title',
  futureCompanyName: 'future company name',
  yrsOfExp: 'years of experience',
  noJobInMind: "i don't have a job in mind",
  noCompInMind: "i don't have a company in mind",
  docId: "docId",
  email: "email",
  portal: "Portal",
  skillType: "skill type",
  customSkillName: "custom skill name",
  downloadedBy: "downloaded by",
  coverLetterSectionLocation: "cover letter sections click location",
  addSectionName: "add a section name",
  clickLocation: "click location",
  clickOptionModal: "click option for modal",
  clickSection: 'clickSection',
  displayPosition: "display position",
  clContentTagHeader: "cl content tag header",
  matchedOccupation: "matched occupation",
  ttcType: "ttc type",
  ttcLabel: "ttc label",
  recommendedFJT: "recommended FJT"
};

var eventPropsValues = exports.eventPropsValues = {
  add: 'add',
  edit: 'edit',
  remove: 'remove',
  selected: 'selected',
  web: 'Web',
  builder: 'builder',
  coverLetters: 'cover letters',
  coverLetter: 'cover letter',
  coverLetterUC: 'Cover Letters',
  actions: {
    viewed: 'viewed',
    clicked: 'clicked',
    click: 'click',
    closed: 'closed',
    viewedModal: 'viewed modal',
    clickedModal: 'clicked modal',
    clickedToEdit: 'clicked to edit information',
    viewedAfterFinalize: 'viewed after finalize',
    clickedAfterFinalize: 'clicked after finalize'
  },
  clickOptions: {
    home: 'home',
    contactUs: 'contact us',
    changeLetterType: 'change letter type',
    font: 'font',
    fbSignin: 'fb signin',
    googleSignin: 'google signin',
    myAccount: 'my account',
    templates: 'templates',
    formatting: 'formatting',
    download: 'download',
    manageSections: 'manage sections',
    spelling: 'spelling',
    enterTitle: 'enter future job title',
    enterPreviousTitle: 'enter previous job title',
    enterCompany: 'enter company',
    selectSkills: 'select skills',
    selectStrengths: 'select strengths',
    selectExperience: 'select experience',
    selectAnswer: 'select gaps answer',
    selectGaps: 'select gaps reason',
    selectSchoolType: 'select school type',
    enterName: 'enter name',
    enterFieldOfStudy: 'enter field of study',
    enterDegree: 'enter degree',
    selectStyle: 'select working style',
    save: 'save',
    cancel: 'cancel',
    closeButton: 'close button',
    editDocumentName: 'edit document name',
    useIncorrectJobTitleInstead: 'use incorrect job title instead',
    firstNameEntered: 'first name value entered',
    lastNameEntered: 'last name value entered',
    editTTC: 'edit ttc',
    savemyWork: 'save my work',
    cntMobile: 'continue on mobile',
    floatingPreview: 'floating preview',
    closeTab: 'close tab',
    okay: 'okay',
    emailEntered: 'email entered',
    closeSoftRegModal: 'close soft reg modal',
    skipSoftRegModal: 'skip for now on soft reg modal',
    skipForNow: 'skip for now',
    continueWithGoogle: 'continue with google',
    continueWithFacebook: 'continue with facebook',
    uploadWithDropbox: 'upload with dropbox',
    uploadWithGoogleDrive: 'upload with google drive',
    continue: 'continue',
    alreadyHaveAcc: 'already have an account',
    colorPicker: 'color picker',
    skip: 'skip',
    editInformation: 'edit information',
    uploadResume: 'upload my resume',
    createNewLetter: 'create a new cover letter',
    previousJobTitle: 'previous job title',
    recommendedSearch: 'recommended searches',
    skipTemplate: 'skip template'
  },
  congratulations: 'congratulations',
  coverLetterV2React: 'cover letter v2 react',
  coverLetterEditor: 'cover letter editor',
  onboarding: 'onboarding',
  existingAccount: 'existing account',
  login: 'login',
  createAnAccount: 'create an account',
  contact: 'contact',
  futureJobTitle: 'future job title',
  screenNames: {
    ttcSkillsFuzzyLogic: "ttc skills fuzzylogic",
    enterNameContactDetails: "enter your name and contact details",
    clbFinalize: "CLB Finalize page",
    finalize: "finalize",
    enterYourName: "enter your name",
    chooseTemplate: 'choose template',
    templatePage: 'template page',
    personalizationIntro: "personalization intro - modal",
    uploadResumeError: 'upload your resume - error',
    uploadResumeSuccess: 'upload your resume - success',
    uploadResume: 'upload your resume',
    createVsUpload: 'cover letter scratch vs. upload',
    customizationIntro: 'tailor your letter',
    resumeReview: 'review answers'
  },
  none: 'None',
  skill: {
    recommended: 'recommended',
    custom: 'custom'
  },
  user: 'user',
  csAgent: 'cs agent',
  onLetter: 'on letter',
  addSection: 'add a section',
  coverLetterSections: 'cover letter sections',
  rightHandSideBar: 'right hand side bar',
  softRegModal: 'soft reg modal',
  experienceLevel: "Experience level",
  entryLevel: "Entry level",
  removeSkill: "removeSkill"
};

var traitsPropsKey = exports.traitsPropsKey = {
  templateName: 'Template Name',
  letterType: "Letter Type"
};

//User and Doc preference Keys
var userPreferenceKeys = exports.userPreferenceKeys = {
  onBoardingStepArr: "OBST", //Onboarding Steps Array
  jobSkillsList: "JSKL", //Skills list options fetched based on jobs

  //JobTitle Screen
  jobTitle: "JBTL",
  isJobSelectedFromList: "JBLI",
  occupations: "OCCU",

  //CompanyName Screen
  companyName: "CMPN",

  //Highlight SoftSkills Screen / SoftSkillsCompetency(SecondOccurance)
  softSkill1: "SFS1",
  softSkill2: "SFS2",
  softSkill3: "SFS3",
  softSkillStep: "SFST",

  //Highlight Skills
  skill1: "SKL1",
  skill2: "SKL2",
  skill3: "SKL3",

  schoolType: "SCTP",
  schoolName: "SCNM",
  degree: "DGRE",
  fieldOfStudy: "FLST",
  experience: "EXPN",
  previousJobTitle: "PVJT",

  //Level of education
  highSchool: "HSNM",
  tradeSchool: "TSNM",
  college: "CGNM",
  graduateSchool: "GSNM",

  //SchoolEnrolled? screen
  enrolledInSchool: "ENSC",
  CurrentEducation: "CEDU",
  CollegeGraduate: "CGRD",

  //WorkGaps screen
  WorkGaps: "WGAP",
  WorkGapsReason: "GRSN",

  //keyTheme screen
  templateId: "TPID",
  templateName: "TPNM",
  isHighSchoolTemplate: "HSTP",
  isHighSchoolTheme: "HSTE",

  //Name screen
  FirstName: "FNAM",
  LastName: "LNAM",
  email: "EMAI",
  phone: "HPHN",
  previousCompany: "PVCM",

  isEmbeddedBuilder: "EMBD",

  // LastVisited
  lastVisited: "SDSB",
  covid: "COVD",

  //TTC Screens
  openerTTC: "OPEN",
  bodyTTC: "BODY",
  gapsTTC: "GAPS",
  callToActionTTC: "CTAC",
  openerTTCList: "OPLT",
  gapsTTCList: "GPLT",
  callToActionTTCList: "CTLT",
  bodyTTCList: "BDLT",
  subjectTTC: "SUBJ",
  greetingTTC: "GRTG",
  confidentialityTTC: "CNFD",
  salaryRequirementTTC: "SLRY",
  availablityTTC: "AVLB",
  relocationTTC: "RLCT",
  greetingTTCList: "GRLT",
  subjectTTCList: "SBLT",
  availablityTTCList: "AVLT",
  relocationTTCList: "RLLT",
  salaryRequirementTTCList: "SRLT",
  confidentialityTTCList: "CFLT",
  closerTTCList: "CRLT",
  closerTTCObj: "CLOB",
  openerTTCObj: "OPOB",
  bodyTTCObj: "BYOB",
  gapsTTCObj: "GPOB",
  callToActionTTCObj: "CTOB",

  //PayPerDownload
  payPerFeature: "PYPF",

  //Auto CL
  autoCoverLetter: "ATCL",
  autoCoverLetterViewed: "ACLV",

  //PersonalizationV1 Experiment
  personalizationV1: "PEXP",

  templatesTipShown: "TTSW",

  //Joshua Tree INTL
  JoushuaTree: "JSHT"
};

var optimizelyEventTypes = exports.optimizelyEventTypes = {
  enteredBuilder: "Entered Builder",
  docCreated: "Document Created",
  registration: "Registration"
};

var styleSliders = exports.styleSliders = [{ code: 'FTFC', min: '', max: '', step: '', isFormattingEnabled: true }, { code: 'FTSZ', min: '8', max: '14', step: '1',
  labelsNumber: { 8: '8', 10: '10', 12: '12', 14: '14' }, isFormattingEnabled: true }, { code: 'VMRG', min: '0', max: '50', step: '1', isFormattingEnabled: true }, { code: 'HMRG', min: '0', max: '100', step: '1', isFormattingEnabled: true }, { code: 'SSPC', min: '0', max: '20', step: '1', isFormattingEnabled: true }, { code: 'LNSP', min: '0', max: '20', step: '1', isFormattingEnabled: true }, { code: 'LNWT', min: '0', max: '4', step: '1', isFormattingEnabled: true }, { code: 'HDSZ', min: '8', max: '24', step: '1' }, { code: 'PIND', min: '0', max: '100', step: '1' }, { code: 'PSPC', min: '0', max: '20', step: '1' }, { code: 'PGSZ', min: '', max: '', step: '' }];

var docFileTypeCD = exports.docFileTypeCD = {
  Thumbnail: 'THMB',
  Preview: 'LPRV'
};

var userStages = exports.userStages = {
  Guest: 0,
  EnteredBuilder: 17,
  DocumentCreated: 11,
  TemplateInitialized: 12,
  RegistrationLoaded: 1,
  Registered: 13,
  EditorReached: 14,
  SellPage: 18,
  PaymentPage: 52,
  PaymentConfPage: 53,
  WorkHistory: 28,
  Experience: 29,
  Education: 30,
  ToneSelection: 46,
  Contact: 37
};

var Path = exports.Path = {
  editor: "/editor",
  letter: "/letter"
};

var QueryStringParams = exports.QueryStringParams = {
  jobTitle: "jt", //targe job title
  employer: "emp", //target company
  experience: "ex", //experience
  isSkip: "isskip", //Skip the screen for which value has been received in query string,
  covid: "covid", //For Covid-19
  docid: "docid",
  svgDownload: "svgDownload",
  skincd: "skincd",
  testbedskincd: "testbedskincd"
};

var DoerTemplates = exports.DoerTemplates = {
  highPerformanceTemplate: 1586,
  earlyCareerTemplate: 1585
};

var PopUpNames = exports.PopUpNames = {
  Choose_Template: "Choose_Template",
  Name_Registration: "Name_Registration",
  SignUp: "SignUp",
  SignIn: "SignIn",
  Congratulations: "Congratulations",
  SpellCheckModal: "SpellCheckModal",
  EmailModal: "EmailModal",
  ManageSectionPopup: "ManageSectionPopup",
  Name_Contact: "NameContact",
  Date: "Date",
  Recipient: "Recipient",
  Section: "Section",
  LetterType: "LetterType",
  MoveSection: "MoveSection",
  ExistingUserLoader: "ExistingUserLoader",
  WelcomeBack: "WelcomeBack",
  OnBoardingV2: "OnBoardingV2",
  SaveReviewChangesPopup: 'SaveReviewChangesPopup',
  EmailConfirmation: "EmailConfirmation",
  ReviewConfirmationPopup: "ReviewConfirmationPopup",
  DesktopSuggestionPopup: "DesktopSuggestionPopup",
  ExistingResumesPopUp: "ExistingResumesPopUp",
  LetterDownloaded: "LetterDownloaded",
  LetterPrinted: "LetterPrinted",
  DifferentEmailConf: "DifferentEmailConf",
  CustomizeLetterModal: "CustomizeLetterModal"
};

var PopupDescriptionAriaAttr = exports.PopupDescriptionAriaAttr = {
  ConfirmationModal: "confirmation modal",
  Congratulations: "congratulations modal",
  CustomizeLetterModal: "customize letter modal",
  EmailConfirmation: "email confirmation modal",
  ExistingUserLoader: "existing user modal",
  EmailModal: "email modal",
  NameContact: "name contact modal",
  RecipientModal: "recipient modal",
  SignupModal: "signup modal",
  SpellCheckModal: "spell check modal",
  EmailFormatModal: "email format modal",
  WelcomeBackModal: "welome back modal",
  DateModal: "date modal",
  LetterTypeModal: "letter type modal",
  SectionModal: "editor section modal",
  PreviewModal: "preview modal"
};

//Forage Keys, SessionStorage Keys if available else CookieValue Keys
var ForageKeyNames = exports.ForageKeyNames = {
  //Forage Keys
  TTCContent: "TTCContent",
  arrSampleTemplateObj: "arrSampleTemplateObj",
  documentCLB: "document_clb",
  spellDictionary: "spellDictionary",
  occupationalTTC: "occupationalTTC",
  contentEngineTTC: "contentEngineTTC",

  //CookieNames/LocalStorage
  userStageHit: "userStageHit",
  isResignLetter: "isResignLetter",
  userUid: "useruid",
  mixpanelprops: "mixpanelprops",
  docTraits: "docTraits",
  disableTests: "disabletests",
  runTest: "runtest",
  beCLUserAction: "bold_be_cl_useraction",
  buildVersion: "token_buildversion",
  progressBar: "progressBar",
  showingHIW: "showingHIW",
  templatesTipShown: "templatesTipShown",
  numOfPeople: "numOfPeople"
};

var Regex = exports.Regex = {
  email: /^\w+([-+.']\w+)*@\w+([-.']\w+)*\.\w+([-.]\w+)*$/,
  regExForBrTag: / <\/br> | <br\/> | <br\/>|<br\/> |<\/br> | <\/br>|<\/br>|<br\/>|<br>/g
};

var streetaddress = exports.streetaddress = {
  name: _helper.TypeCodes.fieldCd.Street,
  labelName: window.RDL.Localization.lbl_streetAddress,
  showError: false,
  maxLength: 255,
  value: ''
};

var regexNumOnly = exports.regexNumOnly = /^[0-9]*$/;
var regexNumOnlyPhn = exports.regexNumOnlyPhn = /^[0-9.()-]*$/;
var regexNumSplCharsPhn = exports.regexNumSplCharsPhn = /^[0-9.() -]*$/;
var allowedVulnerableTags = exports.allowedVulnerableTags = '<ul>,<li>,<span>,<del>,<font>,<i>,<em>,<b>,<strong>,<u>,<p>,<br>';
var phoneRegexPlusInclude = exports.phoneRegexPlusInclude = /^[0-9+()\- ]+$/;

var zip = exports.zip = {
  name: _helper.TypeCodes.fieldCd.ZipCode,
  labelName: window.RDL.Localization.lbl_zip,
  errorMessage: window.RDL.Localization.lbl_phoneErrorMessage,
  showError: false,
  maxLength: 10,
  value: '',
  regEx: RegExp(window.RDL.zipRegex)
};

var homePhoneNumber = exports.homePhoneNumber = {
  name: _helper.TypeCodes.fieldCd.HomePhone,
  labelName: window.RDL.Localization.lbl_homePhone,
  errorMessage: window.RDL.Localization.lbl_phoneErrorMessage,
  showError: false,
  maxLength: 20,
  regEx: regexNumSplCharsPhn,
  type: 'tel',
  value: ''
};

var cellPhoneNumber = exports.cellPhoneNumber = {
  name: _helper.TypeCodes.fieldCd.CellPhone,
  labelName: window.RDL.Localization.lbl_cellPhone,
  errorMessage: window.RDL.Localization.lbl_phoneErrorMessage,
  showError: false,
  maxLength: 20,
  regEx: regexNumSplCharsPhn,
  type: 'tel',
  value: ''
};

var otherPhoneNumber = exports.otherPhoneNumber = {
  name: _helper.TypeCodes.fieldCd.OtherPhone,
  labelName: window.RDL.Localization.lbl_otherPhone,
  errorMessage: window.RDL.Localization.lbl_phoneErrorMessage,
  showError: false,
  maxLength: 20,
  regEx: regexNumSplCharsPhn,
  type: 'tel',
  value: ''
};

var faxPhoneNumber = exports.faxPhoneNumber = {
  name: _helper.TypeCodes.fieldCd.FaxPhone,
  labelName: window.RDL.Localization.lbl_faxPhone,
  errorMessage: window.RDL.Localization.lbl_phoneErrorMessage,
  showError: false,
  maxLength: 20,
  regEx: regexNumSplCharsPhn,
  type: 'tel',
  value: ''
};

var city = exports.city = {
  name: _helper.TypeCodes.fieldCd.City,
  labelName: window.RDL.Localization.lbl_city,
  showError: false,
  maxLength: 100,
  value: ''
};

var state = exports.state = {
  name: _helper.TypeCodes.fieldCd.State,
  labelName: window.RDL.Localization.lbl_state,
  showError: false,
  maxLength: 50,
  value: ''
};

var company = exports.company = {
  name: _helper.TypeCodes.fieldCd.Company,
  labelName: window.RDL.Localization.lbl_companyName,
  errorMessage: window.RDL.Localization.lbl_enterValidCompay,
  placeholder: window.RDL.Localization.lbl_enterCompany,
  showError: false,
  maxLength: 50,
  value: ''
};

var closer = exports.closer = {
  name: _helper.TypeCodes.fieldCd.Closer,
  showError: false,
  maxLength: 255
};

var date = exports.date = {
  id: "date",
  name: _helper.TypeCodes.fieldCd.Date,
  labelName: window.RDL.Localization.lbl_date,
  errorMessage: window.RDL.Localization.lbl_dateErrorMessage,
  showError: false,
  maxLength: 50,
  value: ''
};
var phoneNumber = exports.phoneNumber = {
  name: _helper.TypeCodes.fieldCd.OtherPhone,
  labelName: window.RDL.Localization.lbl_phone,
  errorMessage: window.RDL.Localization.lbl_phoneErrorMessage,
  showError: false,
  maxLength: 20,
  regEx: regexNumSplCharsPhn,
  type: 'tel',
  value: ''
};

var customskills = exports.customskills = {
  name: "customskills",
  showError: false,
  value: '',
  maxLength: 60
};

var emailTo = exports.emailTo = {
  name: customFields.To,
  labelName: window.RDL.Localization.lbl_to,
  placeholderLabel: window.RDL.Localization.lbl_useCommas,
  regEx: RegExp(window.RDL.multipleEmailRegex),
  type: 'text',
  showError: false,
  errorMessage: window.RDL.Localization.lbl_emailValidationMessage,
  maxLength: 100,
  value: '',
  required: true
};

var emailFrom = exports.emailFrom = {
  name: customFields.From,
  labelName: window.RDL.Localization.lbl_from,
  placeholderLabel: window.RDL.Localization.lbl_sendersFullName,
  regEx: RegExp(window.RDL.nameRegex),
  errorMessage: '',
  showError: false,
  type: 'text',
  maxLength: 50,
  value: '',
  required: true
};

var subject = exports.subject = {
  name: customFields.Subject,
  labelName: window.RDL.Localization.lbl_subjectHeading,
  regEx: /^.{1,}$/,
  errorMessage: '',
  showError: false,
  type: 'text',
  maxLength: 50,
  value: '',
  required: true
};

//Used for general types/keys
var commonFields = exports.commonFields = {
  //For DocCreatedEventTraits Keys
  flow_name: "flow name",
  letter_type: "letter type",
  template_name: "template name",
  document_type: "document type",
  covid: "covid"
};

var viewTypes = exports.viewTypes = {
  textInputView: 1,
  highlightInputView: 2,
  sliderInputView: 3,
  radioButtonInputView: 4,
  hybridInputView: 5,
  TTCView: 6,
  chooseTemplate: 7,
  howItWorks: 8,
  overviewView: 9,
  reviewScreen: 10,
  uploadResumeView: 11,
  uploadReview: 12,
  counterButtonView: 13,
  signatureView: 14,
  listScrollView: 15,
  nameContactContainer: 16,
  recipientContainer: 17
};

var schoolType = exports.schoolType = {
  highSchool: window.RDL.Localization.lbl_highSchool,
  tradeSchool: window.RDL.Localization.lbl_tradeSchool,
  college: window.RDL.Localization.lbl_clgText,
  graduateSchool: window.RDL.Localization.lbl_gradSchool
};

var tagType = exports.tagType = {
  jobTitle: "Job Title",
  occupation: "Occupation"
};

var BuilderBasedTTCSections = exports.BuilderBasedTTCSections = (_BuilderBasedTTCSecti = {
  opener: 'Opener',
  body: 'Body',
  closer: 'Closer',
  gaps: 'Gaps',
  subject: 'Subject',
  greeting: "Greeting",
  confidentiality: 'Confidentiality',
  salaryRequirement: 'SalaryRequirement',
  availability: 'Availability',
  relocation: 'Relocation'
}, _defineProperty(_BuilderBasedTTCSecti, 'closer', "Closer"), _defineProperty(_BuilderBasedTTCSecti, 'signature', "Signature"), _BuilderBasedTTCSecti);

var dataObjMappingKeys = exports.dataObjMappingKeys = (_dataObjMappingKeys = {
  //JobTitle Screen
  jobTitle: window.RDL.Localization.lbl_targetJobTitle,
  isJobSelectedFromList: "isJobSelectedFromList",
  suggestedJobTitle: "Suggested Job Title",
  isJobTitleUnconfirmed: "Is Job Title UnConfirmed",
  occupationArr: "occupationArr",
  selectedJobGender: "selectedJobGender",

  //CompanyName Screen
  companyName: window.RDL.Localization.lbl_targetCompany,
  state: "state",
  city: "city",
  zip: "zip",
  recipientFName: 'recipientFName',
  recipientLName: 'recipientLName',
  recipientStreet: 'recipientStreet',

  //Highlight SoftSkills Screen / SoftSkillsCompetency(SecondOccurance)
  softSkill1: window.RDL.Localization.lbl_softSkill.replace("{0}", "1"),
  softSkill2: window.RDL.Localization.lbl_softSkill.replace("{0}", "2"),
  softSkill3: window.RDL.Localization.lbl_softSkill.replace("{0}", "3"),
  softSkillStep: "softSkillStep",

  //Highlight Skills
  skill1: window.RDL.Localization.lbl_skill.replace("{0}", "1"),
  skill2: window.RDL.Localization.lbl_skill.replace("{0}", "2"),
  skill3: window.RDL.Localization.lbl_skill.replace("{0}", "3"),

  schoolType: window.RDL.Localization.lbl_schoolType,
  schoolName: window.RDL.Localization.lbl_schoolName,
  degree: window.RDL.Localization.lbl_degree,
  fieldOfStudy: window.RDL.Localization.lbl_field_OfStudy,
  experience: window.RDL.Localization.lbl_number,
  previousJobTitle: window.RDL.Localization.lbl_previous_JobTitle,
  previousCompanyName: window.RDL.Localization.lbl_previous_company || "Previous Employer Name",

  //Level of education
  highSchool: window.RDL.Localization.lbl_highSchool,
  tradeSchool: window.RDL.Localization.lbl_tradeSchool,
  college: window.RDL.Localization.lbl_clgText,
  graduateSchool: window.RDL.Localization.lbl_gradSchool,

  //SchoolEnrolled? screen
  enrolledInSchool: "enrolledInSchool",
  CurrentEducation: "Current Education",
  CollegeGraduate: "College Graduate",

  //WorkGaps screen
  WorkGaps: "WorkGaps",
  WorkGapsReason: "WorkGapsReason",

  //keyTheme screen
  templateId: "templateId",
  templateName: "templateName",
  isHighSchoolTemplate: "isHighSchoolTemplate",

  //Name screen
  FirstName: window.RDL.Localization.lbl_yourFirstName,
  LastName: window.RDL.Localization.lbl_yourLastName,
  email: "email",
  phone: "phone",
  userCity: "userCity",
  userState: "userState",
  userZip: "userZip",
  userStreet: "userStreet",
  isNameSectionOpened: "isNameSectionOpened",

  //Choose Template Screen
  selectedSkinCD: "selectedSkinCD",
  templateCategoryId: "templateCategoryId",
  newTemplateSelected: "newTemplateSelected",
  templateData: "templateData",
  //Covid19 related
  covid: "covid",
  Email: "Email",
  covidGap: "covidGap",

  //TTC view related
  selectedOpenerTTC: "selectedOpenerTTC",
  selectedBodyTTC: "selectedBodyTTC",
  selectedCallToActionTTC: "selectedCallToActionTTC",
  selectedGapsTTC: "selectedGapsTTC",
  openerTTCList: "openerTTCList",
  callToActionTTCList: "callToActionTTCList",
  bodyTTCList: "bodyTTCList",
  gapsTTCList: "gapsTTCList",
  selectedSubjectTTC: "selectedSubjectTTC",
  subjectTTCList: "subjectTTCList",
  selectedGreetingTTC: "selectedGreetingTTC",
  greetingTTCList: "greetingTTCList",
  selectedConfidentialityTTC: "selectedConfidentialityTTC",
  confidentialityTTCList: "confidentialityTTCList",
  selectedSalaryRequirementTTC: "selectedSalaryRequirementTTC",
  salaryRequirementTTCList: "salaryRequirementTTCList",
  selectedAvailablityTTC: "selectedAvailablityTTC",
  availablityTTCList: "availablityTTCList",
  selectedRelocationTTC: "selectedRelocationTTC",
  relocationTTCList: "relocationTTCList",
  closerTTCList: "closerTTCList",
  selectedCloserTTC: "selectedCloserTTC",
  prevData: "Previous Data",

  //Import Resume
  isImportResume: 'isImportResume',
  selectedResumeId: 'selectedResumeId',

  // future job title in mind
  jobInMind: "jobInMind",

  //Create Vs Upload
  isUploadResume: 'isUploadResume',
  uploadedResumeName: 'uploadedResumeName',
  uploadErrorMessage: 'uploadErrorMessage',
  docCreationStepIndex: 'docCreationStepIndex',

  // Personalization pop up
  personalizationDetails: "personalizationDetails",
  namePersonalization: "namePersonalization",
  isPersonalizationPopUpClose: "isPersonalizationPopUpClose",
  isPersonalizedV1Flow: "isPersonalizedV1Flow",
  personalizationPopupDetails: "personalizationPopupDetails",
  SNAM: "SignatureName",
  SURL: "SignatureURL",
  HLEF: "HorizontalLeft",
  HMID: "HorizontalMid",
  HRIG: "HorizontalRight",
  SDAT: "SignatureDate",
  PLAC: "SignaturePlace",
  SIFF: "SignatureFontFamily",
  SIFS: "SignatureFontSize",
  SIST: "SignatureFontStyle",
  SICL: "SignatureFontColor",
  SIHT: "SignatureHeight",
  SIWD: "SignatureWidth",
  STYP: 'SignatureCategory',
  SICT: 'SignatureContrast',

  // Skills V2 new UI
  skillsEnhancementsJT: "skillsEnhancementsJT",
  customEnhancedSkills: "customEnhancedSkills"
}, _defineProperty(_dataObjMappingKeys, 'skill1', window.RDL.Localization.lbl_skill1 || "Skill 1"), _defineProperty(_dataObjMappingKeys, 'skill2', window.RDL.Localization.lbl_skill2 || "Skill 2"), _defineProperty(_dataObjMappingKeys, 'skill3', window.RDL.Localization.lbl_skill3 || "Skill 3"), _defineProperty(_dataObjMappingKeys, 'isSelectedSection', "isSelectedSection"), _defineProperty(_dataObjMappingKeys, 'recipientEmail', "recipientEmail"), _defineProperty(_dataObjMappingKeys, 'recipientPhone', "recipientPhone"), _defineProperty(_dataObjMappingKeys, 'recipientCity', "recipientCity"), _defineProperty(_dataObjMappingKeys, 'recipientState', "recipientState"), _defineProperty(_dataObjMappingKeys, 'recipientZip', "recipientZip"), _defineProperty(_dataObjMappingKeys, 'isNewUser', "isNewUser"), _dataObjMappingKeys);

var gender = exports.gender = {
  male: "male",
  female: "female",
  neutral: "neutral"
};

var fieldsToUpdateKeys = exports.fieldsToUpdateKeys = [{
  fieldKey: dataObjMappingKeys.jobTitle,
  fieldCD: "JBTL"
}, {
  fieldKey: dataObjMappingKeys.companyName,
  fieldCD: "CMPN"
}, {
  fieldKey: dataObjMappingKeys.softSkill1,
  fieldCD: "SFS1",
  isToLowerCase: !window.RDL.prflEnabled ? true : false
}, {
  fieldKey: dataObjMappingKeys.softSkill2,
  fieldCD: "SFS2",
  isToLowerCase: !window.RDL.prflEnabled ? true : false
}, {
  fieldKey: dataObjMappingKeys.softSkill3,
  fieldCD: "SFS3",
  isToLowerCase: !window.RDL.prflEnabled ? true : false
}, {
  fieldKey: dataObjMappingKeys.skill1,
  fieldCD: "SKL1",
  isToLowerCase: !window.RDL.prflEnabled ? true : false
}, {
  fieldKey: dataObjMappingKeys.skill2,
  fieldCD: "SKL2",
  isToLowerCase: !window.RDL.prflEnabled ? true : false
}, {
  fieldKey: dataObjMappingKeys.skill3,
  fieldCD: "SKL3",
  isToLowerCase: !window.RDL.prflEnabled ? true : false
}, {
  fieldKey: dataObjMappingKeys.schoolType,
  fieldCD: "SCTP"
}, {
  fieldKey: dataObjMappingKeys.schoolName,
  fieldCD: "SCNM"
}, {
  fieldKey: dataObjMappingKeys.degree,
  fieldCD: "DGRE"
}, {
  fieldKey: dataObjMappingKeys.fieldOfStudy,
  fieldCD: "FLST"
}, {
  fieldKey: dataObjMappingKeys.experience,
  fieldCD: "EXPN"
}, {
  fieldKey: dataObjMappingKeys.previousJobTitle,
  fieldCD: "PVJT"
}, {
  fieldKey: dataObjMappingKeys.templateName,
  fieldCD: "THME"
}, {
  fieldKey: dataObjMappingKeys.isHighSchoolTemplate,
  fieldCD: "HSTE"
}, {
  fieldKey: dataObjMappingKeys.isNameSectionOpened,
  fieldCD: "NMOP"
}, {
  fieldKey: dataObjMappingKeys.enrolledInSchool,
  fieldCD: userPreferenceKeys.enrolledInSchool
}, {
  fieldKey: dataObjMappingKeys.CollegeGraduate,
  fieldCD: userPreferenceKeys.CollegeGraduate
}, {
  fieldKey: dataObjMappingKeys.WorkGaps,
  fieldCD: userPreferenceKeys.WorkGaps
}, {
  fieldKey: dataObjMappingKeys.WorkGapsReason,
  fieldCD: userPreferenceKeys.WorkGapsReason
}, {
  fieldKey: dataObjMappingKeys.covid,
  fieldCD: userPreferenceKeys.covid
}, {
  fieldKey: dataObjMappingKeys.occupationArr,
  fieldCD: userPreferenceKeys.occupations
}, {
  fieldKey: dataObjMappingKeys.previousCompanyName,
  fieldCD: userPreferenceKeys.previousCompany
}, {
  fieldKey: dataObjMappingKeys.selectedOpenerTTC,
  fieldCD: userPreferenceKeys.openerTTC
}, {
  fieldKey: dataObjMappingKeys.selectedBodyTTC,
  fieldCD: userPreferenceKeys.bodyTTC
}, {
  fieldKey: dataObjMappingKeys.selectedGapsTTC,
  fieldCD: userPreferenceKeys.gapsTTC
}, {
  fieldKey: dataObjMappingKeys.selectedCallToActionTTC,
  fieldCD: userPreferenceKeys.callToActionTTC
}, {
  fieldKey: dataObjMappingKeys.openerTTCList,
  fieldCD: userPreferenceKeys.openerTTCList
}, {
  fieldKey: dataObjMappingKeys.bodyTTCList,
  fieldCD: userPreferenceKeys.bodyTTCList
}, {
  fieldKey: dataObjMappingKeys.gapsTTCList,
  fieldCD: userPreferenceKeys.gapsTTCList
}, {
  fieldKey: dataObjMappingKeys.callToActionTTCList,
  fieldCD: userPreferenceKeys.callToActionTTCList
}, {
  fieldKey: dataObjMappingKeys.selectedSubjectTTC,
  fieldCD: userPreferenceKeys.subjectTTC
}, {
  fieldKey: dataObjMappingKeys.greetingTTCList,
  fieldCD: userPreferenceKeys.greetingTTCList
}, {
  fieldKey: dataObjMappingKeys.subjectTTCList,
  fieldCD: userPreferenceKeys.subjectTTCList
}, {
  fieldKey: dataObjMappingKeys.availablityTTCList,
  fieldCD: userPreferenceKeys.availablityTTCList
}, {
  fieldKey: dataObjMappingKeys.relocationTTCList,
  fieldCD: userPreferenceKeys.relocationTTCList
}, {
  fieldKey: dataObjMappingKeys.salaryRequirementTTCList,
  fieldCD: userPreferenceKeys.salaryRequirementTTCList
}, {
  fieldKey: dataObjMappingKeys.confidentialityTTCList,
  fieldCD: userPreferenceKeys.confidentialityTTCList
}, {
  fieldKey: dataObjMappingKeys.selectedSalaryRequirementTTC,
  fieldCD: userPreferenceKeys.salaryRequirementTTC
}, {
  fieldKey: dataObjMappingKeys.selectedConfidentialityTTC,
  fieldCD: userPreferenceKeys.confidentialityTTC
}, {
  fieldKey: dataObjMappingKeys.selectedAvailablityTTC,
  fieldCD: userPreferenceKeys.availablityTTC
}, {
  fieldKey: dataObjMappingKeys.selectedRelocationTTC,
  fieldCD: userPreferenceKeys.relocationTTC
}, {
  fieldKey: dataObjMappingKeys.selectedGreetingTTC,
  fieldCD: userPreferenceKeys.greetingTTC
}, {
  fieldKey: dataObjMappingKeys.closerTTCList,
  fieldCD: userPreferenceKeys.closerTTCList
}, {
  fieldKey: dataObjMappingKeys.selectedOpenerTTC,
  fieldCD: userPreferenceKeys.openerTTCObj
}, {
  fieldKey: dataObjMappingKeys.selectedBodyTTC,
  fieldCD: userPreferenceKeys.bodyTTCObj
}, {
  fieldKey: dataObjMappingKeys.selectedGapsTTC,
  fieldCD: userPreferenceKeys.gapsTTCObj
}, {
  fieldKey: dataObjMappingKeys.selectedCallToActionTTC,
  fieldCD: userPreferenceKeys.callToActionTTCObj
}, {
  fieldKey: dataObjMappingKeys.selectedCloserTTC,
  fieldCD: userPreferenceKeys.closerTTCObj
}];

var otherFieldsToVerifyChangeKeys = exports.otherFieldsToVerifyChangeKeys = [dataObjMappingKeys.templateId, dataObjMappingKeys.WorkGaps, dataObjMappingKeys.WorkGapsReason];

var lstBBFSpecificKeys = exports.lstBBFSpecificKeys = [userPreferenceKeys.bodyTTCList, userPreferenceKeys.openerTTCList, userPreferenceKeys.gapsTTCList, userPreferenceKeys.callToActionTTCList, userPreferenceKeys.bodyTTCObj, userPreferenceKeys.openerTTCObj, userPreferenceKeys.gapsTTCObj, userPreferenceKeys.callToActionTTCObj];

var onBoardingUserInput = exports.onBoardingUserInput = (_onBoardingUserInput = {
  continue: 1,
  skip: 2
}, _defineProperty(_onBoardingUserInput, window.RDL.Localization.lbl_yes.toLowerCase(), 3), _defineProperty(_onBoardingUserInput, window.RDL.Localization.lbl_no.toLowerCase(), 4), _defineProperty(_onBoardingUserInput, 'others', 5), _defineProperty(_onBoardingUserInput, 'recentGradClg', 6), _defineProperty(_onBoardingUserInput, 'recentGradSchool', 7), _defineProperty(_onBoardingUserInput, 'currentlyInCollege', 8), _defineProperty(_onBoardingUserInput, 'currentlyInSchool', 9), _onBoardingUserInput);

var progressBarGroupingDivision = exports.progressBarGroupingDivision = {
  firstGroup: 4,
  secondGroup: 7
};

var userTraits = exports.userTraits = {
  futureJobTitle: 'Future Job Title',
  futureCompanyName: 'Future Company Name',
  yearOfExp: 'Years Of Experience',
  latestJobTitle: 'Last Job Title',
  workHistoryGap: 'Work History Gaps',
  workHistoryGapReason: 'Work History Gaps Reason',
  workStyle: 'Work Style',
  schoolEnrollmentStatus: 'School Enrollment Status',
  collegeGrad: 'College Grad',
  schoolName: 'School Name',
  collegeFieldOfStudy: 'College Field Of Study',
  collegeDegree: 'College Degree',
  currentEducLevel: 'Current Education Level',
  lastCompanyName: 'Last Company Name',
  skillTypeAndNumberOfSkills: 'Skill Type & No. Of Skills Selected',
  coverLetterCreationMode: 'Cover Letter Creation Mode',
  YOEFlag: 'YOE Flag'
};

var reviewScreenCategories = exports.reviewScreenCategories = {
  //Categories startIndex and endIndex is set after onBoardingStepsV2 declaration
  //Step-1: Skills and Strengths
  skillsStrengths: {
    index: 1,
    title: window.RDL.Localization.lbl_stepNumber.replace("{0}", "1") + ": " + window.RDL.Localization.lbl_progressBar_skillSection
  },
  //Step-2: Experience
  experience: {
    index: 2,
    title: window.RDL.Localization.lbl_stepNumber.replace("{0}", "2") + ": " + window.RDL.Localization.lbl_progressBar_expSection
  },
  //Step-3: Personalization
  personalization: {
    index: 3,
    title: window.RDL.Localization.lbl_stepNumber.replace("{0}", "3") + ": " + window.RDL.Localization.lbl_progressBar_personalSection
  }
};

var dependencyType = exports.dependencyType = {
  IndependentScreen: 0,
  DependentScreen: 1,
  BranchingScreen: 2
};

var MaxOptions = exports.MaxOptions = {
  Skills: 15,
  SkillsV2: 18,
  SoftSkills: 18,
  WorkGapReasons: 9,
  SoftSkillsCompetency: 18,
  KeyThemes: 6,
  JobInMind: 2
};

var reviewStepIndexObj = exports.reviewStepIndexObj = {
  firstName: 1,
  lastName: 2,
  phone: 3,
  email: 4,
  city: 5,
  state: 6,
  zip: 7,
  workExperience: 9,
  previousJobTitle: 10,
  workGaps: 11,
  schoolName: 12,
  fieldOfStudy: 13,
  degree: 14
};

var OnboardingStepDocTitle = exports.OnboardingStepDocTitle = {
  HowItWorks: RDL.Localization.lbl_title_hIWPage,
  ChooseTemplate: RDL.Localization.lbl_title_chooseTemplate,
  NameContact: RDL.Localization.lbl_title_nameContact,
  OpenerOverview: RDL.Localization.lbl_title_openerOverview,
  JobTitle: RDL.Localization.lbl_title_lbl_title_jobTitle,
  Company: RDL.Localization.lbl_title_company,
  WorkExperience: RDL.Localization.lbl_title_workExperience,
  OpenerTTC: RDL.Localization.lbl_title_openerTTC,
  BodyOverview: RDL.Localization.lbl_title_body_overview,
  PreviousJobTitle: RDL.Localization.lbl_title_previousJobTitle,
  HardSkills: RDL.Localization.lbl_title_hardSkills,
  BodyTTC: RDL.Localization.lbl_title_bodyTTC,
  GapsOverview: RDL.Localization.lbl_title_gapsOverview,
  GapsTTC: RDL.Localization.lbl_title_gapsTTc,
  CloserOverview: RDL.Localization.lbl_title_closerOverview,
  CloserTTC: RDL.Localization.lbl_title_closerTTC,
  Finalize: RDL.Localization.lbl_title_finalize,
  CreateVsUpload: RDL.Localization.lbl_title_createVsUpload,
  UploadResume: RDL.Localization.lbl_title_uploadResume,
  Recipient: RDL.Localization.lbl_title_recipient,
  GreetingTTC: RDL.Localization.lbl_title_greetingTTC,
  SubjectTTC: RDL.Localization.lbl_title_subjectTTC,
  AvailablityTTC: RDL.Localization.lbl_title_availablityTTC,
  ConfidentialityTTC: RDL.Localization.lbl_title_confidentialityTTC,
  RelocationTTC: RDL.Localization.lbl_title_relocationTTC,
  SalaryRequirementsTTC: RDL.Localization.lbl_title_salaryRequirementsTTC,
  SignatureOverview: RDL.Localization.lbl_title_signatureOverview,
  SignatureView: RDL.Localization.lbl_title_signatureView,
  UploadReview: RDL.Localization.lbl_title_uploadReview,
  Signature: RDL.Localization.lbl_title_signatureView
};

var onBoardingStepsV2 = exports.onBoardingStepsV2 = {
  JobTitle: {
    index: 1,
    viewType: viewTypes.textInputView,
    headingText: window.RDL.Localization.lbl_whatsJobTitleApplyingFor,
    subHeadingText: window.RDL.Localization.lbl_specifyDesiredJobTitle,
    screenName: "JobTitle",
    userStageName: "",
    skipActionLinkText: window.RDL.Localization.lbl_dontHaveMind,
    tipsText: window.RDL.Localization.lbl_jobTitleInfo,
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.JobTitleAutoCompleteType,
      mappedStateObjKey: dataObjMappingKeys.jobTitle,
      placeholder: window.RDL.Localization.lbl_desiredPositionPlaceholder,
      id: customFieldsId.jobTitle,
      labelName: window.RDL.Localization.lbl_desiredPosition,
      exactSearch: true,
      avoidTab: true,
      autoCompleteAttrValue: "off"
    }],
    saveValueProp: [dataObjMappingKeys.jobTitle, dataObjMappingKeys.isJobSelectedFromList],
    progressBarLevel: 0 / progressBarGroupingDivision.firstGroup,
    eventProps: {
      screenName: 'future job title',
      clickOption: "i don't have a job in mind"
    },
    isBackButtonHidden: true,
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.JobTitle.textBoxControl[0].autoCompleteType = window.RDL.portalConfigData.JobTitleAutoCompleteType;
      onBoardingStepsV2.JobTitle.DependentScreen = onBoardingStepsV2.Skills.index;
      onBoardingStepsV2.JobTitle.flowScreen = onBoardingStepsV2.Company.index;
    },
    dependencyType: dependencyType.DependentScreen,
    reviewData: {
      dependency: dependencyType.DependentScreen,
      category: reviewScreenCategories.skillsStrengths.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_JobTitleApplyingfor,
          stepVal: onboardingData[dataObjMappingKeys.jobTitle],
          defaultLinkText: window.RDL.Localization.lbl_EnterTitle,
          clickAction: eventPropsValues.clickOptions.enterTitle
        }];
      },
      isShowDependency: function isShowDependency(oldData, newData, fieldName) {
        if (fieldName == dataObjMappingKeys.jobTitle && oldData[dataObjMappingKeys.jobTitle] != newData && window.RDL.portalConfigData && window.RDL.portalConfigData.JobTitleAutoCompleteType) return true;else return false;
      }
    },
    route: RDL.Routes.JobTitle,
    documentTitle: OnboardingStepDocTitle.JobTitle
  },
  Company: {
    index: 2,
    viewType: viewTypes.textInputView,
    headingText: window.RDL.Localization.lbl_whatEmployer,
    subHeadingText: window.RDL.Localization.lbl_employerSpecificLetter,
    screenName: "CompanyInfo",
    userStageName: '',
    skipActionLinkText: window.RDL.Localization.lbl_dontHaveCompanyInMind,
    tipsText: window.RDL.Localization.lbl_employerInfo,
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.CompanyAutoCompleteType,
      mappedStateObjKey: dataObjMappingKeys.companyName,
      placeholder: window.RDL.Localization.lbl_desiredCompanyPlaceholder,
      id: customFieldsId.company,
      labelName: window.RDL.Localization.lbl_desiredCompany,
      exactSearch: true,
      avoidTab: true,
      autoCompleteAttrValue: "organization"
    }],
    recommendedCompanies: [],
    saveValueProp: [dataObjMappingKeys.companyName],
    progressBarLevel: 1 / progressBarGroupingDivision.firstGroup,
    loaderTimeout: 400,
    eventProps: {
      screenName: 'future company name',
      clickOption: "i don't have a company in mind"
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.Company.textBoxControl[0].autoCompleteType = window.RDL.portalConfigData.CompanyAutoCompleteType;
    },
    dependencyType: dependencyType.DependentScreen,
    reviewData: {
      dependency: dependencyType.DependentScreen,
      category: reviewScreenCategories.skillsStrengths.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_targetCompany,
          stepVal: onboardingData[dataObjMappingKeys.companyName],
          defaultLinkText: window.RDL.Localization.lbl_EnterCompany_2,
          clickAction: eventPropsValues.clickOptions.enterCompany
        }];
      },
      isShowDependency: function isShowDependency(oldData, newData, fieldName) {
        if (fieldName == dataObjMappingKeys.jobTitle && oldData[dataObjMappingKeys.jobTitle] != newData) return true;else return false;
      }
    },
    route: RDL.Routes.Company,
    documentTitle: OnboardingStepDocTitle.Company
  },
  Skills: {
    index: 3,
    viewType: viewTypes.highlightInputView,
    headingText: window.RDL.Localization.lbl_specifySkillsForJobTitle,
    subHeadingText: window.RDL.Localization.lbl_topSkillsForJobTitleSubHeading || window.RDL.Localization.lbl_topSkillsForJobTitle,
    tipsText: window.RDL.Localization.lbl_skillsInfo,
    screenName: "Skills",
    userStageName: '',
    options: [],
    MaxRows: 3,
    MaxOptions: MaxOptions.Skills,
    MaxOptionsInARow: 3,
    MaxSelectedOptions: 3,
    saveValueProp: [dataObjMappingKeys.skill1, dataObjMappingKeys.skill2, dataObjMappingKeys.skill3],
    analyticsEventType: eventTypes.profSkillSelected,
    progressBarLevel: 2 / progressBarGroupingDivision.firstGroup,
    eventProps: {
      screenName: 'ttc skills'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime(onboardingData) {
      onBoardingStepsV2.Skills.options = onboardingData.jobSkillsList;
      if (RDL.experimentControl.isSkillsV2) {
        onBoardingStepsV2.Skills.MaxOptions = MaxOptions.SkillsV2;
      }
    },
    cssClasses: {
      optionsList: "force-redraw"
    },
    reviewData: {
      category: reviewScreenCategories.skillsStrengths.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        if (onboardingStore.jobSkillsList && onboardingStore.jobSkillsList.length) {
          var tempArr = [onboardingData[dataObjMappingKeys.skill1], onboardingData[dataObjMappingKeys.skill2], onboardingData[dataObjMappingKeys.skill3]];
          return [{
            stepTitle: window.RDL.Localization.lbl_jobSkills,
            stepVal: tempArr.filter(function (x) {
              return x && x.length;
            }).join(", ").trim(),
            defaultLinkText: window.RDL.Localization.lbl_SelectSkills,
            clickAction: eventPropsValues.clickOptions.selectSkills
          }];
        } else return [];
      }
    },
    isShowMaxOptionsSelectedMsg: false,
    isShowMoreLessEnabled: false,
    route: RDL.Routes.HardSkills,
    documentTitle: OnboardingStepDocTitle.HardSkills
  },
  SoftSkills: {
    index: 4,
    viewType: viewTypes.highlightInputView,
    headingText: window.RDL.Localization.lbl_selectStrengthsHeading || window.RDL.Localization.lbl_selectStrengths,
    subHeadingText: window.RDL.Localization.lbl_showStrengths,
    hideTipsSection: true,
    screenName: "SoftSkills",
    userStageName: '',
    checkDuplicateScreen: true,
    options: window.RDL.SoftSkills,
    MaxRows: 3,
    MaxOptions: MaxOptions.SoftSkills,
    MaxOptionsInARow: 3,
    MaxSelectedOptions: 3,
    saveValueProp: [dataObjMappingKeys.softSkill1, dataObjMappingKeys.softSkill2, dataObjMappingKeys.softSkill3, dataObjMappingKeys.softSkillStep],
    analyticsEventType: eventTypes.softSkillSelected,
    progressBarLevel: 3 / progressBarGroupingDivision.firstGroup,
    eventProps: {
      screenName: 'soft skills'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.SoftSkills.options = window.RDL.SoftSkills;
    },
    cssClasses: {
      optionsList: "force-redraw"
    },
    reviewData: {
      category: reviewScreenCategories.skillsStrengths.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        var tempArr = [onboardingData[dataObjMappingKeys.softSkill1], onboardingData[dataObjMappingKeys.softSkill2], onboardingData[dataObjMappingKeys.softSkill3]];
        return [{
          stepTitle: window.RDL.Localization.lbl_TopStrengths,
          stepVal: tempArr ? tempArr.filter(function (x) {
            return x && x.length;
          }).join(", ").trim() : "",
          defaultLinkText: window.RDL.Localization.lbl_SelectStrength,
          clickAction: eventPropsValues.clickOptions.selectStrengths
        }];
      }
    },
    isShowMaxOptionsSelectedMsg: false,
    isShowMoreLessEnabled: false
  },
  WorkExperience: {
    index: 5,
    viewType: viewTypes.sliderInputView,
    screenName: "WorkExperience",
    userStageName: userStages.WorkHistory,
    headingText: window.RDL.Localization.lbl_howLongWorking,
    subHeadingText: window.RDL.Localization.lbl_specifyExperience,
    tipsText: window.RDL.Localization.lbl_weWillCustomize,
    saveValueProp: [dataObjMappingKeys.experience],
    progressBarLevel: 4 / progressBarGroupingDivision.firstGroup,
    pageClassName: " page-experience",
    eventProps: {
      screenName: 'years of experience'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      if (RDL.experimentControl.isImportFromResume) {
        onBoardingStepsV2.WorkExperience.selectControls = [{
          mappedStateObjKey: dataObjMappingKeys.experience,
          placeholder: window.RDL.Localization.lbl_lessThanYear,
          labelName: window.RDL.Localization.lbl_yearsOfExp,
          id: customFieldsId.numberOfYears,
          isSearchable: false,
          isDisabled: false,
          options: [{ label: window.RDL.Localization.lbl_lessThanYear, value: "0" }, { label: "1" }, { label: "2" }, { label: "3" }, { label: "4" }, { label: "5" }, { label: "6" }, { label: "7" }, { label: "8" }, { label: "9" }, { label: "10+", value: "10" }]
        }];
      }
    },
    dependencyType: dependencyType.BranchingScreen,
    reviewData: {
      showInResumeReview: true,
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore, resumeReview) {
        var exp = parseFloat(onboardingData[dataObjMappingKeys.experience]);
        if (exp < 1) exp = resumeReview ? window.RDL.Localization.lbl_lessThanYear : window.RDL.Localization.lbl_lessThanOneYear;else if (exp == 1) exp = exp + " " + window.RDL.Localization.lbl_year.toLowerCase();else if (exp > 1) exp = exp + (exp >= 10 ? "+ " : " ") + window.RDL.Localization.lbl_years.toLowerCase();
        return [{
          stepTitle: window.RDL.Localization.lbl_yearsOfExp,
          stepVal: exp,
          defaultLinkText: window.RDL.Localization.lbl_selectYearsOfExp,
          stepTip: {
            id: 1,
            heading: '',
            para: '',
            infoLinkText: '',
            moreInfoHeading: '',
            moreInfoPara: '',
            isVisible: false
          },
          clickAction: eventPropsValues.clickOptions.selectExperience
        }];
      },
      getUploadReviewDataArr: function getUploadReviewDataArr(onboardingData, onboardingStore, resumeReview) {
        var exp = parseFloat(onboardingData[dataObjMappingKeys.experience]);
        if (exp < 1) exp = resumeReview ? window.RDL.Localization.lbl_lessThanYear : window.RDL.Localization.lbl_lessThanOneYear;else if (exp == 1) exp = exp + " " + window.RDL.Localization.lbl_year.toLowerCase();else if (exp > 1) exp = (exp > 10 ? "10+ " : exp + " ") + window.RDL.Localization.lbl_years.toLowerCase();
        return [{
          stepTitle: window.RDL.Localization.lbl_yearsOfExp,
          stepName: 'WorkExperience',
          stepVal: exp,
          stepIndex: reviewStepIndexObj.workExperience,
          showAnimation: true
        }];
      },
      isBranchChange: function isBranchChange(currentState, initialOnboardingData) {
        var currentStep = onBoardingStepsV2.WorkExperience.index;
        if ((0, _CommonUtils.getStepActionFromData)(currentStep, currentState) != (0, _CommonUtils.getStepActionFromData)(currentStep, initialOnboardingData)) {
          return true;
        }
      },
      reviewChangeConfirmation: {
        title: window.RDL.Localization.lbl_ChangeLetterTheme,
        para1: window.RDL.Localization.lbl_YearsTheme,
        para2: window.RDL.Localization.lbl_ModifyLetterContent
      }
    },
    route: RDL.Routes.WorkExperience,
    documentTitle: OnboardingStepDocTitle.WorkExperience
  },
  PreviousJobTitle: {
    index: 6,
    viewType: viewTypes.textInputView,
    headingText: window.RDL.Localization.lbl_mostRecentJobTitle,
    subHeadingText: window.RDL.Localization.lbl_firstThingForEmployers,
    screenName: "PreviousJobTitle",
    userStageName: userStages.Experience,
    tipsText: window.RDL.Localization.lbl_useMostRelevantJob,
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.JobTitleAutoCompleteType,
      mappedStateObjKey: dataObjMappingKeys.previousJobTitle,
      placeholder: window.RDL.Localization.lbl_desiredPositionPlaceholder,
      id: customFieldsId.jobTitle,
      labelName: window.RDL.Localization.lbl_jobTitle,
      exactSearch: true,
      avoidTab: true,
      autoCompleteAttrValue: "off"
    }],
    saveValueProp: [dataObjMappingKeys.previousJobTitle],
    progressBarLevel: 8 / progressBarGroupingDivision.secondGroup,
    checkForSkippedArrInReview: true,
    eventProps: {
      screenName: 'last job title'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.PreviousJobTitle.textBoxControl[0].autoCompleteType = window.RDL.portalConfigData.JobTitleAutoCompleteType;
    },
    reviewData: {
      showInResumeReview: true,
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore, resumeReview) {
        return [{
          stepTitle: resumeReview ? window.RDL.Localization.lbl_jobTitle : window.RDL.Localization.lbl_previous_JobTitle,
          stepVal: onboardingData[dataObjMappingKeys.previousJobTitle],
          defaultLinkText: window.RDL.Localization.lbl_EnterTitle,
          clickAction: eventPropsValues.clickOptions.enterPreviousTitle
        }];
      },
      getUploadReviewDataArr: function getUploadReviewDataArr(onboardingData, onboardingStore, resumeReview) {
        return [{
          stepTitle: window.RDL.Localization.lbl_previous_JobTitle,
          stepName: 'PreviousJobTitle',
          stepVal: onboardingData[dataObjMappingKeys.previousJobTitle],
          stepIndex: reviewStepIndexObj.previousJobTitle,
          showAnimation: true
        }];
      }
    },
    route: RDL.Routes.PreviousJobTitle,
    documentTitle: OnboardingStepDocTitle.PreviousJobTitle
  },
  WorkGaps: {
    index: 7,
    viewType: viewTypes.radioButtonInputView,
    headingText: window.RDL.Localization.lbl_haveGaps,
    subHeadingText: window.RDL.Localization.lbl_explainGaps,
    screenName: "WorkGaps",
    userStageName: '',
    hideTipsSection: true,
    radionBtnOptions: [window.RDL.Localization.lbl_yes, window.RDL.Localization.lbl_no],
    saveValueProp: [dataObjMappingKeys.WorkGaps],
    progressBarLevel: 9 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'work history gaps'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.WorkGaps.DependentScreen = onBoardingStepsV2.WorkGapsReason.index;
    },
    reviewData: {
      showInResumeReview: true,
      dependency: dependencyType.DependentScreen,
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_gapsInWorkHistory,
          stepVal: (0, _CommonUtils.camelizeFunction)(onboardingData[dataObjMappingKeys.WorkGaps]),
          defaultLinkText: window.RDL.Localization.lbl_selectGaps,
          clickAction: eventPropsValues.clickOptions.selectAnswer
        }];
      },
      getUploadReviewDataArr: function getUploadReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_gapsInWorkHistory,
          stepName: 'WorkGaps',
          stepVal: (0, _CommonUtils.camelizeFunction)(onboardingData[dataObjMappingKeys.WorkGaps]),
          stepIndex: reviewStepIndexObj.workGaps,
          showAnimation: true
        }];
      },
      isShowDependency: function isShowDependency(oldData, newData) {
        if (newData && newData.toUpperCase() == window.RDL.Localization.lbl_yes.toUpperCase()) return true;else return false;
      }
    }
  },
  WorkGapsReason: {
    index: 8,
    viewType: viewTypes.highlightInputView,
    headingText: window.RDL.Localization.lbl_reasonForGap,
    subHeadingText: window.RDL.Localization.lbl_reasonForWorkGap,
    screenName: "WorkGapsReason",
    userStageName: '',
    tipsText: window.RDL.Localization.lbl_chooseOneGap,
    cssClasses: {
      optionsList: "work-gaps-reason-v2"
    },
    options: [],
    MaxRows: 3,
    MaxOptions: MaxOptions.WorkGapReasons,
    MaxOptionsInARow: 2,
    MaxSelectedOptions: 1,
    saveValueProp: [dataObjMappingKeys.WorkGapsReason],
    progressBarLevel: 10 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'reason for gap'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.WorkGapsReason.options = window.RDL.workGapReasons ? window.RDL.workGapReasons.filter(function (x) {
        return !x.isHideFromGapsScreen;
      }).map(function (x) {
        return window.RDL.Localization[x.reason];
      }) : [];
      if (RDL.isJoshuaTree) {
        onBoardingStepsV2.WorkGapsReason.MaxRows = 3;
        onBoardingStepsV2.WorkGapsReason.MaxOptionsInARow = 3;
      } else if (RDL.isThreeGapsInARow) {
        onBoardingStepsV2.WorkGapsReason.MaxOptionsInARow = 3;
      }
    },
    reviewData: {
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        if (onboardingData[dataObjMappingKeys.WorkGaps].toLowerCase() == window.RDL.Localization.lbl_yes.toLowerCase()) return [{
          stepTitle: window.RDL.Localization.lbl_GapReason,
          stepVal: onboardingData[dataObjMappingKeys.WorkGapsReason],
          defaultLinkText: window.RDL.Localization.lbl_selectGaps,
          clickAction: eventPropsValues.clickOptions.selectGaps
        }];
      }
    }
  },
  SoftSkillsCompetency: {
    index: 9,
    viewType: viewTypes.highlightInputView,
    headingText: window.RDL.Localization.lbl_selectStrengthsHeading || window.RDL.Localization.lbl_selectStrengths,
    subHeadingText: window.RDL.Localization.lbl_showStrengths,
    hideTipsSection: true,
    screenName: "SoftSkillsCompetency",
    userStageName: '',
    checkDuplicateScreen: true,
    options: window.RDL.SoftSkills,
    MaxRows: 3,
    MaxOptions: MaxOptions.SoftSkillsCompetency,
    MaxOptionsInARow: 3,
    MaxSelectedOptions: 3,
    saveValueProp: [dataObjMappingKeys.softSkill1, dataObjMappingKeys.softSkill2, dataObjMappingKeys.softSkill3, dataObjMappingKeys.softSkillStep],
    analyticsEventType: eventTypes.softSkillSelected,
    progressBarLevel: 12 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'soft skills'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.SoftSkillsCompetency.options = window.RDL.SoftSkills;
    },
    reviewData: {
      isBranchEnd: true
    },
    isShowMaxOptionsSelectedMsg: false,
    isShowMoreLessEnabled: false
  },
  SchoolEnrolled: {
    index: 10,
    viewType: viewTypes.radioButtonInputView,
    headingText: window.RDL.Localization.lbl_currentlyStudent,
    screenName: "SchoolEnrolled",
    userStageName: userStages.Education,
    radionBtnOptions: [window.RDL.Localization.lbl_yes, window.RDL.Localization.lbl_no, window.RDL.Localization.lbl_recentGraduate],
    hideTipsSection: true,
    saveValueProp: [dataObjMappingKeys.enrolledInSchool],
    progressBarLevel: 8 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'enrollment status'
    },
    dependencyType: dependencyType.BranchingScreen
  },
  CurrentEducationLevel: {
    index: 11,
    headingText: window.RDL.Localization.lbl_kindOfSchool,
    hideTipsSection: true,
    viewType: viewTypes.radioButtonInputView,
    screenName: "CurrentEducationLevel",
    userStageName: '',
    radionBtnOptions: [dataObjMappingKeys.highSchool, dataObjMappingKeys.tradeSchool, dataObjMappingKeys.college, dataObjMappingKeys.graduateSchool],
    saveValueProp: [dataObjMappingKeys.schoolType],
    progressBarLevel: 10 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'education level'
    },
    reviewData: {
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_schoolType,
          stepVal: onboardingData[dataObjMappingKeys.schoolType],
          defaultLinkText: window.RDL.Localization.lbl_selectSchoolType,
          clickAction: eventPropsValues.clickOptions.selectSchoolType
        }];
      }
    }
  },
  CollegeGraduate: {
    index: 12,
    headingText: window.RDL.Localization.lbl_collegeGrad,
    hideTipsSection: true,
    viewType: viewTypes.radioButtonInputView,
    screenName: "CollegeGraduate",
    userStageName: '',
    radionBtnOptions: [window.RDL.Localization.lbl_yes, window.RDL.Localization.lbl_no],
    saveValueProp: [dataObjMappingKeys.CollegeGraduate],
    progressBarLevel: 9 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'college grad'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.CollegeGraduate.DependentScreen = onBoardingStepsV2.University.index;
    },
    dependencyType: dependencyType.DependentScreen
  },
  University: {
    index: 13,
    viewType: viewTypes.textInputView,
    headingText: window.RDL.Localization.lbl_specifySchoolName,
    //Conditional Heading Text -- will be fetched by function funcSetStepPropertiesRunTime()
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.University.textBoxControl[0].autoCompleteType = window.RDL.portalConfigData.SchoolAutoCompleteType;
      onBoardingStepsV2.University.headingText = window.RDL.Localization.lbl_specifySchoolName;
      onBoardingStepsV2.University.DependentScreen = onBoardingStepsV2.CollegeFieldDegree.index;
    },
    hideTipsSection: true,
    screenName: "UniversityInfo",
    isEnableCountryCulture: true,
    userStageName: '',
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.SchoolAutoCompleteType,
      mappedStateObjKey: dataObjMappingKeys.schoolName,
      placeholder: window.RDL.Localization.lbl_nameOfSchoolPlaceholder,
      id: customFieldsId.school,
      labelName: window.RDL.Localization.lbl_nameOfSchool,
      exactSearch: true,
      avoidTab: true
    }],
    saveValueProp: [dataObjMappingKeys.schoolName, dataObjMappingKeys.schoolType],
    progressBarLevel: 10 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'school name'
    },
    dependencyType: dependencyType.DependentScreen,
    reviewData: {
      showInResumeReview: true,
      dependency: dependencyType.DependentScreen,
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_nameOfSchool,
          stepVal: onboardingData[dataObjMappingKeys.schoolName],
          defaultLinkText: window.RDL.Localization.lbl_EnterName,
          clickAction: eventPropsValues.clickOptions.enterName
        }];
      },
      isShowDependency: function isShowDependency(oldData, newData) {
        var newObj = Object.assign({}, oldData);
        newObj[dataObjMappingKeys.schoolName] = newData;
        if (!(0, _CommonUtils.isHighSchoolUser)(newObj) && (0, _CommonUtils.isHighSchoolUser)(oldData) != (0, _CommonUtils.isHighSchoolUser)(newObj)) return true;else return false;
      }
    }
  },
  CollegeFieldDegree: {
    index: 14,
    viewType: viewTypes.hybridInputView,
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.CollegeFieldDegree.textBoxControl[0].autoCompleteType = window.RDL.portalConfigData.FieldOfStudyAutoCompleteType;
      if (window.RDL.portalConfigData.DegreeAutoCompleteType && onBoardingStepsV2.CollegeFieldDegree.textBoxControl.length == 1) {
        onBoardingStepsV2.CollegeFieldDegree.textBoxControl.push({
          maxLength: 50,
          autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.DegreeAutoCompleteType,
          mappedStateObjKey: dataObjMappingKeys.degree,
          placeholder: window.RDL.Localization.lbl_degreePlaceholder,
          labelName: window.RDL.Localization.lbl_degree,
          id: customFieldsId.degree,
          exactSearch: true,
          avoidTab: true
        });
      }
    },
    headingText: window.RDL.Localization.lbl_didMajorIn,
    subHeadingText: window.RDL.Localization.lbl_enterDegreeStudy,
    screenName: "CollegeFieldDegree",
    tipsText: window.RDL.Localization.lbl_specifyRelevantDegree,
    userStageName: '',
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.FieldOfStudyAutoCompleteType,
      mappedStateObjKey: dataObjMappingKeys.fieldOfStudy,
      placeholder: window.RDL.Localization.lbl_studyFieldPlaceholder,
      labelName: window.RDL.Localization.lbl_field_OfStudy,
      id: customFieldsId.fieldOfStudy,
      exactSearch: true,
      avoidTab: true
    }],
    progressBarLevel: 11 / progressBarGroupingDivision.secondGroup,
    saveValueProp: [dataObjMappingKeys.fieldOfStudy, dataObjMappingKeys.degree],
    eventProps: {
      screenName: 'field of study'
    },
    selectControls: [{
      mappedStateObjKey: dataObjMappingKeys.degree,
      placeholder: window.RDL.Localization.lbl_degreePlaceholder,
      labelName: window.RDL.Localization.lbl_degree,
      id: customFieldsId.degree,
      isSearchable: false,
      options: []
    }],
    reviewData: {
      showInResumeReview: true,
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_field_OfStudy,
          stepVal: onboardingData[dataObjMappingKeys.fieldOfStudy],
          defaultLinkText: window.RDL.Localization.lbl_EnterFieldOfStudy_1,
          clickAction: eventPropsValues.clickOptions.enterFieldOfStudy
        }, {
          stepTitle: window.RDL.Localization.lbl_degree,
          stepVal: onboardingData[dataObjMappingKeys.degree],
          defaultLinkText: window.RDL.Localization.lbl_EnterDegree_2,
          clickAction: eventPropsValues.clickOptions.enterDegree
        }];
      },
      getUploadReviewDataArr: function getUploadReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_field_OfStudy,
          stepName: 'CollegeFieldDegree',
          stepVal: onboardingData[dataObjMappingKeys.fieldOfStudy],
          stepIndex: reviewStepIndexObj.fieldOfStudy,
          showAnimation: true
        }, {
          stepTitle: window.RDL.Localization.lbl_degree,
          stepName: 'CollegeFieldDegree',
          stepVal: onboardingData[dataObjMappingKeys.degree],
          stepIndex: reviewStepIndexObj.degree,
          showAnimation: true

        }];
      }
    }
  },
  RecentGradSchool: {
    index: 15,
    viewType: viewTypes.textInputView,
    headingText: window.RDL.Localization.lbl_specifySchoolName,
    hideTipsSection: true,
    screenName: "RecentGradSchool",
    isEnableCountryCulture: true,
    userStageName: '',
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.SchoolAutoCompleteType,
      mappedStateObjKey: dataObjMappingKeys.schoolName,
      placeholder: window.RDL.Localization.lbl_nameOfSchoolPlaceholder,
      id: customFieldsId.school,
      labelName: window.RDL.Localization.lbl_nameOfSchool,
      exactSearch: true,
      avoidTab: true
    }],
    saveValueProp: [dataObjMappingKeys.schoolName, dataObjMappingKeys.schoolType],
    progressBarLevel: 9 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'school name'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.RecentGradSchool.textBoxControl[0].autoCompleteType = window.RDL.portalConfigData.SchoolAutoCompleteType;
      onBoardingStepsV2.RecentGradSchool.DependentScreen = onBoardingStepsV2.RecentGradFieldDegree.index;
    },
    dependencyType: dependencyType.DependentScreen,
    isPreviousScreenAnimation: true,
    reviewData: {
      dependency: dependencyType.DependentScreen,
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_nameOfSchool,
          stepVal: onboardingData[dataObjMappingKeys.schoolName],
          defaultLinkText: window.RDL.Localization.lbl_EnterName,
          clickAction: eventPropsValues.clickOptions.enterName
        }];
      },
      getUploadReviewDataArr: function getUploadReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_nameOfSchool,
          stepName: 'RecentGradSchool',
          stepVal: onboardingData[dataObjMappingKeys.schoolName],
          stepIndex: reviewStepIndexObj.schoolName,
          showAnimation: true
        }];
      },
      isShowDependency: function isShowDependency(oldData, newData) {
        var newObj = Object.assign({}, oldData);
        newObj[dataObjMappingKeys.schoolName] = newData;
        if (!(0, _CommonUtils.isHighSchoolUser)(newObj) && (0, _CommonUtils.isHighSchoolUser)(oldData) != (0, _CommonUtils.isHighSchoolUser)(newObj)) return true;else return false;
      }
    }
  },
  //Recent Grad College is not used -- index 16 reserved for future use.
  RecentGradCollege: {
    index: 16,
    viewType: viewTypes.textInputView,
    headingText: "RecentGradCollege",
    subHeadingText: "RecentGradCollege SubHeading",
    screenName: "RecentGradCollege",
    userStageName: '',
    progressBarLevel: 10 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'future job title'
    }
  },
  RecentGradFieldDegree: {
    index: 17,
    viewType: viewTypes.hybridInputView,
    headingText: window.RDL.Localization.lbl_didMajorIn,
    subHeadingText: window.RDL.Localization.lbl_enterDegreeStudy,
    screenName: "CollegeFieldDegree",
    tipsText: window.RDL.Localization.lbl_specifyRelevantDegree,
    userStageName: '',
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.FieldOfStudyAutoCompleteType,
      mappedStateObjKey: dataObjMappingKeys.fieldOfStudy,
      placeholder: window.RDL.Localization.lbl_studyFieldPlaceholder,
      labelName: window.RDL.Localization.lbl_field_OfStudy,
      id: customFieldsId.fieldOfStudy,
      exactSearch: true,
      avoidTab: true
    }],
    progressBarLevel: 10 / progressBarGroupingDivision.secondGroup,
    saveValueProp: [dataObjMappingKeys.fieldOfStudy, dataObjMappingKeys.degree],
    eventProps: {
      screenName: 'field of study'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.RecentGradFieldDegree.textBoxControl[0].autoCompleteType = window.RDL.portalConfigData.FieldOfStudyAutoCompleteType;
      if (window.RDL.portalConfigData.DegreeAutoCompleteType && onBoardingStepsV2.RecentGradFieldDegree.textBoxControl.length == 1) {
        onBoardingStepsV2.RecentGradFieldDegree.textBoxControl.push({
          maxLength: 50,
          autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.DegreeAutoCompleteType,
          mappedStateObjKey: dataObjMappingKeys.degree,
          placeholder: window.RDL.Localization.lbl_degreePlaceholder,
          labelName: window.RDL.Localization.lbl_degree,
          id: customFieldsId.degree,
          exactSearch: true,
          avoidTab: true
        });
      }
    },
    selectControls: [{
      mappedStateObjKey: dataObjMappingKeys.degree,
      placeholder: window.RDL.Localization.lbl_degreePlaceholder,
      labelName: window.RDL.Localization.lbl_degree,
      id: customFieldsId.degree,
      isSearchable: false,
      options: []
    }],
    reviewData: {
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_field_OfStudy,
          stepVal: onboardingData[dataObjMappingKeys.fieldOfStudy],
          defaultLinkText: window.RDL.Localization.lbl_EnterFieldOfStudy_1,
          clickAction: eventPropsValues.clickOptions.enterFieldOfStudy
        }, {
          stepTitle: window.RDL.Localization.lbl_degree,
          stepVal: onboardingData[dataObjMappingKeys.degree],
          defaultLinkText: window.RDL.Localization.lbl_EnterDegree_2,
          clickAction: eventPropsValues.clickOptions.enterDegree
        }];
      }
    }
  },
  RecentGradPreviousJobTitle: {
    index: 18,
    viewType: viewTypes.textInputView,
    headingText: window.RDL.Localization.lbl_mostRecentJobTitle,
    subHeadingText: window.RDL.Localization.lbl_firstThingForEmployers,
    screenName: "RecentGradPreviousJobTitle",
    userStageName: '',
    tipsText: window.RDL.Localization.lbl_useMostRelevantJob,
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.JobTitleAutoCompleteType,
      mappedStateObjKey: dataObjMappingKeys.previousJobTitle,
      placeholder: window.RDL.Localization.lbl_desiredPositionPlaceholder,
      id: customFieldsId.jobTitle,
      labelName: window.RDL.Localization.lbl_jobTitle,
      exactSearch: true,
      avoidTab: true
    }],
    saveValueProp: [dataObjMappingKeys.previousJobTitle],
    progressBarLevel: 11 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'last job title'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.RecentGradPreviousJobTitle.textBoxControl[0].autoCompleteType = window.RDL.portalConfigData.JobTitleAutoCompleteType;
    }
  },
  KeyTheme: {
    headingText: window.RDL.Localization.lbl_descWorkStyle,
    subHeadingText: window.RDL.Localization.lbl_weWillPersonalize,
    index: 19,
    viewType: viewTypes.highlightInputView,
    screenName: "KeyTheme",
    tipsText: window.RDL.Localization.lbl_specifyWorkStyle,
    userStageName: userStages.ToneSelection,
    options: window.RDL.v2Templates,
    MaxRows: 2,
    MaxOptions: MaxOptions.KeyThemes,
    MaxOptionsInARow: 3,
    MaxSelectedOptions: 1,
    isDocCreationStep: true,
    saveValueProp: [dataObjMappingKeys.templateName, dataObjMappingKeys.templateId, dataObjMappingKeys.isHighSchoolTemplate],
    progressBarLevel: 13 / progressBarGroupingDivision.secondGroup,
    loaderTimeout: 400,
    eventProps: {
      screenName: 'choose letter theme'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.KeyTheme.options = window.RDL.v2Templates;
    },
    reviewData: {
      category: reviewScreenCategories.personalization.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_WorkingStyle,
          stepVal: onboardingData[dataObjMappingKeys.templateName],
          defaultLinkText: window.RDL.Localization.lbl_SelectStyle,
          stepTip: {
            id: 2,
            heading: '',
            para: '',
            infoLinkText: '',
            moreInfoHeading: '',
            moreInfoPara: '',
            isVisible: false
          },
          clickAction: eventPropsValues.clickOptions.selectStyle
        }];
      },
      isBranchEnd: true,
      reviewChangeConfirmation: {
        title: window.RDL.Localization.lbl_ChangeLetterTheme,
        para1: window.RDL.Localization.lbl_StyleTheme,
        para2: window.RDL.Localization.lbl_ModifyLetterContent
      }
    }
  },
  Name: {
    index: 20,
    viewType: viewTypes.textInputView,
    headingText: window.RDL.Localization.lbl_youAreDoneLetsSignLetter,
    subHeadingText: window.RDL.Localization.lbl_howToDisplayName,
    screenName: "Name",
    isLastOnboardingStep: true,
    userStageName: userStages.Contact,
    cssClasses: { leftSectionInner: 'onbd-header-wrap' },
    textBoxControl: [{
      maxLength: 35,
      mappedStateObjKey: dataObjMappingKeys.FirstName,
      placeholder: window.RDL.Localization.lbl_fNamePlaceholder,
      autoFocus: false,
      errorMessage: window.RDL.Localization.lbl_nameErrorMessage,
      showError: false,
      regEx: new RegExp(window.RDL.nameRegex),
      labelName: window.RDL.Localization.lbl_fName,
      id: customFieldsId.fName
    }, {
      maxLength: 35,
      mappedStateObjKey: dataObjMappingKeys.LastName,
      placeholder: window.RDL.Localization.lbl_lNamePlaceholder,
      autoFocus: false,
      errorMessage: window.RDL.Localization.lbl_nameErrorMessage,
      showError: false,
      regEx: RegExp(window.RDL.nameRegex),
      labelName: window.RDL.Localization.lbl_lName,
      id: customFieldsId.lName
    }],
    saveValueProp: [dataObjMappingKeys.FirstName, dataObjMappingKeys.LastName],
    progressBarLevel: 14 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'enter your name'
    },
    btnPrimaryLabel: window.RDL.Localization.lbl_getYourLetter,
    hideTipsSection: true,
    reviewData: {
      getUploadReviewDataArr: function getUploadReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_fName,
          stepName: 'Name',
          stepVal: onboardingData[dataObjMappingKeys.FirstName],
          stepIndex: reviewStepIndexObj.firstName,
          default: true,
          showAnimation: true
        }, {
          stepTitle: window.RDL.Localization.lbl_lName,
          stepName: 'Name',
          stepVal: onboardingData[dataObjMappingKeys.LastName],
          stepIndex: reviewStepIndexObj.lastName,
          default: true,
          showAnimation: true
        }, {
          stepTitle: window.RDL.Localization.lbl_phone,
          stepName: 'Name',
          stepVal: onboardingData[dataObjMappingKeys.phone],
          stepIndex: reviewStepIndexObj.phone,
          showAnimation: true
        }, {
          stepTitle: "Email Address",
          stepName: 'Name',
          stepVal: onboardingData[dataObjMappingKeys.email],
          stepIndex: reviewStepIndexObj.email,
          default: true,
          showAnimation: true
        }, {
          stepTitle: window.RDL.Localization.lbl_city,
          stepName: 'Name',
          stepVal: onboardingData[dataObjMappingKeys.userCity],
          stepIndex: reviewStepIndexObj.city,
          showAnimation: true
        }, {
          stepTitle: window.RDL.Localization.lbl_state,
          stepName: 'Name',
          stepVal: onboardingData[dataObjMappingKeys.userState],
          stepIndex: reviewStepIndexObj.state,
          showAnimation: true
        }, {
          stepTitle: window.RDL.Localization.lbl_zip,
          stepName: 'Name',
          stepVal: onboardingData[dataObjMappingKeys.userZip],
          stepIndex: reviewStepIndexObj.zip,
          showAnimation: true
        }];
      }
    },
    route: RDL.Routes.NameContact,
    documentTitle: OnboardingStepDocTitle.NameContact
  },
  ChooseTemplate: {
    index: 22,
    viewType: viewTypes.chooseTemplate,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    isBackButtonHidden: true,
    options: window.RDL.Skins,
    pageClassName: " page-choose-letter",
    // progressBarLevel: 0 / progressBarGroupingDivision.firstGroup,
    saveValueProp: [dataObjMappingKeys.selectedSkinCD],
    eventProps: {
      screenName: eventPropsValues.screenNames.chooseTemplate
    },
    hideHeader: false,
    hideRightSection: true,
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.ChooseTemplate.options = window.RDL.Skins;
    },
    route: RDL.Routes.ChooseTemplate,
    documentTitle: OnboardingStepDocTitle.ChooseTemplate
  },
  ReviewDegree: {
    index: 23,
    viewType: viewTypes.hybridInputView,
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      onBoardingStepsV2.ReviewDegree.textBoxControl[0].autoCompleteType = window.RDL.portalConfigData.FieldOfStudyAutoCompleteType;
      if (window.RDL.portalConfigData.DegreeAutoCompleteType && onBoardingStepsV2.ReviewDegree.textBoxControl.length == 1) {
        onBoardingStepsV2.ReviewDegree.textBoxControl.push({
          maxLength: 50,
          autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.DegreeAutoCompleteType,
          mappedStateObjKey: dataObjMappingKeys.degree,
          placeholder: window.RDL.Localization.lbl_degreePlaceholder,
          labelName: window.RDL.Localization.lbl_degree,
          id: customFieldsId.degree,
          exactSearch: true,
          avoidTab: true
        });
      }
    },
    headingText: window.RDL.Localization.lbl_didMajorIn,
    subHeadingText: window.RDL.Localization.lbl_enterDegreeStudy,
    screenName: "CollegeFieldDegree",
    tipsText: window.RDL.Localization.lbl_specifyRelevantDegree,
    userStageName: '',
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.FieldOfStudyAutoCompleteType,
      mappedStateObjKey: dataObjMappingKeys.fieldOfStudy,
      placeholder: window.RDL.Localization.lbl_studyFieldPlaceholder,
      labelName: window.RDL.Localization.lbl_field_OfStudy,
      id: customFieldsId.fieldOfStudy,
      exactSearch: true,
      avoidTab: true
    }],
    progressBarLevel: 11 / progressBarGroupingDivision.secondGroup,
    saveValueProp: [dataObjMappingKeys.fieldOfStudy, dataObjMappingKeys.degree],
    eventProps: {
      screenName: 'field of study'
    },
    selectControls: [{
      mappedStateObjKey: dataObjMappingKeys.degree,
      placeholder: window.RDL.Localization.lbl_degreePlaceholder,
      labelName: window.RDL.Localization.lbl_degree,
      id: customFieldsId.degree,
      isSearchable: false,
      options: []
    }],
    reviewData: {
      category: reviewScreenCategories.experience.index,
      getStepReviewDataArr: function getStepReviewDataArr(onboardingData, onboardingStore) {
        return [{
          stepTitle: window.RDL.Localization.lbl_field_OfStudy,
          stepVal: onboardingData[dataObjMappingKeys.fieldOfStudy],
          defaultLinkText: window.RDL.Localization.lbl_EnterFieldOfStudy_1,
          clickAction: eventPropsValues.clickOptions.enterFieldOfStudy
        }, {
          stepTitle: window.RDL.Localization.lbl_degree,
          stepVal: onboardingData[dataObjMappingKeys.degree],
          defaultLinkText: window.RDL.Localization.lbl_EnterDegree_2,
          clickAction: eventPropsValues.clickOptions.enterDegree
        }];
      }
    }
  },
  Unemployed: {
    index: 24,
    viewType: viewTypes.radioButtonInputView,
    headingText: window.RDL.Localization.lbl_out_work_covid19,
    subHeadingText: window.RDL.Localization.lbl_explain_covid19,
    screenName: "Unemployed",
    userStageName: '',
    hideTipsSection: true,
    radionBtnOptions: [window.RDL.Localization.lbl_yes, window.RDL.Localization.lbl_no],
    isDocCreationStep: true,
    saveValueProp: [dataObjMappingKeys.covidGap, dataObjMappingKeys.templateId],
    eventProps: {
      screenName: 'Unemployed due to COVID-19'
    }
  },
  HowItWorks: {
    index: 25,
    viewType: viewTypes.howItWorks,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    isBackButtonHidden: false,
    options: window.RDL.Skins,
    pageClassName: "",
    saveValueProp: [dataObjMappingKeys.selectedSkinCD],
    eventProps: {
      screenName: 'how it works'
    },
    hideRightSection: true,
    logoNotClickable: true,
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.HowItWorks,
    documentTitle: OnboardingStepDocTitle.HowItWorks
  },
  OpenerOverview: {
    index: 26,
    viewType: viewTypes.overviewView,
    headingText: window.RDL.Localization.lbl_the_opner,
    subHeadingText: window.RDL.Localization.lbl_opener_content,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    pageClassName: "",
    isAnimate: true,
    hideRightSection: true,
    imgPath: window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/" + RDL.currentPortalDetails.portalCD + '/images/opner.png',
    eventProps: {
      screenName: 'opener intro'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.OpenerOverview,
    documentTitle: OnboardingStepDocTitle.OpenerOverview
  },
  OpenerTTC: {
    index: 27,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_openersRecommended,
    subHeadingText: window.RDL.Localization.lbl_ableToEditLater,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.Opener,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedOpenerTTC, dataObjMappingKeys.openerTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.opener,
    eventProps: {
      screenName: 'choose an opener'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.OpenerTTC,
    documentTitle: OnboardingStepDocTitle.OpenerTTC
  },
  BodyOverview: {
    index: 28,
    viewType: viewTypes.overviewView,
    headingText: window.RDL.Localization.lbl_the_body,
    subHeadingText: window.RDL.Localization.lbl_body_content,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    pageClassName: "",
    isAnimate: true,
    hideRightSection: true,
    imgPath: window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/" + RDL.currentPortalDetails.portalCD + '/images/body.png',
    eventProps: {
      screenName: 'body intro'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.BodyOverview,
    documentTitle: OnboardingStepDocTitle.BodyOverview
  },
  BodyTTC: {
    index: 29,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_bodyRecommended,
    subHeadingText: window.RDL.Localization.lbl_ableToEditLater,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.Body,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedBodyTTC, dataObjMappingKeys.bodyTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.body,
    eventProps: {
      screenName: 'choose a body'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.BodyTTC,
    documentTitle: OnboardingStepDocTitle.BodyTTC
  },
  CloserOverview: {
    index: 30,
    viewType: viewTypes.overviewView,
    headingText: window.RDL.Localization.lbl_the_closer,
    subHeadingText: window.RDL.Localization.lbl_closer_content,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    pageClassName: "",
    isAnimate: true,
    hideRightSection: true,
    imgPath: window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/" + RDL.currentPortalDetails.portalCD + '/images/closer.png',
    eventProps: {
      screenName: 'closer intro'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.CloserOverview,
    documentTitle: OnboardingStepDocTitle.CloserOverview
  },
  CloserTTC: {
    index: 31,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_closerRecommended,
    subHeadingText: window.RDL.Localization.lbl_ableToEditLater,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.CallToAction,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedCallToActionTTC, dataObjMappingKeys.callToActionTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.closer,
    isDocCreationStep: true,
    isLastOnboardingStep: true,
    eventProps: {
      screenName: 'choose a closer'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {
      if (window.RDL.features.showSignature) {
        onBoardingStepsV2.CloserTTC.isDocCreationStep = false;
        onBoardingStepsV2.CloserTTC.isLastOnboardingStep = false;
      }
    },
    route: RDL.Routes.CloserTTC,
    documentTitle: OnboardingStepDocTitle.CloserTTC
  },
  GapsOverview: {
    index: 32,
    viewType: viewTypes.overviewView,
    headingText: window.RDL.Localization.lbl_employmentGaps,
    subHeadingText: window.RDL.Localization.lbl_explainGapsText,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    pageClassName: "",
    isAnimate: true,
    saveValueProp: [dataObjMappingKeys.WorkGaps],
    hideRightSection: true,
    imgPath: window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/" + RDL.currentPortalDetails.portalCD + '/images/gaps.png',
    showSkipSectionButton: true,
    skipButtonText: window.RDL.Localization.lbl_skipSection,
    ignoreForskipStepsArr: true,
    eventProps: {
      screenName: 'gaps intro'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.GapsOverview,
    documentTitle: OnboardingStepDocTitle.GapsOverview
  },
  GapsTTC: {
    index: 33,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_explanationsRecommended,
    subHeadingText: window.RDL.Localization.lbl_ableToEditLater,
    TTCOptions: [],
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedGapsTTC, dataObjMappingKeys.gapsTTCList],
    sectionType: _helper.TypeCodes.sectionTypeCd.Gaps,
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.gaps,
    isDisableDefaultSelection: true,
    avoidAddingLetterSpecificTTC: true, // the ttcs are fixed here for any letter type
    eventProps: {
      screenName: 'reason for gap'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime(onboardingData) {
      if (RDL.experimentControl.isUploadResume && onboardingData && onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.isUploadResume] == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) {
        onBoardingStepsV2.GapsTTC.headingText = window.RDL.Localization.lbl_explainEmploymentGap;
        onBoardingStepsV2.GapsTTC.subHeadingText = window.RDL.Localization.lbl_employmentGapReasons;
      } else {
        onBoardingStepsV2.GapsTTC.headingText = window.RDL.Localization.lbl_explanationsRecommended;
        onBoardingStepsV2.GapsTTC.subHeadingText = window.RDL.Localization.lbl_ableToEditLater;
      }
    },
    route: RDL.Routes.GapsTTC,
    documentTitle: OnboardingStepDocTitle.GapsTTC
  },
  ImportResumeScreen: {
    index: 34,
    viewType: viewTypes.highlightInputView,
    headingText: window.RDL.Localization.lbl_how_to_cover_letter,
    subHeadingText: window.RDL.Localization.lbl_our_templates,
    options: [],
    screenName: 'import resume',
    hideTipsSection: true,
    MaxSelectedOptions: 1,
    unSelectDisabled: true,
    saveValueProp: [dataObjMappingKeys.isImportResume],
    cssClasses: { rowWrapper: 'import-resume-wrapper' },
    eventProps: {
      screenName: 'import resume'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    showAllOptions: true,
    loaderTimeout: 600,
    pageClassName: " onboarding-import-resume-page"
  },
  ImportFromResumeReview: {
    index: 35,
    viewType: viewTypes.reviewScreen,
    headingText: RDL.Localization.lbl_what_we_imported,
    subHeadingText: RDL.Localization.lbl_edit_your_sections,
    screenName: 'resume review',
    eventProps: {
      screenName: 'resume review'
    },
    hideTipsSection: true,
    headerClass: "col-md-6",
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    pageClassName: " onboarding-import-resume-page"
  },
  JobInMind: {
    index: 36,
    viewType: viewTypes.highlightInputView,
    headingText: RDL.Localization.lbl_do_you_have_job_title,
    subHeadingText: RDL.Localization.lbl_inlcluding_job_title,
    screenName: "job in mind",
    tipsText: window.RDL.Localization.lbl_jobTitleInfo,
    userStageName: '',
    options: [{ label: window.RDL.Localization.lbl_yes,
      value: onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()] }, { label: window.RDL.Localization.lbl_no,
      value: onBoardingUserInput[window.RDL.Localization.lbl_no.toLowerCase()] }],
    MaxRows: 1,
    MaxOptions: MaxOptions.JobInMind,
    MaxOptionsInARow: 2,
    MaxSelectedOptions: 1,
    saveValueProp: [dataObjMappingKeys.jobInMind],
    progressBarLevel: 0 / progressBarGroupingDivision.firstGroup,
    eventProps: {
      screenName: ''
    },
    cssClasses: {
      optionsList: "force-redraw",
      rowWrapper: "job-title-enhancement-exp"
    },
    unSelectDisabled: true,
    isShowMaxOptionsSelectedMsg: false,
    isShowMoreLessEnabled: false,
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {}
  },
  CreateVsUpload: {
    index: 37,
    viewType: viewTypes.highlightInputView,
    screenName: "Create vs Upload",
    headingText: RDL.Localization.lbl_upload_screen_heading,
    subHeadingText: RDL.Localization.lbl_upload_screen_sub_heading,
    showAllOptions: true,
    optionHeadingClasses: 'box-title',
    options: [{
      label: window.RDL.Localization.lbl_create_new_letter,
      value: onBoardingUserInput[window.RDL.Localization.lbl_no.toLowerCase()],
      descriptionText: RDL.Localization.lbl_create_letter_sub_heading,
      descriptionClasses: 'box-subtitle',
      iconClasses: 'icon icon-new-letter',
      cssClasses: ['upload-box ']
    }, {
      label: RDL.Localization.lbl_upload_letter_heading,
      value: onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()],
      descriptionText: RDL.Localization.lbl_upload_letter_sub_heading,
      descriptionClasses: 'box-subtitle',
      iconClasses: 'icon icon-import-resume',
      cssClasses: ['upload-box last ']
    }],
    defaultValue: onBoardingUserInput[window.RDL.Localization.lbl_no.toLowerCase()],
    eventProps: {
      screenName: eventPropsValues.screenNames.createVsUpload
    },
    isBackButtonHidden: true,
    saveValueProp: [dataObjMappingKeys.isUploadResume],
    MaxSelectedOptions: 1,
    isContinueOnSelection: true,
    route: RDL.Routes.CreateVsUpload,
    documentTitle: OnboardingStepDocTitle.CreateVsUpload
  },
  UploadResume: {
    index: 38,
    viewType: viewTypes.uploadResumeView,
    screenName: "Upload Resume",
    eventProps: {
      screenName: eventPropsValues.screenNames.uploadResume
    },
    isBackButtonHidden: false,
    saveValueProp: [dataObjMappingKeys.uploadedResumeName],
    route: RDL.Routes.UploadResume,
    documentTitle: OnboardingStepDocTitle.UploadResume
  },
  UploadReview: {
    index: 39,
    viewType: viewTypes.uploadReview,
    screenName: 'resume review',
    eventProps: {
      screenName: eventPropsValues.screenNames.resumeReview
    },
    headerClass: "col-md-6",
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    pageClassName: " onboarding-upload-resume--review-page",
    route: RDL.Routes.UploadReview,
    documentTitle: OnboardingStepDocTitle.UploadReview
  },
  CustomizationIntro: {
    index: 40,
    viewType: viewTypes.overviewView,
    headingText: window.RDL.Localization.lbl_letter_almost_ready,
    subHeadingText: window.RDL.Localization.lbl_need_just_little_more_info,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    pageClassName: "",
    hideRightSection: true,
    hideToolTip: true,
    imgPath: window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/" + RDL.currentPortalDetails.portalCD + '/images/opner.png',
    eventProps: {
      screenName: eventPropsValues.screenNames.customizationIntro
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {}
  },
  SignatureOverview: {
    index: 43,
    viewType: viewTypes.overviewView,
    headingText: "##Signature",
    subHeadingText: "##Signature SubHeading Contnet",
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    pageClassName: "",
    hideRightSection: true,
    hideToolTip: true,
    // imgPath: window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/"
    // + RDL.currentPortalDetails.portalCD + '/images/closer.png',
    eventProps: {
      screenName: 'signature overview'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.SignatureOverview,
    documentTitle: OnboardingStepDocTitle.SignatureOverview
  },
  SignatureView: {
    index: 44,
    viewType: viewTypes.signatureView,
    screenName: "signature",
    eventProps: {
      screenName: 'signature'
    },
    isDocCreationStep: true,
    isLastOnboardingStep: true,
    sectionType: _helper.TypeCodes.sectionTypeCd.Signature,
    saveValueProp: [dataObjMappingKeys.SNAM, dataObjMappingKeys.SURL, dataObjMappingKeys.HLEF, dataObjMappingKeys.HMID, dataObjMappingKeys.HRIG, dataObjMappingKeys.SDAT, dataObjMappingKeys.PLAC, dataObjMappingKeys.SIFF, dataObjMappingKeys.SIFS, dataObjMappingKeys.SIST, dataObjMappingKeys.SICL, dataObjMappingKeys.SIHT, dataObjMappingKeys.SIWD, dataObjMappingKeys.STYP, dataObjMappingKeys.SICT],
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.SignatureView,
    documentTitle: OnboardingStepDocTitle.SignatureView
  },
  SkillsV2NewUI: {
    index: 45,
    viewType: typeCd.viewTypes.listScrollView,
    headingText: window.RDL.Localization.lbl_skill_showcase_letter,
    subHeadingText: window.RDL.Localization.lbl_searching_a_jt,
    tipsText: window.RDL.Localization.lbl_skillsInfo,
    screenName: "SkillsV2NewUI",
    userStageName: '',
    options: [],
    MaxOptions: typeCd.MaxOptions.SkillsV2,
    MaxOptionsInARow: 3,
    MaxSelectedOptions: 3,
    saveValueProp: [typeCd.dataObjMappingKeys.skill1, typeCd.dataObjMappingKeys.skill2, typeCd.dataObjMappingKeys.skill3],
    progressBarLevel: 40 + 2 * 20 / 4,
    analyticsEventType: eventTypes.profSkillSelected,
    eventProps: {
      screenName: 'ttc skills'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime(onboardingData) {
      onBoardingStepsV2.SkillsV2NewUI.options = onboardingData.jobSkillsList;
    },
    route: RDL.Routes.HardSkills,
    documentTitle: OnboardingStepDocTitle.HardSkills
  },
  SubjectTTC: {
    index: 46,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_subjectHeader,
    subHeadingText: window.RDL.Localization.lbl_ableToEditLater,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.Subject,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedSubjectTTC, dataObjMappingKeys.subjectTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.subject,
    eventProps: {
      screenName: 'choose a subject'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.SubjectTTC,
    documentTitle: OnboardingStepDocTitle.SubjectTTC,
    needToAddSectionTextInTTC: true
  },
  GreetingTTC: {
    index: 47,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_greetingHeader,
    subHeadingText: window.RDL.Localization.lbl_greetingSubheader,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.Greetings,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedGreetingTTC, dataObjMappingKeys.greetingTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.greeting,
    eventProps: {
      screenName: 'choose a greeting'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.GreetingTTC,
    documentTitle: OnboardingStepDocTitle.GreetingTTC,
    needToAddSectionTextInTTC: true
  },
  ConfidentialityTTC: (_ConfidentialityTTC = {
    index: 48,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_confidentialityHeader,
    subHeadingText: window.RDL.Localization.lbl_confidentialitySubheader,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.Confidentiality,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedConfidentialityTTC, dataObjMappingKeys.confidentialityTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.confidentiality,
    eventProps: {
      screenName: 'add confidentiality'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.ConfidentialityTTC,
    documentTitle: OnboardingStepDocTitle.ConfidentialityTTC
  }, _defineProperty(_ConfidentialityTTC, 'route', RDL.Routes.ConfidentialityTTC), _defineProperty(_ConfidentialityTTC, 'documentTitle', OnboardingStepDocTitle.ConfidentialityTTC), _ConfidentialityTTC),
  SalaryRequirementTTC: {
    index: 49,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_salaryRequirementsHeader,
    subHeadingText: window.RDL.Localization.lbl_salaryRequirementsSubheader,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.SalaryRuquirements,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedSalaryRequirementTTC, dataObjMappingKeys.salaryRequirementTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.salaryRequirement,
    eventProps: {
      screenName: 'add salary requirements'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.SalaryRequirementsTTC,
    documentTitle: OnboardingStepDocTitle.SalaryRequirementsTTC
  },
  AvailabilityTTC: {
    index: 50,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_availabilityHeader,
    subHeadingText: window.RDL.Localization.lbl_availabilitySubheader,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.Availablity,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedAvailablityTTC, dataObjMappingKeys.availablityTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.availability,
    eventProps: {
      screenName: 'add your availability'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.AvailablityTTC,
    documentTitle: OnboardingStepDocTitle.AvailablityTTC
  },
  RelocationTTC: {
    index: 51,
    viewType: viewTypes.TTCView,
    headingText: window.RDL.Localization.lbl_relocationHeader,
    subHeadingText: window.RDL.Localization.lbl_relocationSubheader,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.Relocation,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedRelocationTTC, dataObjMappingKeys.relocationTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.relocation,
    eventProps: {
      screenName: 'add relocation notice'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {},
    route: RDL.Routes.RelocationTTC,
    documentTitle: OnboardingStepDocTitle.RelocationTTC
  },
  NameContactContainer: {
    index: 52,
    viewType: viewTypes.nameContactContainer,
    headingText: window.RDL.Localization.lbl_nameContact,
    subHeadingText: window.RDL.Localization.lbl_enterContactInformation,
    screenName: "enter your name and contact details",
    isLastOnboardingStep: true,
    userStageName: userStages.Contact,
    progressBarLevel: 14 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: "enter your name and contact details"
    },
    //btnPrimaryLabel: RDL.Localization.btn_returnToLetter,
    hideTipsSection: true,
    updateUserNameInMySetting: true,
    sectionType: [_helper.TypeCodes.sectionTypeCd.Name, _helper.TypeCodes.sectionTypeCd.Contact],
    cssClasses: { headingTextDiv: 'onbd-contact' },
    route: RDL.Routes.NameContact,
    documentTitle: OnboardingStepDocTitle.NameContact
  },
  RecipientContainer: {
    index: 53,
    viewType: viewTypes.recipientContainer,
    headingText: window.RDL.Localization.lbl_recipient,
    subHeadingText: window.RDL.Localization.lbl_enterRecipientInformation,
    screenName: "enter recipient details",
    isLastOnboardingStep: true,
    userStageName: userStages.Contact,
    progressBarLevel: 14 / progressBarGroupingDivision.secondGroup,
    eventProps: {
      screenName: 'enter recipient details'
    },
    //btnPrimaryLabel: window.RDL.Localization.lbl_getYourLetter,
    hideTipsSection: true,
    sectionType: [_helper.TypeCodes.sectionTypeCd.Recipient],
    cssClasses: { headingTextDiv: 'onbd-contact' },
    route: RDL.Routes.Recipient,
    documentTitle: OnboardingStepDocTitle.Recipient
  },
  CloserTTCList: {
    index: 54,
    viewType: viewTypes.TTCView,
    headingText: RDL.Localization.lbl_signatureRecommended,
    subHeadingText: window.RDL.Localization.lbl_ableToEditLater,
    TTCOptions: [],
    sectionType: _helper.TypeCodes.sectionTypeCd.Closer,
    leftContainerClass: "col-md-12 left-container col-12",
    headerClass: "col-md-6",
    saveValueProp: [dataObjMappingKeys.selectedCloserTTC, dataObjMappingKeys.closerTTCList],
    pageClassName: "",
    sectionName: BuilderBasedTTCSections.signature,
    isDocCreationStep: true,
    isLastOnboardingStep: true,
    needToAddSectionTextInTTC: true,
    route: RDL.Routes.SignatureView,
    documentTitle: OnboardingStepDocTitle.Signature,
    eventProps: {
      screenName: 'choose a signature'
    },
    funcSetStepPropertiesRunTime: function funcSetStepPropertiesRunTime() {}
  },
  Exit: {
    index: 999,
    hideHeader: true
  }
};

var arrBBFOnboardingSpecificSections = exports.arrBBFOnboardingSpecificSections = [_helper.TypeCodes.sectionTypeCd.Opener, _helper.TypeCodes.sectionTypeCd.Body, _helper.TypeCodes.sectionTypeCd.Gaps, _helper.TypeCodes.sectionTypeCd.CallToAction];

var onBoardingStepsV2Grouping = exports.onBoardingStepsV2Grouping = {
  group1: [onBoardingStepsV2.JobTitle.index],
  group2: [onBoardingStepsV2.Company.index, onBoardingStepsV2.Skills.index, onBoardingStepsV2.SoftSkills.index, onBoardingStepsV2.WorkExperience.index],
  group3: [onBoardingStepsV2.PreviousJobTitle.index, onBoardingStepsV2.WorkGaps.index],
  group4: [onBoardingStepsV2.WorkGapsReason.index, onBoardingStepsV2.SoftSkillsCompetency.index],
  group5: [onBoardingStepsV2.SchoolEnrolled.index],
  group6: [onBoardingStepsV2.CollegeGraduate.index],
  group7: [onBoardingStepsV2.CurrentEducationLevel.index, onBoardingStepsV2.SoftSkillsCompetency.index],
  group8: [onBoardingStepsV2.RecentGradSchool.index],
  group9: [onBoardingStepsV2.RecentGradCollege.index, onBoardingStepsV2.RecentGradFieldDegree.index, onBoardingStepsV2.SoftSkillsCompetency.index],
  group10: [onBoardingStepsV2.SoftSkillsCompetency.index, onBoardingStepsV2.KeyTheme.index],
  group11: [onBoardingStepsV2.CollegeFieldDegree.index, onBoardingStepsV2.SoftSkillsCompetency.index],
  group12: [
  // onBoardingStepsV2.SignatureOverview.index,
  onBoardingStepsV2.SignatureView.index, onBoardingStepsV2.Exit.index]
};

var docPreference = exports.docPreference = [{
  docPreferenceTypeCD: "JBTL",
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.occupations,
  value: ""
}, {
  docPreferenceTypeCD: "CMPN",
  value: ""
}, {
  docPreferenceTypeCD: "SFS1",
  value: ""
}, {
  docPreferenceTypeCD: "SFS2",
  value: ""
}, {
  docPreferenceTypeCD: "SFS3",
  value: ""
}, {
  docPreferenceTypeCD: "SKL1",
  value: ""
}, {
  docPreferenceTypeCD: "SKL2",
  value: ""
}, {
  docPreferenceTypeCD: "SKL3",
  value: ""
}, {
  docPreferenceTypeCD: "SCTP",
  value: ""
}, {
  docPreferenceTypeCD: "SCNM",
  value: ""
}, {
  docPreferenceTypeCD: "DGRE",
  value: ""
}, {
  docPreferenceTypeCD: "FLST",
  value: ""
}, {
  docPreferenceTypeCD: "EXPN",
  value: ""
}, {
  docPreferenceTypeCD: "PVJT",
  value: ""
}, {
  docPreferenceTypeCD: "THME",
  value: ""
}, {
  docPreferenceTypeCD: "HSTE",
  value: ""
}, {
  docPreferenceTypeCD: "NMOP",
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.enrolledInSchool,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.CollegeGraduate,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.WorkGaps,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.WorkGapsReason,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.covid,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.previousCompany,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.openerTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.bodyTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.gapsTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.callToActionTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.openerTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.closerTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.bodyTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.gapsTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.callToActionTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.subjectTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.greetingTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.confidentialityTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.salaryRequirementTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.availablityTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.relocationTTC,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.greetingTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.subjectTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.availablityTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.relocationTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.salaryRequirementTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.confidentialityTTCList,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.bodyTTCObj,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.gapsTTCObj,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.callToActionTTCObj,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.openerTTCObj,
  value: ""
}, {
  docPreferenceTypeCD: userPreferenceKeys.closerTTCObj,
  value: ""
}];

//These sections has to be included in Letter Type Preview Pop up
var ltrPreviewIncludedSecArr = exports.ltrPreviewIncludedSecArr = [_helper.TypeCodes.sectionTypeCd.Greetings, _helper.TypeCodes.sectionTypeCd.Opener, _helper.TypeCodes.sectionTypeCd.Body, _helper.TypeCodes.sectionTypeCd.CallToAction, _helper.TypeCodes.sectionTypeCd.Closer];

var autoCompleteType = exports.autoCompleteType = {
  CITY: _helper.TypeCodes.autoSuggestType.city,
  COMP: _helper.TypeCodes.autoSuggestType.companywithoutids,
  jobs: _helper.TypeCodes.autoSuggestType.jobtitlewithoutids,
  schools: _helper.TypeCodes.autoSuggestType.school,
  degrees: _helper.TypeCodes.autoSuggestType.degrees,
  fieldofstudy: _helper.TypeCodes.autoSuggestType.fieldofstudy,
  email: _helper.TypeCodes.autoSuggestType.email,
  jobTitleGender: _helper.TypeCodes.autoSuggestType.jobtitle
};

//This is temporary for MPCL AB test, if it will be baselined, new templates will be created.
var customTemplateTags = exports.customTemplateTags = {
  tag_number_1: "<span style=\\\\\"color:#FF6600\\\\\">\\[Number]</span>",
  tag_number_2: "<span style=\\\\\"color: #FF6600\\\\\">\\[Number]</span>",
  tag_number_3: "<span style=\\\\\"color: #FF6600\\\\\"> \\[number] </span>",
  tag_number_4: "<span style=\\\\\"color: #FF6600\\\\\"> \\[Number] </span>",
  tag_number_5: "with <span style=\\\\\"color: #FF6600\\\\\">\\[Number]</span>",
  tag_number_6: "offer <span style=\\\\\"color: #FF6600\\\\\">\\[Number]</span>",
  tag_position_1: "<span style=\\\\\"color:#FF6600\\\\\">\\[Position]</span>",
  tag_position_2: "for <span style=\\\\\"color: #FF6600\\\\\">\\[Position]</span>",
  tag_position_3: "<span style=\\\\\"color: #FF6600\\\\\">\\[Position]</span>",
  tag_position_4: "as <span style=\\\\\"color: #FF6600\\\\\">\\[Position]</span>",
  tag_position_5: "<span style=\\\\\"color: #FF6600\\\\\"> \\[Position] </span>",
  tag_position_6: "new <span style=\\\\\"color: #FF6600\\\\\">\\[Position]</span>",
  tag_position_7: "the <span style=\\\\\"color: #FF6600\\\\\">\\[Position]</span>",
  tag_position_8: "as <span style=\\\\\"color: #FF6600\\\\\"> \\[Position] </span>",
  tag_position_9: "<span style=\\\\\"color: #FF6600\\\\\"> \\[Position Title] </span>",
  tag_position_10: "<span style=\\\\\"color: #FF6600\\\\\">\\[Position Title]</span>",
  tag_jobTitle_1: "<span style=\\\\\"color: #FF6600\\\\\">\\[Job Title]</span>",
  tag_jobTitle_2: "<span style=\\\\\"color: #FF6600\\\\\"> \\[Job Title] </span>",
  tag_jobTitle_3: "<span style=\\\\\"color: #FF6600\\\\\"> \\[Job TItle]</span>",
  tag_jobTitle_4: "As a <span style=\\\\\"color: #FF6600\\\\\">\\[Job Title]</span>",
  tag_jobTitle_5: "<span style=\\\\\"color:#FF6600\\\\\">\\[Job Title]</span>",
  tag_jobTitle_6: "next <span style=\\\\\"color: #FF6600\\\\\">\\[Job Title]</span>",
  tag_prevJobTitle_1: "<span style=\\\\\"color: #FF6600\\\\\"> \\[Previous Job Title]</span>",
  tag_company_1: "<span\\\\n\\\\n      style=\\\\\"color:#FF6600\\\\\">\\[Company Name]</span>",
  tag_company_2: "<span style=\\\\\"color:#FF6600\\\\\">\\[Company Name]</span>",
  tag_company_3: "<span style=\\\\\"color: #FF6600\\\\\">\\[Company Name]</span>",
  tag_company_4: "at <span style=\\\\\"color: #FF6600\\\\\">\\[Company Name]</span>",
  tag_company_5: "with <span style=\\\\\"color: #FF6600\\\\\">\\[Company Name]</span>",
  tag_company_6: "to <span style=\\\\\"color: #FF6600\\\\\">\\[Company Name]</span>",
  tag_company_7: "help <span style=\\\\\"color: #FF6600\\\\\">\\[Company Name]</span>",
  tag_degree_1: "<span style=\\\\\"color: #FF6600\\\\\">\\[Degree]</span>",
  tag_degree_2: "<span style=\\\\\"color: #FF6600\\\\\"> \\[Degree]</span>",
  tag_school_1: "<span style=\\\\\"color: #FF6600\\\\\">\\[School Name]</span>",
  tag_school_2: "asset to <span style=\\\\\"color: #FF6600\\\\\">\\[School Name]</span>",
  tag_school_3: "<span style=\\\\\"color: #FF6600\\\\\"> \\[School Name] </span>",
  tag_skill_1: "<span style=\\\\\"color: #FF6600\\\\\">\\[enter other relevant skills]</span>",
  tag_skill_2: "<span style=\\\\\"color: #FF6600\\\\\">\\[enter job-related skill]</span>",
  tag_skill_3: "<span style=\\\\\"color: #FF6600\\\\\">\\[enter relevant skill]</span>",
  tag_skill_4: "<span style=\\\\\"color: #FF6600\\\\\">\\[enter job-related skills]</span>",
  tag_skill_5: "<span style=\\\\\"color:#FF6600\\\\\">\\[enter relevant skill]</span>",
  tag_skill_6: "<span style=\\\\\"color:#FF6600\\\\\">\\[Enter job-related skill]</span>",
  tag_skill_7: "<span style=\\\\\"color: #FF6600\\\\\">\\[enter relevant skills]</span>",
  tag_skill_8: "<span style=\\\\\"color: #FF6600\\\\\">\\[enter core job responsibility]</span>",
  tag_skill_9: "<span style=\\\\\"color: #FF6600\\\\\">\\[job related skill or accomplishment]</span>",
  tag_skill_10: "<span style=\\\\\"color: #FF6600\\\\\"> \\[enter job-related skills or achievements] </span>",
  tag_skill_11: "<span style=\\\\\"color: #FF6600\\\\\">\\[enter job-related skill or accomplishment]</span>",
  tag_skill_12: "<span style=\\\\\"color: #FF6600;margin-left:1%;\\\\\">\\[Enter job-related skill or" + " accomplishment]</span>",
  tag_skill_13: "<span style=\\\\\"color: #FF6600\\\\\">\\[enter area of expertise]</span>",
  tag_skill_14: "<span style=\\\\\"color: #FF6600\\\\\"> \\" + "[ enter job-related skill or accomplishment]</span>",
  tag_skill_15: "<span style=\\\\\"color: #FF6600\\\\\">\\[enter relevant job-related skill]</span>",
  tag_dental_1: "<span style=\\\\\"color: #FF6600\\\\\">\\[Dental Practice Name]</span>",
  tag_dental_2: "<span style=\\\\\"color: #FF6600\\\\\">\\[Dental Program Name]</span>",
  tag_hospital_1: "<span style=\\\\\"color: #FF6600\\\\\">\\[Hospital/Care Facility Name]</span>",
  tag_faculty_1: "<span style=\\\\\"color: #FF6600\\\\\">\\[Facility Name]</span>"
};

var sliderLabels = exports.sliderLabels = { 0: '0', 1: '1', 2: '2', 3: '3', 4: '4', 5: '5', 6: '6', 7: '7', 8: '8', 9: '9', 10: '10+' };

var emailFormats = exports.emailFormats = [{ format: _helper.TypeCodes.documentFormat.AdobePDF, label: window.RDL.Localization.lbl_Adobe, defaultChecked: true }, { format: _helper.TypeCodes.documentFormat.DOCX, label: window.RDL.Localization.lbl_Word, defaultChecked: false }, { format: _helper.TypeCodes.documentFormat.PlainText, label: window.RDL.Localization.lbl_PlainText, defaultChecked: false }];

var sectionHoverProp = exports.sectionHoverProp = {
  wrapHoverLeft: 10,
  wrapHoverRight: 10,
  iconHoverRight: RDL.currentPortalDetails.iconHoverRightValue && (RDL.currentPortalDetails.iconHoverRightValue != "" || RDL.currentPortalDetails.iconHoverRightValue != null) ? RDL.currentPortalDetails.iconHoverRightValue : 10,
  sectionTitleLeft: 10
};
var sectionHoverStyleJT = exports.sectionHoverStyleJT = {
  wrapHoverLeft: 4,
  wrapHoverRight: 4,
  iconHoverRight: 5,
  sectionTitleLeft: 4
};

var fixedSections = exports.fixedSections = {
  fixedAtTop: [_helper.TypeCodes.sectionTypeCd.Name, _helper.TypeCodes.sectionTypeCd.Contact, _helper.TypeCodes.sectionTypeCd.CProfile, _helper.TypeCodes.sectionTypeCd.NameContact],
  fixedAtBottom: [_helper.TypeCodes.sectionTypeCd.Closer, _helper.TypeCodes.sectionTypeCd.Signature]
};

var letterZoomTypes = exports.letterZoomTypes = {
  fitWidth: { type: "fit-width", scale: null, label: window.RDL.Localization.lbl_fitWidth },
  actualSize: { type: "actual-size", scale: 1, label: window.RDL.Localization.lbl_actualSize },
  zoom1: { type: "zoom1", scale: 1.5, label: "150%" },
  zoom2: { type: "zoom2", scale: 2, label: "200%" }
};

var BuilderBasedTTCAutoPopulateObjArr = exports.BuilderBasedTTCAutoPopulateObjArr = [{
  tag: "[" + window.RDL.Localization.lbl_targetJobTitle + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_targetJobTitle,
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tag: "[" + window.RDL.Localization.lbl_targetCompany + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_targetCompany,
  mappedKey: dataObjMappingKeys.companyName
}, {
  tag: "[" + window.RDL.Localization.lbl_previous_JobTitle + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_previous_JobTitle,
  mappedKey: dataObjMappingKeys.previousJobTitle
}, {
  tag: window.RDL.Localization.lbl_skill1 ? "[" + window.RDL.Localization.lbl_skill1 + "]" : "[Skill 1]",
  tagWithoutBracket: window.RDL.Localization.lbl_skill1 || "Skill 1",
  mappedKey: dataObjMappingKeys.skill1,
  isToLowerCase: !window.RDL.prflEnabled ? true : false
}, {
  tag: window.RDL.Localization.lbl_skill2 ? "[" + window.RDL.Localization.lbl_skill2 + "]" : "[Skill 2]",
  tagWithoutBracket: window.RDL.Localization.lbl_skill2 || "Skill 2",
  mappedKey: dataObjMappingKeys.skill2,
  isToLowerCase: !window.RDL.prflEnabled ? true : false
}, {
  tag: window.RDL.Localization.lbl_skill3 ? "[" + window.RDL.Localization.lbl_skill3 + "]" : "[Skill 3]",
  tagWithoutBracket: window.RDL.Localization.lbl_skill3 || "Skill 3",
  mappedKey: dataObjMappingKeys.skill3,
  isToLowerCase: !window.RDL.prflEnabled ? true : false
}, {
  tag: "[" + window.RDL.Localization.lbl_number + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_number,
  mappedKey: dataObjMappingKeys.experience
}, {
  tag: window.RDL.Localization.lbl_previous_company ? "[" + window.RDL.Localization.lbl_previous_company + "]" : "[Previous Employer Name]",
  tagWithoutBracket: window.RDL.Localization.lbl_previous_company || "Previous Employer Name",
  mappedKey: dataObjMappingKeys.previousCompanyName
}, {
  tag: "[" + window.RDL.Localization.lbl_jobTitle + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_jobTitle,
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tag: "[" + window.RDL.Localization.lbl_schoolName + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_schoolName,
  mappedKey: dataObjMappingKeys.schoolName
}, {
  tag: "[" + window.RDL.Localization.lbl_degree + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_degree,
  mappedKey: dataObjMappingKeys.degree
}, {
  tag: "[" + window.RDL.Localization.lbl_field_OfStudy + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_field_OfStudy,
  mappedKey: dataObjMappingKeys.fieldOfStudy
}, {
  tag: "[" + window.RDL.Localization.lbl_areaOfStudy + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_areaOfStudy,
  mappedKey: dataObjMappingKeys.fieldOfStudy
}, {
  tag: "[" + window.RDL.Localization.lbl_yourFirstName + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_yourFirstName,
  mappedKey: "fName"
}, {
  tag: "[" + window.RDL.Localization.lbl_yourLastName + "]",
  tagWithoutBracket: window.RDL.Localization.lbl_yourLastName,
  mappedKey: "lName"
}];

var TTCAutoPopulateObjArr = exports.TTCAutoPopulateObjArr = [

//First Name
{
  tagWithText: "[Your First Name]",
  tag: "[Your First Name]",
  mappedKey: dataObjMappingKeys.FirstName
},

//Last Name
{
  tagWithText: "[Your Last Name]",
  tag: "[Your Last Name]",
  mappedKey: dataObjMappingKeys.LastName
},

//Previous Job Title
{
  tagWithText: "As a [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.previousJobTitle
}, {
  tagWithText: "As a [job title]",
  tag: "[job title]",
  mappedKey: dataObjMappingKeys.previousJobTitle
}, {
  tagWithText: "As [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.previousJobTitle
}, {
  tagWithText: "as a [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.previousJobTitle
}, {
  tagWithText: "as [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.previousJobTitle
}, {
  tagWithText: "as a [job title]",
  tag: "[job title]",
  mappedKey: dataObjMappingKeys.previousJobTitle
}, {
  tagWithText: "[Previous Job Title]",
  tag: "[Previous Job Title]",
  mappedKey: dataObjMappingKeys.previousJobTitle
},

//Degree
{
  tagWithText: "[degree]",
  tag: "[degree]",
  mappedKey: dataObjMappingKeys.degree
}, {
  tagWithText: "[Degree]",
  tag: "[Degree]",
  mappedKey: dataObjMappingKeys.degree
},

//FieldOfStudy
{
  tagWithText: "[major]",
  tag: "[major]",
  mappedKey: dataObjMappingKeys.fieldOfStudy
}, {
  tagWithText: "[Major]",
  tag: "[Major]",
  mappedKey: dataObjMappingKeys.fieldOfStudy
},

//Target Job Title
{
  tagWithText: "new [Target Job Title]",
  tag: "[Target Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "experienced [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "successful [job title]",
  tag: "[job title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "training as [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "for [job title]",
  tag: "[job title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "of [job title]",
  tag: "[job title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "for a [job title]",
  tag: "[job title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "for a [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "RE: [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "open [job title]",
  tag: "[job title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "for [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "Accomplished [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "Experienced [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "Hard-Working [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "Outstanding [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
}, {
  tagWithText: "Next [Job Title]",
  tag: "[Job Title]",
  mappedKey: dataObjMappingKeys.jobTitle
},

//Target Company
{
  tagWithText: "for [Company Name]",
  tag: "[Company Name]",
  mappedKey: dataObjMappingKeys.companyName,
  mustHaveText: "apply my training"
}, {
  tagWithText: "with [Company Name]",
  tag: "[Company Name]",
  mappedKey: dataObjMappingKeys.companyName
}, {
  tagWithText: "offer [company name]",
  tag: "[company name]",
  mappedKey: dataObjMappingKeys.companyName
}, {
  tagWithText: "benefit [company name]",
  tag: "[company name]",
  mappedKey: dataObjMappingKeys.companyName
}, {
  tagWithText: "If [Company Name]",
  tag: "[Company Name]",
  mappedKey: dataObjMappingKeys.companyName
}, {
  tagWithText: "to [company name]",
  tag: "[company name]",
  mappedKey: dataObjMappingKeys.companyName
}, {
  tagWithText: "[company name] needs",
  tag: "[company name]",
  mappedKey: dataObjMappingKeys.companyName
}, {
  tagWithText: "take [company name]",
  tag: "[company name]",
  mappedKey: dataObjMappingKeys.companyName
}, {
  tagWithText: "of [company name]",
  tag: "[company name]",
  mappedKey: dataObjMappingKeys.companyName
}, {
  tagWithText: "of the [company name]",
  tag: "[company name]",
  mappedKey: dataObjMappingKeys.companyName
}, {
  tagWithText: "[Target Company]",
  tag: "[Target Company]",
  mappedKey: dataObjMappingKeys.companyName
},

//Job Skill 1
{
  tagWithText: "[enter other relevant skills]",
  tag: "[enter other relevant skills]",
  mappedKey: dataObjMappingKeys.skill1
}, {
  tagWithText: "[enter relevant skill #1]",
  tag: "[enter relevant skill #1]",
  mappedKey: dataObjMappingKeys.skill1
}, {
  tagWithText: "[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]",
  tag: "[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]",
  mappedKey: dataObjMappingKeys.skill1,
  appendText: "</br>",
  mustHaveText: "<ul><li>[<FONT COLOR="
}, {
  tagWithText: "[Enter job-related skill or accomplishment]",
  tag: "[Enter job-related skill or accomplishment]",
  mappedKey: dataObjMappingKeys.skill1,
  appendText: "</br>",
  mustHaveText: "<ul><li>[Enter"
}, {
  tagWithText: "[Enter job-related skill or accomplishment]",
  tag: "[Enter job-related skill or accomplishment]",
  mappedKey: dataObjMappingKeys.skill1,
  appendText: "</br>",
  mustHaveText: ":[Enter"
}, {
  tagWithText: "[<del>Enter job-related skill or accomplishment</del>]",
  tag: "[<del>Enter job-related skill or accomplishment</del>]",
  mappedKey: dataObjMappingKeys.skill1,
  appendText: "</br>",
  mustHaveText: "[<del>Enter job-related skill or accomplishment</del>]" + "[<del>Enter job-related skill or accomplishment</del>]" + "[<del>Enter job-related skill or accomplishment</del>][<del>Enter job-related skill or accomplishment</del>]"
},

//Job Skill 2
{
  tagWithText: "[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]",
  tag: "[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]",
  mappedKey: dataObjMappingKeys.skill2,
  appendText: "</br>",
  mustHaveText: "<li>[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]</li>" + "<li>[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]</li>" + "<li>[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]</li>"
}, {
  tagWithText: "[Enter job-related skill or accomplishment]",
  tag: "[Enter job-related skill or accomplishment]",
  mappedKey: dataObjMappingKeys.skill2,
  appendText: "</br>",
  mustHaveText: "<li>[Enter job-related skill or accomplishment]</li>" + "<li>[Enter job-related skill or accomplishment]</li><li>[Enter job-related skill or accomplishment]</li>"
}, {
  tagWithText: "[Enter job-related skill or accomplishment]",
  tag: "[Enter job-related skill or accomplishment]",
  mappedKey: dataObjMappingKeys.skill2,
  appendText: "</br>",
  mustHaveText: "[Enter job-related skill or accomplishment][Enter job-related skill or accomplishment]" + "[Enter job-related skill or accomplishment]"
}, {
  tagWithText: "[<del>Enter job-related skill or accomplishment</del>]",
  tag: "[<del>Enter job-related skill or accomplishment</del>]",
  mappedKey: dataObjMappingKeys.skill2,
  appendText: "</br>",
  mustHaveText: "[<del>Enter job-related skill or accomplishment</del>]" + "[<del>Enter job-related skill or accomplishment</del>][<del>Enter job-related skill or accomplishment</del>]"
}, {
  tagWithText: "[enter relevant skill #2]",
  tag: "[enter relevant skill #2]",
  mappedKey: dataObjMappingKeys.skill2
},

//Job Skill 3
{
  tagWithText: "[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]",
  tag: "[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]",
  mappedKey: dataObjMappingKeys.skill3,
  appendText: "</br>",
  mustHaveText: "<li>[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]</li>" + "<li>[<FONT COLOR=\"#0000FF\">Enter job-related skill or accomplishment</FONT>]</li>"
}, {
  tagWithText: "[Enter job-related skill or accomplishment]",
  tag: "[Enter job-related skill or accomplishment]",
  mappedKey: dataObjMappingKeys.skill3,
  appendText: "</br>",
  mustHaveText: "<li>[Enter job-related skill or accomplishment]</li>" + "<li>[Enter job-related skill or accomplishment]</li>"
}, {
  tagWithText: "[Enter job-related skill or accomplishment]",
  tag: "[Enter job-related skill or accomplishment]",
  mappedKey: dataObjMappingKeys.skill3,
  appendText: "</br>",
  mustHaveText: "[Enter job-related skill or accomplishment][Enter job-related skill or accomplishment]",
  removeHtmlTags: "true"
}, {
  tagWithText: "[<del>Enter job-related skill or accomplishment</del>]",
  tag: "[<del>Enter job-related skill or accomplishment</del>]",
  mappedKey: dataObjMappingKeys.skill3,
  appendText: "</br>",
  mustHaveText: "[<del>Enter job-related skill or accomplishment</del>]" + "[<del>Enter job-related skill or accomplishment</del>]",
  removeHtmlTags: "true"
}];

var CLUserActions = exports.CLUserActions = {
  documentCreated: "document_created",
  documentUpdated: "document_updated"
};

var TemplateTypes = exports.TemplateTypes = [{
  id: "linkPopular",
  templateTypeId: 0,
  text: window.RDL.Localization.lbl_choose_template_popular
}, {
  id: "linkProfessional",
  templateTypeId: 1,
  text: window.RDL.Localization.lbl_choose_template_professional
}, {
  id: "linkUnique",
  templateTypeId: 2,
  text: window.RDL.Localization.lbl_choose_template_unique
}, {
  id: "linkModern",
  templateTypeId: 3,
  text: window.RDL.Localization.lbl_choose_template_modern
}];

var customSectionsTypeCdArr = exports.customSectionsTypeCdArr = [_helper.TypeCodes.sectionTypeCd.Availablity, _helper.TypeCodes.sectionTypeCd.Confidentiality, _helper.TypeCodes.sectionTypeCd.Gaps, _helper.TypeCodes.sectionTypeCd.SalaryRuquirements, _helper.TypeCodes.sectionTypeCd.Relocation];

var themeChange = exports.themeChange = {
  workingStyle: 'THME',
  workExperience: 'EXPN'
};

var reInitProperties = exports.reInitProperties = function reInitProperties() {
  city.labelName = window.RDL.Localization.lbl_city;
  state.labelName = window.RDL.Localization.lbl_state;
  zip.labelName = window.RDL.Localization.lbl_zip;
};

var bannerClick = exports.bannerClick = {
  onboardingBannerClick: 1, //either received covid=1 querystring or user explicitly clicked on banner
  editorBannerClick: 2, //user explicitly clicked on banner
  editorBannerClose: 3, //user explicitly closed the banner
  onboardingBannerClose: 4, //user explicitly closed the banner on onboarding
  editorBannerHidden: 5 //hidden because of gaps explicitly added by user on editor
};

var bannerTypes = exports.bannerTypes = {
  covid19Banner: 'covid19Banner'
};

var companyLocation = exports.companyLocation = {
  name: _helper.TypeCodes.fieldCd.CompanyLocation,
  labelName: window.RDL.Localization.lbl_companyLocation,
  errorMessage: window.RDL.Localization.lbl_enterValidCompayLocation,
  placeholder: window.RDL.Localization.lbl_companyPlaceholderText,
  showError: false,
  maxLength: 100,
  value: '',
  regex: ''
};

var employmentPosition = exports.employmentPosition = {
  name: _helper.TypeCodes.fieldCd.EmploymentStatus,
  labelName: window.RDL.Localization.lbl_recipientPosition,
  errorMessage: window.RDL.Localization.lbl_enterValidrecipientPosition,
  placeholder: window.RDL.Localization.lbl_recipientPositionPlaceholderText,
  showError: false,
  maxLength: 100,
  value: '',
  regex: ''
};

var letterTypes = exports.letterTypes = {
  blank: 51
};

var onboardingQSStepMapping = exports.onboardingQSStepMapping = [{
  QSKey: QueryStringParams.jobTitle,
  stepIndex: onBoardingStepsV2.JobTitle.index,
  fieldMapKey: dataObjMappingKeys.jobTitle,
  isSanitize: window.RDL.sanitizeOBFieldsQSVal,
  getMatchedSuggestedVal: function getMatchedSuggestedVal(commonActionsWrapper, obj, fieldKey, enterBuilderProps) {
    return commonActionsWrapper.getJobsAutoPopulated(obj[fieldKey]).then(function (resp) {
      if (resp && resp.length > 0) {
        var val = resp[0].selectedValue;
        obj[fieldKey] = val;
        enterBuilderProps[eventPropsKeys.futureJobTitle] = val;
      }
    });
  },
  customizeValAndSetEnteredBuilderProps: function customizeValAndSetEnteredBuilderProps(val, enterBuilderProps) {
    if (val == -1) {
      val = "";
      enterBuilderProps[eventPropsKeys.noJobInMind] = true;
    }
    enterBuilderProps[eventPropsKeys.futureJobTitle] = val;
    return val;
  }
}, {
  QSKey: QueryStringParams.employer,
  stepIndex: onBoardingStepsV2.Company.index,
  fieldMapKey: dataObjMappingKeys.companyName,
  isSanitize: window.RDL.sanitizeOBFieldsQSVal,
  isAutoSelectFromSuggestion: true,
  getMatchedSuggestedVal: function getMatchedSuggestedVal(commonActionsWrapper, obj, fieldKey, enterBuilderProps) {
    return commonActionsWrapper.getCompanyAutoPopulated(RDL.countryDetails.countryCode, obj[fieldKey]).then(function (resp) {
      if (resp && resp.length > 0) {
        var val = resp[0].selectedValue;
        obj[fieldKey] = val;
        enterBuilderProps[eventPropsKeys.futureCompanyName] = val;
      }
    });
  },
  customizeValAndSetEnteredBuilderProps: function customizeValAndSetEnteredBuilderProps(val, enterBuilderProps) {
    if (val == -1) {
      val = "";
      enterBuilderProps[eventPropsKeys.noCompInMind] = true;
    }
    enterBuilderProps[eventPropsKeys.futureCompanyName] = val;
    return val;
  }
}, {
  QSKey: QueryStringParams.experience,
  stepIndex: onBoardingStepsV2.WorkExperience.index,
  fieldMapKey: dataObjMappingKeys.experience,
  customizeValAndSetEnteredBuilderProps: function customizeValAndSetEnteredBuilderProps(val, enterBuilderProps) {
    enterBuilderProps[eventPropsKeys.yrsOfExp] = val;
    return val;
  }
}, {
  QSKey: QueryStringParams.covid,
  fieldMapKey: dataObjMappingKeys.covid,
  customizeValAndSetEnteredBuilderProps: function customizeValAndSetEnteredBuilderProps() {
    return bannerClick.onboardingBannerClick;
  }
}, {
  QSKey: QueryStringParams.skincd,
  fieldMapKey: dataObjMappingKeys.selectedSkinCD,
  stepIndex: onBoardingStepsV2.ChooseTemplate.index,
  isSkip: function isSkip(skinCD) {
    return (0, _CommonUtils.isValidSkin)(skinCD);
  },
  customizeValAndSetEnteredBuilderProps: function customizeValAndSetEnteredBuilderProps(skinCD) {
    return (0, _CommonUtils.isValidSkin)(skinCD) ? skinCD.toUpperCase() : "";
  }
}];

var exportOptions = exports.exportOptions = {
  Download: "Download",
  Email: "Email",
  Print: "Print"
};

var clickTypes = exports.clickTypes = {
  primary: 1,
  secondary: 2,
  close: 3
};

var chooseTemplateTemplateEnhancements = exports.chooseTemplateTemplateEnhancements = {
  TRA2: (_TRA = {}, _defineProperty(_TRA, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_TRA, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_TRA, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_TRA, _helper.TypeCodes.styleTypeCD.lineSpacing, 5), _TRA),
  TRA3: (_TRA2 = {}, _defineProperty(_TRA2, _helper.TypeCodes.styleTypeCD.fontSize, 12), _defineProperty(_TRA2, _helper.TypeCodes.styleTypeCD.topBottomMargins, 25), _defineProperty(_TRA2, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_TRA2, _helper.TypeCodes.styleTypeCD.sectionSpacing, 8), _defineProperty(_TRA2, _helper.TypeCodes.styleTypeCD.lineSpacing, 4), _TRA2),
  SPS1: (_SPS = {}, _defineProperty(_SPS, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_SPS, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_SPS, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _defineProperty(_SPS, _helper.TypeCodes.styleTypeCD.fontSize, 11), _SPS),
  MOD4: (_MOD = {}, _defineProperty(_MOD, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_MOD, _helper.TypeCodes.styleTypeCD.topBottomMargins, 15), _defineProperty(_MOD, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_MOD, _helper.TypeCodes.styleTypeCD.sectionSpacing, 8), _defineProperty(_MOD, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _defineProperty(_MOD, _helper.TypeCodes.styleTypeCD.lineWeight, 1), _MOD),
  TRA4: (_TRA3 = {}, _defineProperty(_TRA3, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_TRA3, _helper.TypeCodes.styleTypeCD.topBottomMargins, 25), _defineProperty(_TRA3, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_TRA3, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_TRA3, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _TRA3),
  SPS2: (_SPS2 = {}, _defineProperty(_SPS2, _helper.TypeCodes.styleTypeCD.topBottomMargins, 25), _defineProperty(_SPS2, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_SPS2, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_SPS2, _helper.TypeCodes.styleTypeCD.lineSpacing, 4), _defineProperty(_SPS2, _helper.TypeCodes.styleTypeCD.lineWeight, 0), _SPS2),
  TRA1: (_TRA4 = {}, _defineProperty(_TRA4, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_TRA4, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_TRA4, _helper.TypeCodes.styleTypeCD.lineSpacing, 5), _defineProperty(_TRA4, _helper.TypeCodes.styleTypeCD.lineWeight, 1), _TRA4),
  MOD3: (_MOD2 = {}, _defineProperty(_MOD2, _helper.TypeCodes.styleTypeCD.topBottomMargins, 20), _defineProperty(_MOD2, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_MOD2, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_MOD2, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _MOD2),
  CNT5: (_CNT = {}, _defineProperty(_CNT, _helper.TypeCodes.styleTypeCD.topBottomMargins, 15), _defineProperty(_CNT, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_CNT, _helper.TypeCodes.styleTypeCD.sectionSpacing, 10), _defineProperty(_CNT, _helper.TypeCodes.styleTypeCD.lineSpacing, 4), _defineProperty(_CNT, _helper.TypeCodes.styleTypeCD.fontSize, 10), _CNT),
  RBN1: (_RBN = {}, _defineProperty(_RBN, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_RBN, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_RBN, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_RBN, _helper.TypeCodes.styleTypeCD.lineSpacing, 5), _RBN),
  MOD5: (_MOD3 = {}, _defineProperty(_MOD3, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_MOD3, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_MOD3, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_MOD3, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _MOD3),
  CNT2: (_CNT2 = {}, _defineProperty(_CNT2, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_CNT2, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_CNT2, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_CNT2, _helper.TypeCodes.styleTypeCD.lineSpacing, 5), _CNT2),
  CNT4: (_CNT3 = {}, _defineProperty(_CNT3, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_CNT3, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_CNT3, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_CNT3, _helper.TypeCodes.styleTypeCD.lineSpacing, 5), _CNT3),
  EMP1: (_EMP = {}, _defineProperty(_EMP, _helper.TypeCodes.styleTypeCD.topBottomMargins, 15), _defineProperty(_EMP, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_EMP, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_EMP, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_EMP, _helper.TypeCodes.styleTypeCD.lineSpacing, 4), _EMP),
  EXC1: (_EXC = {}, _defineProperty(_EXC, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_EXC, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_EXC, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_EXC, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _EXC),
  PRO1: (_PRO = {}, _defineProperty(_PRO, _helper.TypeCodes.styleTypeCD.fontSize, 12), _defineProperty(_PRO, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_PRO, _helper.TypeCodes.styleTypeCD.lineSpacing, 3), _defineProperty(_PRO, _helper.TypeCodes.styleTypeCD.hMargin, 30), _PRO),
  CLE2: (_CLE = {}, _defineProperty(_CLE, _helper.TypeCodes.styleTypeCD.fontSize, 10), _defineProperty(_CLE, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_CLE, _helper.TypeCodes.styleTypeCD.lineSpacing, 5), _defineProperty(_CLE, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_CLE, _helper.TypeCodes.styleTypeCD.topBottomMargins, 15), _CLE),
  CLE1: (_CLE2 = {}, _defineProperty(_CLE2, _helper.TypeCodes.styleTypeCD.fontSize, 10), _defineProperty(_CLE2, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_CLE2, _helper.TypeCodes.styleTypeCD.lineSpacing, 5), _defineProperty(_CLE2, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_CLE2, _helper.TypeCodes.styleTypeCD.topBottomMargins, 20), _CLE2),
  CLD9: (_CLD = {}, _defineProperty(_CLD, _helper.TypeCodes.styleTypeCD.fontSize, 9), _defineProperty(_CLD, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_CLD, _helper.TypeCodes.styleTypeCD.topBottomMargins, 15), _defineProperty(_CLD, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_CLD, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _CLD),
  CLD6: (_CLD2 = {}, _defineProperty(_CLD2, _helper.TypeCodes.styleTypeCD.fontSize, 9), _defineProperty(_CLD2, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_CLD2, _helper.TypeCodes.styleTypeCD.sectionSpacing, 8), _defineProperty(_CLD2, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _CLD2),
  MOD6: (_MOD4 = {}, _defineProperty(_MOD4, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_MOD4, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_MOD4, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_MOD4, _helper.TypeCodes.styleTypeCD.lineSpacing, 5), _defineProperty(_MOD4, _helper.TypeCodes.styleTypeCD.topBottomMargins, 15), _MOD4),
  CLD4: (_CLD3 = {}, _defineProperty(_CLD3, _helper.TypeCodes.styleTypeCD.fontSize, 10), _defineProperty(_CLD3, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_CLD3, _helper.TypeCodes.styleTypeCD.sectionSpacing, 8), _defineProperty(_CLD3, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _CLD3),
  CLD3: (_CLD4 = {}, _defineProperty(_CLD4, _helper.TypeCodes.styleTypeCD.fontSize, 10), _defineProperty(_CLD4, _helper.TypeCodes.styleTypeCD.hMargin, 20), _defineProperty(_CLD4, _helper.TypeCodes.styleTypeCD.sectionSpacing, 5), _defineProperty(_CLD4, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _CLD4),
  CLD8: (_CLD5 = {}, _defineProperty(_CLD5, _helper.TypeCodes.styleTypeCD.fontSize, 9), _defineProperty(_CLD5, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_CLD5, _helper.TypeCodes.styleTypeCD.sectionSpacing, 5), _defineProperty(_CLD5, _helper.TypeCodes.styleTypeCD.lineSpacing, 5), _CLD5),
  CTP2: (_CTP = {}, _defineProperty(_CTP, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_CTP, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_CTP, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_CTP, _helper.TypeCodes.styleTypeCD.lineSpacing, 4), _defineProperty(_CTP, _helper.TypeCodes.styleTypeCD.topBottomMargins, 15), _CTP),
  EMP3: (_EMP2 = {}, _defineProperty(_EMP2, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_EMP2, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_EMP2, _helper.TypeCodes.styleTypeCD.sectionSpacing, 7), _defineProperty(_EMP2, _helper.TypeCodes.styleTypeCD.lineSpacing, 4), _defineProperty(_EMP2, _helper.TypeCodes.styleTypeCD.topBottomMargins, 15), _EMP2),
  CLD7: (_CLD6 = {}, _defineProperty(_CLD6, _helper.TypeCodes.styleTypeCD.fontSize, 10), _defineProperty(_CLD6, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_CLD6, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_CLD6, _helper.TypeCodes.styleTypeCD.lineSpacing, 7), _CLD6),
  EMP2: (_EMP3 = {}, _defineProperty(_EMP3, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_EMP3, _helper.TypeCodes.styleTypeCD.hMargin, 30), _defineProperty(_EMP3, _helper.TypeCodes.styleTypeCD.sectionSpacing, 6), _defineProperty(_EMP3, _helper.TypeCodes.styleTypeCD.lineSpacing, 4), _EMP3),
  CLD5: (_CLD7 = {}, _defineProperty(_CLD7, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_CLD7, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_CLD7, _helper.TypeCodes.styleTypeCD.sectionSpacing, 5), _defineProperty(_CLD7, _helper.TypeCodes.styleTypeCD.lineSpacing, 3), _defineProperty(_CLD7, _helper.TypeCodes.styleTypeCD.topBottomMargins, 10), _CLD7),
  MLE1: (_MLE = {}, _defineProperty(_MLE, _helper.TypeCodes.styleTypeCD.fontSize, 10), _defineProperty(_MLE, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_MLE, _helper.TypeCodes.styleTypeCD.sectionSpacing, 5), _defineProperty(_MLE, _helper.TypeCodes.styleTypeCD.lineSpacing, 4), _MLE)
};

var finalizePageEnhancementStyles = exports.finalizePageEnhancementStyles = {
  TRA2: (_TRA5 = {}, _defineProperty(_TRA5, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_TRA5, _helper.TypeCodes.styleTypeCD.hMargin, 35), _defineProperty(_TRA5, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_TRA5, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _TRA5),
  TRA3: (_TRA6 = {}, _defineProperty(_TRA6, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_TRA6, _helper.TypeCodes.styleTypeCD.topBottomMargins, 25), _defineProperty(_TRA6, _helper.TypeCodes.styleTypeCD.hMargin, 35), _defineProperty(_TRA6, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_TRA6, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _TRA6),
  SPS1: (_SPS3 = {}, _defineProperty(_SPS3, _helper.TypeCodes.styleTypeCD.hMargin, 35), _defineProperty(_SPS3, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_SPS3, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _defineProperty(_SPS3, _helper.TypeCodes.styleTypeCD.lineWeight, 1), _SPS3),
  MOD4: (_MOD5 = {}, _defineProperty(_MOD5, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_MOD5, _helper.TypeCodes.styleTypeCD.topBottomMargins, 25), _defineProperty(_MOD5, _helper.TypeCodes.styleTypeCD.hMargin, 35), _defineProperty(_MOD5, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_MOD5, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _defineProperty(_MOD5, _helper.TypeCodes.styleTypeCD.lineWeight, 1), _MOD5),
  TRA4: (_TRA7 = {}, _defineProperty(_TRA7, _helper.TypeCodes.styleTypeCD.fontSize, 11), _defineProperty(_TRA7, _helper.TypeCodes.styleTypeCD.topBottomMargins, 25), _defineProperty(_TRA7, _helper.TypeCodes.styleTypeCD.hMargin, 35), _defineProperty(_TRA7, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_TRA7, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _TRA7),
  SPS2: (_SPS4 = {}, _defineProperty(_SPS4, _helper.TypeCodes.styleTypeCD.topBottomMargins, 25), _defineProperty(_SPS4, _helper.TypeCodes.styleTypeCD.hMargin, 25), _defineProperty(_SPS4, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_SPS4, _helper.TypeCodes.styleTypeCD.lineSpacing, 4), _defineProperty(_SPS4, _helper.TypeCodes.styleTypeCD.lineWeight, 0), _SPS4),
  TRA1: (_TRA8 = {}, _defineProperty(_TRA8, _helper.TypeCodes.styleTypeCD.hMargin, 35), _defineProperty(_TRA8, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_TRA8, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _defineProperty(_TRA8, _helper.TypeCodes.styleTypeCD.lineWeight, 1), _TRA8),
  MOD3: (_MOD6 = {}, _defineProperty(_MOD6, _helper.TypeCodes.styleTypeCD.topBottomMargins, 25), _defineProperty(_MOD6, _helper.TypeCodes.styleTypeCD.hMargin, 35), _defineProperty(_MOD6, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_MOD6, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _MOD6),
  CNT5: (_CNT4 = {}, _defineProperty(_CNT4, _helper.TypeCodes.styleTypeCD.topBottomMargins, 25), _defineProperty(_CNT4, _helper.TypeCodes.styleTypeCD.hMargin, 35), _defineProperty(_CNT4, _helper.TypeCodes.styleTypeCD.sectionSpacing, 9), _defineProperty(_CNT4, _helper.TypeCodes.styleTypeCD.lineSpacing, 6), _defineProperty(_CNT4, _helper.TypeCodes.styleTypeCD.lineWeight, 1), _CNT4)
};

var rnSkins = exports.rnSkins = [{ "id": "CLE2", "skinCD": "CLE2", "textID": 148075, "name": "classic 5", "skinTypeCd": "CLE ", "minIndent": 0,
  "maxIndent": 0, "localizationKey": null, "blobUrl": "clb/common/svg-skins/modern6.svg",
  "isColored": true, "separatorSkin": true, "templateCategoryId": 1, "sequenceIndex": 5,
  "sectionsToExclude": ["NAME", "CNTC"], "addTemplateClass": true }, { "id": "CLD9", "skinCD": "CLD9", "textID": 148076, "name": "Blue Monogram",
  "skinTypeCd": "MOD ", "minIndent": 0, "maxIndent": 0, "localizationKey": null,
  "blobUrl": "clb/common/svg-skins/modern6.svg", "isColored": true, "separatorSkin": true,
  "templateCategoryId": 2, "sequenceIndex": 1, "sectionsToExclude": ["NAME", "CNTC"],
  "addTemplateClass": true, "exp": { "0-3": { "index": 11 }, "4-5": { "index": 3 },
    "6-10": { "index": 11 }, "10+": { "index": 11 } } }, { "id": "CLD6", "skinCD": "CLD6", "textID": 148077, "name": "Professional 3",
  "skinTypeCd": "MOD ", "minIndent": 0, "maxIndent": 0, "localizationKey": null,
  "blobUrl": "clb/common/svg-skins/modern6.svg", "isColored": true, "separatorSkin": true,
  "templateCategoryId": 2, "sequenceIndex": 2, "sectionsToExclude": ["NAME", "CNTC"],
  "isMonogram": true, "addTemplateClass": true, "exp": { "0-3": { "index": 6 },
    "6-10": { "index": 6 }, "10+": { "index": 2 } } }, { "id": "CLD4", "skinCD": "CLD4", "textID": 148034, "name": "Contemporary 2",
  "skinTypeCd": "CLD ", "minIndent": 0, "maxIndent": 0, "localizationKey": null,
  "blobUrl": "clb/common/svg-skins/contemporary2.svg", "isColored": true, "separatorSkin": true,
  "templateCategoryId": 3, "sequenceIndex": 1, "sectionsToExclude": ["NAME", "CNTC"],
  "addTemplateClass": true, "exp": { "0-3": { "index": 9 }, "4-5": { "index": 1 },
    "6-10": { "index": 9 }, "10+": { "index": 9 } } }, { "id": "CLD3", "skinCD": "CLD3", "textID": 148077, "name": "Modern 7", "skinTypeCd": "MOD ",
  "minIndent": 0, "maxIndent": 0, "localizationKey": null, "blobUrl": "clb/common/svg-skins/modern6.svg",
  "isColored": true, "separatorSkin": true, "templateCategoryId": 3, "sequenceIndex": 3,
  "sectionsToExclude": ["NAME", "CNTC"], "addTemplateClass": true }, { "id": "CLD8", "skinCD": "CLD8", "textID": 148033, "name": "Modern 8", "skinTypeCd": "CLD ",
  "minIndent": 0, "maxIndent": 0, "localizationKey": null, "blobUrl": "clb/common/svg-skins/modern8.svg",
  "isColored": true, "isColorHeader": true, "separatorSkin": true, "templateCategoryId": 2, "sequenceIndex": 3,
  "sectionsToExclude": ["NAME", "CNTC"], "addTemplateClass": true, "exp": { "0-3": { "index": 7 },
    "4-5": { "index": 11 }, "6-10": { "index": 7 }, "10+": { "index": 3 } } }, { "id": "CLD7", "skinCD": "CLD7", "textID": 148077, "name": "Classic 6", "skinTypeCd": "CLD ",
  "minIndent": 0, "maxIndent": 0, "localizationKey": null, "blobUrl": "clb/common/svg-skins/classic6.svg",
  "isColored": true, "separatorSkin": true, "templateCategoryId": 1, "sequenceIndex": 3,
  "sectionsToExclude": ["NAME", "CNTC"], "addTemplateClass": true, "exp": { "4-5": { "index": 9 } } }, { "id": "CLE1", "skinCD": "CLE1", "textID": 148076, "name": "Classic 4", "skinTypeCd": "MOD ",
  "minIndent": 0, "maxIndent": 0, "localizationKey": null, "blobUrl": "clb/common/svg-skins/classic4.svg",
  "isColored": true, "separatorSkin": true, "templateCategoryId": 1, "sequenceIndex": 2,
  "sectionsToExclude": ["NAME", "CNTC"], "addTemplateClass": true, "exp": { "0-3": { "index": 12 },
    "4-5": { "index": 4 }, "6-10": { "index": 12 }, "10+": { "index": 12 } } }, { "id": "CLD5", "skinCD": "CLD5", "textID": 148077, "name": "Simplify", "skinTypeCd": "MOD ",
  "minIndent": 0, "maxIndent": 0, "localizationKey": null, "blobUrl": "clb/common/svg-skins/modern6.svg",
  "isColored": true, "separatorSkin": true, "templateCategoryId": 2, "sequenceIndex": 7,
  "sectionsToExclude": ["NAME", "CNTC"], "addTemplateClass": true }, { "id": "MLE1", "skinCD": "MLE1", "name": "Multicolumn 3", "skinTypeCd": "MOD ", "minIndent": 0,
  "maxIndent": 0, "localizationKey": null, "blobUrl": "clb/common/svg-skins/multicolumn3.svg",
  "isColored": true, "separatorSkin": false, "templateCategoryId": 3, "sequenceIndex": 2,
  "sectionContainerIndex": 3, "addTemplateClass": true, "exp": { "4-5": { "index": 10 } } }];

var errorCodes = exports.errorCodes = {
  invalidUserIdErrorCode: "U048",
  noUserErrorCode: "U001",
  purgedUserCase: "401"
};

var transformedSkillVariance = exports.transformedSkillVariance = {
  empty: "",
  baseline: "baseline",
  transformedskill: "transformedskill"
};

var SignatureCategory = exports.SignatureCategory = {
  DRAW: "DRAW",
  TYPE: "TYPE",
  IMAGE: "IMAGE"
};

var registrationOnContactStatus = exports.registrationOnContactStatus = {
  completeNew: "complete-new",
  completeExisting: "compelete-existing",
  open: "open",
  skipped: "skipped"
};

var SIGNATURE_LOCALIZATION = exports.SIGNATURE_LOCALIZATION = {
  add_your_signature: RDL.Localization.sign_add_your_signature,
  you_will_able_to_change: RDL.Localization.sign_you_will_able_to_change,
  enter_signature: RDL.Localization.sign_enter_signature,
  clear_signature: RDL.Localization.sign_clear_signature,
  signature_type: RDL.Localization.sign_signature_type,
  signature_draw: RDL.Localization.sign_signature_draw,
  signature_upload: "", //RDL.Localization.sign_signature_upload,- to hide upload tab in signature view
  signature_chooseImage: RDL.Localization.sign_signature_chooseImage,
  signature_replaceImage: RDL.Localization.sign_signature_replaceImage,
  label_addLocation: RDL.Localization.sign_label_addLocation,
  label_alignment: RDL.Localization.sign_label_alignment,
  label_color: RDL.Localization.sign_label_color,
  clb_size_Text: RDL.Localization.sign_clb_size_Text,
  sign_label_contrast: RDL.Localization.sign_sign_label_contrast,
  signature_head: RDL.Localization.sign_signature_head,
  signature_subhead: RDL.Localization.sign_signature_subhead,
  firstNameLabelText: "", //RDL.Localization.sign_firstNameLabelText,
  lastNameLabelText: "", //RDL.Localization.sign_lastNameLabelText,
  sign_SecType_db: RDL.Localization.sign_sign_SecType_db,
  mpcl_Date_Text: RDL.Localization.sign_mpcl_Date_Text,
  mbe_Contact_Location_lbl: RDL.Localization.sign_mbe_Contact_Location_lbl,
  singature_type_label: RDL.Localization.sign_singature_type_label,
  photo_upload_title: RDL.Localization.sign_photo_upload_title,
  photo_upload_description: RDL.Localization.sign_photo_upload_description,
  photo_upload_btn_text: RDL.Localization.sign_photo_upload_btn_text,
  choose_picture_text: RDL.Localization.sign_choose_picture_text,
  image_size_text: RDL.Localization.sign_image_size_text,
  image_contrast_text: RDL.Localization.sign_image_contrast_text,
  choose_new_photo_text: RDL.Localization.sign_choose_new_photo_text,
  lbl_upload_drag_drop: RDL.Localization.lbl_upload_drag_drop,
  lbl_upload_browser_file: RDL.Localization.lbl_upload_browser_file,
  lbl_or: RDL.Localization.lbl_or,
  lbl_upload_signature_photo: RDL.Localization.lbl_upload_signature_photo,
  lbl_filesOnComputer: RDL.Localization.lbl_filesOnComputer,
  lbl_browse: RDL.Localization.lbl_browse

};

var commonBuilderKeys = exports.commonBuilderKeys = {
  recipientCompany: "company",
  recipientState: "state",
  recipientFirstName: "firstName",
  recipientLastName: "lastName",
  recipientZip: "zip",
  recipientCity: "city",
  recipientStreet: "street",
  addressEmail: "email",
  addressPhone: "secondaryphonenumber",
  addressState: "state",
  addressZip: "zip",
  addressCity: "city",
  addressStreet: "streetaddress"
};

var verticalProgressBarNodes = exports.verticalProgressBarNodes = {
  header: { id: 1, nodeValue: "progress-bar-header", label: window.RDL.Localization.lbl_header, isGuestOnly: true,
    initialSteps: [onBoardingStepsV2.CreateVsUpload.index, onBoardingStepsV2.Name.index] },
  opener: { id: 2, nodeValue: "progress-bar-opener", label: window.RDL.Localization.lbl_sectionList_name_OPEN,
    initialSteps: [onBoardingStepsV2.OpenerOverview.index] },
  body: { id: 3, nodeValue: "progress-bar-body", label: window.RDL.Localization.lbl_body_tip,
    initialSteps: [onBoardingStepsV2.BodyOverview.index] },
  gaps: { id: 4, nodeValue: "progress-bar-gaps", label: window.RDL.Localization.lbl_title_gapsTTc,
    initialSteps: [onBoardingStepsV2.GapsOverview.index] },
  closer: { id: 5, nodeValue: "progress-bar-closer", label: window.RDL.Localization.lbl_closerHeading,
    initialSteps: [onBoardingStepsV2.CloserOverview.index] },
  review: { id: 6, nodeValue: "progress-bar-review", label: window.RDL.Localization.lbl_title_uploadReview }
};

var imageDownloadOption = exports.imageDownloadOption = ['JPEG', 'SVG'];
var JobHierarchy = exports.JobHierarchy = {
  Student: "Student",
  EntryLevel: "Entry Level",
  Experienced: "Experienced"
};
var SocialProofContents = exports.SocialProofContents = [];

var HighlighterSections = exports.HighlighterSections = {
  'opener intro': { "topValue": "DATE", "sections": ["DATE", "SUBJ", "GRTG", "OPEN"] },
  'closer intro': { "topValue": "CTAC", "sections": ["CTAC", "CLSR"] },
  'body intro': { "topValue": "BODY", "sections": ["BODY"] }
};

/***/ }),
/* 7 */
/***/ (function(module, exports, __webpack_require__) {

module.exports=function(e){var t={};function n(a){if(t[a])return t[a].exports;var r=t[a]={i:a,l:!1,exports:{}};return e[a].call(r.exports,r,r.exports,n),r.l=!0,r.exports}return n.m=e,n.c=t,n.d=function(e,t,a){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:a})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=7)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.maxGraduationYearValue=t.educationDegreeValue=t.educationDegreeSelected=void 0;var a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var a in n)Object.prototype.hasOwnProperty.call(n,a)&&(e[a]=n[a])}return e};t.guid=g,t.isCurrentExperience=function(e,t,n){var a=["EXPR","EEXP","WRKH","MILI"];n&&""!=n&&a.splice(a.indexOf(n),1);for(var i=[],o=function(n){for(var o=void 0==e?null:e.filter(function(e){return e.sectionTypeCD==a[n]}),s=0;s<o.length;s++)o[s]&&o[s].paragraphs&&o[s].paragraphs.length>0&&o[s].paragraphs.map(function(e,n){if(e.id!=t){var a=e.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.JobEndDate});a&&a.length>0&&i.push(a[0].charValue)}})},s=0;s<a.length;s++)o(s);return!!(i&&i.length>0)&&i.some(function(e){return r.Current===e})},t.openCenteredWindow=S,t.printDocument=function(e,t,n,a,r,i,o){if(t){a&&n(e.User.UserUID,e.Document.id,r,"PDF","eXPT","RbtoHtml2","true","true").then(function(e){a.location=e})}else L(i,b(),o)},t.getWindowReference=function(){return S("",800,640,"location=No,scrollbars=Yes,toolbar=No,resizable=No,directories=No,status=No,menubar=No,hotkeys=No,center=Yes",!1,null)},t.getEmptySections=function(e){var t=[];e&&e.forEach(function(e){var n=!0,a=e.paragraphs;a&&a.forEach(function(e){var t=e.docDatas;t&&t.forEach(function(e){""!=e.charValue&&(n=!1)})}),n&&(e.sectionTypeCD==r.sectionTypeCd.Contact||e.sectionTypeCD==r.sectionTypeCd.Name?-1==t.findIndex(function(e){return"Contact"==e.name})&&t.push({name:"Contact",id:e.id}):t.push({name:e.name,id:e.id}))});return t},t.sideBarOpen=function(e,t,n){document.body.classList.add("sidebar-open"),1==n?(document.body.classList.add("sidebar-inner"),e&&document.body.classList.remove("sidebar-formatting")):e&&(document.body.classList.add("sidebar-inner"),document.body.classList.remove("sidebar-formatting"));t&&document.body.classList.add("sidebar-formatting")},t.sideBarClose=function(){document.body.classList.remove("sidebar-open"),document.body.classList.remove("sidebar-inner"),document.body.classList.remove("sidebar-formatting"),document.getElementsByClassName("js-navbar")[0]&&Array.from(document.getElementsByClassName("js-navbar")[0].children).forEach(function(e){e.classList.remove("active")})},t.getSectionByCD=function(e,t){return void 0==e?null:e.find(function(e){return e.sectionTypeCD==t})},t.isFRFM=function(e){return-1!=["SUBJ","GRTG","OPEN","BODY","CTAC","CLSR","AVLB","CNFD","GAPS","RELO","SLRQ","SUMM","AFIL","ACCM","ADDI","AWAR","CERT","CLNT","COMS","CUST","DISS","SKLL","EXCA","EXFU","INTR","KEYW","LANG","OBJC","PORT","PRES","PRIN","PUBL","REFE","CMSK","ORSK","JRSK","OTSK","PPDT"].indexOf(e)},t.isMultiPara=function(e){return-1!=["EXPR","EEXP","WRKH","MILI","TSKL","EDUC","MTLG","OTLG","ADIF"].indexOf(e)},t.sortByKey=function(e,t){return e.sort(function(e,n){var a=e[t],r=n[t];return a<r?-1:a>r?1:0})},t.getText=function(e){var t=document.createElement("div");return t.innerHTML=e,t.innerText},t.isNullOrWhitespace=h,t.cleanSpecialChars=function(e,t){var n=e;n=t?e?e.replace(/[^\w\s\-']/gi,"").replace(/[_]/gi,""):e:e?e.replace(/[^\w\s']/gi,"").replace(/[_]/gi,""):e;return n},t.getMonth=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=n&&n.shortMonths?n.shortMonths:["","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],r=n&&n.longMonths?n.longMonths:["","January","February","March","April","May","June","July","August","September","October","November","December"];return t?a[e]:r[e]},t.insertAt=m,t.getCharValue=D,t.OnParaSort=function(e,t,n){var a=Object.assign([],e.paragraphs);return(a=(0,o.arrayMove)(a,t,n)).forEach(function(e,t){e.index=t+1}),e.paragraphs=a,{section:e}},t.ResolveDependency=function(e,t,n){var a=this,r=e.querySelectorAll("[dependency]");Array.prototype.slice.call(r).forEach(function(e){for(var r=e.getAttribute("dependency"),i=r,o=r.split(/[|,+]+/),s="",l=0;l<o.length-1;l++)s+=")";for(var c=1;c<o.length-1;c++){var u=r.indexOf(o[c]);i=m.call(i,u+(c-1),"(")}s.length>0&&(i="("+i+s);for(var d=(r=i).replace(/[+]/g," && ").replace(/[|]/g," || "),p=0;p<o.length;p++)d=d.replace(o[p]," fieldVals['"+o[p]+"'] ");var f=Function("fieldVals","return "+d).call(a,t);f||(n?e.parentNode.removeChild(e):e.style.display="none")})},t.toggleActiveclass1=function(e,t){if(T(),1==t){var n=document.querySelectorAll(".sortable-item");if("mouseenter"==e.type){if(e.currentTarget.classList.add("active"),-1!=e.currentTarget.className.indexOf("paragraph-container")){var a=document.querySelectorAll(".section-container");Array.prototype.slice.call(a).forEach(function(e){-1==e.className.indexOf("sortable-group-item")&&e.classList.remove("active")})}}else"mouseleave"==e.type&&Array.prototype.slice.call(n).forEach(function(e){e.classList.remove("active")})}},t.toggleActiveclass=function(e,t,n){T();var a=null;n&&e.currentTarget&&e.currentTarget.className&&e.currentTarget.className.indexOf("paragraph-container")>-1&&(a=e.currentTarget.closest?e.currentTarget.closest(".section-container"):null);if(1==t){var r=document.querySelectorAll(".sortable-item");if("mouseenter"==e.type||isIPAD()&&"click"==e.type){var i=document.querySelectorAll(".section-container");Array.prototype.slice.call(i).forEach(function(e){e.classList.remove("active")}),e.currentTarget.classList.contains("SECTION_CNTC")||e.currentTarget.classList.contains("SECTION_NAME")?e.currentTarget.parentNode.classList.add("active"):e.currentTarget.classList.contains("section")?e.currentTarget.parentNode.parentNode.classList.add("active"):e.currentTarget.classList.add("active"),n&&a&&a.classList.add("has-active-para")}else"mouseleave"==e.type&&(Array.prototype.slice.call(r).forEach(function(e){e.classList.remove("active")}),n&&a&&a.classList.remove("has-active-para"))}},t.isFRFM_NoTTC=function(e){var t=["REFE","CUST","ADDI","LANG","INTR","PRIN","COMS","OBJC","AWAR","EXCA","PUBL","PRES","PORT","ESUM","CLNT","DISS","SKLL"];"LFR"==(arguments.length>1&&void 0!==arguments[1]?arguments[1]:"").toUpperCase()&&(t=["REFE","CUST","ADDI","LANG","PRIN","COMS","OBJC","AWAR","EXCA","PUBL","PRES","PORT","ESUM","CLNT","DISS","SKLL"]);return-1!=t.indexOf(e)},t.resetDefaultValues=function(e,t,n){var a=n(e),r=JSON.parse(JSON.stringify(t));return r.forEach(function(e){if("PGSZ"==e.styleTypeCD)e.value="Letter";else{var t=a.querySelector("[name= "+e.styleTypeCD+"]");t&&(e.value=t.getAttribute("content"))}}),r},t.overlayDynamicWidth=T,t.findAncestor=v,t.scrollAnimate=y,t.setContentInViewPort=function(e){var t=window.innerHeight,n=t-20*t/100,a=document.getElementsByClassName("editing-state-section")[0],r=document.getElementsByClassName("editing-state")[0],i=document.getElementsByClassName("DraftEditor-root")[0],o=(document.getElementsByTagName("html")[0],a||r);if(o&&!function(e){var t=e.offsetTop,n=e.offsetHeight;for(;e.offsetParent;)e=e.offsetParent,t+=e.offsetTop;return t>=window.pageYOffset+10*window.innerHeight/100&&t+n<=window.pageYOffset+window.innerHeight-10*window.innerHeight/100}(o)){var s=o.offsetHeight,l=P(o),c=0;c=s<n?l-10*t/100-(n-s)/2:e||i&&i.scrollTop<=250?l-15*t/100:l+s-30*t/100-n/2,y(document.scrollingElement||document.documentElement,c,300)}},t.checkElementinViewPort=function(e,t,n){var a=window.scrollY||window.pageYOffset,r=e.getBoundingClientRect().top+a,i={top:a+window.innerHeight*t/100,bottom:a+window.innerHeight-window.innerHeight*n/100},o={top:r,bottom:r+e.clientHeight};return o.bottom>=i.top&&o.bottom<=i.bottom||o.top<=i.bottom&&o.top>=i.top},t.getOffsetTop=P,t.isMaskedInput=function(e,t){return!!N(e,t)},t.isCountryUS=N,t.isCountryCA=function(e,t){return!(!e||"ca"!=e.toLowerCase()||t)},t.redirectToUrl=L,t.validateEmail=function(e){if(e){return/^[+a-zA-Z0-9._-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,4}$/.test(e)}return!1},t.isLoggedInUser=b,t.isLegacySection=function(e){return e==r.sectionTypeCd.FreeFormExprience||e==r.sectionTypeCd.SkillSKLL||e==r.sectionTypeCd.Keywords},t.updateExperimentIdAndVariation=function(e,t,n,a,r){!e||""!=a.experimentID&&""!=a.variation&&null!=a.experimentID&&null!=a.variation?""!=r.experimentID&&""!=r.variation&&null!=r.experimentID&&null!=r.variation||(r.experimentID=t,r.variation=n):(a.experimentID=t,a.variation=n)},t.getVisitedIndex=function(e){var t=-1;if(e&&e.preferences&&e.preferences.length>0){var n=e.preferences.findIndex(function(e){return"PREF"==e.docPreferenceTypeCD});n>-1&&(t=e.preferences[n].value)}return t},t.addVisitedIndexInPreference=function(e,t){return R(e,"PREF",t)},t.addDocumentPreference=R,t.showTipOnSection=function(e){return e==r.sectionTypeCd.Experience||e==r.sectionTypeCd.Education||e==r.sectionTypeCd.Skills||e==r.sectionTypeCd.Summary},t.getNameSectionVal=function(e){var t={fName:"",lName:""},n=e.sections.filter(function(e){return e.sectionTypeCD==r.sectionTypeCd.Name})[0];if(n&&n.paragraphs&&n.paragraphs.length&&n.paragraphs[0]){var a=n.paragraphs[0];t.fName=i.getValue(a.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.FirstName})[0]),t.lName=i.getValue(a.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.LastName})[0])}return t},t.getContactSectionVal=function(e){var t={email:"",phone:"",cellPhone:"",strt:"",city:"",state:"",zipc:""},n=e.sections.filter(function(e){return e.sectionTypeCD==r.sectionTypeCd.Contact})[0];if(n&&n.paragraphs&&n.paragraphs.length&&n.paragraphs[0]){var a=n.paragraphs[0];t.email=i.getValue(a.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.Email})[0]),t.phone=i.getValue(a.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.HomePhone})[0]),t.cellPhone=i.getValue(a.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.CellPhone})[0]),t.strt=i.getValue(a.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.Street})[0]),t.city=i.getValue(a.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.City})[0]),t.state=i.getValue(a.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.State})[0]),t.zipc=i.getValue(a.docDatas.filter(function(e){return e.fieldCD==r.fieldCd.ZipCode})[0])}return t},t.readCookie=E,t.createCookie=F,t.deleteCookie=function(e,t){var n="";t&&(n="; domain="+n);var a=new Date;a.setTime(a.getTime()-1);var r="; expires="+a.toGMTString();document.cookie=e+"=;"+r+n+"; path=/;"},t.deleteStorageValue=function(e){if(p)sessionStorage.removeItem(e);else{var t=E(e);if(t){var n=JSON.parse(t);delete n[e],F(e,JSON.stringify(n))}}},t.setStorageValue=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r.storageType.sessionStorage;switch(n){case r.storageType.localStorage:f?(t=JSON.stringify(t),localStorage.setItem(e,t)):M(e,t,n);break;case r.storageType.localforage:C?(t=JSON.stringify(t),localStorage.setItem(e,t)):M(e,t,n);break;case r.storageType.sessionStorage:p?(t=JSON.stringify(t),sessionStorage.setItem(e,t)):M(e,t,n)}},t.getStorageValue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:r.storageType.sessionStorage,n="";switch(t){case r.storageType.localStorage:f?(n=localStorage.getItem(e))&&(n=JSON.parse(n)):n=I(e,t);break;case r.storageType.localforage:if(C)return s.getItem(e);n=I(e,t);break;case r.storageType.sessionStorage:p?(n=sessionStorage.getItem(e))&&(n=JSON.parse(n)):n=I(e,t)}return n},t.convertToTitleCase=function(e,t,n){if(!e)return e;var i=[],o={degrees:{words:["of","in"]},fieldofstudy:{words:["of","in"]},school:{words:["of","in"]},city:{words:["of","in"]},jobtitle:{words:["a","an","the","and","but","or","for","nor","on","at","to","by","as","up","of","in","et","al"]}};o[r.fieldCd.JobTitle]={words:[].concat(d(o.jobtitle.words))},o[r.fieldCd.CDEGRE]={words:["of","in"]},o[r.fieldCd.FieldOfExpertise]={words:["of","in"]},o.SCHO={words:["of","in"]},o.scho={words:["of","in"]},n&&(o=a({},o,n));o[t]&&(i=o[t].words);e=(r.fieldCd.State==t||r.autoSuggestType.state==t||r.fieldCd.JobState==t||r.fieldCd.SchoolState==t)&&e.length<3?e.toUpperCase():r.fieldCd.Email==t||r.fieldCd.ZipCode==t?e:r.autoSuggestType.jobtitle==t||r.fieldCd.JobTitle==t?A(e,i,!0):A(e,i);return e},t.splitHTML=function(e,t){var n=(new DOMParser).parseFromString(e,"text/html"),a=[],r=t||2,i={};if(n&&n.body){var o=Math.ceil(n.body.children.length/r);Object.keys(n.body.children).forEach(function(e){a.push(n.body.children[e].outerHTML)});for(var s=0;s<r;s++){var l=o*s,c=Math.min(o*(s+1),n.body.children.length);i[G(s+1)]=a.slice(l,c).join("\n")}}return i},t.SplitHTMLRowwise=function(e,t){var n=(new DOMParser).parseFromString(e,"text/html"),a=[],r=t||2,i={};if(n&&n.body){for(var o=0;o<n.body.children.length;o++)a.push(n.body.children[o].outerHTML);for(var s=0;s<a.length;s++){var l=G(s%r+1);i[l]?i[l]=i[l].concat(a[s]).concat("\n"):i[l]=a[s].concat("\n")}}return i},t.getNumberString=G,t.flattenList=function(e){var t=e.replace(/<ul>|<\/ul>|\n/g,""),n=(new DOMParser).parseFromString(t,"text/html"),a=[];if(n&&n.body&&n.body.children)for(var r=0;r<n.body.children.length;r++)a.push(n.body.children[r].outerHTML);return a},t.formatGradYearDate=x,t.checkGradYearComputation=function(e){var t=void 0,n=!1,a=!0,i=[],o=new Date;return e&&e.constructor==Array&&e.map(function(e,s){var l=x(D(e.docDatas,r.fieldCd.GraduationYear));if(t=e.id,a=!1,n=!1,l)if(l>o)n=!0,a=!1;else if(l<=o){var c=o.getFullYear()-l.getFullYear();o>l&&!(c>10||10==c&&o.getMonth()>l.getMonth())&&(a=!1)}i.push({id:t,isFutureDate:n,isHidden:a})}),i},t.resetGradYearInvalidData=function(e){if(!(e.preferences&&e.preferences.findIndex(function(e){return"FGRYR"==e.docPreferenceTypeCD})>-1)){var t=e.sections.findIndex(function(e){return e.sectionTypeCD==r.sectionTypeCd.Education});if(t>-1){var n=e.sections[t];n.paragraphs.map(function(e,t){var n=D(e.docDatas,r.fieldCd.GraduationYear),a=e.docDatas.findIndex(function(e){return e.fieldCD==r.fieldCd.GraduationYear});if(n&&a>-1){var i=n.split("/");if(2==i.length){var o=!isNaN(i[0])&&(1==i[0].length||2==i[0].length),s=!isNaN(i[1])&&4==i[1].length;o&&s||(e.docDatas[a].charValue="")}else(1!=i.length||isNaN(i[0])||4!=i[0].length)&&(e.docDatas[a].charValue="")}})}e=R(e,"FGRYR",1)}return e},t.getTrackingEventObject=function(e,t,n,a,r,i,o,s,c,u){var d=[];if(o&&o instanceof Object){var p=Object.keys(o);p.forEach(function(e){d.push({Name:e,Value:o[e]})})}return new l.TrackRequest({eventType:n,eventSubType:a,eventContext:r,portalCD:t,clientCD:s,sourceAppUID:c,sourceAppCD:u,userID:e,actionType:i,eventDetails:d})},t.insertAtIndex=O,t.isHTML=k,t.ellipsisPara=w,t.putDotted=function(e,t,n){var a=t,r=w(e,a,n),i=$("<div>"+r+"</div>").text(),o=$("<div>"+e+"</div>").text();if(i.length>0&&o.length>=a){var s=i[i.length-1],l=r.lastIndexOf(s),c=r[r.length-1];if(">"==c){var l=r.lastIndexOf(s+"<");r=O(r,l+1,"...")}else{var l=r.lastIndexOf(s);r=O(r,l+1,"...")}}return r},t.getDocumentName=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:"",t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:[],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",i=arguments[5],o=V(e)+V(t);n=(n=(n=n.replaceAllOccurrences("\\.","")).replaceAllOccurrences("&","")).replaceAllOccurrences("-",""),n=i&&n==n.toUpperCase()?n:n?V(n,null,!0):"";var s=o+n+r.trim(),l=J(a,s),c=Array.isArray(l)&&l.length>0?_(l,s):0,u=0==c?50:c.toString().length>1?46:47;return s=s.slice(0,u),0==c?s:s+"("+c+")"},t.camelizeFunction=V,t.getDocumentsWithPrefix=J,t.getNextSequenceNumber=_,t.identifyAndRemoveVulnerableTextFromDoc=function(e,t,n,a){var r=JSON.parse(JSON.stringify(e)),i={removeVulnerableText:a,isVulnerableTextPresent:!1};if(t)if(n){var o=c.getParagraphsById(r,t,n);o&&o.docDatas&&o.docDatas.length>0&&W(o.docDatas,i)}else{var s=c.getSectionById(r,t);s.paragraphs&&s.paragraphs.length>0&&s.paragraphs.forEach(function(e){e.docDatas&&e.docDatas.length>0&&W(e.docDatas,i)})}else r.sections.forEach(function(e){e.paragraphs&&e.paragraphs.length>0&&e.paragraphs.forEach(function(e){e.docDatas&&e.docDatas.length>0&&W(e.docDatas,i)})});return{isVulnerableTextPresent:i.isVulnerableTextPresent,newDoc:r}},t.identifyAndRemoveVulFrmDocDatas=W,t.decodeData=U,t.identifyAndRemoveVulnerableText=B,t.replaceText=Z,t.getRecentStudy=function(e,t){var n=null,a=null,i=null,o=!1;return e.paragraphs.map(function(e,s){if(t&&D(e.docDatas,r.fieldCd.EnrollStatus)&&(a=D(e.docDatas,r.fieldCd.FieldOfExpertise),o=!0),!o){var l=D(e.docDatas,r.fieldCd.GraduationYear),c=0,u=0;7==l.length?(c=isNaN(parseInt(l.substring(3)))?0:parseInt(l.substring(3)),u=isNaN(parseInt(l.substring(2,0)))?0:parseInt(l.substring(2,0))):4==l.length&&(c=l),(null==n||c>n||c==n&&u>i)&&(n=c,i=u,a=D(e.docDatas,r.fieldCd.FieldOfExpertise))}}),a};var r=u(n(1)),i=u(n(2)),o=n(4),s=u(n(9)),l=n(5),c=u(n(6));function u(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function d(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var p=function(){var e=window.sessionStorage;try{return e.setItem("test","1"),e.removeItem("test"),!0}catch(e){return!1}}(),f=function(){var e=window.localStorage;try{return e.setItem("test","1"),e.removeItem("test"),!0}catch(e){return!1}}(),C=function(){try{if(s.ready)return!0}catch(e){return!1}}();function g(){function e(){return Math.floor(65536*(1+Math.random())).toString(16).substring(1)}return e()+e()+"-"+e()+"-"+e()+"-"+e()+"-"+e()+e()+e()}function S(e,t,n,a,r,i){var o=null,s=(640-t)/2,l=(480-n)/2,c="width="+t+",height="+n+",left="+s+",screenX="+s+",top="+l+",screenY="+l+","+a;return(o=e&&""!=e?window.open(e,"_blank",c):window.open("","_blank",c))&&(r?(o.blur(),window.focus()):o.focus()),o}function h(e){return null==e||void 0==e||e.toString().replace(/\s/g,"").length<1}function m(e,t){return this.substr(0,e)+t+this.substr(e)}function D(e,t){var n="";return void 0!=e&&(n=void 0===e.find(function(e){return e.fieldCD==t})?"":e.find(function(e){return e.fieldCD==t}).charValue),n=n||""}function T(){var e=document.getElementById("document");setTimeout(function(){if(e){var t=e.offsetWidth,n=(parseInt(window.getComputedStyle(e,null).getPropertyValue("padding-left")),parseInt(window.getComputedStyle(e,null).getPropertyValue("padding-right"))),a=document.querySelectorAll(".doc-overlay"),r=document.querySelectorAll(".document-tool"),i=e.classList.contains("RBN1"),o=void 0,s=-n-2,l=void 0;if(i){var c=document.getElementsByClassName("separator-main")[0],u=document.getElementsByClassName("separator-left")[0];if(c&&u){var d=c.offsetWidth,p=u.offsetWidth;l=parseInt(window.getComputedStyle(c,null).getPropertyValue("padding-left")),o=t-d-p-n-2}}r&&(i?Array.prototype.slice.call(r).forEach(function(e){e.setAttribute("style","right: "+-o+"px;")}):Array.prototype.slice.call(r).forEach(function(e){e.setAttribute("style","right: "+s+"px;")})),a&&(i?Array.prototype.slice.call(a).forEach(function(e){e.setAttribute("style","left:"+-l+"px; right: "+-o+"px;")}):Array.prototype.slice.call(a).forEach(function(e){var t=v(e,"editing-state-section");v(e,"show-section-button");s=t?-10:-n-2,e.setAttribute("style","left:"+s+"px; right: "+s+"px;")}))}},10)}function v(e,t){for(;(e=e.parentElement)&&!e.classList.contains(t););return e}function y(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:document.scrollingElement||document.documentElement,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:0,n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:300,a=e.scrollTop,r=t-a,i=+new Date;!function o(){var s=+new Date-i;e.scrollTop=parseInt(function(e,t,n,a){return(e/=a/2)<1?n/2*e*e+t:-n/2*(--e*(e-2)-1)+t}(s,a,r,n)),s<n?requestAnimationFrame(o):e.scrollTop=t}()}function P(e){var t=0;do{isNaN(e.offsetTop)||(t+=e.offsetTop)}while(e=e.offsetParent);return t}function N(e,t){return!(!e||"us"!=e.toLowerCase()||t)}function L(e,t,n){n("exit builder",{"builder type":"resumes","exit page path":e},null,t),window.location=e}function b(e){return!(!e||"Guest"==e.role)}function R(e,t,n){e.preferences=e.preferences||[];var a=e.preferences.findIndex(function(e){return e.docPreferenceTypeCD==t});if(a>-1)e.preferences[a].value=n;else{var r={docId:0,docPrefId:0,docPreferenceTypeCD:t,documentID:e.id,id:g(),value:n};e.preferences.push(r)}return e}function E(e){for(var t=e+"=",n=document.cookie.split(";"),a=0;a<n.length;a++){for(var r=n[a];" "==r.charAt(0);)r=r.substring(1,r.length);if(0==r.indexOf(t))return r.substring(t.length,r.length)}return null}function F(e,t,n,a){var r="";if(n){var i=new Date;i.setTime(i.getTime()+24*n*60*60*1e3),r="; expires="+i.toGMTString()}else r="";var o=e+"="+t+r+"; path=/;";document.cookie=a?o+"domain=."+a:o}function M(e,t,n){var a=E(n),r=a?JSON.parse(a):{};r[e]=t,F(n,JSON.stringify(r))}function I(e,t){var n,a="";(n=E(t))&&(a=JSON.parse(n)[e]||"");return a}function A(e,t,n){return e.split(" ").map(function(e,a){return n&&a<1?h(e)?"":e.charAt(0).toUpperCase()+e.substr(1):h(e)?"":t.includes(e.toLowerCase())?e.charAt(0).toLowerCase()+e.substr(1):e.charAt(0).toUpperCase()+e.substr(1)}).join(" ")}function G(e){var t="";switch(e){case 1:t="first";break;case 2:t="second";break;case 3:t="third"}return t}function x(e){var t=void 0,n=new Date;if(e){var a=e.split("/");if(2==a.length){var r=!isNaN(a[0])&&(1==a[0].length||2==a[0].length),i=!isNaN(a[1])&&4==a[1].length;r&&i&&(a[1]=1==a[1].length?"0"+a[1]:a[1],t=new Date(Date.parse(a[1]+"-"+a[0]+"-01")))}else 1!=a.length||isNaN(a[0])||4!=a[0].length||(t=new Date(Date.parse(a[0]+"-01-01")))}if(t){var o=n.getFullYear()-t.getFullYear();n>t&&(o>10||10==o&&(n.getMonth(),t.getMonth()))}return t}t.educationDegreeSelected=function(e){var t=void 0;return e.paragraphs&&e.paragraphs.length>0&&(t=e.paragraphs.some(function(e){if(D(e.docDatas,r.fieldCd.DegreeEarned))return!0})),t},t.educationDegreeValue=function(e){var t=void 0;return e.paragraphs&&e.paragraphs.length>0&&(t=D(e.paragraphs[0].docDatas,r.fieldCd.DegreeEarned)),t},t.maxGraduationYearValue=function(e){var t=void 0;if(e.paragraphs&&e.paragraphs.length>0){var n=[];e.paragraphs.forEach(function(e){var t=D(e.docDatas,r.fieldCd.GraduationYear);t&&n.push({gradDateDocValue:t,date:x(t)})}),n.length>0&&(t=n.sort(function(e,t){return t.date-e.date})[0].gradDateDocValue)}return t};function O(e,t,n){return e.substr(0,t)+n+e.substr(t)}function k(e){var t=document.createElement("div");t.innerHTML=e;for(var n=t.childNodes,a=n.length;a--;)if(1==n[a].nodeType)return!0;return!1}function w(e,t,n){e=e?e.toString():"";for(var a,r=$.parseHTML(e),i=t,o=$(r).length,s="",l="",c=0,u=0;u<o;u++)if($(r[u]).text().length>t){if(!((a=i-$("<div>"+s+"</div>").text().length)>0))break;if(k($(r[u]).html()))s+="<"+r[u].nodeName.toLowerCase()+">",s+=w($(r[u]).html(),t,n),s+="</"+r[u].nodeName.toLowerCase()+">",i=t;else{var d=$(r[u]).text().substring(0,t);n&&(d=H($(r[u]).text(),t)),r[u].nodeType==Node.TEXT_NODE?s+=d:s+=$("<div/>").append($(r[u]).empty().html(d)).html(),t-=d.length}}else if(l=r[u],c=$(l).text().length,$("<div>"+s+"</div>").text().length+c<=i)s+=$("<div/>").append(l).html(),t-=c;else{if(!((a=t-$("<div>"+s+"</div>").text().length)>0))break;if(k($(l).html()))s+="<"+l.nodeName.toLowerCase()+">",s+=w($(l).html(),a,n),s+="</"+l.nodeName.toLowerCase()+">";else{d=$(l).text().substring(0,a);n&&(d=H($(l).text(),a)),s+=$("<div/>").append($(l).empty().html(d)).html()}}return s}function H(e,t){var n="";return e.split(" ").forEach(function(e){n.length<t&&(n=n+" "+e)}),n}function V(e,t,n,a){if(!e)return"";var r=n?"":" ";return(e=(e=e.replace(/\s+/g," ")).toLowerCase()).split(" ").map(function(e){if(t&&a.find(function(t){return t.toLowerCase()==e}))return e.toUpperCase();var n=e.split("");return n.length>0?(n[0]=n[0].toUpperCase(),n.join("")):""}).join(r)}function J(e,t){return e.filter(function(e){return e&&e.name&&(-1!=e.name.lastIndexOf("(")?e.name.slice(0,e.name.lastIndexOf("(")):e.name)==t})}function _(e,t){var n=1;if(1==e.length){var a=e.filter(function(e){return e&&e.name==t});a&&a.length>0&&(n+=1)}if(1==n){var r=e.filter(function(e){return e&&e.name!=t}),i=(r=r&&r.map(function(e){return e.name.replace(")","").split("(").pop()}))&&r.map(function(e){return parseInt(e,10)});i&&(n=Math.max.apply(Math,d(i))+1)}return n}function W(e,t){var n="";e.forEach(function(e){switch(e.fieldCD){case r.fieldCd.JobDescription:case r.fieldCd.SkillsCollection_1:case r.fieldCd.SkillsCollection_2:case r.fieldCd.SkillsCollection_3:case r.fieldCd.FreeForm_1:case r.fieldCd.FreeForm:n="<ul>,<li>,<span>,<del>,<font>,<i>,<em>,<b>,<strong>,<u>,<p>,<br>"}if(e.charValue){var a=B(U(e.charValue),n,t);e.charValue=a}})}function U(e){return String(e).replace(/&quot;/g,'"').replace(/&#39;/g,"'").replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&")}function B(e,t,n){t=(((t||"")+"").toLowerCase().match(/<[a-z0-9][a-z0-9]*>/g)||[]).join("");return!n.removeVulnerableText&&e.indexOf("--")>-1?(n.isVulnerableTextPresent=!0,e):Z(e,/(--)/gi,t,/<\/?([a-z0-9][a-z0-9]*)\b[^>]*>/gi,n)}function Z(e,t,n,a,r){e.indexOf("--")>-1&&(r.isVulnerableTextPresent=!0);var i=e.replace(t,"").replace(a,function(e,t){return n.indexOf("<"+t.toLowerCase()+">")>-1?e:(r.isVulnerableTextPresent=!0,"")});return r.removeVulnerableText?i:e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.emptyGuid="00000000-0000-0000-0000-000000000000",t.Current="Current",t.documentTypeCD={coverLetter:"LETR",resume:"RSME"},t.fieldCd={Accomplishments:"ACCM",AdditionalLink1:"LNK1",AdditionalLink2:"LNK2",AdditionalLink3:"LNK3",Alerts:"ALRT",AuthorizeToWork:"AUTW",BestTimeToContact:"BSCN",CareerField:"CRFL",CareerLevel:"CRLV",CareerSpecailaity:"SPCL",CellPhone:"CPHN",CertificationDateReceived:"DATE",CertificationName:"CERT",CertificationSummary:"CSUM",City:"CITY",Company:"COMP",CompanyDescription:"CDES",CompanyLocation:"COLO",Country:"CNTY",DegreeEarned:"DGRE",Email:"EMAI",EmploymentStatus:"EMPS",EmploymentType:"ETYP",EducationDegreeType:"EDTP",EducationGraduate:"EGRD",EnrollStatus:"ENST",FaxPhone:"FPHN",FieldOfExpertise:"STUY",FirstName:"FNAM",FreeFormat:"FRFM",FromDate:"FRDT",GradePointAverage:"GRPA",GraduationYear:"GRYR",GraduationDate:"GRDT",GraduationStartDate:"GRST",GraduationEndDate:"GRED",GraduationDateFormat:"GDFM",HeadLine:"HDLN",HighestLevelOfEducation:"HLED",HomePhone:"HPHN",HourlySalaryRange:"HSLR",InstituteName:"INST",JobCity:"JCIT",JobDescription:"JDES",JobEndDate:"EDDT",JobStartDate:"JSTD",JobStartMonth:"JSTM",JobStartYear:"JSTY",JobEndMonth:"JETM",JobEndYear:"JETY",JobCountry:"JCNT",JobState:"JSTA",JobTitle:"JTIT",JobType:"JTYP",JobDateFormat:"JDFM",Keyword:"KWRD",Language:"LNGU",LastName:"LNAM",Location:"LOCN",MainTitle:"MTTL",NewJobStart:"NJST",NumberOfYearsSkillUsed:"SKYR",OfficePhone:"OPHN",OtherPhone:"OPHN",PhotoURL:"PURL",Proficiencylevel:"PRLV",Password:"PSWD",ProfessionalTitle:"PTIT",Relocate:"RELC",ResumeTitle:"RTTL",SchoolCity:"SCIT",SchoolCountry:"SCNT",SchoolLocation:"SCLO",SchoolName:"SCHO",SchoolState:"SSTA",Skill:"SKIL",SkillLastUsed:"SLST",SkillLevel:"SKLV",SkillName:"SKIL",SkillRating:"SKRT",SkillsCollection_1:"SKC1",SkillsCollection_2:"SKC2",SkillsCollection_3:"SKC3",State:"STAT",Street:"STRT",Subject:"SUBJ",SubTitle1:"TTL1",SubTitle2:"TTL2",SubTitle3:"TTL3",Summary:"SUMM",supplementaryInfo:"IDOB",TargetSalaryRange:"SLRN",Telecommute:"TCOM",ToDate:"TODT",UserPicture:"UPCT",USMilitryVeteran:"USML",USSecurityClearence:"SCLR",Website:"WEBS",ZipCode:"ZIPC",IndustryName:"INNA",External_Link1:"LNK1",External_Link2:"LNK2",External_Link3:"LNK3",FROM:"FROM",ListeningLevel:"LSLV",ReadingLevel:"RDLV",SpokenInteractionLevel:"SILV",SpokenProdLevel:"SPLV",WritingLevel:"WRLV",OtherLanguage:"OTHL",MotherLanguage:"MOTL",DrivingLicence_AM:"D0AM",DrivingLicence_A1:"D0A1",DrivingLicence_A2:"D0A2",DrivingLicence_A:"D00A",DrivingLicence_B1:"D0B1",DrivingLicence_B:"D00B",DrivingLicence_BE:"D0BE",DrivingLicence_C1:"D0C1",DrivingLicence_C1E:"DC1E",DrivingLicence_C:"D00C",DrivingLicence_CE:"D0CE",DrivingLicence_D1:"D0D1",DrivingLicence_D1E:"DD1E",DrivingLicence_D:"D00D",DrivingLicence_DE:"D0DE",InformationProcessing:"INFP",Communication:"COMM",ContentCreation:"CONC",ProblemSolving:"PRSO",Safety:"SFTY",AdditionalInfoCategory:"AICT",CDEGRE:"CDEGRE",FreeForm:"FRFM",FreeForm_1:"FRM1",DocumentTitle:"DCTL",RatingValue:"RATV",RatingText:"RATT",RatingGrade:"RATG",SocialLink:"SOCL",Date:"DATE",SignatureName:"SNAM",SignatureURL:"SURL",HorizontalLeft:"HLEF",HorizontalMid:"HMID",HorizontalRight:"HRIG",SignatureDate:"SDAT",SignaturePlace:"PLAC",SignatureFontFamily:"SIFF",SignatureFontSize:"SIFS",SignatureFontStyle:"SIST",SignatureFontColor:"SICL",SignatureHeight:"SIHT",SignatureWidth:"SIWD",SignatureCategory:"STYP",SignatureContrast:"SICT",BirthDate:"DOB1",Nationality:"NTLY",IDNumber:"IDNV",DateFormat:"DFRM",IDNumberType:"IDNT",NumberValue:"NMBR",Neighbourhood:"NBHD",MZip:"MZIP",MaritalStatus:"MSTA",ContactAddress:"ADDR",SocialWebsiteLink:"WEB1",TypeOfContract:"JCTR",Driving_Info:"DRIV",Availability:"AVAI",Additional_Info:"ADIF",GradCurrentlyEnrolled:"GRIP",GraduationHonours:"GRHN",GradStartMonth:"GRSTM",GradStartYear:"GRSTY",GradEndMonth:"GREDM",GradEndYear:"GREDY",BtnText:"BTXT",BtnUrl:"BURL"},t.sectionTypeCd={Contact:"CNTC",Education:"EDUC",Experience:"EXPR",ExecutiveResumeTitle:"ERTL",Languages:"LANG",Name:"NAME",NameContact:"PRFL",Skills:"HILT",RatingSkills:"SKLI",Summary:"SUMM",Affiliations:"AFIL",Awards:"AWAR",Volunteer:"VLTR",Community_Service:"COMS",Publications:"PUBL",Other:"OTHR",Additional_Information:"ADDI",Accomplishments:"ACCM",Certification:"CERT",External_Links:"ALNK",ResumeTitle:"RTTL",FreeFormExprience:"EXFU",Executive_Experience:"EEXP",Military_Experience:"MILI",Work_History:"WRKH",Custom:"CUST",Technical_Skills:"TSKL",Executive_Summary:"ESUM",SkillSKLL:"SKLL",Keywords:"KEYW",Final_Resume:"FNLZ",Date:"DATE",Recipient:"RCNT",Subject:"SUBJ",Greetings:"GRTG",Opener:"OPEN",Body:"BODY",CallToAction:"CTAC",Closer:"CLSR",Gaps:"GAPS",Relocation:"RELO",Confidentiality:"CNFD",Availablity:"AVLB",SalaryRuquirements:"SLRQ",Photo:"PICT",CProfile:"CPFL",MotherLanguage:"MTLG",OtherLanguage:"OTLG",Driving_Licence:"DRLI",Additional_Info:"ADIF",Signature:"SGTR",Interests:"INTR",Softwares:"SFTR",Personal_Data:"PPDT",Language:"LNGG",Overview:"OVVW",Quote:"QUOT",Timeline:"TIME",References:"REFE",Button:"BUTN"},t.docZoneTypeCd={BODY:"BODY",FOOTER:"FOOT",HEAD:"HEAD"},t.AppConst={CurrentYear:(new Date).getFullYear().toString()},t.UserSignInResponse={Success:"success",UserSwap:"userswap",InvalidPassword:"invalidpassword",UserDeactivated:"userdeactivated",TechnicalFault:"technicalfault",InvalidUser:"invaliduser"},t.SocialLogin={GoogleCD:"GGLE",FacebookCD:"FCBK"},t.styleTypeCD={fontFace:"FTFC",headingFontSize:"HDSZ",fontSize:"FTSZ",topBottomMargins:"VMRG",sideMargins:"HMRG",paragraphIndent:"PIND",sectionSpacing:"SSPC",lineSpacing:"LNSP",lineWeight:"LNWT",paragraphSpacing:"PSPC",pageSize:"PGSZ",hMargin:"HMRG",styleDocColor:"SDCL"},t.styleSliders=[{code:"FTFC",min:"",max:"",step:"",label:"Font"},{code:"HDSZ",min:"8",max:"24",step:"1",label:"Heading Font Size:",labelsNumber:{8:"8",12:"12",16:"16",20:"20",24:"24"}},{code:"FTSZ",min:"8",max:"14",step:"1",label:"Font Size: ",labelsNumber:{8:"8",10:"10",12:"12",14:"14"}},{code:"VMRG",min:"0",max:"50",step:"2",label:"Top and Bottom Margins: "},{code:"HMRG",min:"0",max:"100",step:"4",label:"Side Margins: "},{code:"PIND",min:"0",max:"100",step:"4",label:"Paragraph Indent: "},{code:"SSPC",min:"0",max:"20",step:"1",label:"Section Spacing: "},{code:"PSPC",min:"0",max:"20",step:"1",label:"Paragraph Spacing: "},{code:"LNSP",min:"0",max:"20",step:"1",label:"Line Spacing: "},{code:"LNWT",min:"0",max:"4",step:"1",label:"Line Weight: "},{code:"PGSZ",min:"",max:"",step:"",label:"Paper:"}],t.autoSuggestType={city:"city",state:"state",school:"school",country:"country",jobtitlewithoutids:"jobtitlewithoutids",jobtitle:"jobtitle",jobtitleOrIndustry:"jobtitleorindustry",jobtitlewithspellcheck:"jobtitlewithspellcheck",companywithoutids:"companywithoutids",googlePlaces:"googleplaces",degrees:"degrees",fieldofstudy:"fieldofstudy",streetAddress:"streetAddress",company:"company",zip:"zip",email:"email",motherLanguage:"MOTL",otherLanguage:"OTHL",skills:"skills"},t.PopupModel={title:"",isOpen:!1,hasHeader:!1,hideBorderRadius:!1,onPrimaryClick:"",onSecondaryClick:"",btnPrimaryLabel:"",btnSecondaryLabel:"",closeModal:"",btnCancelLabel:"",hasFooter:"",cssClass:{modalDialog:"",btnPrimary:"",btnSecondary:"",modalFooter:""}},t.resultTypes={Success:1,Error:0},t.userRoles={Guest:"Guest",User:"User"},t.documentFormat={AdobePDF:"PDF",MSWord:"WORDX",RichText:"RTF",PlainText:"TXT",WebPage:"HTML",DOCX:"DOCX",SVG:"SVG",JPEG:"JPEG",GIF:"GIF",PNG:"PNG"},t.finishLetterTypes={print:"print",email:"email",finish:"finish",download:"download"},t.SEE_EXAMPLES_SNIPPET="",t.SomeOtherDegree="Some College (No Degree)",t.productCD={ResumeBuilder:"RSM",CoverLetterBuilder:"CLB",MPCBuilder:"MPC",ResumeWizard:"RWZ"},t.storageType={localStorage:"localStorage",sessionStorage:"sessionStorage",localforage:"localforage"},t.recommendationServiceAttr={UserRegistrationStatus:"UserRegistrationStatus",TargetJobTitle:"TargetJobTitle",TargetMajorFunction:"TargetMajorFunction",TargetMinorFunction:"TargetMinorFunction",TargetOccupation:"TargetOccupation",UserMostRecentJobTitle:"UserMostRecentJobTitle",ExperienceLevel:"ExperienceLevel",TotalYearsOfExperience:"TotalYearsOfExperience",YearsOfExperience:"YearsOfExperience",UserEmploymentStatus:"UserEmploymentStatus",HighestEducationLevel:"HighestEducationLevel",ResumeUploadOrSratch:"ResumeUploadOrSratch",ResumeTemplateSelected:"ResumeTemplateSelected",ResumeStrengthScore:"ResumeStrengthScore",ContactStrengthScore:"ContactStrengthScore",WorkHistoryStrengthScore:"WorkHistoryStrengthScore",EducationStrengthScore:"EducationStrengthScore",SummaryStrengthScore:"SummaryStrengthScore",SkillsStrengthScore:"SkillsStrengthScore",HighestEducationLevelStatus:"HighestEducationLevelStatus",SectionCompletionStatus:"SectionCompletionStatus"},t.JobTitleTipType={Student:"Student",Ambiguous:"Ambiguous",Slash:"Slash",NoWork:"NoWork",Gibberish:"Gibberish"},t.FieldLevelPersonalizedTips={Email:"Email",SkillsSearch:"SkillsSearch",SummarySearch:"SummarySearch",WorkHistorySearch:"WorkHistorySearch",WorkHistoryTTC:"WorkHistoryTTC",WorkHistoryTTCIfChecked:"WorkHistoryTTCIfChecked",EducationTTC:"EducationTTC"},t.AlignmentType={LEFT:"L",RIGHT:"R",CENTER:"C",JUSTIFY:"J"},t.AgreementCD={PrivacyPolicy:"PRYPCY",TermsOfUse:"TMOUSR"}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getValueInner=o,t.getCharValue=function(e,t){var n="";void 0!=e&&(n=void 0===e.find(function(e){return e.fieldCD==t})?"":e.find(function(e){return e.fieldCD==t}).charValue,a.isNullOrWhitespace(n)&&(n=""));return n},t.getErrorMessage=function(e,t){var n="";void 0!=e&&(n=void 0===e.find(function(e){return e.fieldCD==t})?"":e.find(function(e){return e.fieldCD==t}).errorMessage);return n},t.fieldExists=function(e,t){return e.findIndex(function(e){return e.fieldCD==t})>=0},t.isFieldValid=function(e,t){var n=!0;void 0!=e&&(n=void 0===e.find(function(e){return e.fieldCD==t})?"":e.find(function(e){return e.fieldCD==t}).isValid);return void 0==n||n},t.IsCurrentlyWorkHere=s,t.getExperienceEndDate=function(e,t,n){return s(e,t,n)?n?n.current_Text:"":l(e,t)},t.getDateTimeValue=function(e,t,n){if(1==s(e,t,n))return n?n.current_Text:"Current";void 0===e.find(function(e){return e.fieldCD==t})||e.find(function(e){return e.fieldCD==t}).dateTimeValue;return""},t.getMonth=function(e,t){var n="",a=void 0===e.find(function(e){return e.fieldCD==t})?"":e.find(function(e){return e.fieldCD==t}).dateTimeValue;null!=a&&""!=a&&(n=i(new Date(a),"mmm"));return n},t.getYear=l,t.getValue=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],a=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"mmmm";if(e){var s="";return a?o(s=e.charValue,t,n):(e.dateTimeValue&&(s=i(new Date(e.dateTimeValue),r)),o(s,t,n))}return""},t.generatePresentDate=function(){var e=new Date,t=r.json.month[e.getMonth()+1],n=e.getFullYear();return{dateTimeValue:new Date(Date.parse(t+" 5, "+n)).toISOString().slice(0,19),charValue:"Present"}},t.generatePresentStartDate=function(){var e=new Date,t=r.jsonmonth[e.getMonth()+1],n=e.getFullYear(),a=new Date(Date.parse(t+" 5, "+n));return{dateTimeValue:a.toISOString().slice(0,19),charValue:a.getMonth()+1+" "+a.getFullYear()}},t.areFieldsEmpty=function(e,t){var n=!0;if(void 0==e||null==e)return n;return e.map(function(e,a){t&&t.findIndex(function(t){return t==e.fieldCD})>=0||""!=(""!=e.charValue?e.charValue:e.dateTimeValue)&&n&&(n=!1)}),n},t.isLocalStorageSupported=function(){var e=window.localStorage;try{return e.setItem("test","1"),e.removeItem("test"),!0}catch(e){return!1}},t.removeTrailingSpaces=function(e){return e.split("<p>").forEach(function(t){var n=e;n==(e=e.replace(/(<p><br><\/p>\s*)+$/,""))&&n==(e=e.replace(/(<p>\s*(&nbsp;)+<\/p>\s*)+$/,""))&&(e=e.replace(/((&nbsp;)+<\/p>\s*)+$/,"</p>"))}),e},t.isFutureDate=function(e,t){if(!e)return!1;var n=e.split(t)[0],a=e.split(t)[1],r=new Date((new Date).getFullYear(),(new Date).getMonth()+1),i=n&&a?new Date(Date.parse(n+" /01/"+a)):"";return!!i&&i>r};var a=n(0),r=n(3),i=n(8);function o(e,t,n){var a=!0;if(n&&n.length>0){a=!1;for(var r=0;r<n.length;r++)if(null!=n[r]&&(n[r].charValue||n[r].dateTimeValue)){a=!0;break}}return e?t?a?e+t:e+"":e:""}function s(e,t,n){var a=!1,r="",i=n.current_Text?n.current_Text:"Current",o=n.present_Text?n.present_Text:"Present",s=n.oldCurrent_Text?n.oldCurrent_Text:i;return void 0!=e&&(r=void 0===e.find(function(e){return e.fieldCD==t})?"":e.find(function(e){return e.fieldCD==t}).charValue,n&&r&&(r.toLowerCase()==i.toLowerCase()||r.toLowerCase()==o.toLowerCase()||r.toLowerCase()==s.toLowerCase())&&(a=!0)),a}function l(e,t){var n="",a=void 0===e.find(function(e){return e.fieldCD==t})?"":e.find(function(e){return e.fieldCD==t}).dateTimeValue;return null!=a&&""!=a&&(n=i(new Date(a),"yyyy")),n}},function(e,t,n){"use strict";t.json={state:["State","Alabama ","Alaska ","Arizona ","Arkansas ","California ","Colorado ","Connecticut ","Delaware ","Florida ","Georgia ","Hawaii ","Idaho ","Illinois Indiana ","Iowa ","Kansas ","Kentucky ","Louisiana ","Maine ","Maryland ","Massachusetts ","Michigan ","Minnesota ","Mississippi ","Missouri ","Montana Nebraska ","Nevada ","New Hampshire ","New Jersey ","New Mexico ","New York ","North Carolina ","North Dakota ","Ohio ","Oklahoma ","Oregon ","Pennsylvania Rhode Island ","South Carolina ","South Dakota ","Tennessee ","Texas ","Utah ","Vermont "],month:["Month","January","February","March","April","May","June","July","August","September","October","November","December"],shortMonth:["None","Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"],year:["2020","2019","2018","2017","2016","2015","2014","2013","2012","2011","2010","2009","2008","2007","2006","2005","2004","2003","2002","2001","2000","1999","1998","1997","1996","1995","1994","1993","1992","1991","1990","1989","1988","1987","1986","1985","1984","1983","1982","1981","1980","1979","1978","1977","1976","1975","1974","1973","1972","1971","1970","1969","1968","1967","1966","1965","1964","1963","1962","1961","1960","1959","1958","1957","1956","1955","1954","1953","1952","1951","1950","1949","1948","1947","1946","1945","1944","1943","1942","1941","1940","1939","1938","1937","1936","1935","1934","1933","1932","1931","1930","1929","1928","1927","1926","1925","1924","1923","1922","1921","1920","1919","1918"],degree:[{name:"DGRE",value:"",label:"Select..."},{name:"DGRE",value:"High School Diploma",label:"High School Diploma"},{name:"DGRE",value:"GED",label:"GED"},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"Associate of Arts",label:"Associate of Arts"},{name:"DGRE",value:"Associate of Science",label:"Associate of Science"},{name:"DGRE",value:"Associate of Applied Science",label:"Associate of Applied Science"},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"Bachelor of Arts",label:"Bachelor of Arts"},{name:"DGRE",value:"Bachelor of Science",label:"Bachelor of Science"},{name:"DGRE",value:"BBA",label:"BBA"},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"Master of Arts",label:"Master of Arts"},{name:"DGRE",value:"Master of Science",label:"Master of Science"},{name:"DGRE",value:"MBA",label:"MBA"},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"J.D.",label:"J.D."},{name:"DGRE",value:"M.D.",label:"M.D."},{name:"DGRE",value:"Ph.D.",label:"Ph.D."},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"-2",label:"Type your own"}],degreeQualityBuilder:[{name:"DGRE",value:"",label:"Select Degree"},{name:"DGRE",value:"High School Diploma",label:"High School Diploma"},{name:"DGRE",value:"GED",label:"GED"},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"Associate of Arts",label:"Associate of Arts"},{name:"DGRE",value:"Associate of Science",label:"Associate of Science"},{name:"DGRE",value:"Associate of Applied Science",label:"Associate of Applied Science"},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"Bachelor of Arts",label:"Bachelor of Arts"},{name:"DGRE",value:"Bachelor of Science",label:"Bachelor of Science"},{name:"DGRE",value:"BBA",label:"BBA"},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"Master of Arts",label:"Master of Arts"},{name:"DGRE",value:"Master of Science",label:"Master of Science"},{name:"DGRE",value:"MBA",label:"MBA"},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"J.D.",label:"J.D."},{name:"DGRE",value:"M.D.",label:"M.D."},{name:"DGRE",value:"Ph.D.",label:"Ph.D."},{name:"DGRE",value:"-1",disabled:!0,label:"----------------------------------------------"},{name:"DGRE",value:"-2",label:"Type your own"}],documentScale:[{label:"Fit Width",value:"0"},{label:"Actual Size",value:"1"},{label:"150%",value:"1.5"},{label:"200%",value:"2"}],hMarginMapping:[{className:"mrg-small",value:".75",size:'.75"',text:"Condensed"},{className:"mrg-default",value:"1",size:'1"',text:"Standard"},{className:"mrg-large",value:"1.25",size:'1.25"',text:"Expanded"}],resumeFmt:[{value:"File Format",label:"File_Format"},{value:"PDF",label:"ResumeFormat_Pdf_Upper"},{value:"HTML",label:"ResumeFormat_Html_Upper"},{value:"RTF",label:"ResumeFormat_RTF_Upper"},{value:"TXT",label:"ResumeFormat_Txt_Upper"},{value:"DOCX",label:"ResumeFormat_Doc_Upper"}],skinData:[{code:"cbg1",name:"SkinName_Monochrome",title:"Professional",skinContent:"cbg1Content"},{code:"cbg2",name:"SkinName_Monogram",title:"Refined",skinContent:"cbg2Content"},{code:"upt1",name:"SkinName_Minimalist",title:"Artistic",skinContent:"upt1Content"},{code:"upt2",name:"SkinName_Minimalist",title:"Charismatic",skinContent:"upt2Content"},{code:"pcf1",name:"SkinName_Minimalist",title:"Pacific",skinContent:"pcf1Content"},{code:"mtp1",name:"SkinName_Minimalist",title:"Modern",skinContent:"mtp1Content"},{code:"mtp2",name:"SkinName_Minimalist",title:"Contempo",skinContent:"mtp2Content"},{code:"hrt1",name:"SkinName_Centered",title:"Executive",skinContent:"hrt1Content"},{code:"hrt2",name:"SkinName_Timeless",title:"Deluxe",skinContent:"hrt2Content"},{code:"cbg3",name:"SkinName_Progressive",title:"Pinstripe",skinContent:"cbg3Content"},{code:"cnt1",name:"SkinName_Pacific",title:"Whitespace",skinContent:"cnt1Content"},{code:"cnt3",name:"SkinName_Modular",title:"Blueprint",skinContent:"cnt3Content"}],mixpaneldata:[{Key:"JobTitle",Value:""},{Key:"Currently Employed",Value:""}],SkinFontStyle:["Arial","Bodoni MT","Century Gothic","Courier New","Georgia","Palatino Linotype","Tahoma","Times New Roman","Trebuchet MS","Verdana"],JobSearchPeriod:["I haven’t started my job search yet","Less than one month","1 - 2 months","3+ months"],JobLookingFor:["Step-by-step guidance in building my resume","Good resume examples in my industry","Industry-specific keywords and phrases","Resume tips and advice","Resume design templates","Professional review of my resume"],CareerField:["Accounting and Finance","Administrative Support","Architecture","Art, Fashion and Design","Banking and Financial Services","Beauty and Spa"],CareerSubField:["Accountants","Accounts Payable/Receivable","Auditors","Banking","Bookkeepers","Collections"],ExperienceSectionTips:["<h1 class='h3 heading'>Tips for Work History</h1><ul class='tips square'><li>Enter basic information about your previous jobs so employers can see where you've worked. </li><li>Don't abbreviate job titles. Using your full title looks more professional and is easier for managers to understand. </li><li>Include start and end dates for each position. Leaving off dates will make employers think you're hiding something. </li></ul>"],EducationSectionTips:["<h1 class='h3 heading'>Tips for Education</h1><ul class='tips square'><li>List the schools you’ve attended and any degrees you’ve earned, starting with your most recent.  </li><li>List high school only if you didn't go to college.  </li><li>Coursework is optional. List relevant courses if you don't have much work experience.  </li></ul>"],SkillsSectionTips:["<h1 class='h3 heading'>Tips for Skills</h1><ul class='tips square'><li>Highlight 6-8 skills that are most relevant to your desired job.</li><li>If you don’t have much experience, consider listing soft skills like 'Fast learner', 'Highly dependable' or 'Excellent attention to detail'.  </li><li>Use short bulleted phrases – 3 words or less. No need to use a period (.) at the end.  </li></ul>"],SummarySectionTips:["<h1 class='h3 heading'>Tips for Summary</h1><ul class='tips square'><li>Write a career overview so that hiring managers can immediately see the value that you bring.</li><li>Not sure how to write this? Choose one of our examples and edit it to match your background.  </li><li>Make your summary sound stronger by writing it in the present tense. Focus on what you can do for a company, rather than what you did in the past. </li></ul>"],SkinFormatting:[{SkinCd:"CBG1",Large:{FTFC:"Palatino Linotype",VMRG:"18",HMRG:"48",PIND:"0",SSPC:"12",PSPC:"12",LNSP:"8",LNWT:"1",FTSZ:"12",HDSZ:"14"},Normal:{FTFC:"Palatino Linotype",VMRG:"14",HMRG:"30",PIND:"0",SSPC:"12",PSPC:"10",LNSP:"5",LNWT:"1",FTSZ:"12",HDSZ:"14"},Small:{FTFC:"Palatino Linotype",VMRG:"10",HMRG:"16",PIND:"0",SSPC:"10",PSPC:"10",LNSP:"2",LNWT:"1",FTSZ:"11",HDSZ:"13"}},{SkinCd:"CBG2",Large:{FTFC:"Times New Roman",VMRG:"22",HMRG:"48",PIND:"0",SSPC:"14",PSPC:"16",LNSP:"8",LNWT:"0",FTSZ:"12",HDSZ:"16"},Normal:{FTFC:"Times New Roman",VMRG:"20",HMRG:"30",PIND:"0",SSPC:"12",PSPC:"12",LNSP:"6",LNWT:"0",FTSZ:"12",HDSZ:"16"},Small:{FTFC:"Times New Roman",VMRG:"10",HMRG:"15",PIND:"0",SSPC:"10",PSPC:"10",LNSP:"4",LNWT:"0",FTSZ:"12",HDSZ:"15"}},{SkinCd:"CBG3",Large:{FTFC:"Times New Roman",VMRG:"18",HMRG:"50",PIND:"0",SSPC:"14",PSPC:"14",LNSP:"4",LNWT:"0",FTSZ:"12",HDSZ:"14"},Normal:{FTFC:"Times New Roman",VMRG:"14",HMRG:"30",PIND:"0",SSPC:"12",PSPC:"12",LNSP:"4",LNWT:"0",FTSZ:"12",HDSZ:"14"},Small:{FTFC:"Times New Roman",VMRG:"10",HMRG:"20",PIND:"0",SSPC:"10",PSPC:"10",LNSP:"2",LNWT:"0",FTSZ:"12",HDSZ:"14"}},{SkinCd:"CNT1",Large:{FTFC:"Palatino Linotype",VMRG:"40",HMRG:"52",PIND:"0",SSPC:"12",PSPC:"16",LNSP:"6",LNWT:"1",FTSZ:"11",HDSZ:"14"},Normal:{FTFC:"Palatino Linotype",VMRG:"40",HMRG:"48",PIND:"0",SSPC:"8",PSPC:"14",LNSP:"6",LNWT:"1",FTSZ:"11",HDSZ:"14"},Small:{FTFC:"Palatino Linotype",VMRG:"30",HMRG:"40",PIND:"0",SSPC:"6",PSPC:"5",LNSP:"6",LNWT:"1",FTSZ:"11",HDSZ:"14"}},{SkinCd:"CNT3",Large:{FTFC:"Verdana",VMRG:"30",HMRG:"60",PIND:"0",SSPC:"13",PSPC:"20",LNSP:"6",LNWT:"1",FTSZ:"11",HDSZ:"13"},Normal:{FTFC:"Verdana",VMRG:"30",HMRG:"50",PIND:"0",SSPC:"10",PSPC:"16",LNSP:"6",LNWT:"1",FTSZ:"11",HDSZ:"13"},Small:{FTFC:"Verdana",VMRG:"30",HMRG:"40",PIND:"0",SSPC:"10",PSPC:"15",LNSP:"4",LNWT:"1",FTSZ:"11",HDSZ:"13"}},{SkinCd:"HRT1",Large:{FTFC:"Times New Roman",VMRG:"22",HMRG:"48",PIND:"45",SSPC:"15",PSPC:"16",LNSP:"8",LNWT:"1",FTSZ:"12",HDSZ:"14"},Normal:{FTFC:"Times New Roman",VMRG:"20",HMRG:"30",PIND:"45",SSPC:"14",PSPC:"14",LNSP:"6",LNWT:"1",FTSZ:"12",HDSZ:"14"},Small:{FTFC:"Times New Roman",VMRG:"10",HMRG:"15",PIND:"45",SSPC:"10",PSPC:"10",LNSP:"4",LNWT:"1",FTSZ:"12",HDSZ:"14"}},{SkinCd:"HRT2",Large:{FTFC:"Georgia",VMRG:"22",HMRG:"45",PIND:"40",SSPC:"16",PSPC:"16",LNSP:"8",LNWT:"1",FTSZ:"11",HDSZ:"13"},Normal:{FTFC:"Georgia",VMRG:"20",HMRG:"34",PIND:"40",SSPC:"14",PSPC:"14",LNSP:"6",LNWT:"1",FTSZ:"11",HDSZ:"13"},Small:{FTFC:"Georgia",VMRG:"12",HMRG:"25",PIND:"40",SSPC:"12",PSPC:"10",LNSP:"4",LNWT:"1",FTSZ:"11",HDSZ:"13"}},{SkinCd:"MTP1",Large:{FTFC:"Tahoma",VMRG:"22",HMRG:"50",PIND:"0",SSPC:"15",PSPC:"15",LNSP:"10",LNWT:"1",FTSZ:"11",HDSZ:"14"},Normal:{FTFC:"Tahoma",VMRG:"20",HMRG:"30",PIND:"0",SSPC:"14",PSPC:"14",LNSP:"8",LNWT:"1",FTSZ:"11",HDSZ:"14"},Small:{FTFC:"Tahoma",VMRG:"10",HMRG:"20",PIND:"0",SSPC:"10",PSPC:"10",LNSP:"6",LNWT:"1",FTSZ:"11",HDSZ:"14"}},{SkinCd:"MTP2",Large:{FTFC:"Century Gothic",VMRG:"22",HMRG:"40",PIND:"0",SSPC:"14",PSPC:"12",LNSP:"10",LNWT:"1",FTSZ:"11",HDSZ:"14"},Normal:{FTFC:"Century Gothic",VMRG:"20",HMRG:"30",PIND:"0",SSPC:"12",PSPC:"12",LNSP:"8",LNWT:"1",FTSZ:"11",HDSZ:"14"},Small:{FTFC:"Century Gothic",VMRG:"10",HMRG:"15",PIND:"0",SSPC:"10",PSPC:"10",LNSP:"5",LNWT:"1",FTSZ:"11",HDSZ:"14"}},{SkinCd:"PCF1",Large:{FTFC:"Arial",VMRG:"22",HMRG:"36",PIND:"0",SSPC:"14",PSPC:"14",LNSP:"7",LNWT:"1",FTSZ:"11",HDSZ:"12"},Normal:{FTFC:"Arial",VMRG:"20",HMRG:"30",PIND:"0",SSPC:"14",PSPC:"10",LNSP:"6",LNWT:"1",FTSZ:"11",HDSZ:"12"},Small:{FTFC:"Arial",VMRG:"10",HMRG:"15",PIND:"0",SSPC:"10",PSPC:"10",LNSP:"4",LNWT:"1",FTSZ:"11",HDSZ:"12"}},{SkinCd:"UPT1",Large:{FTFC:"Times New Roman",VMRG:"22",HMRG:"42",PIND:"0",SSPC:"15",PSPC:"16",LNSP:"8",LNWT:"1",FTSZ:"12",HDSZ:"14"},Normal:{FTFC:"Times New Roman",VMRG:"20",HMRG:"30",PIND:"0",SSPC:"14",PSPC:"14",LNSP:"7",LNWT:"1",FTSZ:"12",HDSZ:"14"},Small:{FTFC:"Times New Roman",VMRG:"10",HMRG:"15",PIND:"0",SSPC:"10",PSPC:"10",LNSP:"4",LNWT:"1",FTSZ:"11",HDSZ:"14"}},{SkinCd:"UPT2",Large:{FTFC:"Century Gothic",VMRG:"22",HMRG:"39",PIND:"0",SSPC:"15",PSPC:"15",LNSP:"9",LNWT:"1",FTSZ:"11",HDSZ:"14"},Normal:{FTFC:"Century Gothic",VMRG:"20",HMRG:"30",PIND:"0",SSPC:"14",PSPC:"14",LNSP:"7",LNWT:"1",FTSZ:"11",HDSZ:"14"},Small:{FTFC:"Century Gothic",VMRG:"10",HMRG:"15",PIND:"0",SSPC:"10",PSPC:"10",LNSP:"4",LNWT:"1",FTSZ:"11",HDSZ:"14"}}],galist:[{popupname:"RESUME_OPTIONS",ganame:"resumeoptions"},{popupname:"NAME",ganame:"name"},{popupname:"LOGIN",ganame:"login"},{popupname:"updatename",ganame:"updatename"},{popupname:"contactInfo",ganame:"contactinfo"},{popupname:"additionalSection",ganame:"freeformsection"},{popupname:"skillSection",ganame:"skillsection"},{popupname:"executiveSummarySection",ganame:"executivesummary"},{popupname:"educationSection",ganame:"educationsection"},{popupname:"experienceSection",ganame:"experiencesection"},{popupname:"spellCheck",ganame:"spellcheck"},{popupname:"resumeCheck",ganame:"resumecheck"},{popupname:"titleSection",ganame:"titlesection"},{popupname:"deleteView",ganame:"deletesection"}]}},function(e,t){e.exports=__webpack_require__(61)},function(e,t){e.exports=__webpack_require__(14)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateDocumentWithSkinCD=u,t.isParagraphEmpty=function(e){return!(!e||!e.docDatas)&&e.docDatas.filter(function(e){return""!=e.charValue}).length<1},t.updateDocumentWithDocStyles=d,t.addUpdateParagraph=p,t.removeParagraph=function(e,t,n){var a=JSON.parse(JSON.stringify(e)),r=S(a,t);if(!r)return null;var i=r.paragraphs.findIndex(function(e){return e.id==n});return-1==i?null:(r.paragraphs.splice(i,1),r.paragraphs=g(r.paragraphs),a)},t.onParaSort=function(e,t,n,a,r,i){var o=t.findIndex(function(e){return e.id==n.id});t=Object.assign([],t);var s=JSON.parse(JSON.stringify(t[o]));s=f(s,a,r,i),t[o]=s;var l=JSON.parse(JSON.stringify(e));return l.sections=t,{document:l,section:s}},t.ParaSort=f,t.removeSection=C,t.addSection=function(e,t,n,a,r,o){var s=JSON.parse(JSON.stringify(e)),c=new i.Section({id:l.guid(),documentID:s.id,docZoneTypeCD:n,index:a,name:t,paragraphs:[],sectionTypeCD:r,topPadding:o});return s.sections.splice(a-1,0,c),s.sections=g(s.sections),s},t.reorderArrayItems=g,t.getSectionById=S,t.getParagraphsById=h,t.getParagraphsByIdFromSection=m,t.getDocDatasForNewPara=D,t.getEmptyDocData=T,t.editItem=function(e,t,n){var a={},r=S(e,t);if(n)a.document=e,a.activeSection=r,a.activePara=h(e,t,n);else if(0==l.isMultiPara(r.sectionTypeCD)&&0==r.paragraphs.length||1==l.isMultiPara(r.sectionTypeCD)){var i=D(r.sectionTypeCD);a=p(e,t,"",i,0)}else a.document=e,a.activeSection=r,a.activePara=r.paragraphs[0];return a},t.createParagraphsForNameContact=function(e){var t=JSON.parse(JSON.stringify(e)),n=t.sections.map(function(e){return e.sectionTypeCD}).indexOf(a.sectionTypeCd.Name),r=t.sections.map(function(e){return e.sectionTypeCD}).indexOf(a.sectionTypeCd.Contact);if(n>-1&&0==t.sections[n].paragraphs.length){var i=v(t.sections[n],t.userId);t.sections[n].paragraphs.push(i)}if(r>-1&&0==t.sections[r].paragraphs.length){var o=v(t.sections[r],t.userId);t.sections[r].paragraphs.push(o)}return t},t.createFirstPara=v,t.getFirstParagraph=function(e,t){var n=S(e,t);return n&&n.paragraphs.length>0?n.paragraphs[0]:null},t.deleteEmptyParagrah=function(e){var t=JSON.parse(JSON.stringify(e));return t.sections.map(function(e){e.sectionTypeCD!=a.sectionTypeCd.Contact&&e.sectionTypeCD!=a.sectionTypeCd.Photo&&e.sectionTypeCD!=a.sectionTypeCd.Name&&JSON.parse(JSON.stringify(e.paragraphs)).map(function(t){t.docDatas.filter(function(e){return""!=e.charValue}).length<1&&(e.paragraphs.splice(e.paragraphs.findIndex(function(e){return e.id==t.id}),1),e.paragraphs=g(e.paragraphs))})}),t},t.setTTCPreferencesInDocument=function(e,t,n,a){var r="jobTitle"==(n=n||"jobTitle")?"J":t,i="jobTitle"==n?t:a;e.preferences=e.preferences||[];var o=e.preferences.map(function(e){return e.docPreferenceTypeCD}).indexOf("STYP"),s=e.preferences.map(function(e){return e.docPreferenceTypeCD}).indexOf("SSTR");if(o>-1)e.preferences[o].value=r,s>-1&&(e.preferences[s].value=i);else{var c={docId:0,docPrefId:0,docPreferenceTypeCD:"STYP",documentID:e.id,id:l.guid(),value:r},u={docId:0,docPrefId:0,docPreferenceTypeCD:"SSTR",documentID:e.id,id:l.guid(),value:i};e.preferences.push(c),s>-1?e.preferences[s].value=i:e.preferences.push(u)}return e},t.createDummySectionWithParagraph=y,t.getMonthinNumber=P,t.updateDocData=function(e,t,n){if(e&&e.length>0&&t&&t.length>0)return t.map(function(t,r){var o=e[0].paragraphID,s=e[0].userId,c=e.findIndex(function(e){return e.fieldCD==t.fieldCd}),u=e.find(function(e){return e.fieldCD==t.fieldCd});if((u=Object.assign({},u)).charValue=t.value,(t.fieldCd==a.fieldCd.JobStartDate||t.fieldCd==a.fieldCd.JobEndDate||t.fieldCd==a.fieldCd.GraduationStartDate||t.fieldCd==a.fieldCd.GraduationEndDate)&&(u.dateTimeValue="",t.value)){var d=t.value.indexOf("/")>-1?"/":" ",p=t.value.split(d);if(2==p.length&&p[0]&&p[1]){var f=new Date(P(p[0],n)+"/5/"+p[1]);u.dateTimeValue=f}}if(t.fieldCd==a.fieldCd.SocialLink){e=e.filter(function(e){return e.fieldCD!==a.fieldCd.SocialLink});var C=1;t.value.forEach(function(t){if(t.socialTypeValue&&t.socialTypeValue.trim()){var n=new i.DocData({id:l.guid(),paragraphID:o,userId:s,fieldCD:a.fieldCd.SocialLink,charValue:t.socialTypeValue,category:"Social",docDataInfo:t.socialTypeCode,index:C});e.push(n),C++}})}else e[c]=u}),e;return e},t.updateDocumentParagraph=function(e,t,n){var a=JSON.parse(JSON.stringify(e)),r=a.sections.map(function(e){return e.id}).indexOf(t),i=Object.assign({},a.sections[r]),o=i.paragraphs.map(function(e){return e.id}).indexOf(n.id);return i.paragraphs[o]=Object.assign({},n),a.sections[r]=i,{newDocument:a,section:i}},t.updateDocumentSkinandStyles=function(e,t,n,a){var r=u(e,t),i=l.resetDefaultValues(t,e.docStyles,n);r=d(r,i),a||r.sections.map(function(e){return e.sectionContainerIndex=0,e});return r},t.isEmptyParagraphExists=function(e){var t=!1;return e.paragraphs.map(function(e,n){e.docDatas.filter(function(e){return""!=e.charValue}).length<1&&(t=!0)}),t},t.addUpdateDocResponses=function(e,t){var n=Object.assign([],e.docResponses);return t.forEach(function(t){var a=n.findIndex(function(e){return e.questionCD==t.questionCD}),r={documentID:e.id,questionCD:t.questionCD,responseCD:t.responseCD};t.responseCD?a>=0?n.splice(a,1,r):n.push(r):n.splice(a,1)}),e=c(e,{docResponses:{$set:n}})},t.addUpdateDocResponsesForQID=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=Object.assign([],e.docResponses);return t.forEach(function(t){var r=n?a.findIndex(function(e){return e.questionID==t.questionID}):a.findIndex(function(e){return e.questionCD==t.questionCD}),i={documentID:e.id,surveyResponseId:t.responseID,responseCD:t.responseCD,questionID:t.questionID,questionCD:t.questionCD};t.responseCD?r>=0?a.splice(r,1,i):a.push(i):a.splice(r,1)}),e=c(e,{docResponses:{$set:a}})},t.setDocumentPreferences=function(e,t){var n=JSON.parse(JSON.stringify(e));return n.preferences=t,n},t.updateDocumentWithSections=function(e,t){var n=JSON.parse(JSON.stringify(e));return n.sections=t,n},t.addUpdateDocDataField=function(e,t,n,a){var r=void 0,o=void 0;-1!=(r=e.findIndex(function(e){return e.fieldCD==t}))?((o=e[r]).charValue=n,e[r]=o):(o=new i.DocData({userId:a,fieldCD:t,charValue:n}),e.push(o));return e},t.UpdateProfileSection=function(e){var t=e,n=void 0;if(e&&e.sections&&e.sections.length>0){var r=e.sections.find(function(e){return e.sectionTypeCD==a.sectionTypeCd.Name}),i=e.sections.find(function(e){return e.sectionTypeCD==a.sectionTypeCd.Contact}),o=e.sections.find(function(e){return e.sectionTypeCD==a.sectionTypeCd.NameContact}),l=[],c=o&&o.paragraphs&&o.paragraphs.length>0?o.paragraphs[0]:v(o);r&&o&&r.paragraphs&&r.paragraphs.length>0&&(l=[].concat(s(l),s(r.paragraphs[0].docDatas))),i&&i.paragraphs&&i.paragraphs.length>0&&(l=[].concat(s(l),s(i.paragraphs[0].docDatas))),c&&c.docDatas&&c.docDatas.find(function(e){return e.fieldCD==a.fieldCd.PhotoURL})&&(l=[].concat(s(l),[c.docDatas.find(function(e){return e.fieldCD==a.fieldCd.PhotoURL})])),l&&l.length>0&&(n=p(e,o.id,c.id,l,c.index)),n&&n.document&&(t=n.document)}return t},t.GetDefaultSectionContainerIndexes=N,t.GetSectionContainerIndex=L,t.GetOrderedSectionsArray=function(e,t){var n=void 0,a=[],r=["PICT","NAME","CNTC","PRFL"];t&&t.length>0&&r.push.apply(r,s(t));(n=e.filter(function(e){return r.includes(e.sectionTypeCD)})).sort(function(e,t){return r.indexOf(e.sectionTypeCD)-r.indexOf(t.sectionTypeCD)}),n&&n.length>0&&n.forEach(function(e,t){e.index=t+1});var i=n.length;(a=e.filter(function(e){return!r.includes(e.sectionTypeCD)}))&&a.length>0&&a.forEach(function(e,t){e.index=i+t+1});return[].concat(s(n),s(a))},t.addMissingDocDatas=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2];return D(e,n).map(function(e){-1==t.findIndex(function(t){return t.fieldCD==e.fieldCD})&&t.push(e)}),t},t.portLegacyDocument=function(e,t,n,r,i,o){var s=e,l=void 0;if(s&&s.sections&&s.sections.length>0){var c=r(n),u=i(n),d=s.sections.find(function(e){return e.sectionTypeCD==a.sectionTypeCd.Name}),f=s.sections.find(function(e){return e.sectionTypeCD==a.sectionTypeCd.Contact}),S=s.sections.find(function(e){return e.sectionTypeCD==a.sectionTypeCd.Photo}),h=s.sections.find(function(e){return e.sectionTypeCD==a.sectionTypeCd.NameContact}),m=s.sections.find(function(e){return e.sectionTypeCD==a.sectionTypeCd.Experience}),D=s.sections.find(function(e){return e.sectionTypeCD==a.sectionTypeCd.Work_History}),T=[],P=0;void 0!==S&&S||(P=L("PICT",c,u),S=y("PICT",1,s.id,t,P,o),s.sections.splice(0,0,S)),void 0!==d&&d||(P=L("NAME",c,u),d=y("NAME",2,s.id,t,P,o),s.sections.splice(1,0,d)),void 0!==f&&f||(P=L("CNTC",c,u),f=y("CNTC",3,s.id,t,P,o),s.sections.splice(2,0,f)),s.sections=g(s.sections);var N=S&&S.paragraphs&&S.paragraphs.length>0?S.paragraphs[0]:v(S,t),b=d&&d.paragraphs&&d.paragraphs.length>0?d.paragraphs[0]:v(d,t),R=f&&f.paragraphs&&f.paragraphs.length>0?f.paragraphs[0]:v(f,t);S&&N&&h&&h.paragraphs&&h.paragraphs.length>0&&((T=h.paragraphs[0].docDatas.filter(function(e){return"PURL"==e.fieldCD}))&&T.length>0&&(l=p(s,S.id,N.id,T,N.index)),s=l&&l.document?l.document:s),d&&b&&h&&h.paragraphs&&h.paragraphs.length>0&&((T=h.paragraphs[0].docDatas.filter(function(e){return"FNAM"==e.fieldCD||"LNAM"==e.fieldCD}))&&T.length>0&&(l=p(s,d.id,b.id,T,b.index)),s=l&&l.document?l.document:s),f&&R&&h&&h.paragraphs&&h.paragraphs.length>0&&((T=h.paragraphs[0].docDatas.filter(function(e){return"FNAM"!=e.fieldCD&&"LNAM"!=e.fieldCD&&"PURL"!=e.fieldCD}))&&T.length>0&&(l=p(s,f.id,R.id,T,R.index)),s=l&&l.document?l.document:s),m&&D&&D.paragraphs&&D.paragraphs.length>0&&D.paragraphs.map(function(e){l=p(s,m.id,"",e.docDatas,-1),s=l&&l.document?l.document:s}),D&&(s=C(s,D.id))}return s},t.DeleteEmptyParagrahFromSection=function(e){return(e=JSON.parse(JSON.stringify(e))).paragraphs.map(function(t,n){t.docDatas.filter(function(e){return""!=e.charValue}).length<1&&(e.paragraphs.splice(n,1),e.paragraphs=g(e.paragraphs))}),e},t.trackTTCEvents=function(e,t,n){var a=[];if(n&&n.length>0)return n.forEach(function(n){var r=new i.TrackRequest({eventType:"ttc",eventSubType:"clicked",eventContext:"track",portalCD:t,userID:e,actionType:0,eventDetails:n});a.push(r)}),a},t.setNewDocIdInDocument=function(e,t){var n=JSON.parse(JSON.stringify(e)),a=t||l.guid();return n.id=a,n.docStyles=n.docStyles.map(function(e){return e.documentID=a,e}),n.preferences=n.preferences.map(function(e){return e.documentID=a,e}),n.sections=n.sections.map(function(e){return e.documentID=a,e}),n},t.SetDefaultSectionContainerIndexes=function(e,t){var n=Object.assign([],t.sections),a=N(e,t.sections);n&&n.length>0&&a&&a.length>0&&n.forEach(function(e){var t=a.find(function(t){return t.sectionCode==e.sectionTypeCD});t&&(e.sectionContainerIndex=t.value)});return t.sections=n,t},t.updateSkillSection=function(e,t){var n=e.findIndex(function(e){return e.sectionTypeCD==a.sectionTypeCd.Skills}),i=e[n];if(i&&i.paragraphs&&i.paragraphs.length>0){var o=i.paragraphs[0],s=r.getCharValue(i.paragraphs[0].docDatas,a.fieldCd.SkillsCollection_1),c=r.getCharValue(i.paragraphs[0].docDatas,a.fieldCd.SkillsCollection_2),u=r.getCharValue(i.paragraphs[0].docDatas,a.fieldCd.SkillsCollection_3),d=l.splitHTML((s+c+u).replace(/<ul>|<\/ul>|\n/g,""),t?3:2);d.first=d.first?b(d.first):"",d.second=d.second?b(d.second):"";var p=o.docDatas.findIndex(function(e){return e.fieldCD==a.fieldCd.SkillsCollection_1}),f=o.docDatas.findIndex(function(e){return e.fieldCD==a.fieldCd.SkillsCollection_2});if(o.docDatas[p].charValue=d.first,o.docDatas[f].charValue=d.second,t){r.fieldExists(o.docDatas,a.fieldCd.SkillsCollection_3)||o.docDatas.push(T(a.fieldCd.SkillsCollection_3));var C=o.docDatas.findIndex(function(e){return e.fieldCD==a.fieldCd.SkillsCollection_3});d.third=d.third?b(d.third):"",o.docDatas[C].charValue=d.third}else o.docDatas=R(o.docDatas,a.fieldCd.SkillsCollection_3);i.paragraphs[0]=o,e[n]=i}return e},t.updateAccmSection=function(e,t){var n=e.findIndex(function(e){return e.sectionTypeCD==a.sectionTypeCd.Accomplishments});if(n>-1){var i=e[n],o=i.paragraphs[0];if(i&&i.paragraphs&&i.paragraphs.length>0){var s=r.getCharValue(i.paragraphs[0].docDatas,a.fieldCd.FreeForm),c=r.getCharValue(i.paragraphs[0].docDatas,a.fieldCd.FreeForm_1),u=l.splitHTML((s+c).replace(/<ul>|<\/ul>|\n/g,""),t?2:1);u.first=u.first?b(u.first):"";var d=o.docDatas.findIndex(function(e){return e.fieldCD==a.fieldCd.FreeForm});if(o.docDatas[d].charValue=u.first,t){r.fieldExists(o.docDatas,a.fieldCd.FreeForm_1)||o.docDatas.push(T(a.fieldCd.FreeForm_1));var p=o.docDatas.findIndex(function(e){return e.fieldCD==a.fieldCd.FreeForm_1});u.second=u.second?b(u.second):"",o.docDatas[p].charValue=u.second}else o.docDatas=R(o.docDatas,a.fieldCd.FreeForm_1);i.paragraphs[0]=o,e[n]=i}}return e},t.GetProperHtml=b,t.RemoveDocData=R,t.getAlignmentOptions=function(e){var t=[];if(e){var n=e.querySelectorAll("alignOption");Array.prototype.slice.call(n).forEach(function(e){if(e&&e.attributes){var n=e.attributes.options?e.attributes.options.value:"",a=e.attributes.sections?e.attributes.sections.value:"",r=a?a.toString().split(","):[];Array.prototype.slice.call(r).forEach(function(e){t.push({sectionCD:e,optAlignment:n})})}})}return t},t.getDefaultAlignment=E,t.getSectionPreference=F,t.getActiveSectionAlignmentValue=function(e,t){var n=null;if(e){var a=JSON.parse(JSON.stringify(e)),r=F(a,"textAlign");r?r.value&&(n=r.value):t&&(n=E(t,a.sectionTypeCD))}return n},t.getSignatureAlignmentValues=function(e,t){var n="1",r="0",i="0";switch(e){case"L":n="1",r="0",i="0";break;case"C":n="0",r="1",i="0";break;case"R":n="0",r="0",i="1";break;default:n=t&&t.docDatas&&!l.isNullOrWhitespace(l.getCharValue(t.docDatas,a.fieldCd.HorizontalLeft))?l.getCharValue(t.docDatas,a.fieldCd.HorizontalLeft):"1",r=t&&t.docDatas&&!l.isNullOrWhitespace(l.getCharValue(t.docDatas,a.fieldCd.HorizontalMid))?l.getCharValue(t.docDatas,a.fieldCd.HorizontalMid):"0",i=t&&t.docDatas&&!l.isNullOrWhitespace(l.getCharValue(t.docDatas,a.fieldCd.HorizontalRight))?l.getCharValue(t.docDatas,a.fieldCd.HorizontalRight):"0"}return{signHLeft:n,signHMid:r,signHRight:i}},t.AddUpdateSectionPreference=function(e,t,n){if(e){var a=JSON.parse(JSON.stringify(e));a.preferences=a.preferences||[];var r=a.preferences.findIndex(function(e){return e.typeCD==t});if(r>-1)a.preferences[r].value=n;else{var i={typeCD:t,value:n};a.preferences.push(i)}return a}return null},t.updateDocumentSection=function(e,t){if(e){var n=JSON.parse(JSON.stringify(e)),a=n.sections.findIndex(function(e){return e.sectionTypeCD==t.sectionTypeCD});return a>-1&&(n.sections[a]=t),n}return null},t.isAlignmentAvailableInFormattingPanel=function(e,t){var n=!1;if(e&&t){var a=e.indexOf(t);a>-1&&(n=!0)}return n},t.isAlignmentAvailable=function(e,t,n){var r=!0;if(e&&t&&n){var i=null;n==a.AlignmentType.LEFT?i=e.left:n==a.AlignmentType.RIGHT?i=e.right:n==a.AlignmentType.CENTER?i=e.center:n==a.AlignmentType.JUSTIFY&&(i=e.justify),i&&i.length>0&&i.indexOf(t)>-1&&(r=!1)}return r};var a=o(n(1)),r=o(n(2)),i=n(5);function o(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}function s(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}var l=n(0),c=(n(4),n(10));function u(e,t){var n=JSON.parse(JSON.stringify(e));return n&&(n.skinCD=t),n}function d(e,t){var n=JSON.parse(JSON.stringify(e));return n&&(n.docStyles=t),n}function p(e,t,n,a,r){var o=JSON.parse(JSON.stringify(e)),s=Object.assign({},S(o,t));if(!s)return null;var c=new i.Paragraph({id:n||l.guid(),sectionID:s.id,index:r>0?r:s.paragraphs.length});c.docDatas=a.map(function(e){return e.id=l.guid(),e.paragraphID=c.id,e.userId=o.userId,e});var u=c.index;n&&(u=s.paragraphs.findIndex(function(e){return e.id==n})),s.paragraphs.splice(u,n?1:0,c),s.paragraphs=g(s.paragraphs,!0,l.isMultiPara(s.sectionTypeCD));var d={},p=o.sections.findIndex(function(e){return e.id==t});return o.sections[p]=s,d.document=o,d.activeSection=s,d.activePara=c,d}function f(e,t,n,a){var r=Object.assign([],e.paragraphs);return(r=a(r,t,n)).forEach(function(e,t){e.index=t+1}),e.paragraphs=r,e}function C(e,t){var n=JSON.parse(JSON.stringify(e)),a=n.sections.findIndex(function(e){return e.id==t});return-1==a?n:(n.sections.splice(a,1),n.sections=g(n.sections),n)}function g(e,t,n){return e.map(function(e,a){return e.index=t&&n?a:a+1,e})}function S(e,t){if(e){var n=e.sections;return void 0==n?null:n.find(function(e){return e.id==t})}}function h(e,t,n){return m(S(e,t),n)}function m(e,t){return e?e.paragraphs.find(function(e){return e.id==t}):null}function D(e){var t=arguments.length>1&&void 0!==arguments[1]&&arguments[1],n=[];return l.isFRFM(e)?n.push(T(a.fieldCd.FreeFormat)):e==a.sectionTypeCd.Education?(n.push(T(a.fieldCd.DegreeEarned)),n.push(T(a.fieldCd.FieldOfExpertise)),n.push(T(a.fieldCd.SchoolName)),n.push(T(a.fieldCd.SchoolCity)),n.push(T(a.fieldCd.SchoolState)),n.push(T(a.fieldCd.SchoolCountry)),n.push(T(a.fieldCd.GraduationYear)),n.push(T(a.fieldCd.SchoolLocation)),n.push(T(a.fieldCd.FreeFormat)),n.push(T(a.fieldCd.GraduationStartDate)),n.push(T(a.fieldCd.GraduationEndDate)),n.push(T(a.fieldCd.EducationDegreeType)),n.push(T(a.fieldCd.EducationGraduate)),n.push(T(a.fieldCd.EnrollStatus)),n.push(T(a.fieldCd.GraduationDateFormat)),n.push(T(a.fieldCd.GraduationHonours)),n.push(T(a.fieldCd.GradCurrentlyEnrolled)),n.push(T(a.fieldCd.GradePointAverage))):e==a.sectionTypeCd.Executive_Summary?(n.push(T(a.fieldCd.FreeFormat)),n.push(T(a.fieldCd.SkillsCollection_1)),n.push(T(a.fieldCd.SkillsCollection_2))):e==a.sectionTypeCd.Experience||e==a.sectionTypeCd.Military_Experience?(n.push(T(a.fieldCd.JobStartDate)),n.push(T(a.fieldCd.JobEndDate)),n.push(T(a.fieldCd.Company)),n.push(T(a.fieldCd.JobTitle)),n.push(T(a.fieldCd.JobCity)),n.push(T(a.fieldCd.JobState)),n.push(T(a.fieldCd.JobCountry)),n.push(T(a.fieldCd.JobDescription)),n.push(T(a.fieldCd.TypeOfContract)),n.push(T(a.fieldCd.JobDateFormat))):e==a.sectionTypeCd.Work_History?(n.push(T(a.fieldCd.JobStartDate)),n.push(T(a.fieldCd.JobEndDate)),n.push(T(a.fieldCd.Company)),n.push(T(a.fieldCd.JobTitle)),n.push(T(a.fieldCd.JobCity)),n.push(T(a.fieldCd.JobState))):e==a.sectionTypeCd.Executive_Experience?(n.push(T(a.fieldCd.Company)),n.push(T(a.fieldCd.CompanyDescription)),n.push(T(a.fieldCd.JobTitle)),n.push(T(a.fieldCd.JobCity)),n.push(T(a.fieldCd.JobState)),n.push(T(a.fieldCd.JobStartDate)),n.push(T(a.fieldCd.JobEndDate)),n.push(T(a.fieldCd.JobDescription))):e==a.sectionTypeCd.Contact?(n.push(T(a.fieldCd.Street)),n.push(T(a.fieldCd.State)),n.push(T(a.fieldCd.City)),n.push(T(a.fieldCd.ZipCode)),n.push(T(a.fieldCd.Country)),n.push(T(a.fieldCd.HomePhone)),n.push(T(a.fieldCd.CellPhone)),n.push(T(a.fieldCd.Email)),t&&n.push(T(a.fieldCd.supplementaryInfo)),n.push(T(a.fieldCd.SocialWebsiteLink))):e==a.sectionTypeCd.Name?(n.push(T(a.fieldCd.FirstName)),n.push(T(a.fieldCd.LastName))):e==a.sectionTypeCd.Skills?(n.push(T(a.fieldCd.SkillsCollection_1)),n.push(T(a.fieldCd.SkillsCollection_2)),n.push(T(a.fieldCd.RatingValue)),n.push(T(a.fieldCd.RatingText))):e==a.sectionTypeCd.External_Links?(n.push(T(a.fieldCd.External_Link1)),n.push(T(a.fieldCd.External_Link2)),n.push(T(a.fieldCd.External_Link3))):e==a.sectionTypeCd.ExecutiveResumeTitle?(n.push(T(a.fieldCd.MainTitle)),n.push(T(a.fieldCd.SubTitle1)),n.push(T(a.fieldCd.SubTitle2)),n.push(T(a.fieldCd.SubTitle3))):e==a.sectionTypeCd.Technical_Skills?(n.push(T(a.fieldCd.Skill)),n.push(T(a.fieldCd.SkillRating)),n.push(T(a.fieldCd.NumberOfYearsSkillUsed)),n.push(T(a.fieldCd.SkillLastUsed))):e==a.sectionTypeCd.ResumeTitle?n.push(T(a.fieldCd.ResumeTitle)):e==a.sectionTypeCd.Photo?n.push(T(a.fieldCd.PhotoURL)):e==a.sectionTypeCd.NameContact?(n.push(T(a.fieldCd.FirstName)),n.push(T(a.fieldCd.LastName)),n.push(T(a.fieldCd.DocumentTitle)),n.push(T(a.fieldCd.HomePhone)),n.push(T(a.fieldCd.CellPhone)),n.push(T(a.fieldCd.Email)),n.push(T(a.fieldCd.supplementaryInfo)),n.push(T(a.fieldCd.PhotoURL))):e==a.sectionTypeCd.Signature?(n.push(T(a.fieldCd.SignatureName)),n.push(T(a.fieldCd.SignatureURL)),n.push(T(a.fieldCd.HorizontalLeft)),n.push(T(a.fieldCd.HorizontalMid)),n.push(T(a.fieldCd.HorizontalRight)),n.push(T(a.fieldCd.SignatureDate)),n.push(T(a.fieldCd.SignaturePlace)),n.push(T(a.fieldCd.SignatureFontFamily)),n.push(T(a.fieldCd.SignatureFontSize)),n.push(T(a.fieldCd.SignatureFontStyle)),n.push(T(a.fieldCd.SignatureFontColor)),n.push(T(a.fieldCd.SignatureHeight)),n.push(T(a.fieldCd.SignatureWidth)),n.push(T(a.fieldCd.SignatureCategory)),n.push(T(a.fieldCd.SignatureContrast))):e==a.sectionTypeCd.Softwares?(n.push(T(a.fieldCd.FreeForm)),n.push(T(a.fieldCd.RatingValue))):e==a.sectionTypeCd.Overview?(n.push(T(a.fieldCd.NumberValue)),n.push(T(a.fieldCd.FreeForm))):e==a.sectionTypeCd.Button&&(n.push(T(a.fieldCd.BtnText)),n.push(T(a.fieldCd.BtnUrl))),n}function T(e){return new i.DocData({fieldCD:e,charValue:""})}function v(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],a=D(e.sectionTypeCD,n),r=new i.Paragraph({id:l.guid(),sectionID:e.id,index:0});return r.docDatas=a.map(function(e){return e.id=l.guid(),e.paragraphID=r.id,e.userId=t,e}),r}function y(e,t,n,a){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,o=arguments[5],s=void 0;o&&(s=o.filter(function(t){return t.sectionTypeCd==e})[0]);var c=new i.Section({id:l.guid(),documentID:n,docZoneTypeCD:s?s.doczonetypecd:"",index:t,name:s?s.name:"",paragraphs:[],sectionTypeCD:e,topPadding:0,sectionContainerIndex:r}),u=v(c,a);return c.paragraphs[0]=u,c}function P(e,t){return isNaN(e)&&t&&t.shortMonth?t.shortMonth.indexOf(e):e}function N(e,t){var n=[],a=Object.assign([],t);return a&&a.forEach(function(t){var a=L(t.sectionTypeCD,e),r={sectionCode:t.sectionTypeCD,key:t.sectionId,value:a};n.push(r)}),n}function L(e,t,n){var r=0,i=Array.from(t.querySelectorAll("container")),o=[];if((n=!!(n||i.length>0))&&(o=i.sort(function(e,t){return parseInt(e.getAttribute("index"))-parseInt(t.getAttribute("index"))})),n){var s=!(!t||!t.querySelector("#SECTION_"+e));if(e!=a.sectionTypeCd.Photo&&e!=a.sectionTypeCd.NameContact&&e!=a.sectionTypeCd.Name&&e!=a.sectionTypeCd.Contact||s){var l=o.find(function(t){return-1!==t.getAttribute("value").toLowerCase().indexOf(e.toLowerCase())});l?r=parseInt(l.getAttribute("index")):(l=o.find(function(e){return"*"==e.getAttribute("value")}),r=parseInt(l.getAttribute("index")))}else r=i?i.length+1:0}return r}function b(e){return"<ul>"+e.replace(/<ul>/g,"").replace(/<\/ul>/g,"")+"</ul>"}function R(e,t){var n=e.findIndex(function(e){return e.fieldCD==t});return n>-1&&e.splice(n,1),e}function E(e,t){var n=a.AlignmentType.LEFT;if(e){var r=e.querySelectorAll("aligndefaults");Array.prototype.slice.call(r).forEach(function(e){e&&e.attributes&&Array.prototype.slice.call(e.attributes).forEach(function(e){if(e&&e.value&&e.value.indexOf(t)>-1){var r=e.name?e.name.toString().toLowerCase():"";n="c"==r[0]?a.AlignmentType.CENTER:"r"==r[0]?a.AlignmentType.RIGHT:"j"==r[0]?a.AlignmentType.JUSTIFY:a.AlignmentType.LEFT}else;})})}return n}function F(e,t){var n=null,a=JSON.parse(JSON.stringify(e));if(a&&a.preferences){var r=a.preferences.findIndex(function(e){return e.typeCD==t});r>-1&&(n=a.preferences[r])}return n}},function(e,t,n){"use strict";var a=n(0),r=n(2),i=n(1),o=n(6),s=n(3);e.exports={CommonHelper:a,FieldHelper:r,TypeCodes:i,DocumentHelper:o,Options:s}},function(e,t){e.exports=__webpack_require__(62)},function(e,t){e.exports=__webpack_require__(10)},function(e,t){e.exports=__webpack_require__(9)}]);

/***/ }),
/* 8 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.AddOrReplaceSectionContent = exports.getGapsReason = exports.isEnrolledInSchool = exports.getSchoolName = exports.isCollegeGraduate = exports.checkForContent = exports.getIsWorkGaps = exports.NameValuePair = exports.PORTAL_TYPE = exports.MOCK_HANDLER_TYPE = exports.MOCK_CONFIG_TYPE = undefined;
exports.isTrueCondition = isTrueCondition;
exports.convertValueToObject = convertValueToObject;
exports.isSystemOnline = isSystemOnline;
exports.checkOnlineWithXhr = checkOnlineWithXhr;
exports.getAddressFields = getAddressFields;
exports.getDocumentName = getDocumentName;
exports.getLettersWithPrefix = getLettersWithPrefix;
exports.getDocumentSections = getDocumentSections;
exports.keyboardOpen = keyboardOpen;
exports.keyboardClose = keyboardClose;
exports.getSectionById = getSectionById;
exports.getParagraphsById = getParagraphsById;
exports.getBasePath = getBasePath;
exports.GetFirstParagraph = GetFirstParagraph;
exports.isDocDataEmpty = isDocDataEmpty;
exports.getTextFromHtml = getTextFromHtml;
exports.showHideDependencyNodes = showHideDependencyNodes;
exports.getLetterTypeDetails = getLetterTypeDetails;
exports.getDocFormatForTraits = getDocFormatForTraits;
exports.removeAllUnwantedHtmlChars = removeAllUnwantedHtmlChars;
exports.getnthIndexInString = getnthIndexInString;
exports.isHighSchoolUser = isHighSchoolUser;
exports.isSecondArrayInFirstArray = isSecondArrayInFirstArray;
exports.onBoardingV2Routing = onBoardingV2Routing;
exports.setDefaultsforSkillsAndStrengths = setDefaultsforSkillsAndStrengths;
exports.updateEmailDynamicallyInLetter = updateEmailDynamicallyInLetter;
exports.autoPopulateDynamicTextField = autoPopulateDynamicTextField;
exports.contextualPopulateDynamicFieldsForeignChars = contextualPopulateDynamicFieldsForeignChars;
exports.replaceNameInClosure = replaceNameInClosure;
exports.replaceClosureDynamicTextField = replaceClosureDynamicTextField;
exports.getValFromDocPreference = getValFromDocPreference;
exports.chunkArray = chunkArray;
exports.resetOnBoardingV2UserInput = resetOnBoardingV2UserInput;
exports.convertToTitleCase = convertToTitleCase;
exports.convertToLowerCase = convertToLowerCase;
exports.deleteExperimentCookies = deleteExperimentCookies;
exports.updateUserUidInCookieForUserSwap = updateUserUidInCookieForUserSwap;
exports.AddDocTraitsInCookie = AddDocTraitsInCookie;
exports.AddBEUserActionCookie = AddBEUserActionCookie;
exports.camelizeFunction = camelizeFunction;
exports.removeSectionsFromDocument = removeSectionsFromDocument;
exports.sanitizeVal = sanitizeVal;
exports.isUserInputModified = isUserInputModified;
exports.getCurrentDateTime = getCurrentDateTime;
exports.getValidDocDate = getValidDocDate;
exports.getVariantFromRunTest = getVariantFromRunTest;
exports.removeHTML = removeHTML;
exports.createDataForRecipientSection = createDataForRecipientSection;
exports.setCustomLocalizedProperties = setCustomLocalizedProperties;
exports.getProfileNameSectionVal = getProfileNameSectionVal;
exports.getProfileContactSectionVal = getProfileContactSectionVal;
exports.setTypeCodesProperties = setTypeCodesProperties;
exports.isValidUserUpdateRequest = isValidUserUpdateRequest;
exports.isMultiColumnSkin = isMultiColumnSkin;
exports.GetSectionContainerIndex = GetSectionContainerIndex;
exports.GetDefaultSectionContainerIndexes = GetDefaultSectionContainerIndexes;
exports.getSectionsToBeRemoved = getSectionsToBeRemoved;
exports.getStyleSheetForDownload = getStyleSheetForDownload;
exports.isSafari = isSafari;
exports.updateObjClaims = updateObjClaims;
exports.getDocRendererLocalization = getDocRendererLocalization;
exports.isValidText = isValidText;
exports.getConcatenatedDocDataText = getConcatenatedDocDataText;
exports.redirectPage = redirectPage;
exports.getMinSectionDragLimit = getMinSectionDragLimit;
exports.getMaxSectionDragLimit = getMaxSectionDragLimit;
exports.getCssScaleTransform = getCssScaleTransform;
exports.reOrderCloserSection = reOrderCloserSection;
exports.reOrderCTACSection = reOrderCTACSection;
exports.getIncompleteSection = getIncompleteSection;
exports.getDefaultDocumentObj = getDefaultDocumentObj;
exports.updateHTMLContent = updateHTMLContent;
exports.formatCalenderDate = formatCalenderDate;
exports.reOrderIndicesOfSections = reOrderIndicesOfSections;
exports.replaceTagsWithOBValues = replaceTagsWithOBValues;
exports.isParaStart = isParaStart;
exports.getOnboardingDataFromDocPref = getOnboardingDataFromDocPref;
exports.getOnboardingStepDetails = getOnboardingStepDetails;
exports.getOnboardingArrFromData = getOnboardingArrFromData;
exports.getStepActionFromData = getStepActionFromData;
exports.getScaleVal = getScaleVal;
exports.downloadFile = downloadFile;
exports.showSVGDownload = showSVGDownload;
exports.getFieldDetails = getFieldDetails;
exports.getDocumentSectionData = getDocumentSectionData;
exports.isSeparatorSkin = isSeparatorSkin;
exports.getOccMatchingTTCLocalized = getOccMatchingTTCLocalized;
exports.getOccMatchingTTC = getOccMatchingTTC;
exports.setNameContactSection = setNameContactSection;
exports.getFirstTTCTextForPreview = getFirstTTCTextForPreview;
exports.getDocForPreview = getDocForPreview;
exports.isExpFlowChanged = isExpFlowChanged;
exports.isStringStartsWithVowel = isStringStartsWithVowel;
exports.setPreloadableImageSrc = setPreloadableImageSrc;
exports.checkDate = checkDate;
exports.setScrollTop = setScrollTop;
exports.scrollAnimate = scrollAnimate;
exports.getElementOffsetTopFromBody = getElementOffsetTopFromBody;
exports.isElementVisible = isElementVisible;
exports.isPurgeUserScenario = isPurgeUserScenario;
exports.isValidSkin = isValidSkin;
exports.removeBRTag = removeBRTag;
exports.fetchSectionBasedContentEngineTTC = fetchSectionBasedContentEngineTTC;
exports.checkForNameAndContactSection = checkForNameAndContactSection;
exports.getTextTunerContentPromise = getTextTunerContentPromise;
exports.replaceHtmlFromContent = replaceHtmlFromContent;
exports.setSignatureSection = setSignatureSection;
exports.getSignatureUpdatedDocument = getSignatureUpdatedDocument;
exports.getSectionsNameUpdateDoc = getSectionsNameUpdateDoc;
exports.getsectionsNameUpdateList = getsectionsNameUpdateList;
exports.getDefaultSignatureSection = getDefaultSignatureSection;
exports.generateImage = generateImage;
exports.trimCanvas = trimCanvas;
exports.rowBlank = rowBlank;
exports.columnBlank = columnBlank;
exports.isNullOrWhitespace = isNullOrWhitespace;
exports.updateSignatureDocData = updateSignatureDocData;
exports.setTemplateForUploadResumeFlow = setTemplateForUploadResumeFlow;
exports.fetchOnboardingdata = fetchOnboardingdata;
exports.updateUserNameInMySetting = updateUserNameInMySetting;
exports.isJsonParsable = isJsonParsable;
exports.b64toBlob = b64toBlob;
exports.getJobHierarchyByExp = getJobHierarchyByExp;
exports.getemptySignaturePic = getemptySignaturePic;
exports.getDefaultDocStyle = getDefaultDocStyle;

var _typeCodes = __webpack_require__(6);

var typeCd = _interopRequireWildcard(_typeCodes);

var _componentlist = __webpack_require__(32);

var _textEditorHelper = __webpack_require__(141);

var textEditorHelper = _interopRequireWildcard(_textEditorHelper);

var _viewmodel = __webpack_require__(14);

var _helper = __webpack_require__(7);

var _ajaxhelper = __webpack_require__(17);

var _localforage = __webpack_require__(10);

var localforage = _interopRequireWildcard(_localforage);

var _commonActions = __webpack_require__(56);

var CommonActions = _interopRequireWildcard(_commonActions);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

//Config Defaults

var MOCK_CONFIG_TYPE = exports.MOCK_CONFIG_TYPE = {
  CONFIGURED_FLAG: "CONFIGURED_FLAG",
  PASSED_FLAG: "PASSED_FLAG",
  PREFER_ONLINE_IF_CONNECTED: "PREFER_ONLINE_IF_CONNECTED"
};

var MOCK_HANDLER_TYPE = exports.MOCK_HANDLER_TYPE = {
  ONLINE: "ONLINE",
  OFFLINE_DATA: "OFFLINE_DATA",
  TEST_DATA: "TEST_DATA"
};

var PORTAL_TYPE = exports.PORTAL_TYPE = {
  LC: "LC",
  RNA: "RNA",
  MPR: "MPR"
};

var NameValuePair = exports.NameValuePair = function NameValuePair(name, value) {
  var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';

  _classCallCheck(this, NameValuePair);

  this.k = name; //key
  this.v = value; //value
  this.t = type; //type
};

function isTrueCondition(baseVlaue, valToCompare, type) {
  try {
    switch (type) {
      case 'contains':
        return eval('/' + valToCompare + '/i.test(\'' + baseVlaue.toString() + '\')');
      case 'equals':
        return baseVlaue == valToCompare;
      case 'startswith':
        return baseVlaue.toString().startsWith(valToCompare);
      default:
        throw "Comparison condition not registered yet";
    }
  } catch (e) {
    return false;
  }
}
function convertValueToObject(item, propName) {
  var lstadditionalNameValuePairProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  var obj = {};
  obj[propName.toString()] = item;
  if (lstadditionalNameValuePairProps) lstadditionalNameValuePairProps.forEach(function (element) {
    obj[element.k] = element.v;
  }, this);
  return obj;
}

function isSystemOnline() {
  return window.navigator.onLine;
  //return checkOnlineWithXhr('').then(function(data){return true;},function(){return false;})
}

function checkOnlineWithXhr(url, httpVerb) {
  // Return a new promise.
  return new Promise(function (resolve, reject) {
    var req = new XMLHttpRequest();
    req.open(httpVerb, url);
    req.onload = function () {
      if (req.status == 200) {
        resolve(req.response);
      } else {
        reject(Error(req.statusText));
      }
    };
    req.onerror = function () {
      reject(Error("Network Error"));
    };

    // Make the request
    req.send();
  });
}

function getAddressFields(place) {
  var address = { street: '', city: '', state: '', zip: '', country: '' };
  if (place) {
    address.street = place.name;
    place.address_components.map(function (object) {
      if (object.long_name || object.short_name) {
        if (object.types.indexOf(typeCd.customFields.G_LOCALITY) > -1) {
          address.city = object.long_name ? object.long_name : object.short_name;
        } else if (object.types.indexOf(typeCd.customFields.G_ADMINISTRATIVE_AREA_LEVEL_1) > -1) {
          address.state = object.short_name;
        } else if (object.types.indexOf(typeCd.customFields.G_POSTAL_CODE) > -1) {
          address.zip = object.long_name ? object.long_name : object.short_name;
        } else if (object.types.indexOf(_helper.TypeCodes.fieldCd.Country) > -1) {
          address.country = object.long_name ? object.long_name : object.short_name;
        }
      }
    });
  }
  return address;
}

function getDocumentName() {
  var firstName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var lastName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var companyName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';
  var letters = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : [];

  var name = camelizeFunction(firstName) + camelizeFunction(lastName);
  companyName = companyName.replaceAllOccurrences('\\.', '');
  companyName = companyName.replaceAllOccurrences('&', '');
  companyName = companyName.replaceAllOccurrences('-', '');
  companyName = companyName ? camelizeFunction(companyName, null, true) : '';
  var docName = name + (name && companyName && '_') + companyName;
  docName = docName || RDL.Localization.lbl_letterText.trim();
  var lettersWithSameName = getLettersWithPrefix(letters, docName);
  var count = lettersWithSameName ? lettersWithSameName.length : 0;
  var index = count.toString().length > 1 ? 47 : 48;
  docName = docName.slice(0, index);
  docName = docName + '_' + (count + 1);
  return docName;
}

function getLettersWithPrefix(letters, docName) {
  return letters.filter(function (doc) {
    return doc && doc.name && doc.name.slice(0, doc.name.lastIndexOf('_')) == docName;
  });
}

function getDocumentSections() {
  var document = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var sectionArray = [];
  for (var sectionName in document) {
    var section = document[sectionName];
    if (sectionName == "Contact") {
      sectionArray.push("NAME");
      sectionArray.push("CNTC");
    } else if (section && !Array.isArray(section) && section.sectionId && section.index && section.paragraphs) {
      sectionArray.push(section.sectionTypeCD);
    }
  }
  for (var j = 0; j < document.AdditionalSection.length; j++) {
    if (document.AdditionalSection[j].sectionTypeCD != _helper.TypeCodes.sectionTypeCd.External_Links) {
      sectionArray.push(document.AdditionalSection[j].sectionTypeCD);
    }
  }
  return sectionArray;
}

function keyboardOpen() {
  document.body.classList.add("keyboard-open");
}

function keyboardClose() {
  document.body.classList.remove("keyboard-open");
}

function getSectionById(sections, sectionId) {
  if (!sections) return null;
  return sections.find(function (sec) {
    return sec.id == sectionId;
  });
}
function getParagraphsById(sections, sectionId, paragraphId) {
  var requiredSection = getSectionById(sections, sectionId);

  if (requiredSection) return requiredSection.paragraphs.find(function (para) {
    return para.id == paragraphId;
  });else return null;
}

function getBasePath(sectionCd) {
  var reg = /(\(.*?\))/gi;
  var basePath = "";

  if (_helper.CommonHelper.isFRFM(sectionCd) || sectionCd == _helper.TypeCodes.sectionTypeCd.Skills) {
    basePath = _componentlist.ComponentList.Additional.Path.replace(reg, "");
  } else if (sectionCd == _helper.TypeCodes.sectionTypeCd.ResumeTitle || sectionCd == _helper.TypeCodes.sectionTypeCd.ExecutiveResumeTitle || sectionCd == _helper.TypeCodes.sectionTypeCd.External_Links) {
    basePath = _componentlist.ComponentList.TitleSection.Path.replace(reg, "");
  } else if (sectionCd == _helper.TypeCodes.sectionTypeCd.Education) {
    basePath = _componentlist.ComponentList.Education.Path.replace(reg, "");
  } else if (sectionCd == _helper.TypeCodes.sectionTypeCd.Experience) {
    basePath = _componentlist.ComponentList.Experience.Path.replace(reg, "");
  }
  return basePath;
}

function GetFirstParagraph(sections, sectionId) {
  var Section = getSectionById(sections, sectionId);
  if (Section) {
    if (Section.paragraphs.length > 0) return Section.paragraphs[0];else return null;
  } else return null;
}

function isDocDataEmpty(docDatas) {
  var flag = true;
  if (docDatas && docDatas.length > 0) {
    docDatas.map(function (docData, index) {
      if (docData.charValue) {
        flag = false;
        return;
      }
    }.bind(this));
  } else return true;
  return flag;
}

function getTextFromHtml(data) {
  var div = document.createElement("div");
  div.innerHTML = data;
  return div.innerText;
}

function showHideDependencyNodes(html, sectionTypeCd, docDatas) {
  var el = document.createElement('html');
  var fragment = document.createDocumentFragment();
  el.innerHTML = html;
  fragment.appendChild(el);

  var paragraph = fragment.querySelector('[id=PARAGRAPH_' + sectionTypeCd + "]");
  if (paragraph) {
    var dependencyElements = paragraph.querySelectorAll('[dependency]');
    Array.from(dependencyElements).forEach(function (depElem) {
      var dependencyValues = depElem.getAttribute('dependency').split('+');
      var valueArray = [];

      var _loop = function _loop(i) {
        var fieldValue = '';
        if (dependencyValues[i].includes('|')) {
          var concatValues = dependencyValues[i].split('|');
          concatValues.forEach(function (fieldType) {
            var value = _helper.FieldHelper.getValue(docDatas.find(function (data) {
              return data.fieldCD == fieldType;
            }));
            if (value == "") {
              value = _helper.FieldHelper.getValue(docDatas.find(function (data) {
                return data.fieldCD == fieldType;
              }), "", [], false);
            }
            fieldValue += value;
          });
        } else {
          fieldValue = _helper.FieldHelper.getValue(docDatas.find(function (data) {
            return data.fieldCD == dependencyValues[i];
          }));
          if (fieldValue == "") {
            fieldValue = _helper.FieldHelper.getValue(docDatas.find(function (data) {
              return data.fieldCD == dependencyValues[i];
            }), "", [], false);
          }
        }
        valueArray.push(fieldValue);
      };

      for (var i = 0; i < dependencyValues.length; i++) {
        _loop(i);
      }
      if (valueArray.includes('')) {
        var etr = fragment.querySelectorAll('[dependency="' + depElem.getAttribute('dependency') + '"]');
        if (etr[0] && etr[0].parentNode) {
          etr[0].parentNode.removeChild(etr[0]);
        }
      }
    });
  }
  html = fragment.childNodes[0].innerHTML;
  return html;
}

function getLetterTypeDetails(documentObj) {
  var skin = window.RDL.Skins.filter(function (skin) {
    return skin.skinCD == documentObj.skinCD;
  });
  if (!skin || !skin.length) return {};
  var skinName = skin ? skin[0].name : "";

  var letterType = window.RDL.moreTemplatesInfo.filter(function (templateInfo) {
    return templateInfo.TemplateId == documentObj.templateID;
  });

  var letterTypeName = letterType.length ? window.RDL.Localization[letterType[0].Name] : "";

  return {
    skinName: skinName,
    letterTypeName: letterTypeName
  };
}

function getDocFormatForTraits(fileFormatType) {
  var docformat = "";
  switch (fileFormatType.toUpperCase()) {
    case "PDF":
      docformat = "adobe pdf";
      break;
    case "DOCX":
      docformat = "ms word";
      break;
    case "RTF":
      docformat = "rich text";
      break;
    case "TXT":
      docformat = "plain text";
      break;
    case "HTML":
      docformat = "web page";
      break;
  }
  return docformat;
}

function removeAllUnwantedHtmlChars() {
  var str = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  str = str.replace(/\n {3}|\n {2}|\n /g, "");
  str = str.replace(/• /g, ""); // remove bullet char from ttc 
  str = str.replace(/<del>|<\/del>|\n/g, "").replace(/&nbsp;/g, '').trim();
  str = str.replace(typeCd.Regex.regExForBrTag, "").replace(/\n/g, "").trim();
  str = str.replace(/ {2}/g, " ");
  str = getTextFromHtml(str).trim();
  str = textEditorHelper.replacedUnwantedTags(str).trim();
  if (window.RDL.prflEnabled) {
    str = str.replace(new RegExp(String.fromCharCode(160), "g"), " ");
  }

  return str;
}

function getnthIndexInString(string, subString, index) {
  return string.split(subString, index).join(subString).length;
}

function isHighSchoolUser(userInput) {
  if (userInput[typeCd.dataObjMappingKeys.experience] < 1 && ((userInput[typeCd.dataObjMappingKeys.enrolledInSchool] == window.RDL.Localization.lbl_no || !userInput[typeCd.dataObjMappingKeys.enrolledInSchool]) && !userInput[typeCd.dataObjMappingKeys.CollegeGraduate] ||
  //When User skips the collge graduate question
  userInput[typeCd.dataObjMappingKeys.CollegeGraduate] == window.RDL.Localization.lbl_no ||
  //When User selects "NO" in college graduate Question
  userInput[typeCd.dataObjMappingKeys.enrolledInSchool] == window.RDL.Localization.lbl_recentGrad && userInput[typeCd.dataObjMappingKeys.schoolType] != "" && userInput[typeCd.dataObjMappingKeys.schoolType] != typeCd.schoolType.college ||
  //if user leaves blank or does not enter college or university as their school
  userInput[typeCd.dataObjMappingKeys.enrolledInSchool] == window.RDL.Localization.lbl_yes ||
  //if user selects "high school" in current level of education question
  userInput[typeCd.dataObjMappingKeys.enrolledInSchool] != window.RDL.Localization.lbl_recentGrad && !(userInput[typeCd.dataObjMappingKeys.schoolName].length > 0 && (userInput[typeCd.dataObjMappingKeys.schoolName].toLowerCase().indexOf(window.RDL.Localization.lbl_college) != -1 || userInput[typeCd.dataObjMappingKeys.schoolName].toLowerCase().indexOf(window.RDL.Localization.lbl_university) != -1))))
    // if user select "No" in currently Enroled question and and selects 
    //"Yes" in "have you graduated from college ?" and user leaves blank or does not 
    //enter college or university as their school
    return true;else return false;
}

function isSecondArrayInFirstArray(mainArray, compareArray) {
  var resMain = mainArray.filter(function (val) {
    return !this.has(val);
  }, new Set(compareArray));
  var resCompare = compareArray.filter(function (val) {
    return !this.has(val);
  }, new Set(mainArray));
  if (resCompare.length <= 0) {
    var commonInArrays = [],
        isCompArrSubsetMainArr = true;
    for (var i = 0; i < compareArray.length; ++i) {
      if (compareArray[i] === mainArray[i]) commonInArrays.push(compareArray[i]);else {
        isCompArrSubsetMainArr = false;
        continue;
      }
    }
    if (!isCompArrSubsetMainArr) resMain = mainArray.filter(function (val) {
      return !this.has(val);
    }, new Set(commonInArrays));else resMain = [];
  }
  return resMain;
}

function onBoardingV2Routing(currentOnBoardingStep, userInput, onboardingUserInput) {
  var isReviewMode = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var nextOnBoardingStep = void 0;
  var nextIndexFound = false,
      nextIndex = void 0,
      currentStepGroup = void 0;
  var objKeys = Object.keys(typeCd.onBoardingStepsV2Grouping);
  for (var i = 0; i < objKeys.length; i++) {
    if (typeCd.onBoardingStepsV2Grouping[objKeys[i]].length == 1 && typeCd.onBoardingStepsV2Grouping[objKeys[i]][0] == currentOnBoardingStep) {
      currentStepGroup = typeCd.onBoardingStepsV2Grouping[objKeys[i]];
      break;
    } else if (typeCd.onBoardingStepsV2Grouping[objKeys[i]].length > 1) {
      for (var j = 0; j < typeCd.onBoardingStepsV2Grouping[objKeys[i]].length; j++) {
        if (nextIndexFound) {
          break;
        }
        if (typeCd.onBoardingStepsV2Grouping[objKeys[i]][j] == currentOnBoardingStep) {
          currentStepGroup = typeCd.onBoardingStepsV2Grouping[objKeys[i]];
          if (typeCd.onBoardingStepsV2Grouping[objKeys[i]].length > j + 1) {
            nextIndex = j + 1;
            nextIndexFound = true;
            break;
          }
        }
      }
    }
  }
  //Check if Group has next Step
  if (currentStepGroup && nextIndex) {
    nextOnBoardingStep = currentStepGroup[nextIndex];
  }
  //Else get next Group Routing.
  else {
      var isLoggedIn = RDL.objClaims.role == _helper.TypeCodes.userRoles.User;
      var skipNameScreen = isLoggedIn && !onboardingUserInput.doNotSkipNameScreen;
      switch (currentOnBoardingStep) {
        //JobTitle Screen
        case typeCd.onBoardingStepsV2.JobTitle.index:
          if (userInput == typeCd.onBoardingUserInput.continue) {
            nextOnBoardingStep = RDL.isBuilderBasedFlowLocalized ? typeCd.onBoardingStepsV2.SubjectTTC.index : isReviewMode ? typeCd.onBoardingStepsV2.Skills.index : typeCd.onBoardingStepsV2.Company.index;
          } else {
            //For Skip
            if (onboardingUserInput['covid']) nextOnBoardingStep = typeCd.onBoardingStepsV2.SoftSkills.index;else if (RDL.features.isBuilderBasedFlow) nextOnBoardingStep = typeCd.onBoardingStepsV2.WorkExperience.index;else if (RDL.features.isFuzzyLogic) nextOnBoardingStep = typeCd.onBoardingStepsV2.Skills.index;else nextOnBoardingStep = typeCd.onBoardingStepsV2.WorkExperience.index;
          }
          break;
        //WorkExperienceInput Screen
        case typeCd.onBoardingStepsV2.WorkExperience.index:
          if (userInput == typeCd.onBoardingUserInput.continue) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.PreviousJobTitle.index;
          } else {
            //For Skip (0 Experience)
            nextOnBoardingStep = typeCd.onBoardingStepsV2.SchoolEnrolled.index;
          }
          break;
        //IsWorkGaps? Screen
        case typeCd.onBoardingStepsV2.WorkGaps.index:
          if (userInput == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) {
            if (RDL.features.isBuilderBasedFlow) nextOnBoardingStep = typeCd.onBoardingStepsV2.GapsTTC.index;else nextOnBoardingStep = typeCd.onBoardingStepsV2.WorkGapsReason.index;
          }
          //else if (RDL.features.isBuilderBasedFlow) nextOnBoardingStep 
          //= typeCd.onBoardingStepsV2.Exit.index;
          else {
              //No
              if (onboardingUserInput[typeCd.dataObjMappingKeys.isUploadResume] == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) {
                nextOnBoardingStep = window.RDL.features.showSignature ? typeCd.onBoardingStepsV2.SignatureView.index : typeCd.onBoardingStepsV2.Exit.index;
              } else if (RDL.features.isBuilderBasedFlow) nextOnBoardingStep = typeCd.onBoardingStepsV2.CloserOverview.index;else nextOnBoardingStep = typeCd.onBoardingStepsV2.SoftSkillsCompetency.index;
            }
          break;
        //IsSchoolEnrolled? Screen
        case typeCd.onBoardingStepsV2.SchoolEnrolled.index:
          if (userInput == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.CurrentEducationLevel.index;
          } else if (userInput == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_no.toLowerCase()]) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.CollegeGraduate.index;
          } else {
            //Others
            nextOnBoardingStep = typeCd.onBoardingStepsV2.RecentGradSchool.index;
          }
          break;
        //CollegeGraduate? Screen
        case typeCd.onBoardingStepsV2.CollegeGraduate.index:
          if (userInput == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.University.index;
          } else {
            //No
            nextOnBoardingStep = typeCd.onBoardingStepsV2.SoftSkillsCompetency.index;
          }
          break;
        //RecentGradSchoolName Screen
        case typeCd.onBoardingStepsV2.RecentGradSchool.index:
          if (userInput == typeCd.onBoardingUserInput.recentGradClg) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.RecentGradFieldDegree.index;
          } else {
            //recentGradSchool
            nextOnBoardingStep = typeCd.onBoardingStepsV2.SoftSkillsCompetency.index;
          }
          break;
        //UniversityName Screen
        case typeCd.onBoardingStepsV2.University.index:
          if (userInput == typeCd.onBoardingUserInput.currentlyInCollege) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.CollegeFieldDegree.index;
          } else {
            //currentlyInSchool
            nextOnBoardingStep = typeCd.onBoardingStepsV2.SoftSkillsCompetency.index;
          }
          break;
        //KeyTheme Screen
        case typeCd.onBoardingStepsV2.Unemployed.index: // for covid19 feature
        case typeCd.onBoardingStepsV2.KeyTheme.index:
          if (userInput == typeCd.onBoardingUserInput.continue) {
            //If new user/unregistered
            nextOnBoardingStep = typeCd.onBoardingStepsV2.Name.index;
          } else {
            //LoggedInUser
            nextOnBoardingStep = typeCd.onBoardingStepsV2.Exit.index;
          }
          break;
        //Name Screen
        case typeCd.onBoardingStepsV2.Name.index:
          nextOnBoardingStep = typeCd.onBoardingStepsV2.Exit.index;
          break;
        case typeCd.onBoardingStepsV2.SoftSkills.index:
          if (onboardingUserInput.Number && onboardingUserInput.Number >= 1) nextOnBoardingStep = typeCd.onBoardingStepsV2.WorkGaps.index;else nextOnBoardingStep = typeCd.onBoardingStepsV2.JobTitle.index;
          break;
        case typeCd.onBoardingStepsV2.WorkGapsReason.index:
          nextOnBoardingStep = typeCd.onBoardingStepsV2.JobTitle.index;
          break;
        case typeCd.onBoardingStepsV2.GapsOverview.index:
          if (userInput == typeCd.onBoardingUserInput.continue) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.GapsTTC.index;
          } else {
            //skip case
            nextOnBoardingStep = typeCd.onBoardingStepsV2.CloserOverview.index;
          }
          break;
        case typeCd.onBoardingStepsV2.ImportResumeScreen.index:
          // import from resume
          if (userInput == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.ImportFromResumeReview.index;
          } else nextOnBoardingStep = typeCd.onBoardingStepsV2.JobTitle.index;
          break;
        // if future job title in mind
        case typeCd.onBoardingStepsV2.JobInMind.index:
          if (userInput == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.JobTitle.index;
          } else {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.Skills.index;
          }
          break;

        case typeCd.onBoardingStepsV2.ChooseTemplate.index:
          if (RDL.experimentControl.isUploadResume) {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.CreateVsUpload.index;
          } else if (window.RDL.features.isBuilderBasedFlow) {
            if (skipNameScreen) {
              nextOnBoardingStep = typeCd.onBoardingStepsV2.OpenerOverview.index;
            } else {
              nextOnBoardingStep = typeCd.onBoardingStepsV2.Name.index;
            }
          } else {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.JobTitle.index;
          }
          break;

        // if createVsUpload Screen
        case typeCd.onBoardingStepsV2.CreateVsUpload.index:
          if (userInput == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) nextOnBoardingStep = typeCd.onBoardingStepsV2.UploadResume.index;else {
            if (skipNameScreen) {
              nextOnBoardingStep = typeCd.onBoardingStepsV2.OpenerOverview.index;
            } else {
              nextOnBoardingStep = typeCd.onBoardingStepsV2.Name.index;
            }
          }
          break;
        case typeCd.onBoardingStepsV2.UploadResume.index:
          if (userInput == typeCd.onBoardingUserInput.continue) nextOnBoardingStep = typeCd.onBoardingStepsV2.UploadReview.index;else {
            if (skipNameScreen) {
              nextOnBoardingStep = typeCd.onBoardingStepsV2.OpenerOverview.index;
            } else {
              nextOnBoardingStep = typeCd.onBoardingStepsV2.Name.index;
            }
          }
          break;
        case typeCd.onBoardingStepsV2.CloserTTC.index:
          if (userInput == typeCd.onBoardingUserInput.continue && window.RDL.features.showSignature) {
            // nextOnBoardingStep = typeCd.onBoardingStepsV2.SignatureOverview.index;
            nextOnBoardingStep = typeCd.onBoardingStepsV2.SignatureView.index;
          } else {
            nextOnBoardingStep = typeCd.onBoardingStepsV2.Exit.index;
          }
          break;
      }
    }
  return nextOnBoardingStep;
}

function setDefaultTextForSubject(docObj) {
  var jobTitle = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";

  if (RDL.Localization.lbl_defaultDocCharVal_Subject) {
    var subjectSection = docObj.sections.find(function (s) {
      return s.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Subject;
    });
    subjectSection.paragraphs[0].docDatas[0].charValue = RDL.Localization.lbl_defaultDocCharVal_Subject.replace("{0}", jobTitle);
  }
  return docObj;
}

function setDefaultTextForGreeting(docObj) {
  if (RDL.Localization.lbl_defaultDocCharVal_Greeting) {
    var greetingSection = docObj.sections.find(function (s) {
      return s.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Greetings;
    });
    greetingSection.paragraphs[0].docDatas[0].charValue = RDL.Localization.lbl_defaultDocCharVal_Greeting;
  }
  return docObj;
}

function setDefaultsforSkillsAndStrengths(onBoardingUserInput) {
  //RDL.features.assignDefaultSkills
  typeCd.fieldsToUpdateKeys.forEach(function (_ref) {
    var fieldKey = _ref.fieldKey;

    if (fieldKey.includes("Skill") && !onBoardingUserInput[fieldKey] && onBoardingUserInput["default_" + fieldKey]) {
      onBoardingUserInput[fieldKey] = onBoardingUserInput["default_" + fieldKey];
    }
  });
  return onBoardingUserInput;
}

function updateEmailDynamicallyInLetter(stringifiedSections, returnUpdatedSections) {
  var textColor = window.RDL.defaultPlaceholderColor;
  var updatedSectionsText = stringifiedSections.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"" + textColor + "\\\\\\\" >\\[" + typeCd.dataObjMappingKeys.Email + "\\]<\\/FONT>"), window.RDL.objClaims.email, true);
  updatedSectionsText = updatedSectionsText.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"" + textColor + "\\\\\\\">\\[" + typeCd.dataObjMappingKeys.Email + "\\]<\\/FONT>"), window.RDL.objClaims.email, true);
  if (returnUpdatedSections) {
    return JSON.parse(updatedSectionsText);
  }
  return updatedSectionsText;
}

function autoPopulateDynamicTextField(onBoardingUserInput, docObject, isFontTagRequired, fontColor) {
  var textColor = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : window.RDL.defaultPlaceholderColor;

  var key = void 0,
      i = void 0,
      stringifiedSections = JSON.stringify(docObject.sections);
  for (i = 0; i < typeCd.fieldsToUpdateKeys.length; i++) {
    if (typeCd.fieldsToUpdateKeys[i].fieldKey) {
      key = typeCd.fieldsToUpdateKeys[i].fieldKey;
    }
    if (key && onBoardingUserInput[key]) {
      var keyVal = onBoardingUserInput[key].toString().replace(/"/g, '&quot;');
      if (typeCd.fieldsToUpdateKeys[i].isToLowerCase) {
        keyVal = convertToLowerCase(keyVal);
      }
      if (window.RDL.prflEnabled) {
        //required to remove additinal invisible spaces specially with foreign languages
        stringifiedSections = stringifiedSections.replace(new RegExp(String.fromCharCode(160), "g"), " ");
      }
      if (!isFontTagRequired && (key === typeCd.dataObjMappingKeys.experience && onBoardingUserInput[key] > 1 || key != typeCd.dataObjMappingKeys.experience)) {
        stringifiedSections = stringifiedSections.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"" + textColor + "\\\\\\\" >\\[" + key + "\\]<\\/FONT>"), keyVal, true);
        stringifiedSections = stringifiedSections.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"" + textColor + "\\\\\\\">\\[" + key + "\\]<\\/FONT>"), keyVal, true);
        //Some INTL letters don't have space color code double quotes.
        // This has been done to replace text in such scenarios.
        if (window.RDL.prflEnabled) {
          stringifiedSections = stringifiedSections.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"" + textColor + "\\\\\\\">\\[" + key + "\\]<\\/FONT>"), keyVal, true);
          stringifiedSections = contextualPopulateDynamicFieldsForeignChars(stringifiedSections, key, keyVal);
        }
      } else if (isFontTagRequired && (key === typeCd.dataObjMappingKeys.experience && onBoardingUserInput[key] > 1 || key != typeCd.dataObjMappingKeys.experience)) {
        stringifiedSections = stringifiedSections.replaceAllOccurrences(RegExp("\\[" + key + "\\]"), keyVal, true);
      }
    }
  }
  //replace email dynamically
  if (window.RDL.objClaims.email) {
    stringifiedSections = updateEmailDynamicallyInLetter(stringifiedSections);
  }
  var docObj = JSON.parse(JSON.stringify(docObject));
  docObj.sections = JSON.parse(stringifiedSections);
  var targetJobTitleInput = onBoardingUserInput[typeCd.dataObjMappingKeys.jobTitle];
  if (RDL.features.isBuilderBasedFlow) {
    var targetJobTitle = "<FONT COLOR=\"" + RDL.placeholderColor + "\" >[" + RDL.Localization.lbl_targetJobTitle + "]</FONT>";
    if (targetJobTitleInput) targetJobTitle = targetJobTitleInput.toString();
    docObj = setDefaultTextForSubject(docObj, targetJobTitle);
    docObj = setDefaultTextForGreeting(docObj);
    stringifiedSections = JSON.stringify(docObj.sections);
  } else if (targetJobTitleInput) {
    var templateID = docObj.templateID;
    var currentTemplate = RDL.moreTemplatesInfo.find(function (template) {
      return template.TemplateId == templateID;
    });
    var arrIgnoreSections = [_helper.TypeCodes.sectionTypeCd.Name, _helper.TypeCodes.sectionTypeCd.Contact, _helper.TypeCodes.sectionTypeCd.Recipient, _helper.TypeCodes.sectionTypeCd.Subject, _helper.TypeCodes.sectionTypeCd.Greetings, _helper.TypeCodes.sectionTypeCd.Closer];
    var incompleteSectionListTemp = getIncompleteSection(docObj).filter(function (sectionTypeCD) {
      return arrIgnoreSections.indexOf(sectionTypeCD) == -1;
    });
    if (incompleteSectionListTemp.length == 0 && currentTemplate && currentTemplate.V2) {
      docObj = setDefaultTextForSubject(docObj, targetJobTitleInput.toString());
      docObj = setDefaultTextForGreeting(docObj);
      stringifiedSections = JSON.stringify(docObj.sections);
    } else {
      stringifiedSections = stringifiedSections.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"" + textColor + "\\\\\\\" >\\[" + window.RDL.Localization.lbl_jobTitle + "\\]<\\/FONT>"), onBoardingUserInput[typeCd.dataObjMappingKeys.jobTitle].toString().replace(/"/g, '&quot;'), true);
    }
  }
  //For Letter Type Preview
  if (isFontTagRequired && fontColor) {
    stringifiedSections = stringifiedSections.replaceAllOccurrences(textColor, fontColor);
  }

  return stringifiedSections;
}

function contextualPopulateDynamicFieldsForeignChars(stringifyDocmodified, key, keyVal) {
  //This is required for LCFR since target job title has been translated differently 
  //at different places based on context.
  if (key == typeCd.dataObjMappingKeys.jobTitle && stringifyDocmodified.indexOf("[" + key.replace(" de ", " du ") + "]") > 1) {
    stringifyDocmodified = stringifyDocmodified.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"#0000FF\\\\\\\" >\\[" + key.replace(" de ", " du ") + "\\]<\\/FONT>"), keyVal, true);
    stringifyDocmodified = stringifyDocmodified.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"#0000FF\\\\\\\">\\[" + key.replace(" de ", " du ") + "\\]<\\/FONT>"), keyVal, true);
  }
  //This is required for LCDE since target company has been translated 
  //differently at different places based on context.
  if (key == typeCd.dataObjMappingKeys.companyName && window.RDL.Localization.lbl_targetCompanyDE && stringifyDocmodified.indexOf("[" + window.RDL.Localization.lbl_targetCompanyDE + "]") > 1) {
    stringifyDocmodified = stringifyDocmodified.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"#0000FF\\\\\\\" >\\[" + window.RDL.Localization.lbl_targetCompanyDE + "\\]<\\/FONT>"), keyVal, true);
    stringifyDocmodified = stringifyDocmodified.replaceAllOccurrences(RegExp("<FONT COLOR=\\\\\\\"#0000FF\\\\\\\">\\[" + window.RDL.Localization.lbl_targetCompanyDE + "\\]<\\/FONT>"), keyVal, true);
  }
  return stringifyDocmodified;
}

function replaceNameInClosure(doc, propsUser, textColor, isUploadResumeFlow) {
  //Retaining the values from document.
  var firstNameVal = void 0,
      lastNameVal = void 0,
      nameData = void 0,
      charVal = void 0,
      closureSection = void 0,
      updatedSections = doc.sections;

  if (window.RDL.prflEnabled) {
    nameData = getProfileNameSectionVal(doc);
  } else {
    nameData = _helper.CommonHelper.getNameSectionVal(doc);
  }

  firstNameVal = nameData.fName;
  lastNameVal = nameData.lName;

  //If user is logged in and name is available
  if (!isUploadResumeFlow) {
    if (!firstNameVal && !lastNameVal && propsUser) {
      firstNameVal = propsUser.FirstName;
      lastNameVal = propsUser.LastName;
    }
  }

  if (firstNameVal || lastNameVal) {
    updatedSections.map(function (section) {
      if (section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Closer && section.paragraphs) {
        charVal = section.paragraphs[0].docDatas[0].charValue;
        charVal = replaceClosureDynamicTextField(charVal, firstNameVal, lastNameVal, textColor);
        section.paragraphs[0].docDatas[0].charValue = charVal;
      }
    });
  }
  return updatedSections;
}

function replaceCloserText(charVal, textToReplace, value, textColor) {
  charVal = charVal.replace(RegExp('<FONT COLOR=\'#0000FF\'>\\[' + textToReplace + ']</FONT>', "i"), value);
  charVal = charVal.replace(RegExp('<FONT   COLOR="#000000"  >\n  <FONT COLOR="' + textColor + '" >\\[' + textToReplace + ']</FONT>', "i"), value);
  charVal = charVal.replace(RegExp('<FONT   COLOR="#000000"  >\\[<FONT COLOR="' + textColor + '">\n  ' + textToReplace + '</FONT>]', "i"), value);
  charVal = charVal.replace(RegExp('\\[<FONT COLOR="' + textColor + '">' + textToReplace + '</FONT>]', "i"), value);
  charVal = charVal.replace(RegExp('<FONT COLOR="' + textColor + '" >\\[' + textToReplace + ']</FONT>', "i"), value);
  charVal = charVal.replace(RegExp('<font color=\'#FF6600\'>\\[' + textToReplace + ']</font>', "i"), value);
  //Added below to handle INTL sample letters text replacement
  charVal = charVal.replace(RegExp('<FONT COLOR="' + textColor + '">\\[' + textToReplace + ']</FONT>', "i"), value);
  //Added for MPCL Legacy templates
  charVal = charVal.replace(RegExp('<span style="color: #FF6600">\\[' + textToReplace + ']</span>', "i"), value);
  charVal = charVal.replace(RegExp('<span style="color: #FF6600">\\[' + textToReplace + '] </span>', "i"), value);
  charVal = charVal.replace(RegExp('<span style="color: #FF6600"> \\[' + textToReplace + '] </span>', "i"), value);
  charVal = charVal.replace(RegExp('<span style="color:#FF6600">\\[' + textToReplace + ']</span>', "i"), value);
  return charVal;
}

function replaceClosureDynamicTextField(charVal, fName, lName) {
  var textColor = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : window.RDL.placeholderColor;

  if (fName && !lName) lName = "  ";else if (!fName && lName) fName = "  ";
  //FName replacement
  if (fName != null) {
    charVal = replaceCloserText(charVal, window.RDL.Localization.lbl_yourFirstName, fName, window.RDL.defaultPlaceholderColor);
    charVal = replaceCloserText(charVal, window.RDL.Localization.lbl_yourFirstName, fName, textColor);
  }

  //LName replacement
  if (lName != null) {
    charVal = replaceCloserText(charVal, window.RDL.Localization.lbl_yourLastName, lName, window.RDL.defaultPlaceholderColor);
    charVal = replaceCloserText(charVal, window.RDL.Localization.lbl_yourLastName, lName, textColor);
  }

  return charVal;
}

function getValFromDocPreference(doc, preferenceKey) {
  if (doc && doc.preferences) {
    return doc.preferences.find(function (preference) {
      return preference.docPreferenceTypeCD == preferenceKey;
    });
  }
}

function chunkArray(myArray, chunk_size) {
  var index = 0;
  var arrayLength = myArray.length;
  var tempArray = [];

  for (index = 0; index < arrayLength; index += chunk_size) {
    var myChunk = myArray.slice(index, index + chunk_size);
    // Do something if you want with the group
    tempArray.push(myChunk);
  }
  return tempArray;
}

function resetOnBoardingV2UserInput(userInputObj, resetKeysArr, skipArr) {
  if (skipArr) {
    Object.keys(userInputObj).filter(function (x) {
      return skipArr.indexOf(x) == -1;
    }).forEach(function (key) {
      userInputObj[key] = "";
    });
  } else {
    var i = void 0;
    for (i = 0; i < resetKeysArr.length; i++) {
      userInputObj[resetKeysArr[i]] = "";
    }
  }
  return userInputObj;
}

function convertToTitleCase(str) {
  var strSplit = void 0,
      i = void 0;
  if (str) {
    //str = str.toLowerCase();
    strSplit = str.split(" ");
    for (i = 0; i < strSplit.length; i++) {
      //If not a keyword, already in CAPS
      if (strSplit[i] != strSplit[i].toUpperCase()) {
        strSplit[i] = strSplit[i].charAt(0).toUpperCase() + (strSplit[i].slice(1) ? strSplit[i].slice(1).toLowerCase() : "");
      }
    }
    return strSplit.join(" ");
  }
}

//Convert to Lower case keeping KeyWords in CAPS.
function convertToLowerCase(str) {
  var strSplit = void 0,
      i = void 0;
  if (str) {
    //str = str.toLowerCase();
    strSplit = str.split(" ");
    for (i = 0; i < strSplit.length; i++) {
      //If not a keyword, already in CAPS
      if (strSplit[i] != strSplit[i].toUpperCase()) {
        strSplit[i] = strSplit[i].toLowerCase();
      }
    }
    return strSplit.join(" ");
  }
}

function deleteExperimentCookies() {
  //Deleting AB tests cookies
  Object.keys(RDL.experimentsObj).map(function (exp) {
    if (RDL.experimentsObj[exp].cookie && RDL.readLS(RDL.experimentsObj[exp].cookie)) {
      RDL.deleteLS(RDL.experimentsObj[exp].cookie);
    }
  });
}

function deleteExpFromMixpanelProps() {
  var mixpanelpropsVal = void 0,
      mixPanelValObj = void 0,
      mixpanelCookieProps = void 0,
      experimentKeys = void 0;

  mixpanelCookieProps = window["mixpanel"] && mixpanel.cookie && mixpanel.cookie.props;
  experimentKeys = mixpanelCookieProps && Object.keys(mixpanelCookieProps).filter(function (key) {
    return key.indexOf("Experiment:") == 0;
  });
  if (experimentKeys && experimentKeys.length) {
    mixpanelpropsVal = window.RDL.readCookie(typeCd.ForageKeyNames.mixpanelprops);
    mixPanelValObj = JSON.parse(unescape(mixpanelpropsVal));
    experimentKeys.map(function (experimentKey) {
      delete mixpanelCookieProps[experimentKey];
      delete mixPanelValObj[experimentKey];
    });
    window.RDL.createCookie(typeCd.ForageKeyNames.mixpanelprops, escape(JSON.stringify(mixPanelValObj)));
  }
}

function updateUserUidInCookieForUserSwap(userUid) {
  window.RDL.createLS(typeCd.ForageKeyNames.userUid, userUid);
  window.RDL.TrackEvents(typeCd.eventTypes.identify, { userId: userUid, userid: userUid }, userUid, "TRUE");
  deleteExperimentCookies();
  deleteExpFromMixpanelProps();
}

function AddDocTraitsInCookie(letterTypeDetails, flowName) {
  var docTraitsStr = void 0,
      docTraitsObj = {};
  docTraitsObj[typeCd.commonFields.flow_name] = flowName;
  docTraitsObj[typeCd.commonFields.letter_type] = letterTypeDetails.letterTypeName;
  docTraitsObj[typeCd.commonFields.template_name] = letterTypeDetails.skinName;
  docTraitsStr = JSON.stringify(docTraitsObj);
  window.RDL.createCookie(typeCd.ForageKeyNames.docTraits, docTraitsStr);
}

function AddBEUserActionCookie(docAction) {
  var beActionObj = _defineProperty({}, typeCd.eventPropsKeys.action, docAction);
  var lifeTime = 5 / (60 * 24); // 5 minutes converted to days 
  var beActionStr = JSON.stringify(beActionObj);
  window.RDL.createCookie(typeCd.ForageKeyNames.beCLUserAction, beActionStr, lifeTime);
}

function camelizeFunction(key, handleExceptionCases, removeSpaces, capitalizeAbbreviations) {
  if (capitalizeAbbreviations && key.length <= 3) return key.toUpperCase();
  if (!key) {
    return "";
  }
  var joiner = removeSpaces ? '' : ' ';
  key = key.replace(/\s+/g, ' ');
  key = key.toLowerCase();
  return key.split(' ').map(function (word) {
    if (handleExceptionCases) {
      var value = RDL.JobTitleAbbreviationsKeyWordsList.find(function (val) {
        return val.toLowerCase() == word;
      });
      if (value) {
        return word.toUpperCase();
      }
    }
    var t = word.split('');
    if (t.length > 0) {
      t[0] = t[0].toUpperCase();
      return t.join('');
    } else {
      return '';
    }
  }).join(joiner);
}

function removeSectionsFromDocument(document, arrSectionsToBeRemoved) {
  var sections = document.sections.filter(function (section) {
    return arrSectionsToBeRemoved.indexOf(section.sectionTypeCD) === -1;
  });
  //removes the sections mentioned in the array
  document.sections = sections;
  return document;
}

function sanitizeVal(val) {
  val = val.replaceAllOccurrences('-', ' ');
  val = camelizeFunction(val, true);
  return val;
}

function isUserInputModified(OldUserInput, saveValProp, newValue, isUploadResume) {
  var OldValue = OldUserInput[saveValProp];
  if (isUploadResume && OldValue == undefined) OldValue = "";
  if (OldValue && OldValue.text && newValue && newValue.text && OldValue.text == newValue.text) {
    return false;
  }
  if (OldValue && typeof OldValue === "string" && OldValue.length > 0) OldValue = OldValue.trim().toLowerCase();
  if (newValue && typeof newValue === "string" && newValue.length > 0) newValue = newValue.trim().toLowerCase();
  if (RDL.experimentControl.isFinalize2Funnel && newValue && newValue.text && typeof newValue.text == "string" && OldValue == newValue.text.trim().toLowerCase()) return false;
  if ((OldValue || isUploadResume && OldValue == 0) && OldValue !== newValue || OldValue === "" && OldValue !== newValue || OldValue === undefined && newValue != "" && OldValue !== newValue) return true;else return false;
}

function getCurrentDateTime() {
  var date = new Date();
  var day = date.getDate(); // yields date
  var month = date.getMonth() + 1; // yields month (add one as '.getMonth()' is zero indexed)
  var year = date.getFullYear(); // yields year
  var hour = date.getHours(); // yields hours
  var minute = date.getMinutes(); // yields minutes
  var second = date.getSeconds(); // yields seconds

  var currentDateTime = year + "-" + month + "-" + day + "T" + hour + ":" + minute + ":" + second + ".1111111+00:00";
  return currentDateTime;
}

function getValidDocDate(date, refDate) {
  if (date == null || date == "null" || date == "0001-01-01T00:00:00.0000000" || date == "0001-01-01T00:00:00") {
    if (refDate) {
      //date is not valid, but refDate is valid and passed, so set date = refDate (refDate = modifiedDate)
      return refDate;
    } else {
      return getCurrentDateTime(); //Setting date as current Date time.
    }
  }
  return date; //date is already valid, returning it back
}

function getVariantFromRunTest(experimentId) {
  var result = {};
  var runTestVal = RDL.readCookie(typeCd.ForageKeyNames.runTest);
  if (runTestVal) {
    var variant = runTestVal.charAt(runTestVal.indexOf(experimentId) + experimentId.length + 1);
    if (variant) {
      result = {
        data: { variant: variant }
      };
    }
  }
  return new Promise(function (resolve) {
    resolve(result);
  });
}

function removeHTML(htmlArray) {
  var finalHTML = htmlArray.map(function (skillHTML) {
    if (skillHTML.indexOf('<') >= 0 && skillHTML.indexOf('>') > skillHTML.indexOf('<')) {
      var sSkill = '';
      skillHTML.split('<').map(function (skill) {
        if (skill.indexOf('>') >= 0) {
          sSkill += skill.substr(skill.indexOf('>') + 1, skill.length - skill.indexOf('>') - 1);
        } else sSkill += skill;
      });
      return sSkill;
    } else return skillHTML;
  });
  return finalHTML;
}

function createDataForRecipientSection() {
  var fName = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var lName = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : "";
  var companyName = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : "";
  var otherPhone = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : "";
  var email = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : "";
  var city = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : "";
  var state = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : "";
  var zip = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : "";
  var userUID = arguments[8];
  var street = arguments.length > 9 && arguments[9] !== undefined ? arguments[9] : "";

  var recipientList = [],
      docData = void 0;

  docData = new _viewmodel.DocData({ userId: userUID, fieldCD: _helper.TypeCodes.fieldCd.FirstName, charValue: fName });
  recipientList.push(docData);

  docData = new _viewmodel.DocData({ userId: userUID, fieldCD: _helper.TypeCodes.fieldCd.LastName, charValue: lName });
  recipientList.push(docData);

  docData = new _viewmodel.DocData({ userId: userUID, fieldCD: _helper.TypeCodes.fieldCd.Company, charValue: companyName });
  recipientList.push(docData);

  docData = new _viewmodel.DocData({ userId: userUID, fieldCD: _helper.TypeCodes.fieldCd.OtherPhone, charValue: otherPhone });
  recipientList.push(docData);

  docData = new _viewmodel.DocData({ userId: userUID, fieldCD: _helper.TypeCodes.fieldCd.Email, charValue: email });
  recipientList.push(docData);

  docData = new _viewmodel.DocData({ userId: userUID, fieldCD: _helper.TypeCodes.fieldCd.City, charValue: city });
  recipientList.push(docData);

  docData = new _viewmodel.DocData({ userId: userUID, fieldCD: _helper.TypeCodes.fieldCd.State, charValue: state });
  recipientList.push(docData);

  docData = new _viewmodel.DocData({ userId: userUID, fieldCD: _helper.TypeCodes.fieldCd.ZipCode, charValue: zip });
  recipientList.push(docData);

  docData = new _viewmodel.DocData({ userId: userUID, fieldCD: _helper.TypeCodes.fieldCd.Street, charValue: street });
  recipientList.push(docData);

  return recipientList;
}

function setCustomLocalizedProperties() {
  var stateObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  var customLocalization = {};

  //Labels
  customLocalization.firstNameLabelText = stateObj.firstName && stateObj.firstName.labelName;
  customLocalization.lastNameLabelText = stateObj.lastName && stateObj.lastName.labelName;
  customLocalization.phoneNumberLabelText = stateObj.homePhone && stateObj.homePhone.labelName || stateObj.phoneNumber && stateObj.phoneNumber.labelName;
  customLocalization.cellPhoneNumberLabelText = stateObj.cellPhone && stateObj.cellPhone.labelName;
  customLocalization.emailLabelText = stateObj.email && stateObj.email.labelName;
  customLocalization.stateLabelText = stateObj.state && stateObj.state.labelName;
  customLocalization.cityLabelText = stateObj.city && stateObj.city.labelName;
  customLocalization.zipLabelText = stateObj.zip && stateObj.zip.labelName;
  customLocalization.companyLabelText = stateObj.companyName && stateObj.companyName.labelName;
  customLocalization.documentTitleLabelText = stateObj.documentTitle && stateObj.documentTitle.labelName;
  customLocalization.companyLocationLabelText = stateObj.companyLocation && stateObj.companyLocation.labelName;
  customLocalization.recipientPositionLabelText = stateObj.recipientPosition && stateObj.recipientPosition.labelName;

  //ErrorMessages
  customLocalization.firstNameErrorMessage = stateObj.firstName && stateObj.firstName.errorMessage;
  customLocalization.lastNameErrorMessage = stateObj.lastName && stateObj.lastName.errorMessage;
  customLocalization.phoneNumberErrorMessage = stateObj.homePhone && stateObj.homePhone.errorMessage || stateObj.phoneNumber && stateObj.phoneNumber.errorMessage;
  customLocalization.cellPhoneNumberErrorMessage = stateObj.cellPhone && stateObj.cellPhone.errorMessage;
  customLocalization.emailErrorMessage = stateObj.email && stateObj.email.errorMessage;
  customLocalization.zipErrorMessage = stateObj.zip && stateObj.zip.errorMessage;
  customLocalization.companyErrorMessage = stateObj.companyName && stateObj.companyName.errorMessage;
  customLocalization.documentTitleErrorMessage = stateObj.documentTitleName && stateObj.documentTitleName.errorMessage;
  customLocalization.companyLocationErrorMessage = stateObj.companyLocation && stateObj.companyLocation.errorMessage;
  customLocalization.recipientPositionErrorMessage = stateObj.recipientPosition && stateObj.recipientPosition.errorMessage;

  //RegEx
  customLocalization.firstNameRegex = stateObj.firstName && stateObj.firstName.regEx;
  customLocalization.lastNameRegex = stateObj.lastName && stateObj.lastName.regEx;
  customLocalization.phoneNumberRegex = stateObj.homePhone && stateObj.homePhone.regEx || stateObj.phoneNumber && stateObj.phoneNumber.regEx;
  customLocalization.cellPhoneNumberRegex = stateObj.cellPhone && stateObj.cellPhone.regEx;
  customLocalization.emailRegex = stateObj.email && stateObj.email.regEx;
  customLocalization.zipRegex = stateObj.zip && stateObj.zip.regEx;
  customLocalization.companyLocationRegex = stateObj.companyLocation && stateObj.companyLocation.regEx;
  customLocalization.recipientPositionRegex = stateObj.recipientPosition && stateObj.recipientPosition.regEx;

  //PlaceholderText
  customLocalization.companyPlaceholderText = stateObj.companyName && stateObj.companyName.placeholder;
  customLocalization.documentTitlePlaceholderText = stateObj.documentTitleName && stateObj.documentTitleName.placeholder;
  customLocalization.phoneNumberPlaceholderText = RDL.Localization.lbl_phonePlaceHolder || "";
  customLocalization.cityPlaceholderText = RDL.Localization.lbl_cityPlaceHolder || "";
  customLocalization.statePlaceholderText = RDL.Localization.lbl_statePlaceHolder || "";
  customLocalization.zipPlaceholderText = RDL.Localization.lbl_zipPlaceHolder || "";
  customLocalization.companyLocationPlaceholderText = stateObj.companyLocation && stateObj.companyLocation.placeholder;
  customLocalization.recipientPositionPlaceholderText = stateObj.recipientPosition && stateObj.recipientPosition.placeholder;

  customLocalization.recipientStreetLabelText = RDL.Localization.lbl_streetAddress || "";
  customLocalization.recipientStreetPlaceholderText = RDL.Localization.lbl_streetPlaceHolder || "";
  customLocalization.recipientStreetErrorMessage = "";
  customLocalization.recipientStreetRegex = "";
  customLocalization.streetAddressLabelText = RDL.Localization.lbl_cntc_street || "";
  customLocalization.streetAddressPlaceholderText = RDL.Localization.lbl_streetPlaceHolder || "";

  if (RDL.experimentControl.isFinalize2Funnel) {
    customLocalization.zipLabelText = window.RDL.Localization.lbl_zip_code;
    customLocalization.stateLabelText = window.RDL.Localization.lbl_cntc_state;
    customLocalization.emailLabelText = window.RDL.Localization.lbl_email_address;
    customLocalization.phoneNumberLabelText = window.RDL.Localization.lbl_cellPhone;
    customLocalization.firstNamePlaceholderText = window.RDL.Localization.lbl_fNamePlaceholder;
    customLocalization.lastNamePlaceholderText = window.RDL.Localization.lbl_lNamePlaceholder;
  }
  if (RDL.countryDetails.countryCode == typeCd.countryCode.US) {
    if (!stateObj.isOpenRecipientModal) {
      customLocalization.firstNamePlaceholderText = window.RDL.Localization.lbl_US_firstNamePlaceholderText;
      customLocalization.lastNamePlaceholderText = window.RDL.Localization.lbl_US_lastNamePlaceholderText;
      customLocalization.emailPlaceholderText = window.RDL.Localization.lbl_US_emailPlaceHolder;
      customLocalization.phoneNumberPlaceholderText = window.RDL.Localization.lbl_US_phonePlaceHolder;
      customLocalization.cityPlaceholderText = window.RDL.Localization.lbl_US_cityPlaceholderText;
      customLocalization.statePlaceholderText = window.RDL.Localization.lbl_US_statePlaceholderText;
      customLocalization.zipPlaceholderText = window.RDL.Localization.lbl_US_zipPlaceholderText;
    } else {
      // customLocalization.firstNamePlaceholderText = "Recipient_John";
      // customLocalization.lastNamePlaceholderText = "Recipient_Smith";
      // customLocalization.emailPlaceholderText = "Recipient_your.email@here.com";
      // customLocalization.phoneNumberPlaceholderText = "Recipient_305 - 123 - 5555";
      // customLocalization.cityPlaceholderText = "Recipient_San Francisco";
      // customLocalization.statePlaceholderText = "Recipient_CA";
      // customLocalization.zipPlaceholderText = "Recipient_94102";
    }
  }
  return customLocalization;
}

function getProfileNameSectionVal(document) {
  var name = {
    fName: "",
    lName: ""
  };

  var nameSection = document.sections.filter(function (section) {
    return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.CProfile;
  })[0];

  if (nameSection && nameSection.paragraphs && nameSection.paragraphs.length && nameSection.paragraphs[0]) {
    var userNameData = nameSection.paragraphs[0];
    name.fName = _helper.FieldHelper.getValue(userNameData.docDatas.filter(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.FirstName;
    })[0]);
    name.lName = _helper.FieldHelper.getValue(userNameData.docDatas.filter(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.LastName;
    })[0]);
  }
  return name;
}

function getProfileContactSectionVal(document) {
  var contact = {
    email: "",
    phone: ""
  };

  var contactSection = document.sections.filter(function (section) {
    return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.CProfile;
  })[0];

  if (contactSection && contactSection.paragraphs && contactSection.paragraphs.length && contactSection.paragraphs[0]) {
    var userContactData = contactSection.paragraphs[0];
    contact.email = _helper.FieldHelper.getValue(userContactData.docDatas.filter(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.Email;
    })[0]);
    contact.phone = _helper.FieldHelper.getValue(userContactData.docDatas.filter(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.HomePhone;
    })[0]);
  }
  return contact;
}

function setTypeCodesProperties() {
  typeCd.firstName.regEx = RegExp(window.RDL.nameRegex);
  typeCd.lastName.regEx = RegExp(window.RDL.nameRegex);
  typeCd.email.regEx = RegExp(window.RDL.emailRegex);
  typeCd.emailTo.regEx = RegExp(window.RDL.multipleEmailRegex);
  typeCd.emailFrom.regEx = RegExp(window.RDL.nameRegex);
  typeCd.onBoardingStepsV2.Name.textBoxControl[0].regEx = new RegExp(window.RDL.nameRegex);
  typeCd.onBoardingStepsV2.Name.textBoxControl[1].regEx = new RegExp(window.RDL.nameRegex);
}

function isValidUserUpdateRequest(userObj) {
  if (userObj.FirstName || userObj.LastName || userObj.MobileNumber || userObj.PhoneNumber) {
    return true;
  }
  return false;
}

function isMultiColumnSkin(templateDocFormat) {
  return templateDocFormat && Array.from(templateDocFormat.querySelectorAll("container")).length > 0 ? true : false;
}

function GetSectionContainerIndex(sectionCd, templateDocFormat) {
  var sectionContainerIndex = 0;
  var containerTags = Array.from(templateDocFormat.querySelectorAll("container"));
  var isMultiColumnSkin = containerTags.length > 0 ? true : false;
  var sortedContainerTags = [];
  if (isMultiColumnSkin) {
    sortedContainerTags = containerTags.sort(function (a, b) {
      return parseInt(a.getAttribute('index')) - parseInt(b.getAttribute('index'));
    });
  }

  if (isMultiColumnSkin) {
    var sectionContainer = sortedContainerTags.find(function (container) {
      return container.getAttribute('value').toLowerCase().indexOf(sectionCd.toLowerCase()) !== -1;
    });
    if (sectionContainer) {
      sectionContainerIndex = parseInt(sectionContainer.getAttribute('index'));
    } else {
      sectionContainer = sortedContainerTags.find(function (container) {
        return container.getAttribute('value') == "*";
      });
      sectionContainerIndex = parseInt(sectionContainer.getAttribute('index'));
    }
  }
  return sectionContainerIndex;
}

function GetDefaultSectionContainerIndexes(templateDocFormat, docSections) {
  var containerIndexes = [];
  var sections = JSON.parse(JSON.stringify(docSections));
  sections.forEach(function (section) {
    var sectionContainerIndex = GetSectionContainerIndex(section.sectionTypeCD, templateDocFormat);
    var containerData = { sectionCode: section.sectionTypeCD, key: section.sectionId, value: sectionContainerIndex };
    containerIndexes.push(containerData);
  });
  return containerIndexes;
}

function getSectionsToBeRemoved(templateId) {
  var sectionsToBeRemoved = [];
  var templateDetails = RDL.moreTemplatesInfo.find(function (template) {
    return template.TemplateId == templateId;
  });
  if (templateDetails && templateDetails.sectionsToBeRemoved && templateDetails.sectionsToBeRemoved.length) {
    sectionsToBeRemoved = templateDetails.sectionsToBeRemoved;
  }
  return sectionsToBeRemoved;
}

function getStyleSheetForDownload(fileFormat) {
  var styleSheet = void 0;
  switch (fileFormat) {
    case _helper.TypeCodes.documentFormat.AdobePDF:
    case _helper.TypeCodes.documentFormat.DOCX:
      styleSheet = "RbtoHtml2";
      break;
    case _helper.TypeCodes.documentFormat.PlainText:
      styleSheet = "RbtoText";
      break;
  }
  return styleSheet;
}

function isSafari() {
  var result = false;
  var ua = navigator.userAgent.toLowerCase();
  if (ua.indexOf('safari') != -1) {
    if (ua.indexOf('chrome') <= -1) {
      result = true;
    }
  }
  return result;
}

function updateObjClaims(user) {
  if (window.updateLoginStatusInCommonProps && RDL.objClaims.role != user.Role) window.updateLoginStatusInCommonProps({ role: user.Role });
  window.RDL.objClaims.city = user.City;
  window.RDL.objClaims.countryCode = user.Country;
  window.RDL.objClaims.state = user.State;
  window.RDL.objClaims.email = user.EmailAddress;
  window.RDL.objClaims.firstName = user.FirstName;
  window.RDL.objClaims.lastName = user.LastName;
  window.RDL.objClaims.mobileNumber = user.MobileNumber;
  window.RDL.objClaims.phoneNumber = user.PhoneNumber;
  window.RDL.objClaims.role = user.Role;
  window.RDL.objClaims.user_uid = user.UserUID;
}

function getDocRendererLocalization(isRemoveEmptySection) {
  var _rendererLocalization;

  var rendererLocalization = (_rendererLocalization = {
    firstNamDefaultText: RDL.Localization.lbl_fName,
    lastNameDefaultText: RDL.Localization.lbl_lName,
    streetAddressDefaultText: RDL.Localization.lbl_streetAddress,
    cityDefaultText: RDL.Localization.lbl_city,
    stateDefaultText: RDL.Localization.lbl_cntc_state || RDL.Localization.lbl_state,
    addNewSecDocText: "",
    addSubSectionText: "",
    homePhoneDefaultText: RDL.Localization.lbl_phone,
    cellPhoneDefaultText: RDL.Localization.lbl_cellPhone,
    deleteText: RDL.Localization.delete_Section,
    dragText: RDL.Localization.lbl_MoveSection,
    editPhoto_Text: "",
    editSectionText: "",
    editText: RDL.Localization.edit_Section,
    emailDefaultText: RDL.Localization.lbl_email,
    exRsmTitleDef: "",
    exRsmTitleDef2: "",
    exRsmTitleDef3: "",
    finalRename: RDL.Localization.lbl_rename,
    finalRenameCancel: RDL.Localization.btn_cancel,
    finalRenameErr: RDL.Localization.lbl_enterValidTitle,
    RecipientfirstNamDefaultText: RDL.Localization.lbl_recipientFName || RDL.Localization.clbh_lbl_recipientfirstname,
    phoneDefaultText: RDL.Localization.lbl_phoneFieldPlaceholder,
    resumeTitleDefaultText: "",
    skillDef: "",
    stateDefaultTextRecipient: RDL.Localization.lbl_defaultRecipientState || RDL.Localization.lbl_state
  }, _defineProperty(_rendererLocalization, 'streetAddressDefaultText', RDL.Localization.lbl_streetAddress), _defineProperty(_rendererLocalization, 'suppInfoDefaultText', ""), _defineProperty(_rendererLocalization, 'zipDefaultText', RDL.currentPortalDetails.isIntl ? RDL.Localization.lbl_zip : RDL.Localization.lbl_zip && RDL.Localization.lbl_zip.toUpperCase()), _defineProperty(_rendererLocalization, 'companyDefaultText', RDL.Localization.lbl_companyName && camelizeFunction(RDL.Localization.lbl_companyName)), _defineProperty(_rendererLocalization, 'sectionDefaultText', RDL.Localization.lbl_section_PlaceholderText || RDL.Localization.lbl_section_DefaultText), _defineProperty(_rendererLocalization, 'custom_section_name_NAME', RDL.Localization.lbl_sectionList_name_NAME), _defineProperty(_rendererLocalization, 'custom_section_name_DATE', RDL.Localization.lbl_sectionList_name_DATE), _defineProperty(_rendererLocalization, 'custom_section_name_RCNT', RDL.Localization.lbl_sectionList_name_RCNT), _defineProperty(_rendererLocalization, 'custom_section_name_SUBJ', RDL.Localization.lbl_sectionList_name_SUBJ), _defineProperty(_rendererLocalization, 'custom_section_name_CNTC', RDL.Localization.lbl_sectionList_name_CNTC), _defineProperty(_rendererLocalization, 'custom_section_name_GRTG', RDL.Localization.lbl_sectionList_name_GRTG), _defineProperty(_rendererLocalization, 'custom_section_name_OPEN', RDL.Localization.lbl_sectionList_name_OPEN), _defineProperty(_rendererLocalization, 'custom_section_name_BODY', RDL.Localization.lbl_sectionList_name_BODY), _defineProperty(_rendererLocalization, 'custom_section_name_CTAC', RDL.experimentControl.isFinalize2Funnel ? RDL.Localization.lbl_sectionList_name_CLSR : RDL.Localization.lbl_sectionList_name_CTAC), _defineProperty(_rendererLocalization, 'custom_section_name_CLSR', RDL.experimentControl.isFinalize2Funnel ? RDL.Localization.lbl_sectionList_name_SIGNATURE : RDL.Localization.lbl_sectionList_name_CLSR), _defineProperty(_rendererLocalization, 'custom_section_name_AVLB', RDL.Localization.lbl_sectionList_name_AVLB), _defineProperty(_rendererLocalization, 'custom_section_name_CNFD', RDL.Localization.lbl_sectionList_name_CNFD), _defineProperty(_rendererLocalization, 'custom_section_name_GAPS', RDL.Localization.lbl_sectionList_name_GAPS), _defineProperty(_rendererLocalization, 'custom_section_name_RELO', RDL.Localization.lbl_sectionList_name_RELO), _defineProperty(_rendererLocalization, 'custom_section_name_SLRQ', RDL.Localization.lbl_sectionList_name_SLRQ), _defineProperty(_rendererLocalization, 'move_Section', RDL.Localization.move_Section), _defineProperty(_rendererLocalization, 'companyLocationDefaultText', RDL.Localization.lbl_defaultCompanyLocation), _defineProperty(_rendererLocalization, 'recipientLocationDefaultText', RDL.Localization.lbl_defaultRecipientPosition), _rendererLocalization);
  if (window.RDL.prflEnabled) {
    rendererLocalization = updateDefaultTextForPRFLSkin(rendererLocalization);
  }
  if (window.RDL.hideCityDetails) {
    rendererLocalization = updateDefaultTextForWithoutCityDetails(rendererLocalization);
  }
  if (isRemoveEmptySection) rendererLocalization.sectionDefaultText = " ";
  return rendererLocalization;
}

function updateDefaultTextForPRFLSkin(rendererLocalization) {
  rendererLocalization.RecipientfirstNamDefaultText = window.RDL.Localization.clbh_lbl_recipientfirstname;
  rendererLocalization.companyDefaultText = window.RDL.Localization.lbl_company;
  rendererLocalization.homePhoneDefaultText = window.RDL.Localization.lbl_homePhone;
  return rendererLocalization;
}

function updateDefaultTextForWithoutCityDetails(rendererLocalization) {
  rendererLocalization.cityDefaultText = " ";
  rendererLocalization.zipDefaultText = " ";
  rendererLocalization.phoneDefaultText = " ";
  rendererLocalization.cellPhoneDefaultText = " ";
  rendererLocalization.cityDefaultTextRecipient = window.RDL.Localization.lbl_city;
  rendererLocalization.zipDefaultTextRecipient = window.RDL.Localization.lbl_zip;
  return rendererLocalization;
}

function isValidText(obj) {
  return !obj.showError && obj.value;
}

function getConcatenatedDocDataText(sections) {
  var docDataString = "";
  sections.map(function (section, sectionIndex) {
    section.paragraphs.map(function (para, paraIndex) {
      para.docDatas.map(function (docData, docDataIndex) {
        if (docData.charValue && _helper.CommonHelper.isNullOrWhitespace(docData.charValue) == false && docData.fieldCD != "EMAI") {
          docDataString = docDataString + "∩" + sectionIndex + paraIndex + docDataIndex + "∩" + docData.charValue;
        }
      });
    });
  });
  return docDataString.trim();
}

function redirectPage(url) {
  setTimeout(function () {
    window.location.href = url;
  }, 150);
}

function getMinSectionDragLimit(sections, isSeparatorSkin) {
  if (isSeparatorSkin) return 0;
  var count = 0;
  sections.map(function (section) {
    if (typeCd.fixedSections.fixedAtTop.indexOf(section.sectionTypeCD) != -1) count++;
  });
  return count;
}

function getMaxSectionDragLimit(sections, sectionsToExclude) {
  var count = 0;
  sections.map(function (section) {
    if (typeCd.fixedSections.fixedAtBottom.indexOf(section.sectionTypeCD) != -1) count++;
  });
  return sections.length - count + 1 - sectionsToExclude;
}

function getCssScaleTransform(scale) {
  var zoomScale = {};
  if (RDL.currentPortalDetails.isCssScaling) {
    zoomScale = {
      transform: "scale(" + scale + ")",
      msTransform: "scale(" + scale + ")",
      MozTransform: "scale(" + scale + ")",
      transformOrigin: "0 0 0",
      msTransformOrigin: "0 0 0",
      MozTransformOrigin: "0 0 0"
    };
  }
  return zoomScale;
}

function reOrderCloserSection(lstSections) {
  var closerSection = lstSections.find(function (section) {
    return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Closer;
  });
  if (closerSection && closerSection.index != lstSections.length) {
    var temp = lstSections.splice(closerSection.index - 1, 1);
    lstSections.push(temp[0]);
    lstSections.map(function (section, index) {
      section.index = index + 1;
    });
  }

  if (window.RDL.features.showSignature || RDL.experimentControl.isFinalize2Funnel) {
    var signatureSection = lstSections.find(function (section) {
      return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Signature;
    });
    if (signatureSection && signatureSection.index != lstSections.length) {
      var _temp = lstSections.splice(signatureSection.index - 1, 1);
      lstSections.push(_temp[0]);
      lstSections.map(function (section, index) {
        section.index = index + 1;
      });
    }
  }

  return lstSections;
}

function reOrderCTACSection(sections) {
  var closerSection = void 0,
      callToActionSection = void 0;
  callToActionSection = _helper.CommonHelper.getSectionByCD(sections, _helper.TypeCodes.sectionTypeCd.CallToAction);
  closerSection = _helper.CommonHelper.getSectionByCD(sections, _helper.TypeCodes.sectionTypeCd.Closer);
  if (callToActionSection && closerSection && closerSection.index - callToActionSection.index != 1) {
    sections.splice(callToActionSection.index - 1, 1);
    sections.splice(closerSection.index - 2, 0, callToActionSection);
    sections.map(function (section, index) {
      section.index = index + 1;
    });
  }
  return sections;
}

function getIncompleteSection(documentObj) {
  var incompleteSectionListTemp = [];
  documentObj.sections.map(function (section) {
    if (section) {
      if (!section.paragraphs.length) {
        incompleteSectionListTemp.push(section.sectionTypeCD);
      } else if (section.paragraphs && section.paragraphs[0].docDatas && section.paragraphs[0].docDatas.length > 0 && (section.paragraphs[0].docDatas[0].charValue && (section.paragraphs[0].docDatas[0].charValue.search(window.RDL.placeholderColor) > -1 || section.paragraphs[0].docDatas[0].charValue.search(window.RDL.defaultPlaceholderColor) > -1) || isDocDataEmpty(section.paragraphs[0].docDatas))) {
        incompleteSectionListTemp.push(section.sectionTypeCD);
      }
    }
  });
  return incompleteSectionListTemp;
}

function getDefaultDocumentObj(firstName, lastName, onboardingUserInput, isUploadResumeFlow, isPersonalization) {
  if (isPersonalization && firstName && !lastName) lastName = " ";else if (isPersonalization && lastName && !firstName) firstName = " ";
  var isExperienced = onboardingUserInput && onboardingUserInput[typeCd.dataObjMappingKeys.experience] >= 1;
  var doc = {
    "docStyles": [{ "id": "b3e31d6b-a253-4f6c-ae77-83b7deebb3d4", "styleTypeCD": _helper.TypeCodes.styleTypeCD.fontSize, "value": "10" }, { "id": "aa3245e6-7b5a-4d54-a6cd-69f674e6a20b", "styleTypeCD": _helper.TypeCodes.styleTypeCD.fontFace, "value": "Century Gothic" }, { "id": "e6480f1a-7410-420d-b39e-a6d29234ec36", "styleTypeCD": _helper.TypeCodes.styleTypeCD.topBottomMargins, "value": "12" }, { "id": "947c3a88-8a69-4e10-b61c-07075bfe8a9b", "styleTypeCD": _helper.TypeCodes.styleTypeCD.hMargin, "value": "28" }, { "id": "1be527a4-3047-4a73-a1dc-f270068f1f1b", "styleTypeCD": _helper.TypeCodes.styleTypeCD.paragraphIndent, "value": "15" }, { "id": "f3e84b90-1fba-464c-aab3-a58ace800cbf", "styleTypeCD": _helper.TypeCodes.styleTypeCD.pageSize, "value": "Letter" }, { "id": "d0f1c60e-fcce-4550-adbe-524d80a3a121", "styleTypeCD": _helper.TypeCodes.styleTypeCD.sectionSpacing, "value": "12" }, { "id": "6138d368-f28b-4086-a339-e21acb683b66", "styleTypeCD": _helper.TypeCodes.styleTypeCD.paragraphSpacing, "value": "8" }, { "id": "3efbfa55-67fe-4cf7-934b-94835a373a6b", "styleTypeCD": _helper.TypeCodes.styleTypeCD.headingFontSize, "value": "12" }, { "id": "8d9888d4-4edc-4b2b-aa23-de2e1c8a28b9", "styleTypeCD": _helper.TypeCodes.styleTypeCD.lineWeight, "value": "0" }, { "id": "29abd9dc-3ff2-40b0-b2ae-216cd4052530", "styleTypeCD": _helper.TypeCodes.styleTypeCD.lineSpacing, "value": "5" }, { "id": "29abd9dc-3ff2-40b0-b2ae-216cd4052420", "styleTypeCD": _helper.TypeCodes.styleTypeCD.styleDocColor, "value": "" }],
    "sections": [{
      "id": "080dc41a-d25e-4ef0-bfae-01dec6a510b0", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Name, "paragraphs": [{
        "id": "0cf1f243-56b1-acf7-d3e2-c70135befb81", "docDatas": [{
          "id": "323e473f-7b0c-8c64-df79-c6494a7ca9fa", "fieldCD": _helper.TypeCodes.fieldCd.FirstName, "charValue": firstName || RDL.Localization.lbl_defaultDocCharVal_FNAM
        }, {
          "id": "bd046028-72f3-4493-8b4d-d5b16cab3aff", "fieldCD": _helper.TypeCodes.fieldCd.LastName, "charValue": lastName || RDL.Localization.lbl_defaultDocCharVal_LNAM
        }]
      }]
    }, {
      "id": "c85447d6-8666-4e74-b9aa-f18274261147", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Contact, "paragraphs": [{
        "id": "a711151c-29f4-6c04-e089-f2700730c26f", "docDatas": [{
          "id": "e4cf9381-4285-6fda-25dc-183dda46af56", "fieldCD": _helper.TypeCodes.fieldCd.HomePhone, "charValue": RDL.Localization.lbl_defaultDocCharVal_HPHN
        }, {
          "id": "a2971371-138c-baf0-2b2c-cb192347df22", "fieldCD": _helper.TypeCodes.fieldCd.CellPhone,
          "charValue": RDL.Localization.lbl_defaultDocCharVal_OPHN
        }, {
          "id": "bf30356c-459d-8905-cdb9-a96cb886a8b5", "fieldCD": _helper.TypeCodes.fieldCd.Email,
          "charValue": RDL.Localization.lbl_defaultDocCharVal_EMAIL
        }, {
          "id": "3e25b985-9946-c819-f15d-9f2677731a20", "fieldCD": _helper.TypeCodes.fieldCd.City, "charValue": RDL.Localization.lbl_defaultDocCharVal_CITY
        }, {
          "id": "a1228afb-8408-9922-ddd0-ef79dc77091b", "fieldCD": _helper.TypeCodes.fieldCd.State, "charValue": RDL.Localization.lbl_defaultDocCharVal_STATE
        }, {
          "id": "97d84850-52b1-3893-641f-c9ded37d4a46", "fieldCD": _helper.TypeCodes.fieldCd.ZipCode, "charValue": RDL.Localization.lbl_defaultDocCharVal_ZIP
        }, {
          "id": "99d84850-52b1-3893-641f-c9ded37d4a46", "fieldCD": _helper.TypeCodes.fieldCd.Street, "charValue": RDL.Localization.lbl_defaultDocCharVal_Street
        }]
      }]
    }, {
      "id": "3edc4642-3463-4795-b349-c17eec44067d", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Date, "paragraphs": [{
        "id": "b8807d9b-981c-45ad-acbb-e3ded965699f", "docDatas": [{
          "id": "c87d4650-0c0b-4435-b0be-ad21819b58a8", "fieldCD": _helper.TypeCodes.fieldCd.FreeFormat, "charValue": formatCalenderDate().displayDate
        }]
      }]
    }, {
      "id": "8a4f5894-ec16-4b7a-9124-e9778b5ac438", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Recipient, "paragraphs": [{
        "id": "d4a541fc-d224-053a-60e7-fabb7cc4ddb5", "docDatas": [{
          "id": "4257c409-e1e0-4c49-ad6e-7b9115122ad2", "fieldCD": _helper.TypeCodes.fieldCd.FirstName, "charValue": isUploadResumeFlow ? '' : RDL.Localization.lbl_defaultDocCharVal_RFNAM
        }, {
          "id": "0d15e91e-c5c6-ac9a-f940-9c26b5aac70c", "fieldCD": _helper.TypeCodes.fieldCd.LastName, "charValue": ""
        }, {
          "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.Company, "charValue": isUploadResumeFlow ? '' : RDL.Localization.lbl_defaultDocCharVal_RCOMP
        }, {
          "id": "47760d69-6c57-5ca3-c692-2af77162e5af", "fieldCD": _helper.TypeCodes.fieldCd.OtherPhone, "charValue": isUploadResumeFlow ? '' : RDL.Localization.lbl_defaultDocCharVal_ROPHN
        }, {
          "id": "69e253fb-b89d-4aca-8566-7cf9f2ec733b", "fieldCD": _helper.TypeCodes.fieldCd.Email,
          "charValue": isUploadResumeFlow ? '' : RDL.Localization.lbl_defaultDocCharVal_REMAIL
        }, {
          "id": "b3cf5f54-7adb-8bf2-7972-66c7c0c10f9b", "fieldCD": _helper.TypeCodes.fieldCd.City,
          "charValue": isUploadResumeFlow ? '' : RDL.Localization.lbl_defaultDocCharVal_RCITY
        }, {
          "id": "75641266-5b78-44d6-11e6-5350aed884ac", "fieldCD": _helper.TypeCodes.fieldCd.State,
          "charValue": isUploadResumeFlow ? '' : RDL.Localization.lbl_defaultDocCharVal_STATE
        }, {
          "id": "46113cf9-f1e0-3e02-7715-8c2b4f5032d7", "fieldCD": _helper.TypeCodes.fieldCd.ZipCode,
          "charValue": isUploadResumeFlow ? '' : RDL.Localization.lbl_defaultDocCharVal_RZIP
        }, {
          "id": "79d84850-52b1-3893-641f-c9ded37d4a46", "fieldCD": _helper.TypeCodes.fieldCd.Street,
          "charValue": RDL.Localization.lbl_defaultDocCharVal_RStreet
        }]
      }]
    }, {
      "id": "2ea68912-17ca-4bed-9f14-0601f2af1f25", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Subject, "paragraphs": [{
        "id": "863af921-84d4-4c2d-b961-c3df68acc27d", "docDatas": [{
          "id": "8121936c-0e56-4cbc-ab14-40fd5dc4d464", "fieldCD": _helper.TypeCodes.fieldCd.FreeFormat, "charValue": isUploadResumeFlow ? RDL.Localization.lbl_subject_text : RDL.Localization.lbl_defaultDocCharVal_SUBJ
        }]
      }]
    }, {
      "id": "88776cec-ed5d-4bc2-b984-7aac5c28c4c6", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Greetings, "paragraphs": [{
        "id": "bae9a580-c3bf-47e8-b2fb-a78844426518", "docDatas": [{
          "id": "18d288b4-3179-4ac6-938b-69f3884d4869", "fieldCD": _helper.TypeCodes.fieldCd.FreeFormat, "charValue": RDL.Localization.lbl_defaultDocCharVal_Greeting
        }]
      }]
    }, {
      "id": "25fddf67-c3ff-4e11-9371-547de76fe785", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Opener, "paragraphs": [{
        "id": "f4ae4f1d-9882-4447-a9ed-d2fbc2e1c6e8", "docDatas": [{
          "id": "1d63b77a-67af-42a4-887c-144edabb4eca", "fieldCD": _helper.TypeCodes.fieldCd.FreeFormat, "charValue": isUploadResumeFlow ? isExperienced ? RDL.Localization.lbl_exp_doer_opener_text : RDL.Localization.lbl_entry_doer_opener_text : RDL.Localization.lbl_defaultDocCharVal_OPEN
        }]
      }]
    }, {
      "id": "2681872c-fcaf-4060-8d36-c32ddf1c7b7c", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Body, "paragraphs": [{
        "id": "4d9ddd80-8ace-41bf-a959-af40febe6a03", "docDatas": [{
          "id": "76ac29d9-1092-463c-acfc-eb73d76bd9c8", "fieldCD": _helper.TypeCodes.fieldCd.FreeFormat,
          "charValue": isUploadResumeFlow ? isExperienced ? RDL.Localization.lbl_exp_doer_body_text : RDL.Localization.lbl_entry_doer_body_text : RDL.Localization.lbl_defaultDocCharVal_BODY
        }]
      }]
    }, {
      "id": "3eb5e345-9578-4937-8edd-7803f14039e5", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.CallToAction, "paragraphs": [{
        "id": "f3a7d372-f725-4384-bc6c-dcf48ca4e9c9", "docDatas": [{
          "id": "7c8595b0-96c2-4553-8b83-bbc4a2fca634", "fieldCD": _helper.TypeCodes.fieldCd.FreeFormat, "charValue": isUploadResumeFlow ? isExperienced ? RDL.Localization.lbl_exp_doer_cta_text : RDL.Localization.lbl_entry_doer_cta_text : RDL.Localization.lbl_defaultDocCharVal_CTAC
        }]
      }]
    }, {
      "id": "cda3d68b-93cc-4023-8d1b-0d8b4d82b3df", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Closer, "paragraphs": [{
        "id": "4ac6b187-5be5-48f7-9eeb-18e6ec8296f2", "docDatas": [{
          "id": "2b55c0c7-7192-4b79-8034-91311e9bcafa", "fieldCD": _helper.TypeCodes.fieldCd.FreeFormat, "charValue": isUploadResumeFlow ? RDL.Localization.lbl_doer_closer_text : RDL.Localization.lbl_defaultDocCharVal_CLSR
        }]
      }]
    }]
  };

  if (window.RDL.features.showSignature) {
    var signatureSection = {
      "id": "41da5681-58b1-4c22-939b-185932fe0517",
      "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Signature,
      "name": window.RDL.Localization.lbl_sectionList_name_SIGNATURE,
      "docZoneTypeCD": _helper.TypeCodes.docZoneTypeCd.FOOTER,
      "paragraphs": [{
        "id": "21d330ae-3081-4951-9a6b-71c5b72e2c81", "docDatas": [{ "id": "761fec64-b661-4f1e-bd36-945e43d16da7", "fieldCD": _helper.TypeCodes.fieldCd.SignatureName, "charValue": RDL.Localization.lbl_fName + " " + RDL.Localization.lbl_lName }, { "id": "4577d0e4-da91-4fd6-bf77-a50724bf1426", "fieldCD": _helper.TypeCodes.fieldCd.SignatureURL, "charValue": window.RDL.sgtrDefKeyVals.SURL }, { "id": "d10b73d0-adb4-4636-9963-7c10b263327a", "fieldCD": _helper.TypeCodes.fieldCd.HorizontalLeft, "charValue": window.RDL.sgtrDefKeyVals.HLEF }, { "id": "b8171656-7099-438c-8ee3-0c4a0660280f", "fieldCD": _helper.TypeCodes.fieldCd.HorizontalMid, "charValue": window.RDL.sgtrDefKeyVals.HMID }, { "id": "ecced62b-9173-4ca1-8dfa-aa2557ff6e18", "fieldCD": _helper.TypeCodes.fieldCd.HorizontalRight, "charValue": window.RDL.sgtrDefKeyVals.HRIG }, { "id": "4351a6c9-7cb5-4242-97ec-6fddb3401011", "fieldCD": _helper.TypeCodes.fieldCd.SignatureDate, "charValue": window.RDL.sgtrDefKeyVals.SDAT }, { "id": "30f5aa08-db30-4035-b534-3441eaaaaf1f", "fieldCD": _helper.TypeCodes.fieldCd.SignaturePlace, "charValue": window.RDL.sgtrDefKeyVals.PLAC }, { "id": "3dbadea7-b8a7-42c1-9e4d-7e4595c9c07d", "fieldCD": _helper.TypeCodes.fieldCd.SignatureFontFamily, "charValue": window.RDL.sgtrDefKeyVals.SIFF }, { "id": "d3aba072-272c-46c9-806b-9c67dc7a11f2", "fieldCD": _helper.TypeCodes.fieldCd.SignatureFontSize, "charValue": window.RDL.sgtrDefKeyVals.SIFS }, { "id": "b17f7fc0-3e52-402e-84aa-8e4ad0c0a682", "fieldCD": _helper.TypeCodes.fieldCd.SignatureFontStyle, "charValue": window.RDL.sgtrDefKeyVals.SIST }, { "id": "f4655b86-c81e-4f22-ba3a-6e89ec673839", "fieldCD": _helper.TypeCodes.fieldCd.SignatureFontColor, "charValue": window.RDL.sgtrDefKeyVals.SICL }, { "id": "23582255-7932-45db-8b38-6d4fbab61e40", "fieldCD": _helper.TypeCodes.fieldCd.SignatureHeight, "charValue": window.RDL.sgtrDefKeyVals.SIHT }, { "id": "c73eb941-7b57-480e-a207-b776641d8286", "fieldCD": _helper.TypeCodes.fieldCd.SignatureWidth, "charValue": window.RDL.sgtrDefKeyVals.SIWD }, { "id": "7ccbbbf6-dac3-40be-832b-5e44cce4fd2b", "fieldCD": _helper.TypeCodes.fieldCd.SignatureCategory, "charValue": window.RDL.sgtrDefKeyVals.STYP }, { "id": "699a0dc0-77be-4268-82fc-384f7b894aee", "fieldCD": _helper.TypeCodes.fieldCd.SignatureContrast, "charValue": window.RDL.sgtrDefKeyVals.SICT }]
      }]
    };
    doc.sections.push(signatureSection);
  }

  if (window.RDL.isNameAddedInContactSection) {
    var contactPara = doc.sections.find(function (sec) {
      return sec.sectionTypeCD == 'CNTC';
    }).paragraphs[0];

    var nameDocDatas = [{
      "id": "123e473f-7b0c-8c64-df79-c6494a7ca9fa", "fieldCD": _helper.TypeCodes.fieldCd.FirstName, "charValue": firstName || RDL.Localization.lbl_defaultDocCharVal_FNAM
    }, {
      "id": "bd046028-71f3-4493-8b4d-d5b16cab3aff", "fieldCD": _helper.TypeCodes.fieldCd.LastName, "charValue": lastName || RDL.Localization.lbl_defaultDocCharVal_LNAM
    }];
    contactPara.docDatas = contactPara.docDatas.concat(nameDocDatas);
  }

  return doc;
}

function updateHTMLContent(key) {
  var string = '<br/><FONT COLOR="#0000FF">[' + typeCd.dataObjMappingKeys.FirstName + ']\n  </FONT> <FONT COLOR="#0000FF">[' + typeCd.dataObjMappingKeys.LastName + ']</FONT>';
  var contentArr = [];
  contentArr = window.RDL.Content[key];
  contentArr.map(function (obj) {
    return obj.HTMLString = obj.HTMLString + string;
  });
}
function formatCalenderDate() {
  var dateVal = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : new Date();

  var dateObj = {},
      displayFormat = RDL.defaultDateDisplayFormat || "dd mmm yyyy";
  dateObj.selectedDate = dateVal.getDate();
  dateObj.month = dateVal.toLocaleString(RDL.currentPortalDetails.culture, { month: 'long' });
  if (dateObj.month.indexOf(" ") != -1) {
    //For IE10 and other unsupported browsers
    var monthArray = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
    dateObj.month = monthArray[dateVal.getMonth()];
  }
  dateObj.year = dateVal.getFullYear();
  dateObj.displayDate = displayFormat.replace("dd", dateObj.selectedDate).replace("mmm", dateObj.month).replace("yyyy", dateObj.year);
  return dateObj;
}

function reOrderIndicesOfSections(sections) {
  sections.map(function (section, index) {
    section.index = index + 1;
  });
}

function replaceTagsWithOBValues(onboardingUserInput) {
  var ttcText = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';
  var forComparisonPurpose = arguments[2];

  typeCd.BuilderBasedTTCAutoPopulateObjArr.forEach(function (obj) {
    if (onboardingUserInput[obj.mappedKey] || forComparisonPurpose) {
      var regex = void 0;
      if (forComparisonPurpose) {
        // matches "tagwithoutbracket", "current data in store" or "prev data in store"
        var replaceableTxt = "\\[" + obj.tagWithoutBracket + "\\]|" + (onboardingUserInput[obj.mappedKey] || "#####") + "|" + (onboardingUserInput[typeCd.dataObjMappingKeys.prevData] && onboardingUserInput[typeCd.dataObjMappingKeys.prevData][obj.mappedKey] || "######");
        // allow special chars
        replaceableTxt = replaceableTxt.replace(/[^a-zA-Z0-9]/g, "\\$&");
        regex = new RegExp(replaceableTxt, "gi");
        ttcText = ttcText.replace(regex, '');
      } else {
        ttcText = replaceTags(ttcText, obj, onboardingUserInput);
      }
    }
  });
  return ttcText;
}

function isParaStart(ttcText, tag) {
  var regex = new RegExp('(<br />|<br />\u2022 )<FONT COLOR=[\\"|\\\']#[a-z0-9]{6}[\\"|\\\']\\s?>\\' + tag + "<\/FONT>", "gi");
  return regex.test(ttcText);
}

function getOnboardingDataFromDocPref(documentObj, isDeduceData) {
  var _typeCd$userPreferenc = typeCd.userPreferenceKeys,
      openerTTCList = _typeCd$userPreferenc.openerTTCList,
      bodyTTCList = _typeCd$userPreferenc.bodyTTCList,
      gapsTTCList = _typeCd$userPreferenc.gapsTTCList,
      callToActionTTCList = _typeCd$userPreferenc.callToActionTTCList,
      relocationTTCList = _typeCd$userPreferenc.relocationTTCList,
      salaryRequirementTTCList = _typeCd$userPreferenc.salaryRequirementTTCList,
      availablityTTCList = _typeCd$userPreferenc.availablityTTCList,
      confidentialityTTCList = _typeCd$userPreferenc.confidentialityTTCList,
      closerTTCList = _typeCd$userPreferenc.closerTTCList,
      availablityTTC = _typeCd$userPreferenc.availablityTTC,
      relocationTTC = _typeCd$userPreferenc.relocationTTC,
      confidentialityTTC = _typeCd$userPreferenc.confidentialityTTC,
      salaryRequirementTTC = _typeCd$userPreferenc.salaryRequirementTTC,
      closerTTC = _typeCd$userPreferenc.closerTTC,
      openerTTCObj = _typeCd$userPreferenc.openerTTCObj,
      bodyTTCObj = _typeCd$userPreferenc.bodyTTCObj,
      gapsTTCObj = _typeCd$userPreferenc.gapsTTCObj,
      callToActionTTCObj = _typeCd$userPreferenc.callToActionTTCObj,
      greetingTTC = _typeCd$userPreferenc.greetingTTC,
      subjectTTC = _typeCd$userPreferenc.subjectTTC,
      greetingTTCList = _typeCd$userPreferenc.greetingTTCList,
      subjectTTCList = _typeCd$userPreferenc.subjectTTCList,
      closerTTCObj = _typeCd$userPreferenc.closerTTCObj;

  var i = void 0,
      key = void 0,
      preferenceKey = void 0,
      preferenceVal = void 0,
      onBoardingUserInput = {};
  for (i = 0; i < typeCd.fieldsToUpdateKeys.length; i++) {
    if (typeCd.fieldsToUpdateKeys[i].fieldKey && typeCd.fieldsToUpdateKeys[i].fieldCD) {
      key = typeCd.fieldsToUpdateKeys[i].fieldKey;
      preferenceKey = typeCd.fieldsToUpdateKeys[i].fieldCD;
      var finalizeToFunnelSection = false;
      var finalizeToFunnelSectionsArr = [openerTTCList, bodyTTCList, gapsTTCList, callToActionTTCList, salaryRequirementTTCList, availablityTTCList, confidentialityTTCList, closerTTCList, relocationTTCList, availablityTTC, relocationTTC, confidentialityTTC, salaryRequirementTTC, closerTTC, openerTTCObj, gapsTTCObj, bodyTTCObj, callToActionTTCObj, greetingTTC, greetingTTCList, subjectTTC, subjectTTCList, closerTTCObj];
      if (finalizeToFunnelSectionsArr.includes(preferenceKey)) finalizeToFunnelSection = true;
      preferenceVal = getValFromDocPreference(documentObj, preferenceKey);
      if (preferenceVal && preferenceVal.value && typeof preferenceVal.value == 'string' && (preferenceVal.value.indexOf("[") == 0 || preferenceVal.value.indexOf("{") == 0) && finalizeToFunnelSection) {
        onBoardingUserInput[key] = JSON.parse(preferenceVal.value);
      } else onBoardingUserInput[key] = preferenceVal && preferenceVal.value;
      if (key == typeCd.dataObjMappingKeys.isSpecificJob && !isNaN(preferenceVal.value)) onBoardingUserInput[key] = parseInt(preferenceVal.value);else if (isDeduceData) {
        switch (key) {
          case typeCd.dataObjMappingKeys.WorkGaps:
            onBoardingUserInput[key] = getIsWorkGaps(documentObj);
            break;
          case typeCd.dataObjMappingKeys.WorkGapsReason:
            onBoardingUserInput[key] = getGapsReason(documentObj);
            break;
          case typeCd.dataObjMappingKeys.enrolledInSchool:
            onBoardingUserInput[key] = isEnrolledInSchool(documentObj);
            break;
          case typeCd.dataObjMappingKeys.CollegeGraduate:
            onBoardingUserInput[key] = isCollegeGraduate(documentObj);
            break;
        }
      }
    }
  }
  return onBoardingUserInput;
}

var getIsWorkGaps = exports.getIsWorkGaps = function getIsWorkGaps(document) {
  var gapSection = document.sections.find(function (sec) {
    return sec.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Gaps;
  });
  return gapSection ? window.RDL.Localization.lbl_yes.toUpperCase() : window.RDL.Localization.lbl_no.toUpperCase();
};

var checkForContent = exports.checkForContent = function checkForContent(content, keyword) {
  return content.toLowerCase().includes(keyword.toLowerCase());
};

var isCollegeGraduate = exports.isCollegeGraduate = function isCollegeGraduate(doc) {
  var isInSchool = isEnrolledInSchool(doc);
  if (isInSchool == window.RDL.Localization.lbl_no) {
    if (getSchoolName(doc)) {
      return window.RDL.Localization.lbl_yes;
    } else {
      return window.RDL.Localization.lbl_no;
    }
  }
  return '';
};

var getSchoolName = exports.getSchoolName = function getSchoolName(doc) {
  var schoolNameFieldCD = typeCd.fieldsToUpdateKeys.find(function (el) {
    return el.fieldKey == typeCd.dataObjMappingKeys.schoolName;
  }).fieldCD;
  var preference = getValFromDocPreference(doc, schoolNameFieldCD);
  return preference ? preference.value : '';
};

var isEnrolledInSchool = exports.isEnrolledInSchool = function isEnrolledInSchool(doc) {
  var schoolTypeFieldCD = typeCd.fieldsToUpdateKeys.find(function (el) {
    return el.fieldKey == typeCd.dataObjMappingKeys.schoolType;
  }).fieldCD;
  var schoolTypePreference = getValFromDocPreference(doc, schoolTypeFieldCD);
  if (schoolTypePreference) {
    var schoolName = getSchoolName(doc);
    if (schoolTypePreference.value == typeCd.schoolType.tradeSchool || schoolTypePreference.value == typeCd.schoolType.graduateSchool) {
      return window.RDL.Localization.lbl_yes;
    } else if ((schoolTypePreference.value == typeCd.schoolType.highSchool || schoolTypePreference.value == typeCd.schoolType.college) && !schoolName) {
      return window.RDL.Localization.lbl_yes;
    } else {
      return window.RDL.Localization.lbl_no;
    }
  }
  return '';
};

var getGapsReason = exports.getGapsReason = function getGapsReason(document) {
  var gapSection = document.sections.find(function (sec) {
    return sec.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Gaps;
  });
  if (gapSection) {
    var gapSectionContent = gapSection.paragraphs[0].docDatas[0].charValue;
    if (gapSectionContent) {
      if (checkForContent(gapSectionContent, RDL.Localization.lbl_medical)) {
        return RDL.Localization.lbl_workgapreason_reason_family;
      } else if (checkForContent(gapSectionContent, RDL.Localization.lbl_workgapreason_reason_travel)) {
        return RDL.Localization.lbl_workgapreason_reason_travel;
      } else if (checkForContent(gapSectionContent, RDL.Localization.lbl_children)) {
        return RDL.Localization.lbl_workgapreason_reason_takingcare;
      } else if (checkForContent(gapSectionContent, RDL.Localization.lbl_workgapreason_reason_education)) {
        return RDL.Localization.lbl_workgapreason_reason_education;
      } else if (checkForContent(gapSectionContent, RDL.Localization.lbl_relocate)) {
        return RDL.Localization.lbl_workgapreason_reason_relocation;
      } else if (checkForContent(gapSectionContent, RDL.Localization.lbl_workgapreason_reason_sabbatical)) {
        return RDL.Localization.lbl_workgapreason_reason_sabbatical;
      }
    }
  }
  return '';
};

function getOnboardingStepDetails(stepIndex) {
  var stepKey = Object.keys(typeCd.onBoardingStepsV2).find(function (key) {
    return typeCd.onBoardingStepsV2[key].index == stepIndex;
  });
  var onboardingStepDetails = typeCd.onBoardingStepsV2[stepKey];
  return onboardingStepDetails;
}

function getOnboardingArrFromData(onboardingUserInput) {
  var onboardingStepArr = [],
      nextStep = typeCd.onBoardingStepsV2.JobTitle.index,
      lastStep = typeCd.onBoardingStepsV2.KeyTheme.index,
      stepAction = void 0;
  onboardingStepArr.push(nextStep);
  do {
    stepAction = getStepActionFromData(nextStep, onboardingUserInput);
    nextStep = onBoardingV2Routing(nextStep, stepAction, onboardingUserInput);
    onboardingStepArr.push(nextStep);
  } while (nextStep != lastStep);
  return onboardingStepArr;
}

function getStepActionFromData(stepIndex, onboardingUserInput) {
  var stepAction = typeCd.onBoardingUserInput.continue,
      schoolName = void 0;
  switch (stepIndex) {
    case typeCd.onBoardingStepsV2.WorkExperience.index:
      if (parseInt(onboardingUserInput[typeCd.dataObjMappingKeys.experience]) < 1) stepAction = typeCd.onBoardingUserInput.skip;
      break;
    case typeCd.onBoardingStepsV2.SchoolEnrolled.index:
      switch (onboardingUserInput[typeCd.dataObjMappingKeys.enrolledInSchool]) {
        case "":
        case undefined:
        case RDL.Localization.lbl_no:
          stepAction = typeCd.onBoardingUserInput.no;
          break;
        case RDL.Localization.lbl_yes:
          stepAction = typeCd.onBoardingUserInput.yes;
          break;
        default:
          stepAction = typeCd.onBoardingUserInput.others;
      }
      break;
    case typeCd.onBoardingStepsV2.CollegeGraduate.index:
      if (onboardingUserInput[typeCd.dataObjMappingKeys.CollegeGraduate] == window.RDL.Localization.lbl_yes) stepAction = typeCd.onBoardingUserInput.yes;else stepAction = typeCd.onBoardingUserInput.no;
      break;
    case typeCd.onBoardingStepsV2.University.index:
      schoolName = onboardingUserInput[typeCd.dataObjMappingKeys.schoolName] && onboardingUserInput[typeCd.dataObjMappingKeys.schoolName].toLowerCase();
      if (schoolName && (schoolName.indexOf(window.RDL.Localization.lbl_college) != -1 || schoolName.indexOf(window.RDL.Localization.lbl_university) != -1)) stepAction = typeCd.onBoardingUserInput.currentlyInCollege;
      break;
    case typeCd.onBoardingStepsV2.RecentGradSchool.index:
      schoolName = onboardingUserInput[typeCd.dataObjMappingKeys.schoolName] && onboardingUserInput[typeCd.dataObjMappingKeys.schoolName].toLowerCase();
      if (schoolName && (schoolName.indexOf(window.RDL.Localization.lbl_college) != -1 || schoolName.indexOf(window.RDL.Localization.lbl_university) != -1)) stepAction = typeCd.onBoardingUserInput.recentGradClg;
      break;
    case typeCd.onBoardingStepsV2.WorkGaps.index:
      if (onboardingUserInput[typeCd.dataObjMappingKeys.WorkGaps] && onboardingUserInput[typeCd.dataObjMappingKeys.WorkGaps].toLowerCase() == window.RDL.Localization.lbl_yes.toLowerCase()) stepAction = typeCd.onBoardingUserInput.yes;
      break;
    default:
      stepAction = typeCd.onBoardingUserInput.continue;
  }
  return stepAction;
}

function getScaleVal() {
  var windowWidth = window.innerWidth;
  var scale = 1;
  var sidebarNode = document.querySelector(".sidebar");
  var containerNode = document.querySelector(".container-letter");
  if (sidebarNode && containerNode) {
    var sidebarwidth = sidebarNode.offsetWidth;
    var leftRightPadding = 363;
    var letterWidth = windowWidth - sidebarwidth - leftRightPadding;
    scale = letterWidth / 614;
  }
  if (windowWidth >= 1400) scale = 1.35;
  if (windowWidth <= 991) scale = 0.7;
  return scale;
}

function downloadFile(url, fileName, fileFormat) {
  var elem = document.createElement('a');
  document.body.appendChild(elem);
  elem.setAttribute('href', url);
  elem.setAttribute('download', fileName + '.' + fileFormat);
  elem.click();
  document.body.removeChild(elem);
}

function showSVGDownload() {
  return (/[^@]+@bold.com/.test(RDL.objClaims.email) || RDL.GetQueryString(typeCd.QueryStringParams.svgDownload) == '1'
  );
}

function getFieldDetails(array, fieldCd) {
  var fieldValue = null;
  var items = array.reduce(function (a, b) {
    return a && a[b] ? a[b] : null;
  });
  if (items) {
    fieldValue = _helper.FieldHelper.getCharValue(items, fieldCd);
  }
  return fieldValue;
}

function getDocumentSectionData(arrSections, sections, userData) {
  var section = void 0,
      value = "";
  for (var i = 0; i <= arrSections.length; i++) {
    section = _helper.CommonHelper.getSectionByCD(sections, arrSections[i]);
    if (section) {
      value = _helper.FieldHelper.getCharValue(section.paragraphs[0].docDatas, "FRFM");
      switch (section.sectionTypeCD) {
        case _helper.TypeCodes.sectionTypeCd.Greetings:
          if (!userData[typeCd.dataObjMappingKeys.selectedGreetingTTC]) userData[typeCd.dataObjMappingKeys.selectedGreetingTTC] = {};
          userData[typeCd.dataObjMappingKeys.selectedGreetingTTC].text = value;
          continue;
        case _helper.TypeCodes.sectionTypeCd.Subject:
          if (!userData[typeCd.dataObjMappingKeys.selectedSubjectTTC]) userData[typeCd.dataObjMappingKeys.selectedSubjectTTC] = {};
          userData[typeCd.dataObjMappingKeys.selectedSubjectTTC].text = value;
          continue;
        case _helper.TypeCodes.sectionTypeCd.Opener:
          if (!userData[typeCd.dataObjMappingKeys.selectedOpenerTTC]) userData[typeCd.dataObjMappingKeys.selectedOpenerTTC] = {};
          userData[typeCd.dataObjMappingKeys.selectedOpenerTTC].text = value;
          continue;
        case _helper.TypeCodes.sectionTypeCd.Body:
          if (!userData[typeCd.dataObjMappingKeys.selectedBodyTTC]) userData[typeCd.dataObjMappingKeys.selectedBodyTTC] = {};
          userData[typeCd.dataObjMappingKeys.selectedBodyTTC].text = value;
          continue;
        case _helper.TypeCodes.sectionTypeCd.CallToAction:
          if (!userData[typeCd.dataObjMappingKeys.selectedCallToActionTTC]) userData[typeCd.dataObjMappingKeys.selectedCallToActionTTC] = {};
          userData[typeCd.dataObjMappingKeys.selectedCallToActionTTC].text = value;
          continue;
        case _helper.TypeCodes.sectionTypeCd.Gaps:
          if (!userData[typeCd.dataObjMappingKeys.selectedGapsTTC]) userData[typeCd.dataObjMappingKeys.selectedGapsTTC] = {};
          userData[typeCd.dataObjMappingKeys.selectedGapsTTC].text = value;
          continue;
        case _helper.TypeCodes.sectionTypeCd.Closer:
          if (!userData[typeCd.dataObjMappingKeys.selectedCloserTTC]) userData[typeCd.dataObjMappingKeys.selectedCloserTTC] = {};
          userData[typeCd.dataObjMappingKeys.selectedCloserTTC].text = value;
          break;
      }
      return userData;
    }
  }
}

function isSeparatorSkin(skinCD) {
  var skin = RDL.Skins.find(function (skin) {
    return skin.skinCD == skinCD;
  });
  if (skin) return { separatorSkin: skin.separatorSkin == true,
    sectionsToExclude: skin.sectionsToExclude ? skin.sectionsToExclude : [], excludeDocPaddingFromHOverlay: skin.excludeDocPaddingFromHOverlay,
    isMonogram: skin.isMonogram, sectionContainerIndex: skin.sectionContainerIndex };else {
    var rnSkin = typeCd.rnSkins.find(function (skin) {
      return skin.skinCD == skinCD;
    }); //New RN Skins experiment support
    if (rnSkin) return { separatorSkin: rnSkin.separatorSkin == true,
      sectionsToExclude: rnSkin.sectionsToExclude ? rnSkin.sectionsToExclude : [],
      excludeDocPaddingFromHOverlay: rnSkin.excludeDocPaddingFromHOverlay, isMonogram: rnSkin.isMonogram,
      sectionContainerIndex: rnSkin.sectionContainerIndex }; //New RN Skins experiment support
    return { separatorSkin: false, sectionsToExclude: [], excludeDocPaddingFromHOverlay: false,
      isMonogram: false };
  }
}

function getOccMatchingTTCLocalized(sectionCD, exp, occupationArr, gender) {

  exp = exp >= 7 ? "7+" : exp;
  var genFlag = "N";
  switch (gender.toLowerCase()) {
    case typeCd.gender.male:
      genFlag = "M";
      break;
    case typeCd.gender.female:
      genFlag = "F";
      break;
  }

  if (occupationArr == "" || occupationArr == []) {
    occupationArr = ["Others"];
  }

  var ttcList = RDL.occupationalTTC && RDL.occupationalTTC[sectionCD] ? JSON.parse(JSON.stringify(RDL.occupationalTTC[sectionCD])) : [],
      occMatchingTTC = [];

  switch (sectionCD) {
    case _helper.TypeCodes.sectionTypeCd.Opener:
    case _helper.TypeCodes.sectionTypeCd.CallToAction:
      ttcList = ttcList.filter(function (x) {
        return (x.gender == genFlag || x.gender == "N") && (x.experience.includes(exp) || x.experience == "All");
      });
      break;
    case _helper.TypeCodes.sectionTypeCd.Body:
      var tmpList = [];
      ttcList = ttcList.filter(function (x) {
        return (x.gender == genFlag || x.gender == "N") && (x.experience.includes(exp) || x.experience == "All");
      });

      var _loop2 = function _loop2(i) {
        var occString = ttcList[i].occu || "";
        occString = occString.toLowerCase().trim();
        var occExists = occupationArr.some(function (x) {
          return occString.includes(x.toLowerCase().trim());
        });
        occExists && tmpList.push(ttcList[i]);
      };

      for (var i = 0; i < ttcList.length; i++) {
        _loop2(i);
      }
      if (tmpList.length == 0) {
        tmpList = ttcList.filter(function (k) {
          return k.occu == "Others";
        });
      }
      ttcList = tmpList;
      break;
    case _helper.TypeCodes.sectionTypeCd.Subject:
      ttcList = ttcList.filter(function (x) {
        return x.gender == genFlag;
      });
      break;
    default:
      break;
  }

  return ttcList;
}

function getOccMatchingTTC(sectionCD, exp) {
  var occupationArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];
  var gender = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : typeCd.gender.neutral;

  if (RDL.disableTTCDependency) {
    return RDL.occupationalTTC && RDL.occupationalTTC[sectionCD] ? JSON.parse(JSON.stringify(RDL.occupationalTTC[sectionCD])) : [];
  } else {
    if (RDL.isBuilderBasedFlowLocalized) {
      return getOccMatchingTTCLocalized(sectionCD, exp, occupationArr, gender);
    }

    if (sectionCD == _helper.TypeCodes.sectionTypeCd.Gaps) {
      return JSON.parse(JSON.stringify(RDL.workGapReasons));
    }
    var ttcList = RDL.occupationalTTC && RDL.occupationalTTC[sectionCD] ? JSON.parse(JSON.stringify(RDL.occupationalTTC[sectionCD])) : [],
        occMatchingTTC = [];
    if (sectionCD == _helper.TypeCodes.sectionTypeCd.Body && !RDL.features.isCEIntegration) {
      if (occupationArr.length) {
        var _loop3 = function _loop3(i) {
          occMatchingTTC = ttcList.filter(function (x) {
            return x.occu.toLowerCase().includes(occupationArr[i].toLowerCase());
          });
          if (occMatchingTTC.length) {
            ttcList = occMatchingTTC;
            return 'break';
          }
        };

        for (var i = 0; i < occupationArr.length; i++) {
          var _ret3 = _loop3(i);

          if (_ret3 === 'break') break;
        }
      }
      if (!occMatchingTTC.length) ttcList = ttcList.filter(function (x) {
        return !x.occu;
      });
    }
    if (!RDL.experimentControl.isContentAPI) {
      ttcList = ttcList.filter(function (x) {
        if (exp >= 1) return x.isExp;else return x.isEntry;
      });
    }
    return ttcList;
  }
}

function setNameContactSection(documentObj, onboardingUserInput, isUploadResume) {
  var _typeCd$dataObjMappin = typeCd.dataObjMappingKeys,
      FirstName = _typeCd$dataObjMappin.FirstName,
      LastName = _typeCd$dataObjMappin.LastName,
      phone = _typeCd$dataObjMappin.phone,
      email = _typeCd$dataObjMappin.email,
      userCity = _typeCd$dataObjMappin.userCity,
      userState = _typeCd$dataObjMappin.userState,
      userZip = _typeCd$dataObjMappin.userZip,
      userStreet = _typeCd$dataObjMappin.userStreet;

  var firstName = void 0,
      lastName = void 0;
  if (!onboardingUserInput[FirstName] && !onboardingUserInput[LastName]) {
    firstName = isUploadResume ? '' : RDL.objClaims.firstName || '';
    lastName = isUploadResume ? '' : RDL.objClaims.lastName || '';
  } else {
    firstName = onboardingUserInput[FirstName] || '';
    lastName = onboardingUserInput[LastName] || '';
  }

  //Name
  var namePara = documentObj.sections[0].paragraphs[0];
  if (namePara) {
    var docDataFName = namePara.docDatas && namePara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.FirstName;
    });
    if (docDataFName) docDataFName.charValue = firstName;
    var docDataLName = namePara.docDatas && namePara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.LastName;
    });
    if (docDataLName) docDataLName.charValue = lastName;
  }
  //Contact
  var contactPara = documentObj.sections[1].paragraphs[0];
  if (contactPara) {
    var docDataPhone = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.CellPhone;
    });
    if (docDataPhone) docDataPhone.charValue = onboardingUserInput[phone] || '';
    var docDataEmail = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.Email;
    });
    if (docDataEmail) docDataEmail.charValue = onboardingUserInput[email] || (isUploadResume ? '' : RDL.objClaims.email);
    var docDataCity = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.City;
    });
    if (docDataCity) docDataCity.charValue = onboardingUserInput[userCity] || '';
    var docDataState = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.State;
    });
    if (docDataState) docDataState.charValue = onboardingUserInput[userState] || '';
    var docDataZip = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.ZipCode;
    });
    if (docDataZip) docDataZip.charValue = onboardingUserInput[userZip] || '';

    var docDataStreet = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.Street;
    });
    if (docDataStreet) docDataStreet.charValue = onboardingUserInput[userStreet] || '';

    var _docDataFName = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.FirstName;
    });
    if (_docDataFName) _docDataFName.charValue = onboardingUserInput[FirstName] || '';

    var _docDataLName = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.LastName;
    });
    if (_docDataLName) _docDataLName.charValue = onboardingUserInput[LastName] || '';
  }
  return documentObj;
}

function replaceTags(text, obj, onboardingUserInput) {
  // matches <font></font> tag.
  var regex = new RegExp("<FONT COLOR=[\\\"|\\\']#[a-z0-9]{6}[\\\"|\\']\\s?>\\" + obj.tag + "<\/FONT>", "gi");
  var isStart = isParaStart(text, obj.tag);
  text = text.replace(regex, obj.isToLowerCase && !isStart ? onboardingUserInput[obj.mappedKey].toLowerCase() : onboardingUserInput[obj.mappedKey]);
  return text;
}

function replaceJobTitleTagWithPrevJT(ttcText, onboardingUserInput) {
  var text = ttcText;
  var isTargetJobTitleInObj = Object.keys(onboardingUserInput).find(function (x) {
    return x == typeCd.dataObjMappingKeys.jobTitle;
  });
  var prevJobTitleVal = onboardingUserInput[typeCd.dataObjMappingKeys.previousJobTitle];
  if (!isTargetJobTitleInObj && prevJobTitleVal) {
    var obj = {
      tag: "[" + window.RDL.Localization.lbl_targetJobTitle + "]",
      tagWithoutBracket: window.RDL.Localization.lbl_targetJobTitle,
      mappedKey: typeCd.dataObjMappingKeys.previousJobTitle
    };
    text = replaceTags(text, obj, onboardingUserInput);
  }
  return text;
}

function getFirstTTCTextForPreview(sectionCD, isExperienced) {
  var onboardingUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var ttcText = '';
  if (RDL.contentEngineTTC && RDL.contentEngineTTC[sectionCD]) {
    var arrTTC = RDL.contentEngineTTC[sectionCD].filter(function (x) {
      return isExperienced ? x.isExp : x.isEntry;
    });
    if (arrTTC && arrTTC.length) {
      ttcText = arrTTC[0].text || '';
      ttcText = replaceTagsWithOBValues(onboardingUserInput, ttcText, false);
      ttcText = replaceJobTitleTagWithPrevJT(ttcText, onboardingUserInput);
    }
  }
  return ttcText;
}

function getPreviewTextForTTCSection() {
  var onboardingUserInput = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var isUploadResume = arguments[1];
  var sectionCD = arguments[2];
  var _typeCd$dataObjMappin2 = typeCd.dataObjMappingKeys,
      experience = _typeCd$dataObjMappin2.experience,
      selectedOpenerTTC = _typeCd$dataObjMappin2.selectedOpenerTTC,
      selectedBodyTTC = _typeCd$dataObjMappin2.selectedBodyTTC,
      selectedGapsTTC = _typeCd$dataObjMappin2.selectedGapsTTC,
      selectedCallToActionTTC = _typeCd$dataObjMappin2.selectedCallToActionTTC,
      uploadedResumeName = _typeCd$dataObjMappin2.uploadedResumeName;

  var isExperienced = onboardingUserInput[experience] >= 1;
  var ttcText = '';
  if (onboardingUserInput[uploadedResumeName]) {
    ttcText = getFirstTTCTextForPreview(sectionCD, isExperienced, onboardingUserInput);
  }
  if (sectionCD == _helper.TypeCodes.sectionTypeCd.Opener) {
    return onboardingUserInput[selectedOpenerTTC] && onboardingUserInput[selectedOpenerTTC].text || isUploadResume && ttcText || '<br/><br/><br/><br/><br/>';
  } else if (sectionCD == _helper.TypeCodes.sectionTypeCd.Body) {
    return onboardingUserInput[selectedBodyTTC] && onboardingUserInput[selectedBodyTTC].text || isUploadResume && ttcText || '<br/><br/><br/><br/><br/><br/><br/><br/>';
  } else if (sectionCD == _helper.TypeCodes.sectionTypeCd.CallToAction) {
    return onboardingUserInput[selectedCallToActionTTC] && onboardingUserInput[selectedCallToActionTTC].text || isUploadResume && ttcText || '<br/><br/><br/><br/><br/>';
  }
}

function getPreviewTextForGreeting(mergedState, isUploadResume) {
  var onboardingUserInput = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  var greetingText = '';
  var _typeCd$dataObjMappin3 = typeCd.dataObjMappingKeys,
      selectedOpenerTTC = _typeCd$dataObjMappin3.selectedOpenerTTC,
      uploadedResumeName = _typeCd$dataObjMappin3.uploadedResumeName;

  if (isUploadResume) {
    greetingText = onboardingUserInput[uploadedResumeName] && !isEmptyObject(RDL.contentEngineTTC) ? RDL.Localization.lbl_defaultDocCharVal_Greeting : " ";
  } else {
    greetingText = mergedState[selectedOpenerTTC] && mergedState[selectedOpenerTTC].text != undefined ? RDL.Localization.lbl_defaultDocCharVal_Greeting : " ";
  }
  return greetingText;
}

function getPreviewTextForSubject(mergedState, isUploadResume, showJobTitle, currentStep) {
  var onboardingUserInput = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
  var _typeCd$dataObjMappin4 = typeCd.dataObjMappingKeys,
      jobTitle = _typeCd$dataObjMappin4.jobTitle,
      previousJobTitle = _typeCd$dataObjMappin4.previousJobTitle,
      uploadedResumeName = _typeCd$dataObjMappin4.uploadedResumeName,
      selectedSubjectTTC = _typeCd$dataObjMappin4.selectedSubjectTTC;

  var stepIndexes = [typeCd.onBoardingStepsV2.Name.index, typeCd.onBoardingStepsV2.CreateVsUpload.index, typeCd.onBoardingStepsV2.UploadResume.index, typeCd.onBoardingStepsV2.UploadReview.index];
  var text = '';
  if (isUploadResume && !RDL.isBuilderBasedFlowLocalized) {
    var isTargetJobTitleInObj = Object.keys(onboardingUserInput).find(function (x) {
      return x == jobTitle;
    });
    var prevJobTitleVal = onboardingUserInput[previousJobTitle];
    var shouldReplaceJTTagWithPJT = !isTargetJobTitleInObj && prevJobTitleVal && currentStep != typeCd.onBoardingStepsV2.JobTitle.index; //special condition applied for TJT screen
    text = onboardingUserInput[uploadedResumeName] && !isEmptyObject(RDL.contentEngineTTC) ? RDL.Localization.lbl_subject_prefix + ' ' + (mergedState[jobTitle] || shouldReplaceJTTagWithPJT && mergedState[previousJobTitle] || "<FONT COLOR=\"" + RDL.placeholderColor + "\" >[" + RDL.Localization.lbl_targetJobTitle + "]</FONT>") : '<br/><br/>';
  } else if (stepIndexes.indexOf(mergedState.onBoardingStep) >= 0 && !mergedState[jobTitle] && !showJobTitle) {
    text = '<br/><br/>';
  } else {
    if (!RDL.isBuilderBasedFlowLocalized) {
      text = RDL.Localization.lbl_subject_prefix + ' ' + (mergedState[jobTitle] || "<FONT COLOR=\"" + RDL.placeholderColor + "\" >[" + RDL.Localization.lbl_targetJobTitle + "]</FONT>");
    } else {
      text = mergedState[selectedSubjectTTC] && mergedState[selectedSubjectTTC].text || '<br/><br/><br/><br/><br/>';
    }
  }
  return text;
}

function setSectionsDataOverview(mergedState, documentObj) {
  var _typeCd$dataObjMappin5 = typeCd.dataObjMappingKeys,
      FirstName = _typeCd$dataObjMappin5.FirstName,
      LastName = _typeCd$dataObjMappin5.LastName,
      phone = _typeCd$dataObjMappin5.phone,
      email = _typeCd$dataObjMappin5.email,
      userCity = _typeCd$dataObjMappin5.userCity,
      userState = _typeCd$dataObjMappin5.userState,
      userZip = _typeCd$dataObjMappin5.userZip,
      userStreet = _typeCd$dataObjMappin5.userStreet,
      companyName = _typeCd$dataObjMappin5.companyName,
      state = _typeCd$dataObjMappin5.state,
      city = _typeCd$dataObjMappin5.city,
      zip = _typeCd$dataObjMappin5.zip,
      recipientFName = _typeCd$dataObjMappin5.recipientFName,
      recipientLName = _typeCd$dataObjMappin5.recipientLName,
      recipientStreet = _typeCd$dataObjMappin5.recipientStreet,
      selectedSubjectTTC = _typeCd$dataObjMappin5.selectedSubjectTTC,
      selectedOpenerTTC = _typeCd$dataObjMappin5.selectedOpenerTTC,
      selectedBodyTTC = _typeCd$dataObjMappin5.selectedBodyTTC,
      WorkGaps = _typeCd$dataObjMappin5.WorkGaps,
      selectedGapsTTC = _typeCd$dataObjMappin5.selectedGapsTTC,
      selectedCallToActionTTC = _typeCd$dataObjMappin5.selectedCallToActionTTC,
      SNAM = _typeCd$dataObjMappin5.SNAM,
      SURL = _typeCd$dataObjMappin5.SURL,
      HLEF = _typeCd$dataObjMappin5.HLEF,
      HMID = _typeCd$dataObjMappin5.HMID,
      HRIG = _typeCd$dataObjMappin5.HRIG,
      SDAT = _typeCd$dataObjMappin5.SDAT,
      PLAC = _typeCd$dataObjMappin5.PLAC,
      SIFF = _typeCd$dataObjMappin5.SIFF,
      SIFS = _typeCd$dataObjMappin5.SIFS,
      SIST = _typeCd$dataObjMappin5.SIST,
      SICL = _typeCd$dataObjMappin5.SICL,
      SIHT = _typeCd$dataObjMappin5.SIHT,
      SIWD = _typeCd$dataObjMappin5.SIWD,
      STYP = _typeCd$dataObjMappin5.STYP,
      SICT = _typeCd$dataObjMappin5.SICT;

  var firstName = void 0,
      lastName = void 0;
  if (!mergedState[FirstName] && !mergedState[LastName]) {
    if (!RDL.objClaims.firstName && !RDL.objClaims.lastName) {
      firstName = RDL.Localization.lbl_firstname;
      lastName = RDL.Localization.lbl_lastname;
    } else {
      firstName = RDL.objClaims.firstName || '';
      lastName = RDL.objClaims.lastName || '';
    }
  } else {
    firstName = mergedState[FirstName] || '';
    lastName = mergedState[LastName] || '';
  }

  //Name
  var namePara = documentObj.sections[0].paragraphs[0];
  if (namePara) {
    var docDataFName = namePara.docDatas && namePara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.FirstName;
    });
    if (docDataFName) docDataFName.charValue = firstName;
    var docDataLName = namePara.docDatas && namePara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.LastName;
    });
    if (docDataLName) docDataLName.charValue = lastName;
  }

  //Contact
  var contactPara = documentObj.sections[1].paragraphs[0];
  if (contactPara) {
    var docDataPhone = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.CellPhone;
    });
    if (docDataPhone) docDataPhone.charValue = mergedState[phone] || RDL.Localization.lbl_defaultDocCharVal_OPHN;
    var docDataEmail = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.Email;
    });
    if (docDataEmail) docDataEmail.charValue = mergedState[email] || (RDL.objClaims.email ? RDL.objClaims.email : RDL.Localization.lbl_defaultDocCharVal_EMAIL);
    var docDataCity = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.City;
    });
    if (docDataCity) docDataCity.charValue = mergedState[userCity] || RDL.Localization.lbl_defaultDocCharVal_CITY;
    var docDataState = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.State;
    });
    if (docDataState) docDataState.charValue = mergedState[userState] || RDL.Localization.lbl_defaultDocCharVal_STATE;
    var docDataZip = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.ZipCode;
    });
    if (docDataZip) docDataZip.charValue = mergedState[userZip] || RDL.Localization.lbl_defaultDocCharVal_ZIP;
    var docDataStreet = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.Street;
    });
    if (docDataStreet) docDataStreet.charValue = mergedState[userStreet] || RDL.Localization.lbl_defaultDocCharVal_Street;
    var _docDataFName2 = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.FirstName;
    });
    if (_docDataFName2) _docDataFName2.charValue = firstName;
    var _docDataLName2 = contactPara.docDatas && contactPara.docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.LastName;
    });
    if (_docDataLName2) _docDataLName2.charValue = lastName;
  }
  //Closer
  if (firstName || lastName) {
    documentObj.sections[9].paragraphs[0].docDatas[0].charValue = '' + RDL.Localization.lbl_closer_prefix + firstName + ' ' + lastName;
  }

  //Adding Gaps
  documentObj.sections.splice(8, 0, {
    "id": "2681872c-fcaf-4060-8d36-c32ddf1c7b7c", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Gaps,
    "paragraphs": [{
      "id": "4d9ddd80-8ace-41bf-a959-af40febe6a03", "docDatas": [{
        "id": "76ac29d9-1092-463c-acfc-eb7dad6bgs6", "fieldCD": _helper.TypeCodes.fieldCd.FreeFormat,
        "charValue": " "
      }]
    }]
  });
  //Recipient
  documentObj.sections.splice(3, 1, {
    "id": "8a4f5894-ec16-4b7a-9124-e9778b5ac438", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Recipient, "paragraphs": [{
      "id": "d4a541fc-d224-053a-60e7-fabb7cc4ddb5", "docDatas": [{ "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.Company, "charValue": mergedState[companyName] || RDL.Localization.lbl_defaultDocCharVal_RCOMP }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.FirstName, "charValue": mergedState[recipientFName] || RDL.Localization.lbl_defaultDocCharVal_RFNAM }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.LastName, "charValue": mergedState[recipientLName] || "" }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.City, "charValue": mergedState[city] || RDL.Localization.lbl_defaultDocCharVal_RCITY }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.State, "charValue": mergedState[state] || RDL.Localization.lbl_defaultDocCharVal_RSTATE }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.ZipCode, "charValue": mergedState[zip] || RDL.Localization.lbl_defaultDocCharVal_RZIP }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.Street, "charValue": mergedState[recipientStreet] || RDL.Localization.lbl_defaultDocCharVal_RStreet }]
    }]
  });
  //Subject
  documentObj.sections[4].paragraphs[0].docDatas[0].charValue = mergedState[selectedSubjectTTC] && mergedState[selectedSubjectTTC].text || RDL.Localization.lbl_defaultDocCharVal_SUBJ;
  //Greeting
  documentObj.sections[5].paragraphs[0].docDatas[0].charValue = RDL.Localization.lbl_defaultDocCharVal_Greeting;
  //Opener
  documentObj.sections[6].paragraphs[0].docDatas[0].charValue = mergedState[selectedOpenerTTC] && mergedState[selectedOpenerTTC].text || RDL.Localization.lbl_defaultDocCharVal_OPEN;
  //Body
  documentObj.sections[7].paragraphs[0].docDatas[0].charValue = mergedState[selectedBodyTTC] && mergedState[selectedBodyTTC].text || RDL.Localization.lbl_defaultDocCharVal_BODY;

  //Gaps
  documentObj.sections[8].paragraphs[0].docDatas[0].charValue = mergedState[WorkGaps] && mergedState[WorkGaps].toLowerCase() == window.RDL.Localization.lbl_yes.toLowerCase() && mergedState[selectedGapsTTC] ? mergedState[selectedGapsTTC].text || RDL.Localization.lbl_defaultDocCharVal_GAPS : ' ';
  //Call to Action
  documentObj.sections[9].paragraphs[0].docDatas[0].charValue = mergedState[selectedCallToActionTTC] && mergedState[selectedCallToActionTTC].text || RDL.Localization.lbl_defaultDocCharVal_CTAC;

  //Signature
  if (window.RDL.features.showSignature) {
    documentObj.sections.splice(11, 1, {
      "id": "41da5681-58b1-4c22-939b-185932fe0517",
      "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Signature,
      "name": window.RDL.Localization.lbl_sectionList_name_SIGNATURE,
      "docZoneTypeCD": _helper.TypeCodes.docZoneTypeCd.FOOTER,
      "paragraphs": [{
        "id": "21d330ae-3081-4951-9a6b-71c5b72e2c81", "docDatas": [{ "id": "761fec64-b661-4f1e-bd36-945e43d16da7", "fieldCD": _helper.TypeCodes.fieldCd.SignatureName, "charValue": mergedState[SNAM] || firstName + " " + lastName }, { "id": "4577d0e4-da91-4fd6-bf77-a50724bf1426", "fieldCD": _helper.TypeCodes.fieldCd.SignatureURL, "charValue": mergedState[SURL] || window.RDL.sgtrDefKeyVals.SURL }, { "id": "d10b73d0-adb4-4636-9963-7c10b263327a", "fieldCD": _helper.TypeCodes.fieldCd.HorizontalLeft, "charValue": mergedState[HLEF] || window.RDL.sgtrDefKeyVals.HLEF }, { "id": "b8171656-7099-438c-8ee3-0c4a0660280f", "fieldCD": _helper.TypeCodes.fieldCd.HorizontalMid, "charValue": mergedState[HMID] || window.RDL.sgtrDefKeyVals.HMID }, { "id": "ecced62b-9173-4ca1-8dfa-aa2557ff6e18", "fieldCD": _helper.TypeCodes.fieldCd.HorizontalRight, "charValue": mergedState[HRIG] || window.RDL.sgtrDefKeyVals.HRIG }, { "id": "4351a6c9-7cb5-4242-97ec-6fddb3401011", "fieldCD": _helper.TypeCodes.fieldCd.SignatureDate, "charValue": mergedState[SDAT] || window.RDL.sgtrDefKeyVals.SDAT }, { "id": "30f5aa08-db30-4035-b534-3441eaaaaf1f", "fieldCD": _helper.TypeCodes.fieldCd.SignaturePlace, "charValue": mergedState[PLAC] || window.RDL.sgtrDefKeyVals.PLAC }, { "id": "3dbadea7-b8a7-42c1-9e4d-7e4595c9c07d", "fieldCD": _helper.TypeCodes.fieldCd.SignatureFontFamily, "charValue": mergedState[SIFF] || window.RDL.sgtrDefKeyVals.SIFF }, { "id": "d3aba072-272c-46c9-806b-9c67dc7a11f2", "fieldCD": _helper.TypeCodes.fieldCd.SignatureFontSize, "charValue": mergedState[SIFS] || window.RDL.sgtrDefKeyVals.SIFS }, { "id": "b17f7fc0-3e52-402e-84aa-8e4ad0c0a682", "fieldCD": _helper.TypeCodes.fieldCd.SignatureFontStyle, "charValue": mergedState[SIST] || window.RDL.sgtrDefKeyVals.SIST }, { "id": "f4655b86-c81e-4f22-ba3a-6e89ec673839", "fieldCD": _helper.TypeCodes.fieldCd.SignatureFontColor, "charValue": mergedState[SICL] || window.RDL.sgtrDefKeyVals.SICL }, { "id": "23582255-7932-45db-8b38-6d4fbab61e40", "fieldCD": _helper.TypeCodes.fieldCd.SignatureHeight, "charValue": mergedState[SIHT] || window.RDL.sgtrDefKeyVals.SIHT }, { "id": "c73eb941-7b57-480e-a207-b776641d8286", "fieldCD": _helper.TypeCodes.fieldCd.SignatureWidth, "charValue": mergedState[SIWD] || window.RDL.sgtrDefKeyVals.SIWD }, { "id": "7ccbbbf6-dac3-40be-832b-5e44cce4fd2b", "fieldCD": _helper.TypeCodes.fieldCd.SignatureCategory, "charValue": mergedState[STYP] || window.RDL.sgtrDefKeyVals.STYP }, { "id": "699a0dc0-77be-4268-82fc-384f7b894aee", "fieldCD": _helper.TypeCodes.fieldCd.SignatureContrast, "charValue": mergedState[SICT] || window.RDL.sgtrDefKeyVals.SICT }]
      }]
    });
  }

  return documentObj;
}

function getDocForPreview(mergedState, isUploadResume, GapsTTCText, signatureDataOnFlow, currentStep, showJobTitle) {
  var onboardingUserInput = arguments.length > 6 && arguments[6] !== undefined ? arguments[6] : {};
  var isOverviewComponent = arguments.length > 7 && arguments[7] !== undefined ? arguments[7] : false;

  var documentObj = JSON.parse(JSON.stringify(getDefaultDocumentObj(null, null, mergedState, isUploadResume)));

  if (isOverviewComponent) {
    documentObj = setSectionsDataOverview(mergedState, documentObj);
  } else {
    var _typeCd$dataObjMappin6 = typeCd.dataObjMappingKeys,
        FirstName = _typeCd$dataObjMappin6.FirstName,
        LastName = _typeCd$dataObjMappin6.LastName,
        selectedGapsTTC = _typeCd$dataObjMappin6.selectedGapsTTC,
        WorkGaps = _typeCd$dataObjMappin6.WorkGaps,
        companyName = _typeCd$dataObjMappin6.companyName,
        state = _typeCd$dataObjMappin6.state,
        city = _typeCd$dataObjMappin6.city,
        zip = _typeCd$dataObjMappin6.zip,
        recipientFName = _typeCd$dataObjMappin6.recipientFName,
        recipientLName = _typeCd$dataObjMappin6.recipientLName,
        recipientStreet = _typeCd$dataObjMappin6.recipientStreet;

    var firstName = void 0,
        lastName = void 0;
    if (!mergedState[FirstName] && !mergedState[LastName]) {
      if (isUploadResume) {
        firstName = '';
        lastName = '';
      } else if (!RDL.objClaims.firstName && !RDL.objClaims.lastName) {
        firstName = RDL.Localization.lbl_firstname;
        lastName = RDL.Localization.lbl_lastname;
      } else {
        firstName = RDL.objClaims.firstName || '';
        lastName = RDL.objClaims.lastName || '';
      }
    } else {
      firstName = mergedState[FirstName] || '';
      lastName = mergedState[LastName] || '';
    }

    // Name & Contact
    documentObj = setNameContactSection(documentObj, mergedState, isUploadResume);

    //Closer
    if (!isUploadResume || firstName || lastName) {
      // for uploadresume, set only if firstName or lastName is available
      documentObj.sections[9].paragraphs[0].docDatas[0].charValue = '' + RDL.Localization.lbl_closer_prefix + firstName + ' ' + lastName;
    }

    //Closer
    if (RDL.isBuilderBasedFlowLocalized && currentStep != typeCd.onBoardingStepsV2.SignatureView.index) {
      // for uploadresume, set only if firstName or lastName is available
      documentObj.sections[9].paragraphs[0].docDatas[0].charValue = " ";
    }

    //Adding Gaps
    documentObj.sections.splice(8, 0, {
      "id": "2681872c-fcaf-4060-8d36-c32ddf1c7b7c", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Gaps,
      "paragraphs": [{
        "id": "4d9ddd80-8ace-41bf-a959-af40febe6a03", "docDatas": [{
          "id": "76ac29d9-1092-463c-acfc-eb7dad6bgs6", "fieldCD": _helper.TypeCodes.fieldCd.FreeFormat,
          "charValue": " "
        }]
      }]
    });
    //Recipient
    documentObj.sections.splice(3, 1, {
      "id": "8a4f5894-ec16-4b7a-9124-e9778b5ac438", "sectionTypeCD": _helper.TypeCodes.sectionTypeCd.Recipient, "paragraphs": [{
        "id": "d4a541fc-d224-053a-60e7-fabb7cc4ddb5", "docDatas": [{ "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.Company, "charValue": mergedState[companyName] || "<br/>" }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.FirstName, "charValue": mergedState[recipientFName] || "" }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.LastName, "charValue": mergedState[recipientLName] || "" }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.City, "charValue": mergedState[city] || "" }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.State, "charValue": mergedState[state] || "" }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.ZipCode, "charValue": mergedState[zip] || "" }, { "id": "ae8cd7fb-b265-ae83-d706-09329b0f464d", "fieldCD": _helper.TypeCodes.fieldCd.Street, "charValue": mergedState[recipientStreet] || "" }]
      }]
    });
    //Subject
    documentObj.sections[4].paragraphs[0].docDatas[0].charValue = getPreviewTextForSubject(mergedState, isUploadResume, showJobTitle, currentStep, onboardingUserInput);
    var useUnmergedValues = [typeCd.onBoardingStepsV2.CreateVsUpload.index, typeCd.onBoardingStepsV2.UploadResume.index, typeCd.onBoardingStepsV2.UploadReview.index, typeCd.onBoardingStepsV2.Name.index].includes(currentStep);
    //Greeting
    documentObj.sections[5].paragraphs[0].docDatas[0].charValue = getPreviewTextForGreeting(mergedState, isUploadResume, onboardingUserInput);
    //Opener
    documentObj.sections[6].paragraphs[0].docDatas[0].charValue = getPreviewTextForTTCSection(useUnmergedValues ? onboardingUserInput : mergedState, isUploadResume, _helper.TypeCodes.sectionTypeCd.Opener);
    //Body
    documentObj.sections[7].paragraphs[0].docDatas[0].charValue = getPreviewTextForTTCSection(useUnmergedValues ? onboardingUserInput : mergedState, isUploadResume, _helper.TypeCodes.sectionTypeCd.Body);

    //Gaps
    documentObj.sections[8].paragraphs[0].docDatas[0].charValue = mergedState[WorkGaps] && mergedState[WorkGaps].toLowerCase() == window.RDL.Localization.lbl_yes.toLowerCase() && mergedState[selectedGapsTTC] ? mergedState[selectedGapsTTC].text || '<br/><br/><br/><br/><br/>' : ' ';
    //Call to Action
    documentObj.sections[9].paragraphs[0].docDatas[0].charValue = getPreviewTextForTTCSection(useUnmergedValues ? onboardingUserInput : mergedState, isUploadResume, _helper.TypeCodes.sectionTypeCd.CallToAction);
  }

  if (currentStep != typeCd.onBoardingStepsV2.SignatureView.index && mergedState[typeCd.dataObjMappingKeys.isUploadResume] == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) {
    documentObj = setSignatureSection(documentObj, mergedState);
  } else {
    if (signatureDataOnFlow && currentStep == typeCd.onBoardingStepsV2.SignatureView.index) {
      documentObj = setSignatureSection(documentObj, signatureDataOnFlow, true);
    } else if (!isOverviewComponent) {
      documentObj = setSignatureSection(documentObj, mergedState);
    }
  }

  if (window.RDL.swapDateAndCompanyOrder) {
    // reorder Date and CompanySection 
    var recipientSectionIndex = documentObj.sections.findIndex(function (x) {
      return x.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Recipient;
    });
    var dateSectionIndex = documentObj.sections.findIndex(function (x) {
      return x.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Date;
    });
    var _ref2 = [documentObj.sections[recipientSectionIndex], documentObj.sections[dateSectionIndex]];
    documentObj.sections[dateSectionIndex] = _ref2[0];
    documentObj.sections[recipientSectionIndex] = _ref2[1];
  }

  return documentObj;
}

function isExpFlowChanged(newExp) {
  var oldExp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  if (newExp >= 1 && oldExp < 1) return true;else if (newExp < 1 && oldExp >= 1) return true;else return false;
}

function isStringStartsWithVowel() {
  var s = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";

  var regex = /^[aeiou]$/i;
  return regex.test(s.charAt());
}

function setPreloadableImageSrc(imageArray) {
  for (var i = 0; i < imageArray.length; i++) {
    var img = new Image();
    img.src = imageArray[i];
  }
}

function resetDateTime(date) {
  date.setHours(0);
  date.setMinutes(0);
  date.setSeconds(0, 0);
  return date;
}

function checkDate(checkDate) {
  var date = new Date();
  date = resetDateTime(date);
  checkDate = new Date(checkDate);
  checkDate = resetDateTime(checkDate);
  var timeDiff = date.getTime() - checkDate.getTime();
  var diffDays = Math.ceil(timeDiff / (1000 * 3600 * 24));
  switch (true) {
    case diffDays == 0:
      return RDL.Localization.lblToday;
    case diffDays == 1:
      return RDL.Localization.lblYesterday;
    case diffDays <= 7:
      return RDL.Localization.lbl_lessThanWeek;
    case diffDays > 7:
      return RDL.Localization.lbl_moreThanWeek;
  }
}

function setScrollTop(element, scrollTopPos, isAnimate) {
  if (element) {
    if (isAnimate && element.scroll) {
      element.scroll({ top: scrollTopPos, behavior: 'smooth' });
    } else element.scrollTop = scrollTopPos;
  }
}
function scrollAnimate() {
  var element = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : document.scrollingElement || document.documentElement;
  var to = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;
  var duration = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 300;

  var start = element.scrollTop,
      change = to - start,
      startDate = +new Date(),
      easeInOutQuad = function easeInOutQuad(t, b, c, d) {
    t /= d / 2;
    if (t < 1) return c / 2 * t * t + b;
    t--;
    return -c / 2 * (t * (t - 2) - 1) + b;
  },
      animateScroll = function animateScroll() {
    var currentDate = +new Date();
    var currentTime = currentDate - startDate;
    element.scrollTop = parseInt(easeInOutQuad(currentTime, start, change, duration));
    if (currentTime < duration) {
      requestAnimationFrame(animateScroll);
    } else {
      element.scrollTop = to;
    }
  };
  animateScroll();
};
function getElementOffsetTopFromBody(el) {
  var position = {
    top: el.offsetTop,
    left: el.offsetLeft
  };
  if (el.offsetParent) {
    var parentPosition = getElementOffsetTopFromBody(el.offsetParent);
    position.top += parentPosition.top;
    position.left += parentPosition.left;
  }
  return position;
};
function isElementVisible(elem) {
  if (!(elem instanceof Element)) throw Error('DomUtil: elem is not an element.');
  var style = getComputedStyle(elem);
  if (style.display === 'none') return false;
  if (style.visibility !== 'visible') return false;
  if (style.opacity < 0.1) return false;
  if (elem.offsetWidth + elem.offsetHeight + elem.getBoundingClientRect().height + elem.getBoundingClientRect().width === 0) {
    return false;
  }
  var elemCenter = {
    x: elem.getBoundingClientRect().left + elem.offsetWidth / 2,
    y: elem.getBoundingClientRect().top + elem.offsetHeight / 2
  };
  if (elemCenter.x < 0) return false;
  if (elemCenter.x > (document.documentElement.clientWidth || window.innerWidth)) return false;
  if (elemCenter.y < 0) return false;
  if (elemCenter.y > (document.documentElement.clientHeight || window.innerHeight)) return false;
  var pointContainer = document.elementFromPoint(elemCenter.x, elemCenter.y);
  do {
    if (pointContainer === elem) return true;
  } while (pointContainer = pointContainer.parentNode);
  return false;
}

function isPurgeUserScenario(resp) {
  //Check only for guest.
  if (RDL.objClaims.role == _helper.TypeCodes.userRoles.User) return false;
  if (resp.status == 401 || resp.indexOf && RDL.PortalSettings.isAccountsEnabled && resp.indexOf && resp.indexOf(':') !== -1 && (resp.substring(0, resp.indexOf(":")) == typeCd.errorCodes.invalidUserIdErrorCode || resp.substring(0, resp.indexOf(":")) == typeCd.errorCodes.noUserErrorCode)) {
    return true;
  }
  return false;
}

function isValidSkin(skinCD) {
  var isValidSkin = false;
  isValidSkin = skinCD && window.RDL.Skins && window.RDL.Skins.find(function (skin) {
    return skin.skinCD && skin.skinCD.toUpperCase() == skinCD.toUpperCase();
  });
  return isValidSkin;
}

var AddOrReplaceSectionContent = exports.AddOrReplaceSectionContent = function AddOrReplaceSectionContent(doc, sectionTypeCD, sectionContent, userId) {
  if (doc) {
    var _document = JSON.parse(JSON.stringify(doc));
    var section = _document.sections.find(function (sec) {
      return sec.sectionTypeCD == sectionTypeCD;
    });
    if (section) {
      if (section.paragraphs && section.paragraphs.length > 0) {
        section.paragraphs[0].docDatas[0].charValue = sectionContent;
      } else {
        var para = _helper.DocumentHelper.createFirstPara(section, userId);
        if (para) {
          var paragraphs = [];
          paragraphs.push(para);
          section.paragraphs = paragraphs;
        }
      }

      var sectionIndex = _document.sections.findIndex(function (sec) {
        return sec.sectionTypeCD == sectionTypeCD;
      });
      _document.sections[sectionIndex] = section;
    } else {
      if (window.RDL.Sections_List.length) {
        var sec = window.RDL.Sections_List.find(function (sec) {
          return sec.sectionTypeCD == sectionTypeCD;
        });
        var _section = new Object({
          id: _helper.CommonHelper.guid(),
          documentID: _document.id,
          index: _document.sections.length + 1,
          sectionTypeCD: sectionTypeCD,
          name: window.RDL.Localization[sec.name],
          docZoneTypeCD: undefined.getSectionDocZoneTypeCd(sec.sectionTypeCd),
          paragraphs: []
        });
        var _para = _helper.DocumentHelper.createFirstPara(_section, userId);
        if (_para) {
          var _paragraphs = [];
          _paragraphs.push(_para);
          _section.paragraphs = _paragraphs;
        }

        _document.sections.push(_section);
      }
    }
    return _document;
  }
  return null;
};

function removeBRTag(docDataVal) {
  return docDataVal = docDataVal.replace(/,<br>/g, ",<br></p><p>");
}

function getFreshData(userID, productCD, sectionCD, jobTitle, jobHierarchy) {
  return _ajaxhelper.ContentAjaxHelper.getTextTunerContentFromContentEngineV2(userID, productCD, sectionCD, jobTitle, true, jobHierarchy).then(function (resp) {
    if (resp && resp.result && resp.result.length > 0) {
      var LINE_BREAK = '<br />';
      var BULLET_POINT = '•';
      resp.result = resp.result.map(function (item) {
        item.text = item.text.replaceAllOccurrences('<span class=\"ttc_token\" style=\"color:#0000ff\">\\\[NL\\\]</span>', LINE_BREAK, true);
        item.text = item.text.replaceAllOccurrences('<span class=\"ttc_token\" style=\"color:#0000ff\">\\\[BL\\\]</span>', BULLET_POINT, true);
        item.text = item.text.replaceAllOccurrences('<span class=\"ttc_token\" style=\"color:#0000ff\">', '<FONT COLOR=\"#FF6600\" >', true);
        item.text = item.text.replaceAllOccurrences('</span>', '</FONT>', true);
        var IS_BULLETTEXT_IN_THE_END = item.text.lastIndexOf(BULLET_POINT) > item.text.lastIndexOf(LINE_BREAK);
        // CLB-2737: Appending LINE_BREAK to resolve the misalignment of 
        // TTCs where bullet point text was in the end of the TTC
        if (IS_BULLETTEXT_IN_THE_END) {
          item.text += LINE_BREAK;
        }
        return item;
      });
      RDL.contentEngineTTC = RDL.contentEngineTTC || {};
      RDL.contentEngineTTC[sectionCD] = resp.result;
      if (RDL.features.isCEIntegration) {
        RDL.occupationalTTC = Object.assign({}, RDL.occupationalTTC, RDL.contentEngineTTC);
      }
      localforage.setItem(typeCd.ForageKeyNames.contentEngineTTC, RDL.contentEngineTTC);
    }
  });
}

function fetchSectionBasedContentEngineTTC(userID, productCD, sectionCD, jobTitle, getUncachedData, jobHierarchy) {
  var localForagePromise = Promise.resolve("");
  if (getUncachedData) {
    //don't take localForage data into consideration
    return getFreshData(userID, productCD, sectionCD, jobTitle, jobHierarchy);
  } else {
    if (localforage) {
      localForagePromise = localforage.getItem(typeCd.ForageKeyNames.contentEngineTTC);
    }
    return localForagePromise.then(function (resp) {
      if (resp && resp[sectionCD]) {
        RDL.contentEngineTTC = RDL.contentEngineTTC || {};
        RDL.contentEngineTTC[sectionCD] = resp[sectionCD];
        if (RDL.features.isCEIntegration) {
          RDL.occupationalTTC = Object.assign({}, RDL.occupationalTTC, RDL.contentEngineTTC);
        }
      } else {
        return getFreshData(userID, productCD, sectionCD, jobTitle, jobHierarchy);
      }
    });
  }
}

function checkForNameAndContactSection(document, dataobj) {
  var isSectionExist = true;
  var fName = "";
  var lName = "";

  var CProfileSection = document.sections.find(function (x) {
    return x.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.CProfile;
  });
  if (CProfileSection) {
    fName = _helper.FieldHelper.getCharValue(CProfileSection.paragraphs[0].docDatas, "FNAM");
    lName = _helper.FieldHelper.getCharValue(CProfileSection.paragraphs[0].docDatas, "LNAM");
  }

  var nameContactArray = [{
    "sectionTypeCd": _helper.TypeCodes.sectionTypeCd.Name,
    "name": RDL.Localization.lbl_namesection,
    "doczonetypecd": "HEAD"
  }, {
    "sectionTypeCd": _helper.TypeCodes.sectionTypeCd.Contact,
    "name": RDL.Localization.lbl_contactsection,
    "doczonetypecd": "HEAD"
  }];
  var nameSection = document.sections.find(function (x) {
    return x.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Name;
  });
  if (!nameSection) {
    isSectionExist = false;
    var nameSec = _helper.DocumentHelper.createDummySectionWithParagraph(_helper.TypeCodes.sectionTypeCd.Name, document.sections.length + 1, document.id, document.userId, 0, nameContactArray);
    nameSec.paragraphs[0].docDatas[0].charValue = fName;
    nameSec.paragraphs[0].docDatas[1].charValue = lName;
    document.sections.splice(0, 0, nameSec);
  }
  var contactSection = document.sections.find(function (x) {
    return x.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Contact;
  });
  if (!contactSection) {
    isSectionExist = false;
    var contactSec = _helper.DocumentHelper.createDummySectionWithParagraph(_helper.TypeCodes.sectionTypeCd.Contact, document.sections.length + 1, document.id, document.userId, 0, nameContactArray);
    var userStreetDocData = contactSec.paragraphs[0].docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.Street;
    });
    userStreetDocData.charValue = dataobj.userStreet;
    var userStateDocData = contactSec.paragraphs[0].docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.State;
    });
    userStateDocData.charValue = dataobj.userState;
    var userZipDocData = contactSec.paragraphs[0].docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.ZipCode;
    });
    userZipDocData.charValue = dataobj.userZip;
    var userCityDocData = contactSec.paragraphs[0].docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.City;
    });
    userCityDocData.charValue = dataobj.userCity;
    var userEmailDocData = contactSec.paragraphs[0].docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.Email;
    });
    userEmailDocData.charValue = dataobj.email;
    var userPhoneDocData = contactSec.paragraphs[0].docDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.CellPhone;
    });
    userPhoneDocData.charValue = dataobj.phone;
    var docData = new _viewmodel.DocData({ fieldCD: _helper.TypeCodes.fieldCd.FirstName, charValue: fName });
    contactSec.paragraphs[0].docDatas.push(docData);
    docData = new _viewmodel.DocData({ fieldCD: _helper.TypeCodes.fieldCd.LastName, charValue: lName });
    contactSec.paragraphs[0].docDatas.push(docData);

    document.sections.splice(1, 0, contactSec);
  }

  if (window.RDL.swapDateAndCompanyOrder) {
    // reorder Date and CompanySection 
    var recipientSectionIndex = document.sections.findIndex(function (x) {
      return x.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Recipient;
    });
    var dateSectionIndex = document.sections.findIndex(function (x) {
      return x.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Date;
    });
    var _ref3 = [document.sections[recipientSectionIndex], document.sections[dateSectionIndex]];
    document.sections[dateSectionIndex] = _ref3[0];
    document.sections[recipientSectionIndex] = _ref3[1];
  }

  if (!isSectionExist) document.sections = _helper.DocumentHelper.reorderArrayItems(document.sections);
  return document;
}

function getTextTunerContentPromise(portalCode, templateTypeCD, sectionTypeCd) {
  var key = sectionTypeCd + templateTypeCD;
  if (window.RDL.Content && Object.keys(window.RDL.Content).length > 0 && window.RDL.Content[key]) {
    return Promise.resolve(window.RDL.Content[key]);
  } else {
    return CommonActions.cacheExamplesSectionWise(portalCode, templateTypeCD, sectionTypeCd).then(function (resp) {
      return Promise.resolve(resp);
    });
  }
}

function replaceHtmlFromContent(content) {
  return content && content.replace(/<FONT[^>]+>/g, '').replace(/<\/FONT>/g, '');
}

// ----------------------- ##Signature##---------------------------
function setSignatureSection(doc, onboardingInput) {
  var isSignatureScreen = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;

  var documentObj = JSON.parse(JSON.stringify(doc));
  var onboardingUserInput = JSON.parse(JSON.stringify(onboardingInput));
  if (window.RDL.features.showSignature && documentObj && documentObj.sections && documentObj.sections.length > 0) {
    documentObj = getSignatureUpdatedDocument(documentObj, window.RDL.objClaims, onboardingUserInput, isSignatureScreen);
  }
  return documentObj;
}

function getSignatureUpdatedDocument(doc, user, onBoardingUserInput) {
  var isSignatureScreen = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : false;

  var updatedDocument = JSON.parse(JSON.stringify(doc));
  var docObj = void 0,
      fNameInput = void 0,
      lNameInput = void 0,
      sgtrSection = void 0;
  fNameInput = onBoardingUserInput[typeCd.dataObjMappingKeys.FirstName];
  lNameInput = onBoardingUserInput[typeCd.dataObjMappingKeys.LastName];
  if (fNameInput || lNameInput) docObj = { firstName: fNameInput, lastName: lNameInput };else docObj = { firstName: user.FirstName, lastName: user.LastName };
  sgtrSection = updatedDocument.sections.find(function (section) {
    return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Signature;
  });
  if (!sgtrSection) {
    var newSectionIndex = updatedDocument.sections.length;
    sgtrSection = updatedDocument.sections[newSectionIndex] = new _viewmodel.Section({
      id: _helper.CommonHelper.guid(),
      sectionTypeCD: _helper.TypeCodes.sectionTypeCd.Signature,
      name: window.RDL.Localization.lbl_sectionList_name_SIGNATURE,
      docZoneTypeCD: _helper.TypeCodes.docZoneTypeCd.FOOTER,
      documentID: updatedDocument.id,
      index: updatedDocument.sections.length + 1,
      paragraphs: []
    });
  }
  var paragraph = sgtrSection && sgtrSection.paragraphs && sgtrSection.paragraphs.length > 0 && sgtrSection.paragraphs[0] || _helper.DocumentHelper.createFirstPara(sgtrSection, user.UserUID);
  paragraph = updateSignatureDocData(paragraph, onBoardingUserInput, user.UserUID);
  sgtrSection.paragraphs[0] = paragraph;
  if (paragraph && paragraph.docDatas && paragraph.id) {
    var docDatas = _helper.DocumentHelper.addMissingDocDatas(_helper.TypeCodes.sectionTypeCd.Signature, paragraph.docDatas);
    var sigName = "";
    if (!isSignatureScreen) {
      if (RDL.objClaims.role != _helper.TypeCodes.userRoles.User) {
        if (docObj.firstName && docObj.lastName) {
          sigName = docObj.firstName + " " + docObj.lastName;
        } else {
          sigName = docObj.firstName ? docObj.firstName : docObj.lastName ? docObj.lastName : sigName;
        }
        if (onBoardingUserInput[typeCd.dataObjMappingKeys.SNAM] && onBoardingUserInput[typeCd.dataObjMappingKeys.SNAM].trim()) {
          sigName = onBoardingUserInput[typeCd.dataObjMappingKeys.SNAM].trim();
        }
        if (!sigName) {
          sigName = RDL.Localization.lbl_fName + " " + RDL.Localization.lbl_lName;
        }
        if (RDL.isBuilderBasedFlowLocalized) {
          sigName = "";
        }
      }
    }

    getDefaultSignatureSection(sigName, docDatas, user.UserUID);
  }
  return updatedDocument;
}
function getSectionsNameUpdateDoc(doc, user) {
  var updatedDocument = JSON.parse(JSON.stringify(doc));
  var closerSec = void 0,
      callToActionSec = void 0;
  closerSec = updatedDocument.sections.find(function (section) {
    return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Closer;
  });
  callToActionSec = updatedDocument.sections.find(function (section) {
    return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.CallToAction;
  });
  closerSec.name = typeCd.BuilderBasedTTCSections.signature;
  callToActionSec.name = typeCd.BuilderBasedTTCSections.closer;

  return updatedDocument;
}
function getsectionsNameUpdateList(unAddedSections) {
  unAddedSections.map(function (item) {
    if (item.sectionTypeCd == _helper.TypeCodes.sectionTypeCd.Closer) item.name = "lbl_sectionList_name_SIGNATURE";
    if (item.sectionTypeCd == _helper.TypeCodes.sectionTypeCd.CallToAction) item.name = "lbl_sectionList_name_CLSR";
  });
}
function getDefaultSignatureSection() {
  var name = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "";
  var sgtrDefaultDocDatas = arguments[1];
  var userId = arguments[2];

  var defKeyVals = Object.assign({}, window.RDL.sgtrDefKeyVals);
  var arrdocData = [];
  var docData = null;

  if (sgtrDefaultDocDatas) {
    var category = sgtrDefaultDocDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.SignatureCategory;
    });
    if (category && category.charValue && (category.charValue.toUpperCase() == typeCd.SignatureCategory.DRAW || category.charValue.toUpperCase() == typeCd.SignatureCategory.IMAGE)) {
      return sgtrDefaultDocDatas;
    }
  }

  if (defKeyVals && Object.keys(defKeyVals).length) {
    var fontStyleDocData = sgtrDefaultDocDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.SignatureFontStyle;
    });
    var fontSizeDocData = sgtrDefaultDocDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.SignatureFontSize;
    });
    var fontFamilyDocData = sgtrDefaultDocDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.SignatureFontFamily;
    });
    var fontColorDocData = sgtrDefaultDocDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.SignatureFontColor;
    });
    var signatureNameDocData = sgtrDefaultDocDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.SignatureName;
    });
    var signatureLeftDocData = sgtrDefaultDocDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.HorizontalLeft;
    });
    var signatureMidDocData = sgtrDefaultDocDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.HorizontalMid;
    });
    var signatureRightDocData = sgtrDefaultDocDatas.find(function (x) {
      return x.fieldCD == _helper.TypeCodes.fieldCd.HorizontalRight;
    });

    defKeyVals.SIST = fontStyleDocData && fontStyleDocData.charValue ? fontStyleDocData.charValue : defKeyVals.SIST;
    defKeyVals.SIFS = fontSizeDocData && fontSizeDocData.charValue ? fontSizeDocData.charValue : defKeyVals.SIFS;
    defKeyVals.SIFF = fontFamilyDocData && fontFamilyDocData.charValue ? fontFamilyDocData.charValue : defKeyVals.SIFF;
    defKeyVals.SICL = fontColorDocData && fontColorDocData.charValue ? fontColorDocData.charValue : defKeyVals.SICL;
    defKeyVals.HLEF = signatureLeftDocData && signatureLeftDocData.charValue ? signatureLeftDocData.charValue : defKeyVals.HLEF;
    defKeyVals.HMID = signatureMidDocData && signatureMidDocData.charValue ? signatureMidDocData.charValue : defKeyVals.HMID;
    defKeyVals.HRIG = signatureRightDocData && signatureRightDocData.charValue ? signatureRightDocData.charValue : defKeyVals.HRIG;
    defKeyVals.SNAM = signatureNameDocData && signatureNameDocData.charValue ? signatureNameDocData.charValue : defKeyVals.SNAM;
    defKeyVals.SNAM = defKeyVals.SNAM && defKeyVals.SNAM.trim() ? defKeyVals.SNAM : name.trim();

    // if (!CommonHelper.isNullOrWhitespace(defKeyVals.SNAM)) {
    var imageNew = "";
    imageNew = generateImage(defKeyVals.SIST, defKeyVals.SIFS, defKeyVals.SIFF, defKeyVals.SICL, defKeyVals.SNAM);
    defKeyVals.SURL = imageNew.toDataURL();
    defKeyVals.SIHT = imageNew.height;
    defKeyVals.SIWD = imageNew.width;
    // }

    for (var key in defKeyVals) {
      var val = defKeyVals[key];
      docData = new _viewmodel.DocData({ fieldCD: key, charValue: val });
      arrdocData.push(docData);
    }
  }

  if (arrdocData) {
    arrdocData.map(function (item, index) {
      if (item) {
        _helper.DocumentHelper.addUpdateDocDataField(sgtrDefaultDocDatas, item.fieldCD, item.charValue, userId);
      }
    });
  }
  return sgtrDefaultDocDatas;
}

function generateImage(fontstyle, fontsize, fontfamily, fillstyle, filltext) {
  var txtFilled = filltext;
  var paraSpan = document.createElement("span");
  paraSpan.style.fontSize = fontsize + "px";
  paraSpan.style.fontFamily = fontfamily;
  paraSpan.style.fontStyle = fontstyle;
  paraSpan.style.opacity = 0;
  paraSpan.innerHTML = txtFilled;
  document.body.appendChild(paraSpan);
  var canvas = document.createElement("canvas");
  var context = canvas.getContext("2d");
  canvas.width = paraSpan.offsetWidth + 10;
  canvas.height = paraSpan.offsetHeight + 5;
  context.font = fontstyle + " " + fontsize + "px " + fontfamily;
  context.fillStyle = fillstyle;
  context.textBaseline = "top";
  context.fillText(txtFilled, 6, 5);
  var trimmedCanvas = trimCanvas(context.canvas);
  document.body.removeChild(paraSpan);
  return trimmedCanvas;
};

function trimCanvas(canvas) {
  var ctx = canvas.getContext("2d");
  var width = canvas.width;
  var imageData = ctx.getImageData(0, 0, canvas.width, canvas.height);
  var top = 0,
      bottom = imageData.height,
      left = 0,
      right = imageData.width;

  while (top < bottom && rowBlank(imageData, width, top)) {
    ++top;
  }while (bottom - 1 > top && rowBlank(imageData, width, bottom - 1)) {
    --bottom;
  }while (left < right && columnBlank(imageData, width, left, top, bottom)) {
    ++left;
  }while (right - 1 > left && columnBlank(imageData, width, right - 1, top, bottom)) {
    --right;
  }if (!isNullOrWhitespace(left) && !isNullOrWhitespace(top) && !isNullOrWhitespace(right) && !isNullOrWhitespace(bottom)) {
    if (right - left == 0 || bottom - top == 0) {
      return canvas;
    }
    var trimmed = ctx.getImageData(left, top, right - left, bottom - top);
    var copy = canvas.ownerDocument.createElement("canvas");
    var copyCtx = copy.getContext("2d");
    copy.width = trimmed.width;
    copy.height = trimmed.height;
    copyCtx.putImageData(trimmed, 0, 0);
    return copy;
  } else {
    return canvas;
  }
};

function rowBlank(imageData, width, y) {
  for (var x = 0; x < width; ++x) {
    if (imageData.data[y * width * 4 + x * 4 + 3] !== 0) return false;
  }
  return true;
};

function columnBlank(imageData, width, x, top, bottom) {
  for (var y = top; y < bottom; ++y) {
    if (imageData.data[y * width * 4 + x * 4 + 3] !== 0) return false;
  }
  return true;
};

function isNullOrWhitespace(input) {
  if (input == null || input == undefined) return true;
  return input.toString().replace(/\s/g, "").length < 1;
};

function updateSignatureDocData(signaturePara, onboardingInput, userId) {
  var onboardingUserInput = JSON.parse(JSON.stringify(onboardingInput));
  var docdataArr = [];
  var paraId = signaturePara.id;
  var _typeCd$dataObjMappin7 = typeCd.dataObjMappingKeys,
      SNAM = _typeCd$dataObjMappin7.SNAM,
      SURL = _typeCd$dataObjMappin7.SURL,
      HLEF = _typeCd$dataObjMappin7.HLEF,
      HMID = _typeCd$dataObjMappin7.HMID,
      HRIG = _typeCd$dataObjMappin7.HRIG,
      SDAT = _typeCd$dataObjMappin7.SDAT,
      PLAC = _typeCd$dataObjMappin7.PLAC,
      SIFF = _typeCd$dataObjMappin7.SIFF,
      SIFS = _typeCd$dataObjMappin7.SIFS,
      SIST = _typeCd$dataObjMappin7.SIST,
      SICL = _typeCd$dataObjMappin7.SICL,
      SIHT = _typeCd$dataObjMappin7.SIHT,
      SIWD = _typeCd$dataObjMappin7.SIWD,
      STYP = _typeCd$dataObjMappin7.STYP,
      SICT = _typeCd$dataObjMappin7.SICT;

  var signatureName = onboardingUserInput[SNAM] ? onboardingUserInput[SNAM] : "";
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureName, signatureName, userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureURL, onboardingUserInput[SURL], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.HorizontalLeft, onboardingUserInput[HLEF], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.HorizontalMid, onboardingUserInput[HMID], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.HorizontalRight, onboardingUserInput[HRIG], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureDate, onboardingUserInput[SDAT], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignaturePlace, onboardingUserInput[PLAC], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureFontFamily, onboardingUserInput[SIFF], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureFontSize, onboardingUserInput[SIFS], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureFontStyle, onboardingUserInput[SIST], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureFontColor, onboardingUserInput[SICL], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureHeight, onboardingUserInput[SIHT], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureWidth, onboardingUserInput[SIWD], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureCategory, onboardingUserInput[STYP], userId);
  docdataArr = _helper.DocumentHelper.addUpdateDocDataField(docdataArr, _helper.TypeCodes.fieldCd.SignatureContrast, onboardingUserInput[SICT], userId);

  return { id: paraId, docDatas: docdataArr };
}

function setTemplateForUploadResumeFlow(onboardingUserInput) {
  if (onboardingUserInput[typeCd.dataObjMappingKeys.experience] >= 1 || onboardingUserInput[typeCd.dataObjMappingKeys.WorkGaps] && onboardingUserInput[typeCd.dataObjMappingKeys.WorkGaps].toLowerCase() == window.RDL.Localization.lbl_yes.toLowerCase()) return typeCd.DoerTemplates.highPerformanceTemplate;else return typeCd.DoerTemplates.earlyCareerTemplate;
}

function fetchOnboardingdata(documentObj) {
  if (documentObj.id) {
    var onboardingData = getOnboardingDataFromDocPref(documentObj);
    return onboardingData;
  }
}

function updateUserNameInMySetting(fName, lName, user, updateUser) {
  var isToBeUpdated = false;
  var userObj = JSON.parse(JSON.stringify(user));
  if (!userObj.FirstName && fName) {
    userObj.FirstName = fName;
    isToBeUpdated = true;
  }
  if (!userObj.LastName && lName) {
    userObj.LastName = lName;
    isToBeUpdated = true;
  }
  isToBeUpdated && updateUser(userObj, true);
}

function isJsonParsable(str) {
  try {
    JSON.parse(str);
  } catch (e) {
    return false;
  }
  return true;
}

function b64toBlob(b64Data, contentType, sliceSize) {
  var contentType = contentType || '';
  var sliceSize = sliceSize || 512;
  var byteCharacters = atob(b64Data);
  var byteArrays = [];
  for (var offset = 0; offset < byteCharacters.length; offset += sliceSize) {
    var slice = byteCharacters.slice(offset, offset + sliceSize);
    var byteNumbers = new Array(slice.length);
    for (var i = 0; i < slice.length; i++) {
      byteNumbers[i] = slice.charCodeAt(i);
    }
    var byteArray = new Uint8Array(byteNumbers);
    byteArrays.push(byteArray);
  }
  return new Blob(byteArrays, { type: contentType });
}

function getJobHierarchyByExp(experience) {
  if (RDL.experimentControl.isContentAPI) {
    if (experience < 1) return typeCd.JobHierarchy.EntryLevel;else if (experience >= 1) return typeCd.JobHierarchy.Experienced;
  } else {
    if (experience < 1) return typeCd.JobHierarchy.Student;else if (experience >= 1 && experience <= 3) return typeCd.JobHierarchy.EntryLevel;else if (experience > 3) return typeCd.JobHierarchy.Experienced;
  }
  return;
}

function getemptySignaturePic() {
  var emptySignaturePic = void 0;
  emptySignaturePic = window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/" + RDL.currentPortalDetails.portalCD + '/images/dummySignImage.jpg';
  return emptySignaturePic;
}

function getDefaultDocStyle(skinCd, styleTypeCd, getTemplateFromSkinCallback) {
  var template = getTemplateFromSkinCallback(skinCd);
  var styleValue = '';
  var defaultElement = template.querySelector("[name= " + styleTypeCd + "]");
  if (defaultElement) {
    styleValue = defaultElement.getAttribute("content");
  }
  return styleValue;
}

/***/ }),
/* 9 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var _assign = __webpack_require__(12);
var invariant = __webpack_require__(59);
var hasOwnProperty = {}.hasOwnProperty;

function shallowCopy(x) {
  if (Array.isArray(x)) {
    return x.concat();
  } else if (x && typeof x === 'object') {
    return _assign(new x.constructor(), x);
  } else {
    return x;
  }
}

var COMMAND_PUSH = '$push';
var COMMAND_UNSHIFT = '$unshift';
var COMMAND_SPLICE = '$splice';
var COMMAND_SET = '$set';
var COMMAND_MERGE = '$merge';
var COMMAND_APPLY = '$apply';

var ALL_COMMANDS_LIST = [
  COMMAND_PUSH,
  COMMAND_UNSHIFT,
  COMMAND_SPLICE,
  COMMAND_SET,
  COMMAND_MERGE,
  COMMAND_APPLY
];

var ALL_COMMANDS_SET = {};

ALL_COMMANDS_LIST.forEach(function(command) {
  ALL_COMMANDS_SET[command] = true;
});

function invariantArrayCase(value, spec, command) {
  invariant(
    Array.isArray(value),
    'update(): expected target of %s to be an array; got %s.',
    command,
    value
  );
  var specValue = spec[command];
  invariant(
    Array.isArray(specValue),
    'update(): expected spec of %s to be an array; got %s. ' +
      'Did you forget to wrap your parameter in an array?',
    command,
    specValue
  );
}

/**
 * Returns a updated shallow copy of an object without mutating the original.
 * See https://facebook.github.io/react/docs/update.html for details.
 */
function update(value, spec) {
  invariant(
    typeof spec === 'object',
    'update(): You provided a key path to update() that did not contain one ' +
      'of %s. Did you forget to include {%s: ...}?',
    ALL_COMMANDS_LIST.join(', '),
    COMMAND_SET
  );

  if (hasOwnProperty.call(spec, COMMAND_SET)) {
    invariant(
      Object.keys(spec).length === 1,
      'Cannot have more than one key in an object with %s',
      COMMAND_SET
    );

    return spec[COMMAND_SET];
  }

  var nextValue = shallowCopy(value);

  if (hasOwnProperty.call(spec, COMMAND_MERGE)) {
    var mergeObj = spec[COMMAND_MERGE];
    invariant(
      mergeObj && typeof mergeObj === 'object',
      "update(): %s expects a spec of type 'object'; got %s",
      COMMAND_MERGE,
      mergeObj
    );
    invariant(
      nextValue && typeof nextValue === 'object',
      "update(): %s expects a target of type 'object'; got %s",
      COMMAND_MERGE,
      nextValue
    );
    _assign(nextValue, spec[COMMAND_MERGE]);
  }

  if (hasOwnProperty.call(spec, COMMAND_PUSH)) {
    invariantArrayCase(value, spec, COMMAND_PUSH);
    spec[COMMAND_PUSH].forEach(function(item) {
      nextValue.push(item);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_UNSHIFT)) {
    invariantArrayCase(value, spec, COMMAND_UNSHIFT);
    spec[COMMAND_UNSHIFT].forEach(function(item) {
      nextValue.unshift(item);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_SPLICE)) {
    invariant(
      Array.isArray(value),
      'Expected %s target to be an array; got %s',
      COMMAND_SPLICE,
      value
    );
    invariant(
      Array.isArray(spec[COMMAND_SPLICE]),
      'update(): expected spec of %s to be an array of arrays; got %s. ' +
        'Did you forget to wrap your parameters in an array?',
      COMMAND_SPLICE,
      spec[COMMAND_SPLICE]
    );
    spec[COMMAND_SPLICE].forEach(function(args) {
      invariant(
        Array.isArray(args),
        'update(): expected spec of %s to be an array of arrays; got %s. ' +
          'Did you forget to wrap your parameters in an array?',
        COMMAND_SPLICE,
        spec[COMMAND_SPLICE]
      );
      nextValue.splice.apply(nextValue, args);
    });
  }

  if (hasOwnProperty.call(spec, COMMAND_APPLY)) {
    invariant(
      typeof spec[COMMAND_APPLY] === 'function',
      'update(): expected spec of %s to be a function; got %s.',
      COMMAND_APPLY,
      spec[COMMAND_APPLY]
    );
    nextValue = spec[COMMAND_APPLY](nextValue);
  }

  for (var k in spec) {
    if (!(ALL_COMMANDS_SET.hasOwnProperty(k) && ALL_COMMANDS_SET[k])) {
      nextValue[k] = update(value[k], spec[k]);
    }
  }

  return nextValue;
}

module.exports = update;


/***/ }),
/* 10 */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var require;var require;/*!
    localForage -- Offline Storage, Improved
    Version 1.7.3
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
(function(f){if(true){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (global){
'use strict';
var Mutation = global.MutationObserver || global.WebKitMutationObserver;

var scheduleDrain;

{
  if (Mutation) {
    var called = 0;
    var observer = new Mutation(nextTick);
    var element = global.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    scheduleDrain = function () {
      element.data = (called = ++called % 2);
    };
  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
    var channel = new global.MessageChannel();
    channel.port1.onmessage = nextTick;
    scheduleDrain = function () {
      channel.port2.postMessage(0);
    };
  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
    scheduleDrain = function () {

      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var scriptEl = global.document.createElement('script');
      scriptEl.onreadystatechange = function () {
        nextTick();

        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };
      global.document.documentElement.appendChild(scriptEl);
    };
  } else {
    scheduleDrain = function () {
      setTimeout(nextTick, 0);
    };
  }
}

var draining;
var queue = [];
//named nextTick for less confusing stack traces
function nextTick() {
  draining = true;
  var i, oldQueue;
  var len = queue.length;
  while (len) {
    oldQueue = queue;
    queue = [];
    i = -1;
    while (++i < len) {
      oldQueue[i]();
    }
    len = queue.length;
  }
  draining = false;
}

module.exports = immediate;
function immediate(task) {
  if (queue.push(task) === 1 && !draining) {
    scheduleDrain();
  }
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(_dereq_,module,exports){
'use strict';
var immediate = _dereq_(1);

/* istanbul ignore next */
function INTERNAL() {}

var handlers = {};

var REJECTED = ['REJECTED'];
var FULFILLED = ['FULFILLED'];
var PENDING = ['PENDING'];

module.exports = Promise;

function Promise(resolver) {
  if (typeof resolver !== 'function') {
    throw new TypeError('resolver must be a function');
  }
  this.state = PENDING;
  this.queue = [];
  this.outcome = void 0;
  if (resolver !== INTERNAL) {
    safelyResolveThenable(this, resolver);
  }
}

Promise.prototype["catch"] = function (onRejected) {
  return this.then(null, onRejected);
};
Promise.prototype.then = function (onFulfilled, onRejected) {
  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
    typeof onRejected !== 'function' && this.state === REJECTED) {
    return this;
  }
  var promise = new this.constructor(INTERNAL);
  if (this.state !== PENDING) {
    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
    unwrap(promise, resolver, this.outcome);
  } else {
    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
  }

  return promise;
};
function QueueItem(promise, onFulfilled, onRejected) {
  this.promise = promise;
  if (typeof onFulfilled === 'function') {
    this.onFulfilled = onFulfilled;
    this.callFulfilled = this.otherCallFulfilled;
  }
  if (typeof onRejected === 'function') {
    this.onRejected = onRejected;
    this.callRejected = this.otherCallRejected;
  }
}
QueueItem.prototype.callFulfilled = function (value) {
  handlers.resolve(this.promise, value);
};
QueueItem.prototype.otherCallFulfilled = function (value) {
  unwrap(this.promise, this.onFulfilled, value);
};
QueueItem.prototype.callRejected = function (value) {
  handlers.reject(this.promise, value);
};
QueueItem.prototype.otherCallRejected = function (value) {
  unwrap(this.promise, this.onRejected, value);
};

function unwrap(promise, func, value) {
  immediate(function () {
    var returnValue;
    try {
      returnValue = func(value);
    } catch (e) {
      return handlers.reject(promise, e);
    }
    if (returnValue === promise) {
      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
    } else {
      handlers.resolve(promise, returnValue);
    }
  });
}

handlers.resolve = function (self, value) {
  var result = tryCatch(getThen, value);
  if (result.status === 'error') {
    return handlers.reject(self, result.value);
  }
  var thenable = result.value;

  if (thenable) {
    safelyResolveThenable(self, thenable);
  } else {
    self.state = FULFILLED;
    self.outcome = value;
    var i = -1;
    var len = self.queue.length;
    while (++i < len) {
      self.queue[i].callFulfilled(value);
    }
  }
  return self;
};
handlers.reject = function (self, error) {
  self.state = REJECTED;
  self.outcome = error;
  var i = -1;
  var len = self.queue.length;
  while (++i < len) {
    self.queue[i].callRejected(error);
  }
  return self;
};

function getThen(obj) {
  // Make sure we only access the accessor once as required by the spec
  var then = obj && obj.then;
  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
    return function appyThen() {
      then.apply(obj, arguments);
    };
  }
}

function safelyResolveThenable(self, thenable) {
  // Either fulfill, reject or reject with error
  var called = false;
  function onError(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.reject(self, value);
  }

  function onSuccess(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.resolve(self, value);
  }

  function tryToUnwrap() {
    thenable(onSuccess, onError);
  }

  var result = tryCatch(tryToUnwrap);
  if (result.status === 'error') {
    onError(result.value);
  }
}

function tryCatch(func, value) {
  var out = {};
  try {
    out.value = func(value);
    out.status = 'success';
  } catch (e) {
    out.status = 'error';
    out.value = e;
  }
  return out;
}

Promise.resolve = resolve;
function resolve(value) {
  if (value instanceof this) {
    return value;
  }
  return handlers.resolve(new this(INTERNAL), value);
}

Promise.reject = reject;
function reject(reason) {
  var promise = new this(INTERNAL);
  return handlers.reject(promise, reason);
}

Promise.all = all;
function all(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var values = new Array(len);
  var resolved = 0;
  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    allResolver(iterable[i], i);
  }
  return promise;
  function allResolver(value, i) {
    self.resolve(value).then(resolveFromAll, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
    function resolveFromAll(outValue) {
      values[i] = outValue;
      if (++resolved === len && !called) {
        called = true;
        handlers.resolve(promise, values);
      }
    }
  }
}

Promise.race = race;
function race(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    resolver(iterable[i]);
  }
  return promise;
  function resolver(value) {
    self.resolve(value).then(function (response) {
      if (!called) {
        called = true;
        handlers.resolve(promise, response);
      }
    }, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
  }
}

},{"1":1}],3:[function(_dereq_,module,exports){
(function (global){
'use strict';
if (typeof global.Promise !== 'function') {
  global.Promise = _dereq_(2);
}

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"2":2}],4:[function(_dereq_,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getIDB() {
    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
    try {
        if (typeof indexedDB !== 'undefined') {
            return indexedDB;
        }
        if (typeof webkitIndexedDB !== 'undefined') {
            return webkitIndexedDB;
        }
        if (typeof mozIndexedDB !== 'undefined') {
            return mozIndexedDB;
        }
        if (typeof OIndexedDB !== 'undefined') {
            return OIndexedDB;
        }
        if (typeof msIndexedDB !== 'undefined') {
            return msIndexedDB;
        }
    } catch (e) {
        return;
    }
}

var idb = getIDB();

function isIndexedDBValid() {
    try {
        // Initialize IndexedDB; fall back to vendor-prefixed versions
        // if needed.
        if (!idb) {
            return false;
        }
        // We mimic PouchDB here;
        //
        // We test for openDatabase because IE Mobile identifies itself
        // as Safari. Oh the lulz...
        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);

        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;

        // Safari <10.1 does not meet our requirements for IDB support (#5572)
        // since Safari 10.1 shipped with fetch, we can use that to detect it
        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&
        // some outdated implementations of IDB that appear on Samsung
        // and HTC Android devices <4.4 are missing IDBKeyRange
        // See: https://github.com/mozilla/localForage/issues/128
        // See: https://github.com/mozilla/localForage/issues/272
        typeof IDBKeyRange !== 'undefined';
    } catch (e) {
        return false;
    }
}

// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
function createBlob(parts, properties) {
    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
    parts = parts || [];
    properties = properties || {};
    try {
        return new Blob(parts, properties);
    } catch (e) {
        if (e.name !== 'TypeError') {
            throw e;
        }
        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
        var builder = new Builder();
        for (var i = 0; i < parts.length; i += 1) {
            builder.append(parts[i]);
        }
        return builder.getBlob(properties.type);
    }
}

// This is CommonJS because lie is an external dependency, so Rollup
// can just ignore it.
if (typeof Promise === 'undefined') {
    // In the "nopromises" build this will just throw if you don't have
    // a global promise object, but it would throw anyway later.
    _dereq_(3);
}
var Promise$1 = Promise;

function executeCallback(promise, callback) {
    if (callback) {
        promise.then(function (result) {
            callback(null, result);
        }, function (error) {
            callback(error);
        });
    }
}

function executeTwoCallbacks(promise, callback, errorCallback) {
    if (typeof callback === 'function') {
        promise.then(callback);
    }

    if (typeof errorCallback === 'function') {
        promise["catch"](errorCallback);
    }
}

function normalizeKey(key) {
    // Cast the key to a string, as that's all we can set as a key.
    if (typeof key !== 'string') {
        console.warn(key + ' used as a key, but it is not a string.');
        key = String(key);
    }

    return key;
}

function getCallback() {
    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
        return arguments[arguments.length - 1];
    }
}

// Some code originally from async_storage.js in
// [Gaia](https://github.com/mozilla-b2g/gaia).

var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
var supportsBlobs = void 0;
var dbContexts = {};
var toString = Object.prototype.toString;

// Transaction Modes
var READ_ONLY = 'readonly';
var READ_WRITE = 'readwrite';

// Transform a binary string to an array buffer, because otherwise
// weird stuff happens when you try to work with the binary string directly.
// It is known.
// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)
function _binStringToArrayBuffer(bin) {
    var length = bin.length;
    var buf = new ArrayBuffer(length);
    var arr = new Uint8Array(buf);
    for (var i = 0; i < length; i++) {
        arr[i] = bin.charCodeAt(i);
    }
    return buf;
}

//
// Blobs are not supported in all versions of IndexedDB, notably
// Chrome <37 and Android <5. In those versions, storing a blob will throw.
//
// Various other blob bugs exist in Chrome v37-42 (inclusive).
// Detecting them is expensive and confusing to users, and Chrome 37-42
// is at very low usage worldwide, so we do a hacky userAgent check instead.
//
// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
//
// Code borrowed from PouchDB. See:
// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
//
function _checkBlobSupportWithoutCaching(idb) {
    return new Promise$1(function (resolve) {
        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
        var blob = createBlob(['']);
        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

        txn.onabort = function (e) {
            // If the transaction aborts now its due to not being able to
            // write to the database, likely due to the disk being full
            e.preventDefault();
            e.stopPropagation();
            resolve(false);
        };

        txn.oncomplete = function () {
            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
            var matchedEdge = navigator.userAgent.match(/Edge\//);
            // MS Edge pretends to be Chrome 42:
            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
        };
    })["catch"](function () {
        return false; // error, so assume unsupported
    });
}

function _checkBlobSupport(idb) {
    if (typeof supportsBlobs === 'boolean') {
        return Promise$1.resolve(supportsBlobs);
    }
    return _checkBlobSupportWithoutCaching(idb).then(function (value) {
        supportsBlobs = value;
        return supportsBlobs;
    });
}

function _deferReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Create a deferred object representing the current database operation.
    var deferredOperation = {};

    deferredOperation.promise = new Promise$1(function (resolve, reject) {
        deferredOperation.resolve = resolve;
        deferredOperation.reject = reject;
    });

    // Enqueue the deferred operation.
    dbContext.deferredOperations.push(deferredOperation);

    // Chain its promise to the database readiness.
    if (!dbContext.dbReady) {
        dbContext.dbReady = deferredOperation.promise;
    } else {
        dbContext.dbReady = dbContext.dbReady.then(function () {
            return deferredOperation.promise;
        });
    }
}

function _advanceReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Resolve its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.resolve();
        return deferredOperation.promise;
    }
}

function _rejectReadiness(dbInfo, err) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Reject its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.reject(err);
        return deferredOperation.promise;
    }
}

function _getConnection(dbInfo, upgradeNeeded) {
    return new Promise$1(function (resolve, reject) {
        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

        if (dbInfo.db) {
            if (upgradeNeeded) {
                _deferReadiness(dbInfo);
                dbInfo.db.close();
            } else {
                return resolve(dbInfo.db);
            }
        }

        var dbArgs = [dbInfo.name];

        if (upgradeNeeded) {
            dbArgs.push(dbInfo.version);
        }

        var openreq = idb.open.apply(idb, dbArgs);

        if (upgradeNeeded) {
            openreq.onupgradeneeded = function (e) {
                var db = openreq.result;
                try {
                    db.createObjectStore(dbInfo.storeName);
                    if (e.oldVersion <= 1) {
                        // Added when support for blob shims was added
                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                    }
                } catch (ex) {
                    if (ex.name === 'ConstraintError') {
                        console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                    } else {
                        throw ex;
                    }
                }
            };
        }

        openreq.onerror = function (e) {
            e.preventDefault();
            reject(openreq.error);
        };

        openreq.onsuccess = function () {
            resolve(openreq.result);
            _advanceReadiness(dbInfo);
        };
    });
}

function _getOriginalConnection(dbInfo) {
    return _getConnection(dbInfo, false);
}

function _getUpgradedConnection(dbInfo) {
    return _getConnection(dbInfo, true);
}

function _isUpgradeNeeded(dbInfo, defaultVersion) {
    if (!dbInfo.db) {
        return true;
    }

    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
    var isDowngrade = dbInfo.version < dbInfo.db.version;
    var isUpgrade = dbInfo.version > dbInfo.db.version;

    if (isDowngrade) {
        // If the version is not the default one
        // then warn for impossible downgrade.
        if (dbInfo.version !== defaultVersion) {
            console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
        }
        // Align the versions to prevent errors.
        dbInfo.version = dbInfo.db.version;
    }

    if (isUpgrade || isNewStore) {
        // If the store is new then increment the version (if needed).
        // This will trigger an "upgradeneeded" event which is required
        // for creating a store.
        if (isNewStore) {
            var incVersion = dbInfo.db.version + 1;
            if (incVersion > dbInfo.version) {
                dbInfo.version = incVersion;
            }
        }

        return true;
    }

    return false;
}

// encode a blob for indexeddb engines that don't support blobs
function _encodeBlob(blob) {
    return new Promise$1(function (resolve, reject) {
        var reader = new FileReader();
        reader.onerror = reject;
        reader.onloadend = function (e) {
            var base64 = btoa(e.target.result || '');
            resolve({
                __local_forage_encoded_blob: true,
                data: base64,
                type: blob.type
            });
        };
        reader.readAsBinaryString(blob);
    });
}

// decode an encoded blob
function _decodeBlob(encodedBlob) {
    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
    return createBlob([arrayBuff], { type: encodedBlob.type });
}

// is this one of our fancy encoded blobs?
function _isEncodedBlob(value) {
    return value && value.__local_forage_encoded_blob;
}

// Specialize the default `ready()` function by making it dependent
// on the current database operations. Thus, the driver will be actually
// ready when it's been initialized (default) *and* there are no pending
// operations on the database (initiated by some other instances).
function _fullyReady(callback) {
    var self = this;

    var promise = self._initReady().then(function () {
        var dbContext = dbContexts[self._dbInfo.name];

        if (dbContext && dbContext.dbReady) {
            return dbContext.dbReady;
        }
    });

    executeTwoCallbacks(promise, callback, callback);
    return promise;
}

// Try to establish a new db connection to replace the
// current one which is broken (i.e. experiencing
// InvalidStateError while creating a transaction).
function _tryReconnect(dbInfo) {
    _deferReadiness(dbInfo);

    var dbContext = dbContexts[dbInfo.name];
    var forages = dbContext.forages;

    for (var i = 0; i < forages.length; i++) {
        var forage = forages[i];
        if (forage._dbInfo.db) {
            forage._dbInfo.db.close();
            forage._dbInfo.db = null;
        }
    }
    dbInfo.db = null;

    return _getOriginalConnection(dbInfo).then(function (db) {
        dbInfo.db = db;
        if (_isUpgradeNeeded(dbInfo)) {
            // Reopen the database for upgrading.
            return _getUpgradedConnection(dbInfo);
        }
        return db;
    }).then(function (db) {
        // store the latest db reference
        // in case the db was upgraded
        dbInfo.db = dbContext.db = db;
        for (var i = 0; i < forages.length; i++) {
            forages[i]._dbInfo.db = db;
        }
    })["catch"](function (err) {
        _rejectReadiness(dbInfo, err);
        throw err;
    });
}

// FF doesn't like Promises (micro-tasks) and IDDB store operations,
// so we have to do it with callbacks
function createTransaction(dbInfo, mode, callback, retries) {
    if (retries === undefined) {
        retries = 1;
    }

    try {
        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
        callback(null, tx);
    } catch (err) {
        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
            return Promise$1.resolve().then(function () {
                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                    // increase the db version, to create the new ObjectStore
                    if (dbInfo.db) {
                        dbInfo.version = dbInfo.db.version + 1;
                    }
                    // Reopen the database for upgrading.
                    return _getUpgradedConnection(dbInfo);
                }
            }).then(function () {
                return _tryReconnect(dbInfo).then(function () {
                    createTransaction(dbInfo, mode, callback, retries - 1);
                });
            })["catch"](callback);
        }

        callback(err);
    }
}

function createDbContext() {
    return {
        // Running localForages sharing a database.
        forages: [],
        // Shared database.
        db: null,
        // Database readiness (promise).
        dbReady: null,
        // Deferred operations on the database.
        deferredOperations: []
    };
}

// Open the IndexedDB database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    // Get the current context of the database;
    var dbContext = dbContexts[dbInfo.name];

    // ...or create a new context.
    if (!dbContext) {
        dbContext = createDbContext();
        // Register the new context in the global container.
        dbContexts[dbInfo.name] = dbContext;
    }

    // Register itself as a running localForage in the current context.
    dbContext.forages.push(self);

    // Replace the default `ready()` function with the specialized one.
    if (!self._initReady) {
        self._initReady = self.ready;
        self.ready = _fullyReady;
    }

    // Create an array of initialization states of the related localForages.
    var initPromises = [];

    function ignoreErrors() {
        // Don't handle errors here,
        // just makes sure related localForages aren't pending.
        return Promise$1.resolve();
    }

    for (var j = 0; j < dbContext.forages.length; j++) {
        var forage = dbContext.forages[j];
        if (forage !== self) {
            // Don't wait for itself...
            initPromises.push(forage._initReady()["catch"](ignoreErrors));
        }
    }

    // Take a snapshot of the related localForages.
    var forages = dbContext.forages.slice(0);

    // Initialize the connection process only when
    // all the related localForages aren't pending.
    return Promise$1.all(initPromises).then(function () {
        dbInfo.db = dbContext.db;
        // Get the connection or open a new one without upgrade.
        return _getOriginalConnection(dbInfo);
    }).then(function (db) {
        dbInfo.db = db;
        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
            // Reopen the database for upgrading.
            return _getUpgradedConnection(dbInfo);
        }
        return db;
    }).then(function (db) {
        dbInfo.db = dbContext.db = db;
        self._dbInfo = dbInfo;
        // Share the final connection amongst related localForages.
        for (var k = 0; k < forages.length; k++) {
            var forage = forages[k];
            if (forage !== self) {
                // Self is already up-to-date.
                forage._dbInfo.db = dbInfo.db;
                forage._dbInfo.version = dbInfo.version;
            }
        }
    });
}

function getItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.get(key);

                    req.onsuccess = function () {
                        var value = req.result;
                        if (value === undefined) {
                            value = null;
                        }
                        if (_isEncodedBlob(value)) {
                            value = _decodeBlob(value);
                        }
                        resolve(value);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items stored in database.
function iterate(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openCursor();
                    var iterationNumber = 1;

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (cursor) {
                            var value = cursor.value;
                            if (_isEncodedBlob(value)) {
                                value = _decodeBlob(value);
                            }
                            var result = iterator(value, cursor.key, iterationNumber++);

                            // when the iterator callback retuns any
                            // (non-`undefined`) value, then we stop
                            // the iteration immediately
                            if (result !== void 0) {
                                resolve(result);
                            } else {
                                cursor["continue"]();
                            }
                        } else {
                            resolve();
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);

    return promise;
}

function setItem(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        var dbInfo;
        self.ready().then(function () {
            dbInfo = self._dbInfo;
            if (toString.call(value) === '[object Blob]') {
                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
                    if (blobSupport) {
                        return value;
                    }
                    return _encodeBlob(value);
                });
            }
            return value;
        }).then(function (value) {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);

                    // The reason we don't _save_ null is because IE 10 does
                    // not support saving the `null` type in IndexedDB. How
                    // ironic, given the bug below!
                    // See: https://github.com/mozilla/localForage/issues/161
                    if (value === null) {
                        value = undefined;
                    }

                    var req = store.put(value, key);

                    transaction.oncomplete = function () {
                        // Cast to undefined so the value passed to
                        // callback/promise is the same as what one would get out
                        // of `getItem()` later. This leads to some weirdness
                        // (setItem('foo', undefined) will return `null`), but
                        // it's not my fault localStorage is our baseline and that
                        // it's weird.
                        if (value === undefined) {
                            value = null;
                        }

                        resolve(value);
                    };
                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function removeItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    // We use a Grunt task to make this safe for IE and some
                    // versions of Android (including those used by Cordova).
                    // Normally IE won't like `.delete()` and will insist on
                    // using `['delete']()`, but we have a build step that
                    // fixes this for us now.
                    var req = store["delete"](key);
                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onerror = function () {
                        reject(req.error);
                    };

                    // The request will be also be aborted if we've exceeded our storage
                    // space.
                    transaction.onabort = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function clear(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.clear();

                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function length(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.count();

                    req.onsuccess = function () {
                        resolve(req.result);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function key(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        if (n < 0) {
            resolve(null);

            return;
        }

        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var advanced = false;
                    var req = store.openCursor();

                    req.onsuccess = function () {
                        var cursor = req.result;
                        if (!cursor) {
                            // this means there weren't enough keys
                            resolve(null);

                            return;
                        }

                        if (n === 0) {
                            // We have the first key, return it if that's what they
                            // wanted.
                            resolve(cursor.key);
                        } else {
                            if (!advanced) {
                                // Otherwise, ask the cursor to skip ahead n
                                // records.
                                advanced = true;
                                cursor.advance(n);
                            } else {
                                // When we get here, we've got the nth key.
                                resolve(cursor.key);
                            }
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openCursor();
                    var keys = [];

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (!cursor) {
                            resolve(keys);
                            return;
                        }

                        keys.push(cursor.key);
                        cursor["continue"]();
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function dropInstance(options, callback) {
    callback = getCallback.apply(this, arguments);

    var currentConfig = this.config();
    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;

        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {
            var dbContext = dbContexts[options.name];
            var forages = dbContext.forages;
            dbContext.db = db;
            for (var i = 0; i < forages.length; i++) {
                forages[i]._dbInfo.db = db;
            }
            return db;
        });

        if (!options.storeName) {
            promise = dbPromise.then(function (db) {
                _deferReadiness(options);

                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;

                db.close();
                for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                }

                var dropDBPromise = new Promise$1(function (resolve, reject) {
                    var req = idb.deleteDatabase(options.name);

                    req.onerror = req.onblocked = function (err) {
                        var db = req.result;
                        if (db) {
                            db.close();
                        }
                        reject(err);
                    };

                    req.onsuccess = function () {
                        var db = req.result;
                        if (db) {
                            db.close();
                        }
                        resolve(db);
                    };
                });

                return dropDBPromise.then(function (db) {
                    dbContext.db = db;
                    for (var i = 0; i < forages.length; i++) {
                        var _forage = forages[i];
                        _advanceReadiness(_forage._dbInfo);
                    }
                })["catch"](function (err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                    throw err;
                });
            });
        } else {
            promise = dbPromise.then(function (db) {
                if (!db.objectStoreNames.contains(options.storeName)) {
                    return;
                }

                var newVersion = db.version + 1;

                _deferReadiness(options);

                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;

                db.close();
                for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                    forage._dbInfo.version = newVersion;
                }

                var dropObjectPromise = new Promise$1(function (resolve, reject) {
                    var req = idb.open(options.name, newVersion);

                    req.onerror = function (err) {
                        var db = req.result;
                        db.close();
                        reject(err);
                    };

                    req.onupgradeneeded = function () {
                        var db = req.result;
                        db.deleteObjectStore(options.storeName);
                    };

                    req.onsuccess = function () {
                        var db = req.result;
                        db.close();
                        resolve(db);
                    };
                });

                return dropObjectPromise.then(function (db) {
                    dbContext.db = db;
                    for (var j = 0; j < forages.length; j++) {
                        var _forage2 = forages[j];
                        _forage2._dbInfo.db = db;
                        _advanceReadiness(_forage2._dbInfo);
                    }
                })["catch"](function (err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                    throw err;
                });
            });
        }
    }

    executeCallback(promise, callback);
    return promise;
}

var asyncStorage = {
    _driver: 'asyncStorage',
    _initStorage: _initStorage,
    _support: isIndexedDBValid(),
    iterate: iterate,
    getItem: getItem,
    setItem: setItem,
    removeItem: removeItem,
    clear: clear,
    length: length,
    key: key,
    keys: keys,
    dropInstance: dropInstance
};

function isWebSQLValid() {
    return typeof openDatabase === 'function';
}

// Sadly, the best way to save binary data in WebSQL/localStorage is serializing
// it to Base64, so this is how we store it to prevent very strange errors with less
// verbose ways of binary <-> string data storage.
var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

var BLOB_TYPE_PREFIX = '~~local_forage_type~';
var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

var SERIALIZED_MARKER = '__lfsc__:';
var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

// OMG the serializations!
var TYPE_ARRAYBUFFER = 'arbf';
var TYPE_BLOB = 'blob';
var TYPE_INT8ARRAY = 'si08';
var TYPE_UINT8ARRAY = 'ui08';
var TYPE_UINT8CLAMPEDARRAY = 'uic8';
var TYPE_INT16ARRAY = 'si16';
var TYPE_INT32ARRAY = 'si32';
var TYPE_UINT16ARRAY = 'ur16';
var TYPE_UINT32ARRAY = 'ui32';
var TYPE_FLOAT32ARRAY = 'fl32';
var TYPE_FLOAT64ARRAY = 'fl64';
var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

var toString$1 = Object.prototype.toString;

function stringToBuffer(serializedString) {
    // Fill the string into a ArrayBuffer.
    var bufferLength = serializedString.length * 0.75;
    var len = serializedString.length;
    var i;
    var p = 0;
    var encoded1, encoded2, encoded3, encoded4;

    if (serializedString[serializedString.length - 1] === '=') {
        bufferLength--;
        if (serializedString[serializedString.length - 2] === '=') {
            bufferLength--;
        }
    }

    var buffer = new ArrayBuffer(bufferLength);
    var bytes = new Uint8Array(buffer);

    for (i = 0; i < len; i += 4) {
        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

        /*jslint bitwise: true */
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return buffer;
}

// Converts a buffer to a string to store, serialized, in the backend
// storage library.
function bufferToString(buffer) {
    // base64-arraybuffer
    var bytes = new Uint8Array(buffer);
    var base64String = '';
    var i;

    for (i = 0; i < bytes.length; i += 3) {
        /*jslint bitwise: true */
        base64String += BASE_CHARS[bytes[i] >> 2];
        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
        base64String += BASE_CHARS[bytes[i + 2] & 63];
    }

    if (bytes.length % 3 === 2) {
        base64String = base64String.substring(0, base64String.length - 1) + '=';
    } else if (bytes.length % 3 === 1) {
        base64String = base64String.substring(0, base64String.length - 2) + '==';
    }

    return base64String;
}

// Serialize a value, afterwards executing a callback (which usually
// instructs the `setItem()` callback/promise to be executed). This is how
// we store binary data with localStorage.
function serialize(value, callback) {
    var valueType = '';
    if (value) {
        valueType = toString$1.call(value);
    }

    // Cannot use `value instanceof ArrayBuffer` or such here, as these
    // checks fail when running the tests using casper.js...
    //
    // TODO: See why those tests fail and use a better solution.
    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
        // Convert binary arrays to a string and prefix the string with
        // a special marker.
        var buffer;
        var marker = SERIALIZED_MARKER;

        if (value instanceof ArrayBuffer) {
            buffer = value;
            marker += TYPE_ARRAYBUFFER;
        } else {
            buffer = value.buffer;

            if (valueType === '[object Int8Array]') {
                marker += TYPE_INT8ARRAY;
            } else if (valueType === '[object Uint8Array]') {
                marker += TYPE_UINT8ARRAY;
            } else if (valueType === '[object Uint8ClampedArray]') {
                marker += TYPE_UINT8CLAMPEDARRAY;
            } else if (valueType === '[object Int16Array]') {
                marker += TYPE_INT16ARRAY;
            } else if (valueType === '[object Uint16Array]') {
                marker += TYPE_UINT16ARRAY;
            } else if (valueType === '[object Int32Array]') {
                marker += TYPE_INT32ARRAY;
            } else if (valueType === '[object Uint32Array]') {
                marker += TYPE_UINT32ARRAY;
            } else if (valueType === '[object Float32Array]') {
                marker += TYPE_FLOAT32ARRAY;
            } else if (valueType === '[object Float64Array]') {
                marker += TYPE_FLOAT64ARRAY;
            } else {
                callback(new Error('Failed to get type for BinaryArray'));
            }
        }

        callback(marker + bufferToString(buffer));
    } else if (valueType === '[object Blob]') {
        // Conver the blob to a binaryArray and then to a string.
        var fileReader = new FileReader();

        fileReader.onload = function () {
            // Backwards-compatible prefix for the blob type.
            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
        };

        fileReader.readAsArrayBuffer(value);
    } else {
        try {
            callback(JSON.stringify(value));
        } catch (e) {
            console.error("Couldn't convert value into a JSON string: ", value);

            callback(null, e);
        }
    }
}

// Deserialize data we've inserted into a value column/field. We place
// special markers into our strings to mark them as encoded; this isn't
// as nice as a meta field, but it's the only sane thing we can do whilst
// keeping localStorage support intact.
//
// Oftentimes this will just deserialize JSON content, but if we have a
// special marker (SERIALIZED_MARKER, defined above), we will extract
// some kind of arraybuffer/binary data/typed array out of the string.
function deserialize(value) {
    // If we haven't marked this string as being specially serialized (i.e.
    // something other than serialized JSON), we can just return it and be
    // done with it.
    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
        return JSON.parse(value);
    }

    // The following code deals with deserializing some kind of Blob or
    // TypedArray. First we separate out the type of data we're dealing
    // with from the data itself.
    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

    var blobType;
    // Backwards-compatible blob type serialization strategy.
    // DBs created with older versions of localForage will simply not have the blob type.
    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
        blobType = matcher[1];
        serializedString = serializedString.substring(matcher[0].length);
    }
    var buffer = stringToBuffer(serializedString);

    // Return the right type based on the code/type set during
    // serialization.
    switch (type) {
        case TYPE_ARRAYBUFFER:
            return buffer;
        case TYPE_BLOB:
            return createBlob([buffer], { type: blobType });
        case TYPE_INT8ARRAY:
            return new Int8Array(buffer);
        case TYPE_UINT8ARRAY:
            return new Uint8Array(buffer);
        case TYPE_UINT8CLAMPEDARRAY:
            return new Uint8ClampedArray(buffer);
        case TYPE_INT16ARRAY:
            return new Int16Array(buffer);
        case TYPE_UINT16ARRAY:
            return new Uint16Array(buffer);
        case TYPE_INT32ARRAY:
            return new Int32Array(buffer);
        case TYPE_UINT32ARRAY:
            return new Uint32Array(buffer);
        case TYPE_FLOAT32ARRAY:
            return new Float32Array(buffer);
        case TYPE_FLOAT64ARRAY:
            return new Float64Array(buffer);
        default:
            throw new Error('Unkown type: ' + type);
    }
}

var localforageSerializer = {
    serialize: serialize,
    deserialize: deserialize,
    stringToBuffer: stringToBuffer,
    bufferToString: bufferToString
};

/*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */

function createDbTable(t, dbInfo, callback, errorCallback) {
    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
}

// Open the WebSQL database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage$1(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
        }
    }

    var dbInfoPromise = new Promise$1(function (resolve, reject) {
        // Open the database; the openDatabase API will automatically
        // create it for us if it doesn't exist.
        try {
            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
        } catch (e) {
            return reject(e);
        }

        // Create our key/value table if it doesn't exist.
        dbInfo.db.transaction(function (t) {
            createDbTable(t, dbInfo, function () {
                self._dbInfo = dbInfo;
                resolve();
            }, function (t, error) {
                reject(error);
            });
        }, reject);
    });

    dbInfo.serializer = localforageSerializer;
    return dbInfoPromise;
}

function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
    t.executeSql(sqlStatement, args, callback, function (t, error) {
        if (error.code === error.SYNTAX_ERR) {
            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [dbInfo.storeName], function (t, results) {
                if (!results.rows.length) {
                    // if the table is missing (was deleted)
                    // re-create it table and retry
                    createDbTable(t, dbInfo, function () {
                        t.executeSql(sqlStatement, args, callback, errorCallback);
                    }, errorCallback);
                } else {
                    errorCallback(t, error);
                }
            }, errorCallback);
        } else {
            errorCallback(t, error);
        }
    }, errorCallback);
}

function getItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).value : null;

                    // Check to see if this is serialized content we need to
                    // unpack.
                    if (result) {
                        result = dbInfo.serializer.deserialize(result);
                    }

                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function iterate$1(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;

            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
                    var rows = results.rows;
                    var length = rows.length;

                    for (var i = 0; i < length; i++) {
                        var item = rows.item(i);
                        var result = item.value;

                        // Check to see if this is serialized content
                        // we need to unpack.
                        if (result) {
                            result = dbInfo.serializer.deserialize(result);
                        }

                        result = iterator(result, item.key, i + 1);

                        // void(0) prevents problems with redefinition
                        // of `undefined`.
                        if (result !== void 0) {
                            resolve(result);
                            return;
                        }
                    }

                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function _setItem(key, value, callback, retriesLeft) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            // The localStorage API doesn't return undefined values in an
            // "expected" way, so undefined is always cast to null in all
            // drivers. See: https://github.com/mozilla/localForage/pull/42
            if (value === undefined) {
                value = null;
            }

            // Save the original value to pass to the callback.
            var originalValue = value;

            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    dbInfo.db.transaction(function (t) {
                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {
                            resolve(originalValue);
                        }, function (t, error) {
                            reject(error);
                        });
                    }, function (sqlError) {
                        // The transaction failed; check
                        // to see if it's a quota error.
                        if (sqlError.code === sqlError.QUOTA_ERR) {
                            // We reject the callback outright for now, but
                            // it's worth trying to re-run the transaction.
                            // Even if the user accepts the prompt to use
                            // more storage on Safari, this error will
                            // be called.
                            //
                            // Try to re-run the transaction.
                            if (retriesLeft > 0) {
                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
                                return;
                            }
                            reject(sqlError);
                        }
                    });
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function setItem$1(key, value, callback) {
    return _setItem.apply(this, [key, value, callback, 1]);
}

function removeItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Deletes every item in the table.
// TODO: Find out if this resets the AUTO_INCREMENT number.
function clear$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Does a simple `COUNT(key)` to get the number of items stored in
// localForage.
function length$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                // Ahhh, SQL makes this one soooooo easy.
                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
                    var result = results.rows.item(0).c;
                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Return the key located at key index X; essentially gets the key from a
// `WHERE id = ?`. This is the most efficient way I can think to implement
// this rarely-used (in my experience) part of the API, but it can seem
// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
// the ID of each key will change every time it's updated. Perhaps a stored
// procedure for the `setItem()` SQL would solve this problem?
// TODO: Don't change ID on `setItem()`.
function key$1(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).key : null;
                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
                    var keys = [];

                    for (var i = 0; i < results.rows.length; i++) {
                        keys.push(results.rows.item(i).key);
                    }

                    resolve(keys);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// https://www.w3.org/TR/webdatabase/#databases
// > There is no way to enumerate or delete the databases available for an origin from this API.
function getAllStoreNames(db) {
    return new Promise$1(function (resolve, reject) {
        db.transaction(function (t) {
            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
                var storeNames = [];

                for (var i = 0; i < results.rows.length; i++) {
                    storeNames.push(results.rows.item(i).name);
                }

                resolve({
                    db: db,
                    storeNames: storeNames
                });
            }, function (t, error) {
                reject(error);
            });
        }, function (sqlError) {
            reject(sqlError);
        });
    });
}

function dropInstance$1(options, callback) {
    callback = getCallback.apply(this, arguments);

    var currentConfig = this.config();
    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        promise = new Promise$1(function (resolve) {
            var db;
            if (options.name === currentConfig.name) {
                // use the db reference of the current instance
                db = self._dbInfo.db;
            } else {
                db = openDatabase(options.name, '', '', 0);
            }

            if (!options.storeName) {
                // drop all database tables
                resolve(getAllStoreNames(db));
            } else {
                resolve({
                    db: db,
                    storeNames: [options.storeName]
                });
            }
        }).then(function (operationInfo) {
            return new Promise$1(function (resolve, reject) {
                operationInfo.db.transaction(function (t) {
                    function dropTable(storeName) {
                        return new Promise$1(function (resolve, reject) {
                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {
                                resolve();
                            }, function (t, error) {
                                reject(error);
                            });
                        });
                    }

                    var operations = [];
                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
                        operations.push(dropTable(operationInfo.storeNames[i]));
                    }

                    Promise$1.all(operations).then(function () {
                        resolve();
                    })["catch"](function (e) {
                        reject(e);
                    });
                }, function (sqlError) {
                    reject(sqlError);
                });
            });
        });
    }

    executeCallback(promise, callback);
    return promise;
}

var webSQLStorage = {
    _driver: 'webSQLStorage',
    _initStorage: _initStorage$1,
    _support: isWebSQLValid(),
    iterate: iterate$1,
    getItem: getItem$1,
    setItem: setItem$1,
    removeItem: removeItem$1,
    clear: clear$1,
    length: length$1,
    key: key$1,
    keys: keys$1,
    dropInstance: dropInstance$1
};

function isLocalStorageValid() {
    try {
        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&
        // in IE8 typeof localStorage.setItem === 'object'
        !!localStorage.setItem;
    } catch (e) {
        return false;
    }
}

function _getKeyPrefix(options, defaultConfig) {
    var keyPrefix = options.name + '/';

    if (options.storeName !== defaultConfig.storeName) {
        keyPrefix += options.storeName + '/';
    }
    return keyPrefix;
}

// Check if localStorage throws when saving an item
function checkIfLocalStorageThrows() {
    var localStorageTestKey = '_localforage_support_test';

    try {
        localStorage.setItem(localStorageTestKey, true);
        localStorage.removeItem(localStorageTestKey);

        return false;
    } catch (e) {
        return true;
    }
}

// Check if localStorage is usable and allows to save an item
// This method checks if localStorage is usable in Safari Private Browsing
// mode, or in any other case where the available quota for localStorage
// is 0 and there wasn't any saved items yet.
function _isLocalStorageUsable() {
    return !checkIfLocalStorageThrows() || localStorage.length > 0;
}

// Config the localStorage backend, using options set in the config.
function _initStorage$2(options) {
    var self = this;
    var dbInfo = {};
    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

    if (!_isLocalStorageUsable()) {
        return Promise$1.reject();
    }

    self._dbInfo = dbInfo;
    dbInfo.serializer = localforageSerializer;

    return Promise$1.resolve();
}

// Remove all keys from the datastore, effectively destroying all data in
// the app's key/value store!
function clear$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var keyPrefix = self._dbInfo.keyPrefix;

        for (var i = localStorage.length - 1; i >= 0; i--) {
            var key = localStorage.key(i);

            if (key.indexOf(keyPrefix) === 0) {
                localStorage.removeItem(key);
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Retrieve an item from the store. Unlike the original async_storage
// library in Gaia, we don't modify return values at all. If a key's value
// is `undefined`, we pass that value to the callback function.
function getItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result = localStorage.getItem(dbInfo.keyPrefix + key);

        // If a result was found, parse it from the serialized
        // string into a JS object. If result isn't truthy, the key
        // is likely undefined and we'll pass it straight to the
        // callback.
        if (result) {
            result = dbInfo.serializer.deserialize(result);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items in the store.
function iterate$2(iterator, callback) {
    var self = this;

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var keyPrefix = dbInfo.keyPrefix;
        var keyPrefixLength = keyPrefix.length;
        var length = localStorage.length;

        // We use a dedicated iterator instead of the `i` variable below
        // so other keys we fetch in localStorage aren't counted in
        // the `iterationNumber` argument passed to the `iterate()`
        // callback.
        //
        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
        var iterationNumber = 1;

        for (var i = 0; i < length; i++) {
            var key = localStorage.key(i);
            if (key.indexOf(keyPrefix) !== 0) {
                continue;
            }
            var value = localStorage.getItem(key);

            // If a result was found, parse it from the serialized
            // string into a JS object. If result isn't truthy, the
            // key is likely undefined and we'll pass it straight
            // to the iterator.
            if (value) {
                value = dbInfo.serializer.deserialize(value);
            }

            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

            if (value !== void 0) {
                return value;
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Same as localStorage's key() method, except takes a callback.
function key$2(n, callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result;
        try {
            result = localStorage.key(n);
        } catch (error) {
            result = null;
        }

        // Remove the prefix from the key, if a key is found.
        if (result) {
            result = result.substring(dbInfo.keyPrefix.length);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var length = localStorage.length;
        var keys = [];

        for (var i = 0; i < length; i++) {
            var itemKey = localStorage.key(i);
            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
                keys.push(itemKey.substring(dbInfo.keyPrefix.length));
            }
        }

        return keys;
    });

    executeCallback(promise, callback);
    return promise;
}

// Supply the number of keys in the datastore to the callback function.
function length$2(callback) {
    var self = this;
    var promise = self.keys().then(function (keys) {
        return keys.length;
    });

    executeCallback(promise, callback);
    return promise;
}

// Remove an item from the store, nice and simple.
function removeItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        localStorage.removeItem(dbInfo.keyPrefix + key);
    });

    executeCallback(promise, callback);
    return promise;
}

// Set a key's value and run an optional callback once the value is set.
// Unlike Gaia's implementation, the callback function is passed the value,
// in case you want to operate on that value only after you're sure it
// saved, or something like that.
function setItem$2(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        // Convert undefined values to null.
        // https://github.com/mozilla/localForage/pull/42
        if (value === undefined) {
            value = null;
        }

        // Save the original value to pass to the callback.
        var originalValue = value;

        return new Promise$1(function (resolve, reject) {
            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    try {
                        localStorage.setItem(dbInfo.keyPrefix + key, value);
                        resolve(originalValue);
                    } catch (e) {
                        // localStorage capacity exceeded.
                        // TODO: Make this a specific error/event.
                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                            reject(e);
                        }
                        reject(e);
                    }
                }
            });
        });
    });

    executeCallback(promise, callback);
    return promise;
}

function dropInstance$2(options, callback) {
    callback = getCallback.apply(this, arguments);

    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        var currentConfig = this.config();
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        promise = new Promise$1(function (resolve) {
            if (!options.storeName) {
                resolve(options.name + '/');
            } else {
                resolve(_getKeyPrefix(options, self._defaultConfig));
            }
        }).then(function (keyPrefix) {
            for (var i = localStorage.length - 1; i >= 0; i--) {
                var key = localStorage.key(i);

                if (key.indexOf(keyPrefix) === 0) {
                    localStorage.removeItem(key);
                }
            }
        });
    }

    executeCallback(promise, callback);
    return promise;
}

var localStorageWrapper = {
    _driver: 'localStorageWrapper',
    _initStorage: _initStorage$2,
    _support: isLocalStorageValid(),
    iterate: iterate$2,
    getItem: getItem$2,
    setItem: setItem$2,
    removeItem: removeItem$2,
    clear: clear$2,
    length: length$2,
    key: key$2,
    keys: keys$2,
    dropInstance: dropInstance$2
};

var sameValue = function sameValue(x, y) {
    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
};

var includes = function includes(array, searchElement) {
    var len = array.length;
    var i = 0;
    while (i < len) {
        if (sameValue(array[i], searchElement)) {
            return true;
        }
        i++;
    }

    return false;
};

var isArray = Array.isArray || function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
};

// Drivers are stored here when `defineDriver()` is called.
// They are shared across all instances of localForage.
var DefinedDrivers = {};

var DriverSupport = {};

var DefaultDrivers = {
    INDEXEDDB: asyncStorage,
    WEBSQL: webSQLStorage,
    LOCALSTORAGE: localStorageWrapper
};

var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];

var OptionalDriverMethods = ['dropInstance'];

var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);

var DefaultConfig = {
    description: '',
    driver: DefaultDriverOrder.slice(),
    name: 'localforage',
    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
    // we can use without a prompt.
    size: 4980736,
    storeName: 'keyvaluepairs',
    version: 1.0
};

function callWhenReady(localForageInstance, libraryMethod) {
    localForageInstance[libraryMethod] = function () {
        var _args = arguments;
        return localForageInstance.ready().then(function () {
            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
        });
    };
}

function extend() {
    for (var i = 1; i < arguments.length; i++) {
        var arg = arguments[i];

        if (arg) {
            for (var _key in arg) {
                if (arg.hasOwnProperty(_key)) {
                    if (isArray(arg[_key])) {
                        arguments[0][_key] = arg[_key].slice();
                    } else {
                        arguments[0][_key] = arg[_key];
                    }
                }
            }
        }
    }

    return arguments[0];
}

var LocalForage = function () {
    function LocalForage(options) {
        _classCallCheck(this, LocalForage);

        for (var driverTypeKey in DefaultDrivers) {
            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                var driver = DefaultDrivers[driverTypeKey];
                var driverName = driver._driver;
                this[driverTypeKey] = driverName;

                if (!DefinedDrivers[driverName]) {
                    // we don't need to wait for the promise,
                    // since the default drivers can be defined
                    // in a blocking manner
                    this.defineDriver(driver);
                }
            }
        }

        this._defaultConfig = extend({}, DefaultConfig);
        this._config = extend({}, this._defaultConfig, options);
        this._driverSet = null;
        this._initDriver = null;
        this._ready = false;
        this._dbInfo = null;

        this._wrapLibraryMethodsWithReady();
        this.setDriver(this._config.driver)["catch"](function () {});
    }

    // Set any config values for localForage; can be called anytime before
    // the first API call (e.g. `getItem`, `setItem`).
    // We loop through options so we don't overwrite existing config
    // values.


    LocalForage.prototype.config = function config(options) {
        // If the options argument is an object, we use it to set values.
        // Otherwise, we return either a specified config value or all
        // config values.
        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
            // If localforage is ready and fully initialized, we can't set
            // any new configuration values. Instead, we return an error.
            if (this._ready) {
                return new Error("Can't call config() after localforage " + 'has been used.');
            }

            for (var i in options) {
                if (i === 'storeName') {
                    options[i] = options[i].replace(/\W/g, '_');
                }

                if (i === 'version' && typeof options[i] !== 'number') {
                    return new Error('Database version must be a number.');
                }

                this._config[i] = options[i];
            }

            // after all config options are set and
            // the driver option is used, try setting it
            if ('driver' in options && options.driver) {
                return this.setDriver(this._config.driver);
            }

            return true;
        } else if (typeof options === 'string') {
            return this._config[options];
        } else {
            return this._config;
        }
    };

    // Used to define a custom driver, shared across all instances of
    // localForage.


    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
        var promise = new Promise$1(function (resolve, reject) {
            try {
                var driverName = driverObject._driver;
                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');

                // A driver name should be defined and not overlap with the
                // library-defined, default drivers.
                if (!driverObject._driver) {
                    reject(complianceError);
                    return;
                }

                var driverMethods = LibraryMethods.concat('_initStorage');
                for (var i = 0, len = driverMethods.length; i < len; i++) {
                    var driverMethodName = driverMethods[i];

                    // when the property is there,
                    // it should be a method even when optional
                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
                        reject(complianceError);
                        return;
                    }
                }

                var configureMissingMethods = function configureMissingMethods() {
                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
                        return function () {
                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');
                            var promise = Promise$1.reject(error);
                            executeCallback(promise, arguments[arguments.length - 1]);
                            return promise;
                        };
                    };

                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
                        var optionalDriverMethod = OptionalDriverMethods[_i];
                        if (!driverObject[optionalDriverMethod]) {
                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                        }
                    }
                };

                configureMissingMethods();

                var setDriverSupport = function setDriverSupport(support) {
                    if (DefinedDrivers[driverName]) {
                        console.info('Redefining LocalForage driver: ' + driverName);
                    }
                    DefinedDrivers[driverName] = driverObject;
                    DriverSupport[driverName] = support;
                    // don't use a then, so that we can define
                    // drivers that have simple _support methods
                    // in a blocking manner
                    resolve();
                };

                if ('_support' in driverObject) {
                    if (driverObject._support && typeof driverObject._support === 'function') {
                        driverObject._support().then(setDriverSupport, reject);
                    } else {
                        setDriverSupport(!!driverObject._support);
                    }
                } else {
                    setDriverSupport(true);
                }
            } catch (e) {
                reject(e);
            }
        });

        executeTwoCallbacks(promise, callback, errorCallback);
        return promise;
    };

    LocalForage.prototype.driver = function driver() {
        return this._driver || null;
    };

    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));

        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
        return getDriverPromise;
    };

    LocalForage.prototype.getSerializer = function getSerializer(callback) {
        var serializerPromise = Promise$1.resolve(localforageSerializer);
        executeTwoCallbacks(serializerPromise, callback);
        return serializerPromise;
    };

    LocalForage.prototype.ready = function ready(callback) {
        var self = this;

        var promise = self._driverSet.then(function () {
            if (self._ready === null) {
                self._ready = self._initDriver();
            }

            return self._ready;
        });

        executeTwoCallbacks(promise, callback, callback);
        return promise;
    };

    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
        var self = this;

        if (!isArray(drivers)) {
            drivers = [drivers];
        }

        var supportedDrivers = this._getSupportedDrivers(drivers);

        function setDriverToConfig() {
            self._config.driver = self.driver();
        }

        function extendSelfWithDriver(driver) {
            self._extend(driver);
            setDriverToConfig();

            self._ready = self._initStorage(self._config);
            return self._ready;
        }

        function initDriver(supportedDrivers) {
            return function () {
                var currentDriverIndex = 0;

                function driverPromiseLoop() {
                    while (currentDriverIndex < supportedDrivers.length) {
                        var driverName = supportedDrivers[currentDriverIndex];
                        currentDriverIndex++;

                        self._dbInfo = null;
                        self._ready = null;

                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                    }

                    setDriverToConfig();
                    var error = new Error('No available storage method found.');
                    self._driverSet = Promise$1.reject(error);
                    return self._driverSet;
                }

                return driverPromiseLoop();
            };
        }

        // There might be a driver initialization in progress
        // so wait for it to finish in order to avoid a possible
        // race condition to set _dbInfo
        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
            return Promise$1.resolve();
        }) : Promise$1.resolve();

        this._driverSet = oldDriverSetDone.then(function () {
            var driverName = supportedDrivers[0];
            self._dbInfo = null;
            self._ready = null;

            return self.getDriver(driverName).then(function (driver) {
                self._driver = driver._driver;
                setDriverToConfig();
                self._wrapLibraryMethodsWithReady();
                self._initDriver = initDriver(supportedDrivers);
            });
        })["catch"](function () {
            setDriverToConfig();
            var error = new Error('No available storage method found.');
            self._driverSet = Promise$1.reject(error);
            return self._driverSet;
        });

        executeTwoCallbacks(this._driverSet, callback, errorCallback);
        return this._driverSet;
    };

    LocalForage.prototype.supports = function supports(driverName) {
        return !!DriverSupport[driverName];
    };

    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
        extend(this, libraryMethodsAndProperties);
    };

    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
        var supportedDrivers = [];
        for (var i = 0, len = drivers.length; i < len; i++) {
            var driverName = drivers[i];
            if (this.supports(driverName)) {
                supportedDrivers.push(driverName);
            }
        }
        return supportedDrivers;
    };

    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
        // Add a stub for each driver API method that delays the call to the
        // corresponding driver method until localForage is ready. These stubs
        // will be replaced by the driver methods as soon as the driver is
        // loaded, so there is no performance impact.
        for (var i = 0, len = LibraryMethods.length; i < len; i++) {
            callWhenReady(this, LibraryMethods[i]);
        }
    };

    LocalForage.prototype.createInstance = function createInstance(options) {
        return new LocalForage(options);
    };

    return LocalForage;
}();

// The actual localForage object that we expose as a module or via a
// global. It's extended by pulling in one of our other libraries.


var localforage_js = new LocalForage();

module.exports = localforage_js;

},{"3":3}]},{},[4])(4)
});

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(60)))

/***/ }),
/* 11 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _viewmodel = __webpack_require__(14);

exports.default = {
  Document: {
    'id': null,
    'skinCD': '',
    'skinHtmlUrl': null,
    'skinSvgUrl': null,
    'ShowHideTipsComponent': true,
    'Name': '',
    "selectedSectionIndex": 0,
    "docStyles": [{
      "id": "string",
      "styleTypeCd": "string",
      "value": "string"
    }],
    "preferences": [],
    "jobIndustry": "",
    "templateID": 0,
    sections: [],
    cultureCd: window.RDL.Locale,
    documentTypeCD: window.RDL.DocumentTypeCD,
    portalId: window.RDL.PortalSettings.ConfigurePortal,
    userId: "",
    dateCreated: "",
    dateModified: ""
    //productCd: window.RDL.PortalSettings.ConfigureProductCd
  },
  User: new _viewmodel.User(),
  ChooseTemplate: { documentId: "", templateId: "", templates: window.RDL.templates },
  AjaxStatus: { AjaxCallsInProgress: false, isShowError: false },
  Common: {
    JobTitle: ""
  },
  Onboarding: {
    onboardingStepArr: [],
    onboardingVisitedStepArr: [],
    onboardingUserInput: {},
    jobSkillsList: [],
    previousFlowArr: [],
    isInputModified: false,
    isReviewMode: false,
    skipStepsArr: [],
    resumeArr: [],
    documentCreatedFromResume: {},
    resumeReviewArr: [],
    uploadResumeReviewArr: [],
    resumeUserInput: {},
    customSkillsArray: [],
    signUpModalSkipped: false,
    docColor: 'default',
    registrationOnContactStatus: '',
    showJobInPreview: false,
    enhancedSkillsList: []
  }
};

/***/ }),
/* 12 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/*
object-assign
(c) Sindre Sorhus
@license MIT
*/


/* eslint-disable no-unused-vars */
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var hasOwnProperty = Object.prototype.hasOwnProperty;
var propIsEnumerable = Object.prototype.propertyIsEnumerable;

function toObject(val) {
	if (val === null || val === undefined) {
		throw new TypeError('Object.assign cannot be called with null or undefined');
	}

	return Object(val);
}

function shouldUseNative() {
	try {
		if (!Object.assign) {
			return false;
		}

		// Detect buggy property enumeration order in older V8 versions.

		// https://bugs.chromium.org/p/v8/issues/detail?id=4118
		var test1 = new String('abc');  // eslint-disable-line no-new-wrappers
		test1[5] = 'de';
		if (Object.getOwnPropertyNames(test1)[0] === '5') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test2 = {};
		for (var i = 0; i < 10; i++) {
			test2['_' + String.fromCharCode(i)] = i;
		}
		var order2 = Object.getOwnPropertyNames(test2).map(function (n) {
			return test2[n];
		});
		if (order2.join('') !== '0123456789') {
			return false;
		}

		// https://bugs.chromium.org/p/v8/issues/detail?id=3056
		var test3 = {};
		'abcdefghijklmnopqrst'.split('').forEach(function (letter) {
			test3[letter] = letter;
		});
		if (Object.keys(Object.assign({}, test3)).join('') !==
				'abcdefghijklmnopqrst') {
			return false;
		}

		return true;
	} catch (err) {
		// We don't expect any of the above to throw, but better to be safe.
		return false;
	}
}

module.exports = shouldUseNative() ? Object.assign : function (target, source) {
	var from;
	var to = toObject(target);
	var symbols;

	for (var s = 1; s < arguments.length; s++) {
		from = Object(arguments[s]);

		for (var key in from) {
			if (hasOwnProperty.call(from, key)) {
				to[key] = from[key];
			}
		}

		if (getOwnPropertySymbols) {
			symbols = getOwnPropertySymbols(from);
			for (var i = 0; i < symbols.length; i++) {
				if (propIsEnumerable.call(from, symbols[i])) {
					to[symbols[i]] = from[symbols[i]];
				}
			}
		}
	}

	return to;
};


/***/ }),
/* 13 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__createBrowserHistory__ = __webpack_require__(93);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return __WEBPACK_IMPORTED_MODULE_0__createBrowserHistory__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__createHashHistory__ = __webpack_require__(96);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return __WEBPACK_IMPORTED_MODULE_1__createHashHistory__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__createMemoryHistory__ = __webpack_require__(97);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return __WEBPACK_IMPORTED_MODULE_2__createMemoryHistory__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__LocationUtils__ = __webpack_require__(21);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return __WEBPACK_IMPORTED_MODULE_3__LocationUtils__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return __WEBPACK_IMPORTED_MODULE_3__LocationUtils__["b"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__PathUtils__ = __webpack_require__(16);
/* unused harmony reexport parsePath */
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return __WEBPACK_IMPORTED_MODULE_4__PathUtils__["b"]; });










/***/ }),
/* 14 */
/***/ (function(module, exports) {

module.exports=function(t){var i={};function e(o){if(i[o])return i[o].exports;var s=i[o]={i:o,l:!1,exports:{}};return t[o].call(s.exports,s,s.exports,e),s.l=!0,s.exports}return e.m=t,e.c=i,e.d=function(t,i,o){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=0)}([function(t,i,e){"use strict";var o=e(1),s=e(2),n=e(3),a=e(4),r=e(5),d=e(6),c=e(7),h=e(8),u=e(9),v=e(10),l=e(11);t.exports={DocData:s,Content:o,Employer:n,JobTitle:a,Paragraph:r,School:d,Section:c,Survey:h,SurveyResponse:u,User:v,TrackRequest:l}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.htmlString,o=void 0===e?"":e,s=i.identifier,n=void 0===s?"":s,a=i.searchItemType,r=void 0===a?"":a,d=i.contentItemUID,c=void 0===d?"":d,h=i.contentTypeCD,u=void 0===h?"":h,v=i.documentTypeCD,l=void 0===v?"":v,p=i.isCore,f=void 0===p?"":p,D=i.tagText,y=void 0===D?"":D,C=i.tagType,T=void 0===C?"":C;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.HTMLString=o,this.identifier=n,this.searchItemType=r,this.contentItemUID=c,this.ContentTypeCD=u,this.DocumentTypeCD=l,this.isCore=f,this.tagText=y,this.tagType=T}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.id,o=void 0===e?"":e,s=i.paragraphID,n=void 0===s?"":s,a=i.fieldCD,r=void 0===a?"":a,d=i.userId,c=void 0===d?"":d,h=i.charValue,u=void 0===h?"":h,v=i.dateTimeValue,l=void 0===v?"":v,p=i.docDataInfo,f=void 0===p?"":p,D=i.index,y=void 0===D?1:D,C=i.category,T=void 0===C?"":C,m=i.isValid,I=void 0===m||m,g=i.errorMessage,x=void 0===g?"":g;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=o,this.paragraphID=n,this.fieldCD=r,this.userId=c,this.charValue=u,this.dateTimeValue=l,this.isValid=I,this.category=T,this.docDataInfo=f,this.index=y,this.errorMessage=x}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.displayValue,o=void 0===e?"":e,s=i.selectedValue,n=void 0===s?"":s,a=i.address,r=void 0===a?{city:"",state:"",stateCD:"",countryCD:"",country:""}:a,d=i.sno,c=void 0===d?"":d;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.displayValue=o,this.selectedValue=n,this.address=r,this.sno=c}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.displayValue,o=void 0===e?"":e,s=i.selectedValue,n=void 0===s?"":s,a=i.rank,r=void 0===a?"":a,d=i.relatedJobTitles,c=void 0===d?[]:d,h=i.occupation,u=void 0===h?[]:h,v=i.isAmbiguous,l=void 0===v?"":v,p=i.majorFunction,f=void 0===p?"":p,D=i.minorFunction,y=void 0===D?"":D,C=i.riasec,T=void 0===C?"":C;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.displayValue=o,this.selectedValue=n,this.rank=r,this.relatedJobTitles=c,this.occupation=u,this.isAmbiguous=l,this.majorFunction=f,this.minorFunction=y,this.riasec=T}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.id,o=void 0===e?"":e,s=i.sectionID,n=void 0===s?"":s,a=i.index,r=void 0===a?0:a,d=i.paragraphTemplateCD,c=void 0===d?"":d,h=i.topPadding,u=void 0===h?0:h,v=i.docDatas,l=void 0===v?[]:v;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=o,this.sectionID=n,this.index=r,this.paragraphTemplateCD=c,this.docDatas=l,this.topPadding=u}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.typeAheadDisplayName,o=void 0===e?"":e,s=i.name,n=void 0===s?"":s,a=i.city,r=void 0===a?"":a,d=i.state,c=void 0===d?"":d,h=i.stateCD,u=void 0===h?"":h,v=i.country,l=void 0===v?"":v;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.typeAheadDisplayName=o,this.country=l,this.city=r,this.state=c,this.name=n,this.stateCD=u}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.id,o=void 0===e?"":e,s=i.documentID,n=void 0===s?"":s,a=i.index,r=void 0===a?"":a,d=i.sectionTypeCD,c=void 0===d?"":d,h=i.name,u=void 0===h?"":h,v=i.docZoneTypeCD,l=void 0===v?"":v,p=i.topPadding,f=void 0===p?0:p,D=i.paragraphs,y=void 0===D?[]:D,C=i.sectionContainerIndex,T=void 0===C?0:C;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=o,this.documentID=n,this.index=r,this.sectionTypeCD=c,this.name=u,this.docZoneTypeCD=l,this.paragraphs=y,this.topPadding=f,this.sectionContainerIndex=T}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.questionID,o=void 0===e?0:e,s=i.surveyID,n=void 0===s?0:s,a=i.documentID,r=void 0===a?0:a,d=i.userUID,c=void 0===d?0:d,h=i.surveyResponses,u=void 0===h?[]:h;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.SurveyID=n,this.QuestionID=o,this.SurveyResponses=u,this.UserUID=c,this.DocumentID=r}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.displayText,o=void 0===e?"":e,s=i.responseCD,n=void 0===s?"":s,a=i.responseID,r=void 0===a?"":a,d=i.sortOrder,c=void 0===d?0:d;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.DisplayText=o,this.ResponseCD=n,this.ResponseID=r,this.SortOrder=c}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.token,o=void 0===e?"":e,s=i.firstName,n=void 0===s?"":s,a=i.lastName,r=void 0===a?"":a,d=i.emailAddress,c=void 0===d?"":d,h=i.phoneNumber,u=void 0===h?"":h,v=i.mobileNumber,l=void 0===v?"":v,p=i.userUID,f=void 0===p?"":p,D=i.partyID,y=void 0===D?0:D,C=i.sessionIdentity,T=void 0===C?0:C,m=i.role,I=void 0===m?"":m,g=i.city,x=void 0===g?"":g,w=i.postalcd,b=void 0===w?"":w,E=i.state,P=void 0===E?"":E,S=i.country,U=void 0===S?"":S,V=i.reset_passWord,A=void 0!==V&&V,N=(i.portalcd,i.createdOn),k=void 0===N?new Date:N,O=i.socialToken,R=void 0===O?"":O,F=i.PUID,M=void 0===F?"":F,j=i.addressLine1,L=void 0===j?"":j,_=i.userOptins,J=void 0===_?[]:_,q=i.userPreferences,Z=void 0===q?[]:q;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.Token=o,this.FirstName=n,this.LastName=r,this.EmailAddress=c,this.PhoneNumber=u,this.MobileNumber=l,this.UserUID=f,this.PartyID=y,this.SessionIdentity=T,this.Role=I,this.City=x,this.PostalCD=b,this.State=P,this.Country=U,this.Reset_Password=A,this.PortalCD=this.portalcd,this.CreatedOn=k,this.SocialToken=R,this.PUID=M,this.AddressLine1=L,this.UserOptins=J,this.UserPreferences=Z}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.eventType,o=void 0===e?"ttc":e,s=i.eventSubType,n=void 0===s?"clicked":s,a=i.eventContext,r=void 0===a?"track":a,d=i.portalCD,c=void 0===d?"":d,h=i.userID,u=void 0===h?"":h,v=i.actionType,l=void 0===v?0:v,p=i.clientCD,f=void 0===p?"":p,D=i.sourceAppUID,y=void 0===D?"":D,C=i.sourceAppCD,T=void 0===C?"":C,m=i.eventDetails,I=void 0===m?[]:m;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.EventType=o,this.EventSubType=n,this.EventContext=r,this.PortalCD=c,this.UserID=u,this.ActionType=l,this.EventDetails=I,this.ClientCD=f,this.SourceAppUID=y,this.SourceAppCD=T}}]);

/***/ }),
/* 15 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "__DO_NOT_USE__ActionTypes", function() { return ActionTypes; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "applyMiddleware", function() { return applyMiddleware; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "bindActionCreators", function() { return bindActionCreators; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "combineReducers", function() { return combineReducers; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "compose", function() { return compose; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "createStore", function() { return createStore; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_objectSpread2__ = __webpack_require__(120);


/**
 * Adapted from React: https://github.com/facebook/react/blob/master/packages/shared/formatProdErrorMessage.js
 *
 * Do not require this module directly! Use normal throw error calls. These messages will be replaced with error codes
 * during build.
 * @param {number} code
 */
function formatProdErrorMessage(code) {
  return "Minified Redux error #" + code + "; visit https://redux.js.org/Errors?code=" + code + " for the full message or " + 'use the non-minified dev environment for full errors. ';
}

// Inlined version of the `symbol-observable` polyfill
var $$observable = (function () {
  return typeof Symbol === 'function' && Symbol.observable || '@@observable';
})();

/**
 * These are private action types reserved by Redux.
 * For any unknown actions, you must return the current state.
 * If the current state is undefined, you must return the initial state.
 * Do not reference these action types directly in your code.
 */
var randomString = function randomString() {
  return Math.random().toString(36).substring(7).split('').join('.');
};

var ActionTypes = {
  INIT: "@@redux/INIT" + randomString(),
  REPLACE: "@@redux/REPLACE" + randomString(),
  PROBE_UNKNOWN_ACTION: function PROBE_UNKNOWN_ACTION() {
    return "@@redux/PROBE_UNKNOWN_ACTION" + randomString();
  }
};

/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = obj;

  while (Object.getPrototypeOf(proto) !== null) {
    proto = Object.getPrototypeOf(proto);
  }

  return Object.getPrototypeOf(obj) === proto;
}

// Inlined / shortened version of `kindOf` from https://github.com/jonschlinkert/kind-of
function miniKindOf(val) {
  if (val === void 0) return 'undefined';
  if (val === null) return 'null';
  var type = typeof val;

  switch (type) {
    case 'boolean':
    case 'string':
    case 'number':
    case 'symbol':
    case 'function':
      {
        return type;
      }
  }

  if (Array.isArray(val)) return 'array';
  if (isDate(val)) return 'date';
  if (isError(val)) return 'error';
  var constructorName = ctorName(val);

  switch (constructorName) {
    case 'Symbol':
    case 'Promise':
    case 'WeakMap':
    case 'WeakSet':
    case 'Map':
    case 'Set':
      return constructorName;
  } // other


  return type.slice(8, -1).toLowerCase().replace(/\s/g, '');
}

function ctorName(val) {
  return typeof val.constructor === 'function' ? val.constructor.name : null;
}

function isError(val) {
  return val instanceof Error || typeof val.message === 'string' && val.constructor && typeof val.constructor.stackTraceLimit === 'number';
}

function isDate(val) {
  if (val instanceof Date) return true;
  return typeof val.toDateString === 'function' && typeof val.getDate === 'function' && typeof val.setDate === 'function';
}

function kindOf(val) {
  var typeOfVal = typeof val;

  if (process.env.NODE_ENV !== 'production') {
    typeOfVal = miniKindOf(val);
  }

  return typeOfVal;
}

/**
 * Creates a Redux store that holds the state tree.
 * The only way to change the data in the store is to call `dispatch()` on it.
 *
 * There should only be a single store in your app. To specify how different
 * parts of the state tree respond to actions, you may combine several reducers
 * into a single reducer function by using `combineReducers`.
 *
 * @param {Function} reducer A function that returns the next state tree, given
 * the current state tree and the action to handle.
 *
 * @param {any} [preloadedState] The initial state. You may optionally specify it
 * to hydrate the state from the server in universal apps, or to restore a
 * previously serialized user session.
 * If you use `combineReducers` to produce the root reducer function, this must be
 * an object with the same shape as `combineReducers` keys.
 *
 * @param {Function} [enhancer] The store enhancer. You may optionally specify it
 * to enhance the store with third-party capabilities such as middleware,
 * time travel, persistence, etc. The only store enhancer that ships with Redux
 * is `applyMiddleware()`.
 *
 * @returns {Store} A Redux store that lets you read the state, dispatch actions
 * and subscribe to changes.
 */

function createStore(reducer, preloadedState, enhancer) {
  var _ref2;

  if (typeof preloadedState === 'function' && typeof enhancer === 'function' || typeof enhancer === 'function' && typeof arguments[3] === 'function') {
    throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(0) : 'It looks like you are passing several store enhancers to ' + 'createStore(). This is not supported. Instead, compose them ' + 'together to a single function. See https://redux.js.org/tutorials/fundamentals/part-4-store#creating-a-store-with-enhancers for an example.');
  }

  if (typeof preloadedState === 'function' && typeof enhancer === 'undefined') {
    enhancer = preloadedState;
    preloadedState = undefined;
  }

  if (typeof enhancer !== 'undefined') {
    if (typeof enhancer !== 'function') {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(1) : "Expected the enhancer to be a function. Instead, received: '" + kindOf(enhancer) + "'");
    }

    return enhancer(createStore)(reducer, preloadedState);
  }

  if (typeof reducer !== 'function') {
    throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(2) : "Expected the root reducer to be a function. Instead, received: '" + kindOf(reducer) + "'");
  }

  var currentReducer = reducer;
  var currentState = preloadedState;
  var currentListeners = [];
  var nextListeners = currentListeners;
  var isDispatching = false;
  /**
   * This makes a shallow copy of currentListeners so we can use
   * nextListeners as a temporary list while dispatching.
   *
   * This prevents any bugs around consumers calling
   * subscribe/unsubscribe in the middle of a dispatch.
   */

  function ensureCanMutateNextListeners() {
    if (nextListeners === currentListeners) {
      nextListeners = currentListeners.slice();
    }
  }
  /**
   * Reads the state tree managed by the store.
   *
   * @returns {any} The current state tree of your application.
   */


  function getState() {
    if (isDispatching) {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(3) : 'You may not call store.getState() while the reducer is executing. ' + 'The reducer has already received the state as an argument. ' + 'Pass it down from the top reducer instead of reading it from the store.');
    }

    return currentState;
  }
  /**
   * Adds a change listener. It will be called any time an action is dispatched,
   * and some part of the state tree may potentially have changed. You may then
   * call `getState()` to read the current state tree inside the callback.
   *
   * You may call `dispatch()` from a change listener, with the following
   * caveats:
   *
   * 1. The subscriptions are snapshotted just before every `dispatch()` call.
   * If you subscribe or unsubscribe while the listeners are being invoked, this
   * will not have any effect on the `dispatch()` that is currently in progress.
   * However, the next `dispatch()` call, whether nested or not, will use a more
   * recent snapshot of the subscription list.
   *
   * 2. The listener should not expect to see all state changes, as the state
   * might have been updated multiple times during a nested `dispatch()` before
   * the listener is called. It is, however, guaranteed that all subscribers
   * registered before the `dispatch()` started will be called with the latest
   * state by the time it exits.
   *
   * @param {Function} listener A callback to be invoked on every dispatch.
   * @returns {Function} A function to remove this change listener.
   */


  function subscribe(listener) {
    if (typeof listener !== 'function') {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(4) : "Expected the listener to be a function. Instead, received: '" + kindOf(listener) + "'");
    }

    if (isDispatching) {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(5) : 'You may not call store.subscribe() while the reducer is executing. ' + 'If you would like to be notified after the store has been updated, subscribe from a ' + 'component and invoke store.getState() in the callback to access the latest state. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
    }

    var isSubscribed = true;
    ensureCanMutateNextListeners();
    nextListeners.push(listener);
    return function unsubscribe() {
      if (!isSubscribed) {
        return;
      }

      if (isDispatching) {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(6) : 'You may not unsubscribe from a store listener while the reducer is executing. ' + 'See https://redux.js.org/api/store#subscribelistener for more details.');
      }

      isSubscribed = false;
      ensureCanMutateNextListeners();
      var index = nextListeners.indexOf(listener);
      nextListeners.splice(index, 1);
      currentListeners = null;
    };
  }
  /**
   * Dispatches an action. It is the only way to trigger a state change.
   *
   * The `reducer` function, used to create the store, will be called with the
   * current state tree and the given `action`. Its return value will
   * be considered the **next** state of the tree, and the change listeners
   * will be notified.
   *
   * The base implementation only supports plain object actions. If you want to
   * dispatch a Promise, an Observable, a thunk, or something else, you need to
   * wrap your store creating function into the corresponding middleware. For
   * example, see the documentation for the `redux-thunk` package. Even the
   * middleware will eventually dispatch plain object actions using this method.
   *
   * @param {Object} action A plain object representing “what changed”. It is
   * a good idea to keep actions serializable so you can record and replay user
   * sessions, or use the time travelling `redux-devtools`. An action must have
   * a `type` property which may not be `undefined`. It is a good idea to use
   * string constants for action types.
   *
   * @returns {Object} For convenience, the same action object you dispatched.
   *
   * Note that, if you use a custom middleware, it may wrap `dispatch()` to
   * return something else (for example, a Promise you can await).
   */


  function dispatch(action) {
    if (!isPlainObject(action)) {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(7) : "Actions must be plain objects. Instead, the actual type was: '" + kindOf(action) + "'. You may need to add middleware to your store setup to handle dispatching other values, such as 'redux-thunk' to handle dispatching functions. See https://redux.js.org/tutorials/fundamentals/part-4-store#middleware and https://redux.js.org/tutorials/fundamentals/part-6-async-logic#using-the-redux-thunk-middleware for examples.");
    }

    if (typeof action.type === 'undefined') {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(8) : 'Actions may not have an undefined "type" property. You may have misspelled an action type string constant.');
    }

    if (isDispatching) {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(9) : 'Reducers may not dispatch actions.');
    }

    try {
      isDispatching = true;
      currentState = currentReducer(currentState, action);
    } finally {
      isDispatching = false;
    }

    var listeners = currentListeners = nextListeners;

    for (var i = 0; i < listeners.length; i++) {
      var listener = listeners[i];
      listener();
    }

    return action;
  }
  /**
   * Replaces the reducer currently used by the store to calculate the state.
   *
   * You might need this if your app implements code splitting and you want to
   * load some of the reducers dynamically. You might also need this if you
   * implement a hot reloading mechanism for Redux.
   *
   * @param {Function} nextReducer The reducer for the store to use instead.
   * @returns {void}
   */


  function replaceReducer(nextReducer) {
    if (typeof nextReducer !== 'function') {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(10) : "Expected the nextReducer to be a function. Instead, received: '" + kindOf(nextReducer));
    }

    currentReducer = nextReducer; // This action has a similiar effect to ActionTypes.INIT.
    // Any reducers that existed in both the new and old rootReducer
    // will receive the previous state. This effectively populates
    // the new state tree with any relevant data from the old one.

    dispatch({
      type: ActionTypes.REPLACE
    });
  }
  /**
   * Interoperability point for observable/reactive libraries.
   * @returns {observable} A minimal observable of state changes.
   * For more information, see the observable proposal:
   * https://github.com/tc39/proposal-observable
   */


  function observable() {
    var _ref;

    var outerSubscribe = subscribe;
    return _ref = {
      /**
       * The minimal observable subscription method.
       * @param {Object} observer Any object that can be used as an observer.
       * The observer object should have a `next` method.
       * @returns {subscription} An object with an `unsubscribe` method that can
       * be used to unsubscribe the observable from the store, and prevent further
       * emission of values from the observable.
       */
      subscribe: function subscribe(observer) {
        if (typeof observer !== 'object' || observer === null) {
          throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(11) : "Expected the observer to be an object. Instead, received: '" + kindOf(observer) + "'");
        }

        function observeState() {
          if (observer.next) {
            observer.next(getState());
          }
        }

        observeState();
        var unsubscribe = outerSubscribe(observeState);
        return {
          unsubscribe: unsubscribe
        };
      }
    }, _ref[$$observable] = function () {
      return this;
    }, _ref;
  } // When a store is created, an "INIT" action is dispatched so that every
  // reducer returns their initial state. This effectively populates
  // the initial state tree.


  dispatch({
    type: ActionTypes.INIT
  });
  return _ref2 = {
    dispatch: dispatch,
    subscribe: subscribe,
    getState: getState,
    replaceReducer: replaceReducer
  }, _ref2[$$observable] = observable, _ref2;
}

/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
  } catch (e) {} // eslint-disable-line no-empty

}

function getUnexpectedStateShapeWarningMessage(inputState, reducers, action, unexpectedKeyCache) {
  var reducerKeys = Object.keys(reducers);
  var argumentName = action && action.type === ActionTypes.INIT ? 'preloadedState argument passed to createStore' : 'previous state received by the reducer';

  if (reducerKeys.length === 0) {
    return 'Store does not have a valid reducer. Make sure the argument passed ' + 'to combineReducers is an object whose values are reducers.';
  }

  if (!isPlainObject(inputState)) {
    return "The " + argumentName + " has unexpected type of \"" + kindOf(inputState) + "\". Expected argument to be an object with the following " + ("keys: \"" + reducerKeys.join('", "') + "\"");
  }

  var unexpectedKeys = Object.keys(inputState).filter(function (key) {
    return !reducers.hasOwnProperty(key) && !unexpectedKeyCache[key];
  });
  unexpectedKeys.forEach(function (key) {
    unexpectedKeyCache[key] = true;
  });
  if (action && action.type === ActionTypes.REPLACE) return;

  if (unexpectedKeys.length > 0) {
    return "Unexpected " + (unexpectedKeys.length > 1 ? 'keys' : 'key') + " " + ("\"" + unexpectedKeys.join('", "') + "\" found in " + argumentName + ". ") + "Expected to find one of the known reducer keys instead: " + ("\"" + reducerKeys.join('", "') + "\". Unexpected keys will be ignored.");
  }
}

function assertReducerShape(reducers) {
  Object.keys(reducers).forEach(function (key) {
    var reducer = reducers[key];
    var initialState = reducer(undefined, {
      type: ActionTypes.INIT
    });

    if (typeof initialState === 'undefined') {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(12) : "The slice reducer for key \"" + key + "\" returned undefined during initialization. " + "If the state passed to the reducer is undefined, you must " + "explicitly return the initial state. The initial state may " + "not be undefined. If you don't want to set a value for this reducer, " + "you can use null instead of undefined.");
    }

    if (typeof reducer(undefined, {
      type: ActionTypes.PROBE_UNKNOWN_ACTION()
    }) === 'undefined') {
      throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(13) : "The slice reducer for key \"" + key + "\" returned undefined when probed with a random type. " + ("Don't try to handle '" + ActionTypes.INIT + "' or other actions in \"redux/*\" ") + "namespace. They are considered private. Instead, you must return the " + "current state for any unknown actions, unless it is undefined, " + "in which case you must return the initial state, regardless of the " + "action type. The initial state may not be undefined, but can be null.");
    }
  });
}
/**
 * Turns an object whose values are different reducer functions, into a single
 * reducer function. It will call every child reducer, and gather their results
 * into a single state object, whose keys correspond to the keys of the passed
 * reducer functions.
 *
 * @param {Object} reducers An object whose values correspond to different
 * reducer functions that need to be combined into one. One handy way to obtain
 * it is to use ES6 `import * as reducers` syntax. The reducers may never return
 * undefined for any action. Instead, they should return their initial state
 * if the state passed to them was undefined, and the current state for any
 * unrecognized action.
 *
 * @returns {Function} A reducer function that invokes every reducer inside the
 * passed object, and builds a state object with the same shape.
 */


function combineReducers(reducers) {
  var reducerKeys = Object.keys(reducers);
  var finalReducers = {};

  for (var i = 0; i < reducerKeys.length; i++) {
    var key = reducerKeys[i];

    if (process.env.NODE_ENV !== 'production') {
      if (typeof reducers[key] === 'undefined') {
        warning("No reducer provided for key \"" + key + "\"");
      }
    }

    if (typeof reducers[key] === 'function') {
      finalReducers[key] = reducers[key];
    }
  }

  var finalReducerKeys = Object.keys(finalReducers); // This is used to make sure we don't warn about the same
  // keys multiple times.

  var unexpectedKeyCache;

  if (process.env.NODE_ENV !== 'production') {
    unexpectedKeyCache = {};
  }

  var shapeAssertionError;

  try {
    assertReducerShape(finalReducers);
  } catch (e) {
    shapeAssertionError = e;
  }

  return function combination(state, action) {
    if (state === void 0) {
      state = {};
    }

    if (shapeAssertionError) {
      throw shapeAssertionError;
    }

    if (process.env.NODE_ENV !== 'production') {
      var warningMessage = getUnexpectedStateShapeWarningMessage(state, finalReducers, action, unexpectedKeyCache);

      if (warningMessage) {
        warning(warningMessage);
      }
    }

    var hasChanged = false;
    var nextState = {};

    for (var _i = 0; _i < finalReducerKeys.length; _i++) {
      var _key = finalReducerKeys[_i];
      var reducer = finalReducers[_key];
      var previousStateForKey = state[_key];
      var nextStateForKey = reducer(previousStateForKey, action);

      if (typeof nextStateForKey === 'undefined') {
        var actionType = action && action.type;
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(14) : "When called with an action of type " + (actionType ? "\"" + String(actionType) + "\"" : '(unknown type)') + ", the slice reducer for key \"" + _key + "\" returned undefined. " + "To ignore an action, you must explicitly return the previous state. " + "If you want this reducer to hold no value, you can return null instead of undefined.");
      }

      nextState[_key] = nextStateForKey;
      hasChanged = hasChanged || nextStateForKey !== previousStateForKey;
    }

    hasChanged = hasChanged || finalReducerKeys.length !== Object.keys(state).length;
    return hasChanged ? nextState : state;
  };
}

function bindActionCreator(actionCreator, dispatch) {
  return function () {
    return dispatch(actionCreator.apply(this, arguments));
  };
}
/**
 * Turns an object whose values are action creators, into an object with the
 * same keys, but with every function wrapped into a `dispatch` call so they
 * may be invoked directly. This is just a convenience method, as you can call
 * `store.dispatch(MyActionCreators.doSomething())` yourself just fine.
 *
 * For convenience, you can also pass an action creator as the first argument,
 * and get a dispatch wrapped function in return.
 *
 * @param {Function|Object} actionCreators An object whose values are action
 * creator functions. One handy way to obtain it is to use ES6 `import * as`
 * syntax. You may also pass a single function.
 *
 * @param {Function} dispatch The `dispatch` function available on your Redux
 * store.
 *
 * @returns {Function|Object} The object mimicking the original object, but with
 * every action creator wrapped into the `dispatch` call. If you passed a
 * function as `actionCreators`, the return value will also be a single
 * function.
 */


function bindActionCreators(actionCreators, dispatch) {
  if (typeof actionCreators === 'function') {
    return bindActionCreator(actionCreators, dispatch);
  }

  if (typeof actionCreators !== 'object' || actionCreators === null) {
    throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(16) : "bindActionCreators expected an object or a function, but instead received: '" + kindOf(actionCreators) + "'. " + "Did you write \"import ActionCreators from\" instead of \"import * as ActionCreators from\"?");
  }

  var boundActionCreators = {};

  for (var key in actionCreators) {
    var actionCreator = actionCreators[key];

    if (typeof actionCreator === 'function') {
      boundActionCreators[key] = bindActionCreator(actionCreator, dispatch);
    }
  }

  return boundActionCreators;
}

/**
 * Composes single-argument functions from right to left. The rightmost
 * function can take multiple arguments as it provides the signature for
 * the resulting composite function.
 *
 * @param {...Function} funcs The functions to compose.
 * @returns {Function} A function obtained by composing the argument functions
 * from right to left. For example, compose(f, g, h) is identical to doing
 * (...args) => f(g(h(...args))).
 */
function compose() {
  for (var _len = arguments.length, funcs = new Array(_len), _key = 0; _key < _len; _key++) {
    funcs[_key] = arguments[_key];
  }

  if (funcs.length === 0) {
    return function (arg) {
      return arg;
    };
  }

  if (funcs.length === 1) {
    return funcs[0];
  }

  return funcs.reduce(function (a, b) {
    return function () {
      return a(b.apply(void 0, arguments));
    };
  });
}

/**
 * Creates a store enhancer that applies middleware to the dispatch method
 * of the Redux store. This is handy for a variety of tasks, such as expressing
 * asynchronous actions in a concise manner, or logging every action payload.
 *
 * See `redux-thunk` package as an example of the Redux middleware.
 *
 * Because middleware is potentially asynchronous, this should be the first
 * store enhancer in the composition chain.
 *
 * Note that each middleware will be given the `dispatch` and `getState` functions
 * as named arguments.
 *
 * @param {...Function} middlewares The middleware chain to be applied.
 * @returns {Function} A store enhancer applying the middleware.
 */

function applyMiddleware() {
  for (var _len = arguments.length, middlewares = new Array(_len), _key = 0; _key < _len; _key++) {
    middlewares[_key] = arguments[_key];
  }

  return function (createStore) {
    return function () {
      var store = createStore.apply(void 0, arguments);

      var _dispatch = function dispatch() {
        throw new Error(process.env.NODE_ENV === "production" ? formatProdErrorMessage(15) : 'Dispatching while constructing your middleware is not allowed. ' + 'Other middleware would not be applied to this dispatch.');
      };

      var middlewareAPI = {
        getState: store.getState,
        dispatch: function dispatch() {
          return _dispatch.apply(void 0, arguments);
        }
      };
      var chain = middlewares.map(function (middleware) {
        return middleware(middlewareAPI);
      });
      _dispatch = compose.apply(void 0, chain)(store.dispatch);
      return Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_objectSpread2__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_objectSpread2__["a" /* default */])({}, store), {}, {
        dispatch: _dispatch
      });
    };
  };
}

/*
 * This is a dummy function to check if the function name has been altered by minification.
 * If the function has been minified and NODE_ENV !== 'production', warn the user.
 */

function isCrushed() {}

if (process.env.NODE_ENV !== 'production' && typeof isCrushed.name === 'string' && isCrushed.name !== 'isCrushed') {
  warning('You are currently using minified code outside of NODE_ENV === "production". ' + 'This means that you are running a slower development build of Redux. ' + 'You can use loose-envify (https://github.com/zertosh/loose-envify) for browserify ' + 'or setting mode to production in webpack (https://webpack.js.org/concepts/mode/) ' + 'to ensure you have the correct code for your production build.');
}



/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 16 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addLeadingSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return stripLeadingSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return hasBasename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return stripBasename; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return stripTrailingSlash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return parsePath; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return createPath; });
var addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === '/' ? path : '/' + path;
};

var stripLeadingSlash = function stripLeadingSlash(path) {
  return path.charAt(0) === '/' ? path.substr(1) : path;
};

var hasBasename = function hasBasename(path, prefix) {
  return new RegExp('^' + prefix + '(\\/|\\?|#|$)', 'i').test(path);
};

var stripBasename = function stripBasename(path, prefix) {
  return hasBasename(path, prefix) ? path.substr(prefix.length) : path;
};

var stripTrailingSlash = function stripTrailingSlash(path) {
  return path.charAt(path.length - 1) === '/' ? path.slice(0, -1) : path;
};

var parsePath = function parsePath(path) {
  var pathname = path || '/';
  var search = '';
  var hash = '';

  var hashIndex = pathname.indexOf('#');
  if (hashIndex !== -1) {
    hash = pathname.substr(hashIndex);
    pathname = pathname.substr(0, hashIndex);
  }

  var searchIndex = pathname.indexOf('?');
  if (searchIndex !== -1) {
    search = pathname.substr(searchIndex);
    pathname = pathname.substr(0, searchIndex);
  }

  return {
    pathname: pathname,
    search: search === '?' ? '' : search,
    hash: hash === '#' ? '' : hash
  };
};

var createPath = function createPath(location) {
  var pathname = location.pathname,
      search = location.search,
      hash = location.hash;


  var path = pathname || '/';

  if (search && search !== '?') path += search.charAt(0) === '?' ? search : '?' + search;

  if (hash && hash !== '#') path += hash.charAt(0) === '#' ? hash : '#' + hash;

  return path;
};

/***/ }),
/* 17 */
/***/ (function(module, exports, __webpack_require__) {

module.exports=function(e){var t={};function n(o){if(t[o])return t[o].exports;var i=t[o]={i:o,l:!1,exports:{}};return e[o].call(i.exports,i,i.exports,n),i.l=!0,i.exports}return n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{configurable:!1,enumerable:!0,get:o})},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=2)}([function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.InitialisePatchRequest=function(e){return{method:"PATCH",credentials:"include",headers:{"Content-Type":"application/json",Accept:"application/json"},type:"jsonp",body:JSON.stringify(e)}};t.get=function(e){return fetch(e,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){return e.json()}).catch(function(e){return console.log(e)})},t.patch=function(e,t){return fetch(e,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e}).catch(function(e){return console.log(e)})},t.InitialiseGetRequest=function(){return{method:"GET",credentials:"include"}},t.InitialisePostRequest=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{method:"POST",credentials:"include",headers:{"Content-Type":arguments.length>1&&void 0!==arguments[1]?arguments[1]:"application/json",Accept:"application/json"},body:JSON.stringify(e)}},t.InitialisePutRequest=function(e){return{method:"PUT",credentials:"include",headers:{"Content-Type":"application/json",Accept:"application/json"},type:"jsonp",body:JSON.stringify(e)}};t.InitialiseDeleteRequest=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};return{method:"DELETE",credentials:"include",headers:{"Content-Type":arguments.length>1&&void 0!==arguments[1]?arguments[1]:"application/json",Accept:"application/json"},body:JSON.stringify(e)}}},function(e,t){e.exports=__webpack_require__(136)},function(e,t,n){"use strict";var o=n(3),i=n(4),r=n(5),c=n(6),u=n(7),s=n(8),a=n(9),l=n(10),d=n(11),p=n(12),h=n(13);e.exports={ContentAjaxHelper:o,DocumentAjaxHelper:i,ErrorAjaxHelper:r,SurveyAjaxHelper:c,UserAjaxHelper:u,ConfigAjaxHelper:s,TrackingAjaxHelper:a,GdprAjaxHelper:l,CustomizerAjaxHelper:d,JobSearchAjaxHelper:p,JobAlertAjaxHelper:h}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GetTTCByDataScience=function(e,t,n,o){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:i,c={Employer:e,Portal:t,Take:n,Title:o};return fetch(r+"content/ds/ttc",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(c)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getTextTunerContentFromContentEngine=function(e,t,n,r,u,s){var a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"en-US",l=arguments.length>7&&void 0!==arguments[7]&&arguments[7],d=arguments[8],p=arguments.length>9&&void 0!==arguments[9]&&arguments[9],h=arguments[10],f=arguments.length>11&&void 0!==arguments[11]?arguments[11]:"fuzzy",m=arguments.length>12&&void 0!==arguments[12]?arguments[12]:"baseline",g=arguments.length>13&&void 0!==arguments[13]&&arguments[13],v=arguments.length>14&&void 0!==arguments[14]?arguments[14]:null,y=arguments[15],j=arguments.length>16&&void 0!==arguments[16]?arguments[16]:"baseline",T=arguments.length>17&&void 0!==arguments[17]?arguments[17]:"",C=arguments.length>18&&void 0!==arguments[18]?arguments[18]:"",D=arguments.length>19&&void 0!==arguments[19]?arguments[19]:"",b=arguments.length>20&&void 0!==arguments[20]&&arguments[20],S=arguments[21],I=arguments.length>22&&void 0!==arguments[22]?arguments[22]:i;if(void 0==e||e==c||""==e||null==e||"undefined"==e){return[]}r||(p=!1);var k=I+"content/texttunercontent?user_uid="+e+"&sectionTypeCD="+n+"&productCD="+t+"&Jobtitle="+r+"&searchItemType="+u+"&documentID="+s+"&cultureCD="+a+"&enableFuzzySearch="+l+"&includeKGSkills="+p+"&fuzzySearchVariation="+f+"&contentMatchVariance="+m+"&includeUSContentInFallback="+g+"&curatedSkillVariance="+j+(T?"&snapshotDate="+T:"")+"&includeSynonymInIntlFallback="+b;if(S&&(k=k+"&jobHierarchy="+S),d&&d.length){var A="";d.map(function(e){""!=e&&(A=A+"&keyword.keywords="+e)}),k+=A}return h&&(k=k+"&keyword.isFilteringRequire="+h),v&&(k=k+"&employer="+v),y&&(k=k+"&skillVariance="+y),C&&(k=k+"&transformedSkillVariance="+C),D&&(k=k+"&keywordFilter="+D),fetch(k,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){var t=[];return e.result.forEach(function(n){var i=new o.Content({htmlString:n.text,contentItemUID:n.contentItemUID,contentTypeCD:n.contentTypeCD,isCore:n.isCore,tagText:n.tagText,tagType:n.tagType});i.source=n.source,i.confidenceLevel=e.confidenceLevel,i.matchedJobTitle=e.matchedJobTitle,i.matchedEmployer=e.matchedEmployer,t.push(i)}),t}).catch(function(e){console.log(e)})},t.getTextTunerContentWithHierarchy=function(e,t,n,r,u,s){var a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:[],l=arguments[7],d=arguments.length>8&&void 0!==arguments[8]?arguments[8]:"en-US",p=arguments.length>9&&void 0!==arguments[9]&&arguments[9],h=arguments.length>10&&void 0!==arguments[10]?arguments[10]:"fuzzy",f=arguments.length>11&&void 0!==arguments[11]?arguments[11]:i;if(void 0==e||e==c||""==e||null==e||"undefined"==e){return[]}var m=f+"content/contentwithhierarchy?user_uid="+e+"&sectionTypeCD="+n+"&productCD="+t+"&Jobhierarchy="+l+"&Jobtitle="+r+"&searchItemType="+u+"&documentID="+s+"&cultureCD="+d+"&enableFuzzySearch="+p+"&fuzzySearchVariation="+h;if(a&&a.length){var g="";a.map(function(e){""!=e&&(g=g+"&contentTypeCD="+e)}),m+=g}return fetch(m,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){var t=[];return e.result.forEach(function(n){var i=new o.Content({htmlString:n.text,contentItemUID:n.contentItemUID,contentTypeCD:n.contentTypeCD,isCore:n.isCore,tagText:n.tagText,tagType:n.tagType});i.confidenceLevel=e.confidenceLevel,i.matchedJobTitle=e.matchedJobTitle,i.matchedEmployer=e.matchedEmployer,t.push(i)}),t}).catch(function(e){console.log(e)})},t.getTextTunerContentFromContentEngineV2=function(e,t,n,o,u,s,a){if(e&&e!=c){var l=(void 0!==a?a:u?r:i)+"content/texttunercontent?user_uid="+e+"&sectionTypeCD="+n+"&productCD="+t;return o&&(l=l+"&Jobtitle="+o),s&&(l=l+"&jobHierarchy="+s),fetch(l,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){var t=[];return e.result.forEach(function(e,n){var o=Object.assign({},e,{isExp:e.isExperience,type:e.displayType,occu:e.tagText,id:n+1});t.push(o)}),e.result=t,e}).catch(function(e){console.log(e)})}return Promise.resolve([])},t.getTextTunerContentFromRecommendations=function(e,t,n){var r=(arguments.length>3&&void 0!==arguments[3]?arguments[3]:i)+"content/recommendations?jobTitle="+e+"&industry="+t,c={method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(n)};return fetch(r,c).then(function(e){if(e.ok)return e.json()}).then(function(e){if(e&&e.contents){var t=[];return e.contents.forEach(function(e){var n=new o.Content({htmlString:e.text,contentItemUID:e.contentItemUID,contentTypeCD:e.contentTypeCD});n.taggedSkill=e.taggedSkill,t.push(n)}),{content:t,jobTitle:e.jobTitles}}return console.error("error in getTextTunerContentFromRecommendations"+e),{content:[],jobTitle:[]}}).catch(function(e){console.log(e)})},t.postSpellCheckText=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en-US",r=arguments[4],c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:i;if(!e)return Promise.resolve({flaggedTokens:[]});var u={text:e,portalCD:t,userUID:n,cultureCD:o};r&&(u.suggestionCount=r);return fetch(c+"content/spellchecker",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(u)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.AddToDictionary=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"content/addtouserdictionary?userUid="+t,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({locale:"en-US",term:[e]})})},t.RemoveFromDictionary=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"en-US",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i;return fetch(o+"content/deleteuserwords?userUid="+t,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({locale:n,terms:[e]})})},t.getSchoolData=function(e,t,n,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";return fetch(e+"content/schools?search_string="+t+(n&&o?"&country="+n+"&accept_language="+o:""),{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e.map(function(e){var t="";return i&&i.length>0&&i.forEach(function(n){"SCHO"==n&&e.name&&(t=e.name),e.address&&("CITY"==n&&e.address.city&&(t=t?t+", "+e.address.city:e.address.city),"STATECD"==n&&e.address.stateCD&&(t=t?t+", "+e.address.stateCD:e.address.stateCD),"STATE"==n&&e.address.state&&(t=t?t+", "+e.address.state:e.address.state),"ZIP"==n&&e.address.zipcode&&(t=t?t+", "+e.address.zipcode:e.address.zipcode),"COUNTRY"==n&&e.address.countryCD&&(t=t?t+", "+e.address.countryCD:e.address.countryCD))}),{displayValue:i?t:e.typeAheadDisplayName,selectedValue:e.name,address:{city:e.address.city,state:e.address.state,stateCD:e.address.stateCD,zipcode:e.address.zipcode,countryCD:e.address.countryCD,streetAddress:""}}})})},t.getJobTitles=function(e,t){return fetch(e+"content/jobtitles?jobTitle="+t,{credentials:"include"}).then(function(e){return e.json()}).then(function(e){var t=[];return e.length&&(t=e.map(function(e){return{displayValue:e.title,selectedValue:e.title,occupation:e.occupation,gender:e.gender}})),t})},t.getJobTitlesV2=u,t.getRelatedJobTitlesList=function(e){return u(arguments.length>1&&void 0!==arguments[1]?arguments[1]:i,e,function(){}).then(function(t){var n=[];if(t&&t.length){var o=t.find(function(t){return t.selectedValue.toLowerCase()==e.SearchString.trim().toLowerCase()});o&&(n=o.relatedJobTitles)}return n}).catch(function(){})},t.getJobTitlesOrIndustries=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"en-US";return fetch(e+"content/jobtitleorindustry?jobTitle="+t+"&cultureCd="+n,{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e.map(function(e){return{displayValue:e.title,selectedValue:e.title,identifier:e.identifier,searchItemType:e.searchItemType}})})},t.getStates=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en-US",i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"stateCD";return fetch(e+"country/"+n+"/states?search_string="+t+"&cultureCd="+o,{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e?e.map(function(e){return{displayValue:e.state_Province,selectedValue:"stateName"==i?e.state_Province:e.stateCD,identifier:"stateName"==i?e.state_Province:e.stateCD}}):[]})},t.getCities=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"en-US",i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"stateCD",r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"";return fetch(e+"country/"+n+"/cities?search_string="+t+"&cultureCd="+o,{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e&&e.sort(function(e,t){return e.cityName+", "+e.stateCD>t.cityName+", "+t.stateCD?1:-1})}).then(function(e){return e?e.map(function(e){var t="stateName"==i&&(e.cityName==e[i]||r&&e.cityName&&r.indexOf(e.cityName)>-1);return{displayValue:e.cityName+(e[i]&&!t?", "+e[i]:""),selectedValue:e.cityName,identifier:e[i]?e[i]:e.stateCD}}):[]})},t.getCityStateZip=function(e,t,n,o){var i="",r="";n&&(i="&state="+n);o&&(r="&zipCode="+o);return fetch(e+"content/geo_location?city="+t+i+r,{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e?{city:e.city,state:e.state,zipcode:e.zip_code}:{city:"",state:"",zipcode:""}})},t.getEmployersV2=function(e,t,n){return fetch(e+"content/employerslist",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({AcceptLanguage:t.acceptLanguage?t.acceptLanguage:"en-US",countrycd:t.countrycd,DocumentID:t.DocumentID,Placement:t.Placement,PortalCD:t.PortalCD,ProductCD:t.ProductCD,SearchString:t.SearchString,UserID:t.UserID})}).then(function(e){return e.json()}).then(function(e){var t=[];return n(!0,e.experimentID,e.variation),e.data.map(function(e){var n=[];e.employer_name&&n.push(e.employer_name),e.address.city&&n.push(e.address.city),e.address.state&&n.push(e.address.state),t.push(new o.Employer({displayValue:n.join(", "),selectedValue:e.employer_name,address:{city:e.address.city,state:e.address.state,stateCD:e.address.stateCD,countryCD:e.address.countryCD,country:e.address.country},sno:e.sno}))}),t})},t.trackJobTitleAndEmployer=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"tracking/trackcareerdomainevent",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({DocumentID:e.DocumentID,Placement:e.Placement,PortalCD:e.PortalCD,ProductCD:e.ProductCD,SearchString:e.SearchString,UserID:e.UserID,ExperimentID:e.ExperimentID,Variation:e.Variation,Entity:e.Entity,IsSuggestionClicked:e.IsSuggestionClicked,SuggestionUsed:e.SuggestionUsed,SuggestionRank:e.SuggestionRank})}).then(function(e){return e.json()}).then(function(e){return e})},t.getDegrees=function(e,t,n){return fetch(e+"content/degree?search_string="+t+"&accept_language="+n,{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e.data&&e.data.map(function(e){return{displayValue:e.title,selectedValue:e.title}})})},t.getFieldOfStudy=function(e,t,n){return fetch(e+"content/fieldofstudy?search_string="+t+"&accept_language="+n,{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e.data&&e.data.map(function(e){return{displayValue:e.title,selectedValue:e.title}})})},t.getTextTunerContent=function(e,t,n,r){var c=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:i;return fetch(u+"content/texttuner?portalCD="+e+"&templateTypeCD="+t+"&sectionTypeCD="+n+(c?"&gender="+c:"")+(r?"&v="+r:""),{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e.map(function(e){return new o.Content({htmlString:e.content,contentTypeCD:e.writingAssistanceTypeCD,documentTypeCD:e.documentTypeCD,contentItemUID:e.uid})})})},t.getJobTitleSkills=function(e,t,n,o,r){var c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"en-US",u=arguments.length>6&&void 0!==arguments[6]?arguments[6]:i;return fetch(u+"content/texttunercontent?user_uid="+e+"&sectionTypeCD="+t+"&productCD="+n+"&Jobtitle="+o+"&searchItemType="+r+"&cultureCD="+c,{credentials:"include"}).then(function(e){return e.text()}).then(function(e){return JSON.parse(e).result.map(function(e){return{htmlString:e.text}})})},t.getEmployers=function(e,t,n){return fetch(e+"country/"+t+"/employers?search_string="+encodeURIComponent(n),{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e.map(function(e){return{displayValue:e.employer_name,selectedValue:e.employer_name,address:{city:e.address.city,state:e.address.state,stateCD:e.address.stateCD,countryCD:e.address.countryCD,country:e.address.country,zipcode:e.address.zipcode}}})})},t.getZipCodes=function(e,t,n,o,i,r){var c="",u="";o&&""!=o&&(c="&state="+o);i&&""!=i&&(u="&city="+i);r&&""!=r&&"&language="+r;return fetch(e+"content/zipcodes?countryCD="+n+"&zipCode="+t+c+u,{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e?e.map(function(e){return{displayValue:e.zip_code,selectedValue:e.zip_code,address:{city:e.city,state:e.state}}}):[]})},t.getTemplates=function(e,t,n){return fetch(e+"config/matching_template_types?searchText="+t+"&portalCD="+n,{credentials:"include"}).then(function(e){return e.json()}).then(function(e){return e.map(function(e){return{displayValue:e.label,selectedValue:e.label,identifier:e.templateTypeCD,searchItemType:"industry"}})})},t.getTextTunerContentUsingTemplate=function(e,t,n,r,c,u){var s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:i;return fetch(s+"content/text_tuner_content_intl?templateTypeCD="+e+"&sectionTypeCD="+t+"&UserUID="+n+"&cultureCD="+r+"&productCD="+c,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){var t=[];return e.result.forEach(function(e){t.push(new o.Content({htmlString:e.text,contentItemUID:e.contentItemUID,contentTypeCD:e.contentTypeCD}))}),t}).catch(function(e){console.log(e)})},t.getTemplateInfoByJobTitle=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i;return fetch(o+"content/templateinfo?jobTitle="+e+"&templateType="+t+"&portalId="+n,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e}).catch(function(e){console.log(e)})},t.getTextTunerExamples=function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i;return fetch(r+"content/texttunerexamples?portalId="+e+"&sectionTypeCD="+t+"&templateTypeCD="+n,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){var t=[];return e.forEach(function(e){t.push(new o.Content({htmlString:e.content.replace(/&gt;</gi,"<").replace(/>&lt;/gi,">"),contentItemUID:e.uid,contentTypeCD:"EXMP"}))}),t}).catch(function(e){console.log(e)})},t.getIndustryForJobTitle=function(e,t,n,o){var r=(arguments.length>4&&void 0!==arguments[4]?arguments[4]:i)+"content/jobtitle/industries?jobTitle="+e;t&&(r+="&includeSkills="+t);n&&(r+="&industryCount="+n);o&&(r+="&industryCount="+o);return fetch(r,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:""}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e}).catch(function(e){console.log(e)})},t.getCountryData=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i;return fetch(e+"/country/countrylist",{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"},credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getMatchingSkills=function(e,t,n,o,r){var c=(arguments.length>5&&void 0!==arguments[5]?arguments[5]:i)+"content/skills?searchString="+e+"&contentGroupCD="+n+"&productCD="+t;o&&(c+="&cultureCD="+o);r&&(c+="&take="+r);return fetch(c,{method:"GET",headers:{Accept:"application/json"},credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e.map(function(e){return{displayValue:e.text,selectedValue:e.text}})})},t.getThesaurus=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"content/thesaurus",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({term:e.term,locale:e.locale,beforeTerm:e.beforeTerm,afterTerm:e.afterTerm,fields:e.fields})}).then(function(e){return e.json()}).then(function(e){return e})},t.getTextTunerContentSearchSkillsByUser=function(e,t,n,r,c,u){var s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"en-US",a=arguments.length>7&&void 0!==arguments[7]&&arguments[7],l=arguments[8],d=arguments.length>9&&void 0!==arguments[9]?arguments[9]:"fuzzy",p=arguments.length>10&&void 0!==arguments[10]?arguments[10]:null,h=arguments.length>11&&void 0!==arguments[11]?arguments[11]:"EXMP",f=arguments.length>12&&void 0!==arguments[12]?arguments[12]:"RESUME",m=!(arguments.length>13&&void 0!==arguments[13])||arguments[13],g=(arguments.length>14&&void 0!==arguments[14]?arguments[14]:i)+"content/users/"+e+"/skill/search?document_id="+u,v={method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({jobTitle:c,productCD:t,cultureName:s,sectionTypeCD:r,contentTypeCD:h,contentGroupCD:f,employer:p,portalCD:n,enableFuzzySearch:a,fuzzySearchVariation:d,keywords:l})};return fetch(g,v).then(function(e){if(e.ok)return e.json()}).then(function(e){var t=[];return e.result.forEach(function(n,i){var r=new o.Content({htmlString:n.text,contentItemUID:n.contentItemUid,contentTypeCD:n.contentTypeCd,isCore:!!n.isCore,tagText:n.tagText,tagType:n.tagType});r.source=n.source,r.ttcType=n.type,r.weight=n.weight,r.confidenceLevel=e.confidenceLevel,r.matchedEmployer=e.matchedEmployer,e.jobTitle&&(r.matchedJobTitle=e.jobTitle.matchedJobTitle,r.occupation=e.jobTitle.occupation,r.primaryJobTitle=e.jobTitle.primaryJobTitle,r.jobTitleType=e.jobTitle.type),t.push(r)}),t.filter(function(e){return e.isCore}).length<1&&(t=t.map(function(e,t){var n=e;return n.isCore=m&&t<3,n})),t}).catch(function(e){console.log(e)})};var o=n(1),i=void 0,r=void 0;"undefined"!=typeof window&&(i=window.globalCompVars.BaseApiUrl,r=window.globalCompVars.BaseApiUrlV2);var c="00000000-0000-0000-0000-000000000000";function u(e,t,n){return fetch(e+"content/jobtitles",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({AcceptLanguage:t.cultureCD,countrycd:t.countrycd,DocumentID:t.DocumentID,Placement:t.Placement,PortalCD:t.PortalCD,ProductCD:t.ProductCD,SearchString:t.SearchString,UserID:t.UserID,isTypeAheadWithFuzzy:!!t.isTypeAheadWithFuzzy})}).then(function(e){return e.json()}).then(function(e){n&&n(!1,e.experimentID,e.variation);var t=[];return e.map(function(e){t.push(new o.JobTitle({displayValue:e.title,selectedValue:e.title,rank:e.rank,relatedJobTitles:e.relatedJobTitles,occupation:e.occupation,isAmbiguous:e.isAmbiguous,majorFunction:e.majorFunction,minorFunction:e.function,riasec:e.riasec,primaryJobTitle:e.primaryJobTitle,selectedJobGender:e.gender}))}),t})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=function(){return function(e,t){if(Array.isArray(e))return e;if(Symbol.iterator in Object(e))return function(e,t){var n=[],o=!0,i=!1,r=void 0;try{for(var c,u=e[Symbol.iterator]();!(o=(c=u.next()).done)&&(n.push(c.value),!t||n.length!==t);o=!0);}catch(e){i=!0,r=e}finally{try{!o&&u.return&&u.return()}finally{if(i)throw r}}return n}(e,t);throw new TypeError("Invalid attempt to destructure non-iterable instance")}}();t.getDocument=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"none",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/"+e+"/"+t+"?preference="+n,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getDocumentV2=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s;return fetch(n+"users/"+e+"/documents/"+t,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getLastUpdatedResume=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"none",i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:u;return fetch(i+"documents/lastupdatedresume?userId="+e+"&portalCD="+t+"&isSignUpFlow="+n+"&preference="+o,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getUserDocuments=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u;return fetch(n+"documents/getall?userId="+e+"&portalCD="+t,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.deleteDocument=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u;return fetch(n+"documents/delete?userId="+e+"&documentId="+t,{method:"DELETE",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeCheck=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u;return fetch(n+"documents/resumecheck?userId="+e+"&documentId="+t+"&portalId=13",{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScorePost=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u;return fetch(t+"resume/score",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({document:e})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScore=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],c=arguments.length>6&&void 0!==arguments[6]&&arguments[6],s=arguments[7],a=arguments.length>8&&void 0!==arguments[8]?arguments[8]:u;return fetch(a+"resume/score/users/"+e+"/documents/"+t+"?execute_title_flow="+o+"&job_title="+n+"&combined_experience="+i+"&is_zero_experience="+r+"&is_other_experience="+c+"&country_cd="+s,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){return e.ok?e.json():0}).then(function(e){return e}).catch(function(){return 0})},t.getResumeScoreV5=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:a;return fetch(r+"resume/score/users/"+e+"/documents/"+t+"?execute_title_flow="+o+"&job_title="+n+"&combined_experience="+i,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewGroups=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:u;return fetch(i+"resume/review/groups/users/"+e+"/documents/"+t+"?execute_title_flow="+o+"&job_title="+n,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetails=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"",c=arguments.length>6&&void 0!==arguments[6]&&arguments[6],s=arguments.length>7&&void 0!==arguments[7]&&arguments[7],a=arguments.length>8&&void 0!==arguments[8]?arguments[8]:u,r=""==r?"":"&country_cd="+r;return fetch(a+"resume/review/users/"+e+"/documents/"+t+"?execute_title_flow="+o+"&job_title="+n+"&combined_experience="+i+r+"&is_zero_experience="+c+"&is_other_experience="+s,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetailsV5=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"",c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:a,r=""==r?"":"&country_cd="+r;return fetch(c+"resume/review/users/"+e+"/documents/"+t+"?execute_title_flow="+o+"&job_title="+n+"&combined_experience="+i+r,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.downloadDocumentWrapper=function(e){var t=e.userId,n=e.documentId,o=e.portalId,i=e.fileFormatType,r=e.docFileType,c=e.styleSheetName,u=e.skipCacheCheck,s=e.isPrint,a=e.fileName,l=e.customApiPath,d=e.isEuropass,h=e.downloadSVG,f=e.templateName,m=e.sendDownloadEvent,g=e.isRedirect,v=e.letterType,y=e.isCopy,j=e.showEmptySections,T=e.isExtension,C=e.useV2,D=e.eventDetails,b=e.userPreferences,S=e.payperFeatureTrackParam,I=e.returnURL;return p(t,n,o,i,r,c,u,s,a,l,d,h,f,m,g,v,y,j,T,C,D,b,S,I)},t.downloadDocument=p,t.switchUserDocument=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:u;return fetch(i+"documents/switchuserdocument?olduserId="+e+"&newserId="+t+"&documentId="+n+"&callNotificationApi="+o,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.updateDocument=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],o=arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:u;i&&t&&t.country&&!t.country.LocationCD?t.country.LocationCD=i:i&&t&&!t.country&&(t.country={LocationCD:i});return fetch(c+"documents/updatedocument?userId="+e+"&documentId="+t.id+"&fromEB="+n+"&forFT="+r,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({document:t})}).then(function(e){return e.ok?e.json():o?e:void 0}).then(function(e){return e})},t.setPwbLinkForDocument=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:d;if(o)return fetch(o+"/users/"+e+"/documents/"+t+"/linkwebsite?islink="+n,{method:"PUT",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e}).then(function(e){return e})},t.updateResumeFromHtmlDoc=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/updatedocument?userId="+t+"&documentId="+n,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({htmlDoc:e})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.createDocument=function(e,t,n,o,i,r,c,s,a){var l=arguments.length>9&&void 0!==arguments[9]?arguments[9]:"",d=arguments.length>10&&void 0!==arguments[10]&&arguments[10],p=arguments.length>11&&void 0!==arguments[11]?arguments[11]:"",h=arguments.length>12&&void 0!==arguments[12]&&arguments[12],f=arguments.length>13&&void 0!==arguments[13]?arguments[13]:[],m=arguments.length>14&&void 0!==arguments[14]?arguments[14]:u;return fetch(m+"documents",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userUID:e,partyID:"",firstName:t.firstName,lastName:t.lastName,portalID:o,skinCD:n,templateID:i,cultureCD:c,userStageID:"guest",recommendTemplate:!1,DocumentTypeCD:r,localizedDocumentText:s,flowName:l,productCD:a,isIntl:d,skinColor:p,isChangeSectionNames:h,docStyles:f})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.createDocumentV2=function(e,t,n,o,i,r,c,u){var a=arguments.length>8&&void 0!==arguments[8]?arguments[8]:"",l=arguments.length>9&&void 0!==arguments[9]?arguments[9]:"",d=arguments.length>10&&void 0!==arguments[10]?arguments[10]:[],p=arguments.length>11&&void 0!==arguments[11]?arguments[11]:"",h=arguments.length>12&&void 0!==arguments[12]&&arguments[12],f=arguments.length>13&&void 0!==arguments[13]&&arguments[13],m=arguments.length>14&&void 0!==arguments[14]?arguments[14]:[],g=arguments.length>15&&void 0!==arguments[15]?arguments[15]:null,v=arguments.length>16&&void 0!==arguments[16]?arguments[16]:"none",y=arguments.length>17&&void 0!==arguments[17]?arguments[17]:"",j=arguments.length>18&&void 0!==arguments[18]?arguments[18]:s;return fetch(j+"users/"+e+"/documents?preference="+v,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userUID:e,partyID:"",firstName:t.firstName,lastName:t.lastName,portalID:o,skinCD:n,templateID:i,cultureCD:c,userStageID:"guest",recommendTemplate:!1,DocumentTypeCD:r,localizedDocumentText:u,productCD:a,flowName:l,preferences:d,skinColor:p,isIntl:h,isChangeSectionNames:f,docStyles:m,country:g})}).then(function(e){return e.ok?e.json():y?e:void 0}).then(function(e){return e})},t.createLetterFromResume=function(e,t,n){var o=n.cultureCD,i=n.productCD,r=void 0===i?"":i,c=n.localizedDocText,s=n.docTypeCd,a=n.skinColor,l=void 0===a?"":a,d=n.flowName,p=void 0===d?"":d,h=n.isIntl,f=void 0===h||h,m=n.defaultSkinCD,g=void 0===m?"":m,v=n.defaultTemplateID,y=n.defaultHighSchoolTemplateID,j=n.defaultCollegeTemplateID,T=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u,C={defaultSkinCD:g,defaultTemplateID:v,defaultHighSchoolTemplateID:y,defaultCollegeTemplateID:j,cultureCD:o,documentTypeCD:s,productCD:r,isIntl:f,localizedDocumentText:c,skinColor:l,flowName:p};return fetch(T+"users/"+e+"/documents/"+t+"/cover_letter",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(C)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.parseDocument=function(e,t,n,o,i,r,c,s,a){var l=arguments.length>9&&void 0!==arguments[9]?arguments[9]:"Resume",d=arguments.length>10&&void 0!==arguments[10]&&arguments[10],p=arguments.length>11&&void 0!==arguments[11]?arguments[11]:"",h=arguments.length>12&&void 0!==arguments[12]?arguments[12]:[],f=arguments.length>13&&void 0!==arguments[13]?arguments[13]:null,m=arguments.length>14&&void 0!==arguments[14]?arguments[14]:[],g=arguments.length>15&&void 0!==arguments[15]?arguments[15]:null,v=arguments.length>16&&void 0!==arguments[16]?arguments[16]:"none",y=arguments.length>17&&void 0!==arguments[17]?arguments[17]:u;return fetch(y+"documents/parse?preference="+v,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({data:t.fileData,uploadFileTypeCD:(i||"pdf").toLowerCase(),templateID:r,portalID:o,skinCD:n,cultureCD:c,userUID:e,flowName:s,PortalCD:a.toUpperCase(),localizedDocumentText:l,isIntl:d,firstName:t.firstName,lastName:t.lastName,skinColor:p,sectionTypesToExclude:h,uploadMethod:f,docStyles:m,country:g})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.parseDocumentV2=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:new r.UploadDocument,t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"none",n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s;return fetch(n+"documents/parse?preference="+t,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.parseMultiPageDoc=function(e,t,n,o,i,r,c,u,a){var l=arguments.length>9&&void 0!==arguments[9]?arguments[9]:"Resume",d=arguments.length>10&&void 0!==arguments[10]&&arguments[10],p=arguments.length>11&&void 0!==arguments[11]?arguments[11]:"",h=arguments.length>12&&void 0!==arguments[12]?arguments[12]:[],f=arguments.length>13&&void 0!==arguments[13]?arguments[13]:null,m=arguments.length>14&&void 0!==arguments[14]?arguments[14]:[],g=arguments.length>15&&void 0!==arguments[15]?arguments[15]:null,v=arguments.length>16&&void 0!==arguments[16]?arguments[16]:"none",y=arguments.length>17&&void 0!==arguments[17]?arguments[17]:null,j=arguments.length>18&&void 0!==arguments[18]?arguments[18]:s;return fetch(j+"documents/parse?preference="+v,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({data:t.fileData,uploadFileTypeCD:(i||"png").toLowerCase(),templateID:r,portalID:o,skinCD:n,cultureCD:c,userUID:e,flowName:u,PortalCD:a.toUpperCase(),localizedDocumentText:l,isIntl:d,firstName:t.firstName,lastName:t.lastName,skinColor:p,sectionTypesToExclude:h,uploadMethod:f,docStyles:m,country:g,documentID:y})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.UploadPhoto=function(e,t,n,o,i,r,c,s,a,l){var d=arguments.length>10&&void 0!==arguments[10]?arguments[10]:u;return fetch(d+"documents/uploadphotodoc",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({UserUID:e,imgBase:t,X:n,Y:o,W:i,H:r,imgWidth:c,imgHeight:s,DocumentId:a,countryCD:l})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.updateDocumentSkin=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/skins?userId="+e+"&documentId="+t+"&skincd="+n,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.updateDocStyle=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/styles?userId="+e+"&documentId="+t,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(n)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.updateMultipleSections=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/UpdateMultipleSections",{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userId:e,documentId:t,lstSections:n})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.saveTTCDocumentPreferences=function(e,t,n,o,i){var r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:u,c=o?"jobTitle"==o?"J":n:"J";return n=o?"jobTitle"==o?n:i:n,fetch(r+"documents/savettcdocumentpreferences",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userID:e,docID:t,jobTitle:n,searchType:c})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.emailDocument=h,t.emailDocumentV2=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:s;return h(e,t)},t.emailMultipleDocument=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u,n="?fileFormats="+e.fileFormatType;return n=n.replace(",","&fileFormats="),fetch(t+"emailwithmutipleattachments"+n,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({document_id:e.documentId,letter_id:e.letterId,user_uid:e.userId,portal_id:e.portalId,format_type:e.fileFormatType,stylesheet_name:e.styleSheetName?e.styleSheetName:null,IsEuropass:e.IsEuropass?e.IsEuropass:null,email_request:{attachments:[],body:e.mailBody,cuid:e.documentId,display_name:e.displayName,email_name:e.emailName||"EmailDocument",from_email:e.frmEmail,is_text:"boolean"!=typeof e.isText||e.isText,reply_to:null,reply_to_notification:!1,subject:e.subject,to_email:e.toEmail,bcc_email:e.bccEmail||""}})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.duplicateResume=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/duplicate?userId="+e+"&documentId="+t+"&duplicateDocName="+n,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.renameDocument=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/rename?userId="+e+"&documentId="+t+"&newDocName="+n,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeCheckResult=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/resumecheck?userId="+e+"&documentId="+t+"&portalId="+n,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getLightWeightUserDocuments=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/getlightweightdocuments?userId="+e+"&portalId="+t+"&docTypeCd="+n,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getPaginated=function(e,t,n,o,i,r){var c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:[],s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:"dateModified",a=arguments.length>8&&void 0!==arguments[8]?arguments[8]:u,l="documents/getpaginated?userId="+e+"&portalCD="+t+"&documentType="+n+"&count="+o+"&pagenum="+i+"&showDocFiles="+r+"&sortBy="+s;return l=c.length?l+"&portals="+c:l,fetch(a+l,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.previewDocument=function(e,t,n,o,i,r){var c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"png",s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:u;return fetch(s+"documents/documentpreview?userId="+e+"&documentId="+t+"&dpiSize="+n+"&previewfileFormatType="+o+"&previewfileType="+i+"&styleSheetName="+r+"&q="+Math.random()+"&previewFileTypeCd="+c,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.reOrderSection=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/reordersection",{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userId:e,documentId:t,sectionIndexes:n})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.reOrderParagraph=function(e,t,n,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:u;return fetch(i+"documents/reorderparagraph",{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userId:e,documentId:t,sectionId:n,paragraphIndexes:o})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.resetStyles=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:u;return fetch(n+"documents/resetstyles?userId="+e+"&documentId="+t,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.updateDocTemplate=function(e,t,n,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:u,r=arguments[5];return fetch(i+"documents/updatetemplate?userId="+e+"&documentId="+t+"&templateId="+n+"&portalId="+o,{credentials:"include",method:"PATCH",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({})}).then(function(e){return e.ok?e.json():r?e:void 0}).then(function(e){return e})},t.updateLetterTemplate=function(e,t,n,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:u;return fetch(i+"documents/updatelettertemplate?userId="+e+"&documentId="+t+"&templateId="+n+"&portalId="+o,{credentials:"include",method:"PATCH",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.updateDocPrefrence=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u,i=[];n&&n.length>0&&n.forEach(function(e){var t={DocId:e.docId,DocPreferenceTypeCD:e.docPreferenceTypeCD,DocPrefId:e.docPrefId,DocumentID:e.documentID,Id:e.id,Value:e.value};i.push(t)});return fetch(o+"documents/preferences?userId="+e+"&documentId="+t,{credentials:"include",method:"PATCH",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(i)}).then(function(e){if(e.ok)return e}).then(function(e){return e})},t.exportDocument=function(e,t,n,o,i,r,c){var s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:u;return fetch(s+"documents/export?userId="+e+"&documentId="+t+"&portalId="+n+"&fileFormatType="+o+"&docFileType="+i+"&styleSheetName="+r+"&skipCacheCheck="+c,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.downloadHtml=function(e,t,n,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:u;return fetch(i+"documents/downloadhtml?userId="+e+"&documentId="+t+"&portalId="+n+"&docFileType="+o,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.text()}).then(function(e){return e})},t.trackTTCEvents=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u;return fetch(t+"tracking/trackall",{credentials:"include",method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){if(e.ok)return e}).then(function(e){return e})},t.uploadSignature=function(e,t,n,o,i,r,c,s,a,l){var d=arguments.length>10&&void 0!==arguments[10]?arguments[10]:u;return fetch(d+"documents/uploadsignature",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({UserUID:e,imgBase:t,X:n,Y:o,W:i,H:r,imgWidth:c,imgHeight:s,DocumentId:a,countryCD:l})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.uploadPhotoToAzure=function(e,t,n,o,i,r,c,s,a,l){var d=arguments.length>10&&void 0!==arguments[10]?arguments[10]:"photo",p=arguments.length>11&&void 0!==arguments[11]?arguments[11]:u;return fetch(p+"documents/uploadphototoazure?photoType="+d,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({UserUID:e,imgBase:t,X:n,Y:o,W:i,H:r,imgWidth:c,imgHeight:s,DocumentId:a,countryCD:l})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.saveBestMatchedJobDetails=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"jobs/"+e+"/bestjobdetails/"+t+"?jobtitle="+encodeURIComponent(n),{credentials:"include",method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.createDocumentWithJson=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u;return fetch(t+"documents/savejsondocument",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getDocumentCount=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/getdocumentcount?userId="+e+"&portalId="+t+"&docTypeCd="+n,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.cloneDocument=function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:u)+"documents/clonedocfornewuser?userId="+e.userId+"&newUserId="+e.newUserId+"&documentId="+e.documentId+"&skinCd="+e.skinCd+"&duplicateDocName="+e.duplicateDocName+"&colorCode="+e.colorCode;return fetch(t,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e.sectionsWithoutData)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.DocumentPreview=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(o+"documents/documentpreview/urls?userId="+e+"&documentId="+t+"&previewFileTypeCd="+n,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.portDocument=function(e,t,n,o){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"en-US",r=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"regularToSocialCard",c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:1669,u=arguments.length>7&&void 0!==arguments[7]&&arguments[7],a=arguments.length>8&&void 0!==arguments[8]&&arguments[8],l=arguments.length>9&&void 0!==arguments[9]?arguments[9]:s,d={userUID:e,sourceDocId:t,isRegularToEuropass:u,cultureCD:i,skinCD:n,destinationTemplateId:c,isPrflSectionRequired:a,localizedCVText:o,portType:r};return fetch(l+"portdocument",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(d)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetailsByDoc=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u;return fetch(t+"resume/review",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetailsByDocV5=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:a;return fetch(t+"resume/review",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.sendEmailUsingTemplate=function(e,t,n){var o=(arguments.length>3&&void 0!==arguments[3]?arguments[3]:u)+"sendemailusingtemplate?templateFilePath="+t;n&&(o=o+"&listAttachment="+n);return fetch(o,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getPaginatedPreview=function(e,t,n,o){var i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],r=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:u,s="";return o.split(",").filter(function(e){e&&(s=s+"&previewFileTypes="+e)}),fetch(c+"documents/export/preview?userid="+e+"&documentid="+t+"&pagesize="+n+s+"&onlyFirstPage="+i+"&showEmptySections="+r,{method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"},credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getDocumentPaginatedPreview=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u;return fetch(t+"documents/export/svg?pagesize="+e.pagesize+"&onlyFirstPage="+e.onlyFirstPage+"&showEmptySections="+e.showEmptySections+"&useDefaultContainerIndexes="+e.useDefaultContainerIndexes,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e.document)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.sendCampaignEmail=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:u;return fetch(i+"campaign/email?validateEmail="+n,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({email_request:o({},e),portal_cd:t})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.subscribeJobAlert=function(e,t,n,o,i){var r=!(arguments.length>5&&void 0!==arguments[5])||arguments[5],c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:l;return fetch(c+"jobalert/subscribe",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userUId:e,email:t,jobTitle:n,jobLocation:o,portalCd:i,isUserRegistered:r})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.unsubscribeJobAlert=function(e,t,n){var o=!(arguments.length>3&&void 0!==arguments[3])||arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:l;return fetch(i+"jobalert/unsubscribe",{method:"DELETE",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userID:e,email:t,portalCD:n,isUserRegistered:o})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getAllJobAlertSubscriptions=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:l;return fetch(n+"jobalert/getallsubscriptions?email="+e+"&portalcd="+t,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.SaveDocPreference=function(e,t,n,o){var i=e+"api/v1/documents/preferences?userId="+t+"&documentId="+n,r=c.InitialisePatchRequest(o);return fetch(i,r).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})};var r=n(1),c=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));var u=void 0,s=void 0,a=void 0,l=void 0,d=void 0;function p(e,t,n,o,r,c,a,l,d,p,h,f,m,g,v,y,j,T,C,D,b,S,I,k,A){var P=p||(A||(D?s:u))+"documents/download?userId="+e+"&documentId="+t+"&portalId="+n+"&fileFormatType="+o+"&docFileType="+r+"&styleSheetName="+c+"&skipCacheCheck="+a+"&isPrint="+l;if(d&&(P+="&documentName="+d),h&&(P+="&isEuropass="+h),f&&(P+="&downloadSVG=true"),y&&(P+="&letterType="+y),P=m?P+"&templateName="+m:P,P=g?P+"&sendDownloadEvent="+g:P,P=T?P+"&showEmptySections="+T:P,D){var O={};if(b&&(O.eventDetails=b),S&&(O.userPreferences=S),I){var _=!0,w=!1,N=void 0;try{for(var U,J=Object.entries(I)[Symbol.iterator]();!(_=(U=J.next()).done);_=!0){var E=i(U.value,2),x=E[0],R=E[1];null==R&&void 0==R||(O[x]=R)}}catch(e){w=!0,N=e}finally{try{!_&&J.return&&J.return()}finally{if(w)throw N}}}P+="&request="+JSON.stringify(O)}return C?function(e){return new Promise(function(t){chrome.runtime.sendMessage({componentRequest:"component-request",type:"download",apiPath:e},function(e){t(e)})})}(P).then(function(e){if(e.status)return P}):v?void("undefined"!=typeof window&&(window.location=P)):k?new Promise(function(e){return e(P)}):j?fetch(P,{credentials:"include"}).then(function(e){if(e.ok)return e.text()}).then(function(e){return e}):fetch(P,{credentials:"include"}).then(function(e){if(e.ok)return P})}function h(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:u)+"email";return t=e.showEmptySections?t+"?showEmptySections="+e.showEmptySections:t,e.userPreferences&&(t=t+"?userPreferences="+JSON.stringify(e.userPreferences)),fetch(t,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({document_id:e.documentId,letter_id:e.letterId,user_uid:e.userId,portal_id:e.portalId,format_type:e.fileFormatType,stylesheet_name:e.styleSheetName?e.styleSheetName:null,IsEuropass:e.IsEuropass?e.IsEuropass:null,email_request:{attachments:[],body:e.mailBody,cuid:e.documentId,display_name:e.displayName,email_name:e.emailName||"EmailDocument",from_email:e.frmEmail,is_text:"boolean"!=typeof e.isText||e.isText,reply_to:null,reply_to_notification:!1,subject:e.subject,to_email:e.toEmail,bcc_email:e.bccEmail||""}})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})}"undefined"!=typeof window&&(u=window.globalCompVars.BaseApiUrl,s=window.globalCompVars.BaseApiUrlV2,a=window.globalCompVars.BaseApiUrlV5,l=window.globalCompVars.BaseJsgUrl,d=window.globalCompVars.personalWebsiteApiPath)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.LogError=function(e,t,n){var i={ErrorMessage:e,ComponentStack:t,LogAsInfo:n};return fetch(o+"error/log",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},credentials:"include",body:JSON.stringify(i)}).then(function(e){if(e.ok)return e.json()})},t.LogErrorV2=function(e){return fetch(i+"errors/log",{method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},credentials:"include",body:JSON.stringify(e)}).then(function(e){if(e.ok)return e.json()})};var o=window.globalCompVars.BaseApiUrl,i=window.globalCompVars.BaseApiUrlV2},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.GetSurveyResponse=function(e){return fetch(i+"survey/"+e+"/responses",{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){var t=new o.Survey;return t.QuestionID=e.id,t.SurveyID=e.surveyID,e.responses.forEach(function(e){t.SurveyResponses.push(new o.SurveyResponse({displayText:e.displayText,responseCD:e.responseCD,responseID:e.responseID,sortOrder:e.sortOrder}))}),t}).catch(function(e){console.log(e)})},t.GetSurveyData=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],r=[],c=[];return(o?function(e,t,n){return fetch(i+"survey/surveyoptions?careerLevelQuestionId="+e+"&industryQuestionId="+t+"&culture="+n,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(n){var o=n.careerLevels?n.careerLevels.responses.slice(0,5):[],i=n.industries?n.industries.responses:[];return o&&o.length>0&&o.forEach(function(t){t.questionID=e}),i&&i.length>0&&i.forEach(function(e){e.questionID=t}),{experienceLevel:o,industries:i}})}(e,t,n):function(e){return fetch(i+"survey_options?cultureCD="+e,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})}(n)).then(function(n){return n.experienceLevel&&n.experienceLevel.length>0&&(n.experienceLevel=n.experienceLevel.slice(0,5),n.experienceLevel.forEach(function(t,n){r.push({displayText:t.definition?t.definition:t.displayText,responseID:t.responseID?t.responseID:0,responseCD:t.responseCD?t.responseCD:t.id,questionCD:t.questionCD?t.questionCD:null,questionID:o?e:0,surveyResponseId:t.responseID?t.responseID:0})})),n.industries&&n.industries.length>0&&n.industries.forEach(function(e,n){c.push({displayText:e.definition?e.definition:e.displayText,responseID:e.responseID?e.responseID:0,responseCD:e.responseCD?e.responseCD:e.id,questionCD:e.questionCD?e.questionCD:null,questionID:o?t:0,surveyResponseId:e.responseID?e.responseID:0})}),{experienceLevel:r,industries:c}})},t.GetSubIndustries=function(e,t,n,o){var r=arguments.length>4&&void 0!==arguments[4]&&arguments[4],c=[];return(r?function(e,t){return fetch(i+"survey/subindustry?reponse_id="+e+"&culture="+t,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e}).catch(function(e){return console.log(e)})}(o,n):function(e,t,n){return fetch(i+"subindustries?questionCD="+e+"&industryCD="+t+"&cultureCD="+n,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e}).catch(function(e){console.log(e)})}(e,t,n)).then(function(e){return e&&e.length>0&&e.forEach(function(e){c.push({displayText:e.definition?e.definition:e.displayText,responseID:e.responseID?e.responseID:0,responseCD:e.responseCD?e.responseCD:e.id,questionCD:e.questionCD?e.questionCD:null,questionID:r?166:0,surveyResponseId:e.responseID?e.responseID:0})}),c})},t.SaveSurveyResponse=function(e,t,n,o,r,c){var u=arguments.length>6&&void 0!==arguments[6]&&arguments[6];return(u?function(e,t,n,o,r){var c=[];return e.forEach(function(e,i){r[i]&&c.push({QuestionID:e,QuestionCD:t,UserUID:n,DocumentID:o,SurveyResponses:[r[i]]})}),function(e){return fetch(i+"survey",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})}(c)}(e,t,n,o,r):function(e,t,n,o){return fetch(i+"save_or_update_user_response",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({responseList:e,docID:t,userUID:n,cultureCD:o})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})}(r,o,n,c)).then(function(e){return 0==u?e:e.ok?e.json():void 0}).then(function(e){return e})},t.GetPersonResponses=function(e,t,n,o){return(o?function(e,t){return fetch(i+"user_responses?userUID="+e+"&cultureCd="+t,{credentials:"include",method:"GET"}).then(function(e){if(e.ok)return e.json()}).then(function(e){var t=[];return e&&e.length>0&&e.forEach(function(e,n){t.push({responseCD:e.responses[0].responseCD,questionCD:null,questionID:e.question.id,responseID:e.responses[0].responseID})}),t}).catch(function(e){console.log(e)})}(t,n):function(e){return fetch(i+"person_responses?partyid="+e,{credentials:"include",method:"GET"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e}).catch(function(e){console.log(e)})}(e)).then(function(e){return e||[]})},t.GetUserSurveyResponse=function(e,t,n){var o=i+"survey/"+t+"/"+e+"/responses";n&&(o=o+"?acceptLanguage="+n);return fetch(o,{credentials:"include",method:"GET"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})};var o=n(1),i=window.globalCompVars.BaseApiUrl},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.updateUserV2=void 0,t.updateUser=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:r,o={user_uid:e.UserUID,is_active:!0,email:e.EmailAddress,first_name:e.FirstName,last_name:e.LastName,mobile_no:e.MobileNumber,phone_no:e.PhoneNumber,country_cd:e.Country,portal_cd:e.PortalCD};return fetch(n+"users/"+e.UserUID+"/"+t,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({user:o,state:e.State,addressLine1:e.AddressLine1,city:e.City,postalCD:e.PostalCD})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.signIn=function(e,t,n,o,c,u,s,a,l,d){var p=arguments.length>10&&void 0!==arguments[10]?arguments[10]:"signupuser",h=arguments.length>11&&void 0!==arguments[11]?arguments[11]:null,f=arguments.length>12&&void 0!==arguments[12]?arguments[12]:null,m=!(arguments.length>13&&void 0!==arguments[13])||arguments[13],g=!(arguments.length>14&&void 0!==arguments[14])||arguments[14],v=arguments[15],y=h&&null!=h?"?previousEmail="+h:"",j=void 0;j=v?v+p+y:("signinuser"==p?i:r)+p+y;return fetch(j,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userName:t,password:n,productCD:c,portalCD:o,visitUID:u,guestUserUUID:e,autoExtend:!0,first_name:s.FirstName,last_name:s.LastName,phone_no:s.PhoneNumber,City:s.City,SocialToken:s.SocialToken,isDesktopSignUp:m,PUID:s.PUID,EmailOptin:a,gaClientId:l,docId:d,saveResumeModalScreen:f,keepMeLoggedIn:g})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.signInV2=function(e,t,n,o,c,u,s,a,l,d){var p=arguments.length>10&&void 0!==arguments[10]?arguments[10]:"signupuser",h=arguments.length>11&&void 0!==arguments[11]?arguments[11]:null,f=arguments.length>12&&void 0!==arguments[12]?arguments[12]:null,m=!(arguments.length>13&&void 0!==arguments[13])||arguments[13],g=!(arguments.length>14&&void 0!==arguments[14])||arguments[14],v=arguments[15],y=h&&null!=h?"?previousEmail="+h:"",j=void 0,T="signinuser"==p?"users/signinuser":"users/usersignup";j=v?v+T+y:("signinuser"==p?i:r)+T+y;return fetch(j,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({userName:t,password:n,productCD:c,portalCD:o,visitUID:u,guestUserUUID:e,autoExtend:!0,first_name:s.FirstName,last_name:s.LastName,phone_no:s.PhoneNumber,City:s.City,SocialToken:s.SocialToken,isDesktopSignUp:m,PUID:s.PUID,EmailOptin:a,gaClientId:l,docId:d,saveResumeModalScreen:f,keepMeLoggedIn:g})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.saveUserPreferences=a,t.ForgetPasswordMail=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i;return fetch(o+"users/forgotpwd/"+n,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.saveUserPreferencesV2=function(e,t,n){return a(e,t,n,r)},t.saveUserPreference=function(e,t,n,o,r){var c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:i;return fetch(c+"userpreferences?user_uid="+e+"&portalCd="+o,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({code:t,created_on:new Date,value:n})}).then(function(e){return e.ok?e.json():r?e:void 0}).then(function(e){return e})},t.updateUserPreference=function(e,t,n,o){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:i;return fetch(r+"updateuserpreferences?user_uid="+e+"&portalCd="+o,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({code:t,created_on:new Date,value:n})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getUserPreferences=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"userpreferences/"+e,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.isPremiumUser=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"users/ispremium/"+e+"/"+t,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getUserClaimsfromCookie=function(e){return fetch(e+"user/claims",{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.saveUserStages=function(e,t,n,o){var r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:0,c=arguments[5],u=arguments.length>6&&void 0!==arguments[6]?arguments[6]:i;return fetch(u+"users/saveuserstages?userId="+e+"&productCd="+n+"&userStageId="+t+"&portalCd="+o+(r>0?"&strategyId="+r:""),{method:"PATCH",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({}),credentials:"include"}).then(function(e){return e.ok?e.json():c?e:void 0}).then(function(e){return e})},t.getGeoLocationFromZip=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"user/getgeolocationfromzip/"+e,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getUser=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"users/"+btoa(e)+"/portals/"+t,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.IsUserRegistered=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"user/registered?emailaddress="+btoa(e)+"&portalcd="+t,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.conductExperimentV2=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"en-US",u=arguments.length>6&&void 0!==arguments[6]?arguments[6]:r;return fetch(u+"users/"+e+"/experiments/"+t+"/conduct",{method:"POST",body:JSON.stringify({logTraits:n,conductForOldUsers:o,includeIterableIntegration:i,culture:c,skipGoverning:!0}),headers:{Accept:"application/json","Content-Type":"application/json"},credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetExperimentV2=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:r;return fetch(o+"users/"+e+"/experiment/"+t+"?stopInactiveVariant="+n,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetUserAllExperiments=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"users/"+e+"/experiments",{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.SwitchUserExperiment=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"user/switchuserexperiment?olduserId="+e+"&newserId="+t,{method:"PATCH",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({}),credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.updateEmailAddressV2=function(e,t,n,o,i,c){var u=arguments.length>6&&void 0!==arguments[6]&&arguments[6],s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:r;return fetch(s+"users/"+e+"/emailaddress?isTrackEvt="+n+(i?"&triggerGAEvent="+i:"")+"&sendMarketingPermission="+u,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({email:t,portal_id:o,product_cd:c})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getUserByID=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"users/"+e,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.saveUserOptins=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"user/optins/"+e,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getUserOptins=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"user/optins/"+e,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getUserNotification=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"user/notification?partyId=0&portalId="+t+"&userId="+e+"&MPINTLPortal=false",{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.experimentActive=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"users/experimentactive/"+e,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getRecommendationSegment=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"recommendation/users/"+e+"/actions",{credentials:"include",method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.updateClientProfile=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"recommendation/users/"+e+"/updateclientprofile",{credentials:"include",method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.actionsRealtime=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"recommendation/users/"+e+"/actionsrealtime",{credentials:"include",method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.userRealtimeActionsForScreen=function(e,t,n,o,i){var c=arguments.length>5&&void 0!==arguments[5]?arguments[5]:r;return fetch(c+"recommendation/users/"+e+"/screen/useractionsrealtime?screenName="+t+"&portalCd="+n+"&productCd="+o,{credentials:"include",method:"PUT",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(i)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.checkFreeResumeReviewStatus=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]&&arguments[2],o=arguments.length>3&&void 0!==arguments[3]&&arguments[3],i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:u;return fetch(i+"orders/hasfreeresumereview?userUID="+e+"&portalID="+t+"&includeCancellationSku="+n+"&considerUnusedOrdersOnly="+o,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.checkDiscountedResumeReviewStatus=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:u;return fetch(t+"payments/"+e+"/purchased-discounted-resumereview",{credentials:"include",method:"GET",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getRexOrders=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:i;return fetch(n+"users/"+e+"/rexorders?docWorkflowCD="+t,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetUserAllExperimentsV3=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"active",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:c;return fetch(o+"users/"+e+"/experiments?portalCd="+t+"&status="+n,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetUserReview=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:s;return fetch(""+n+e+"/rexHTML/"+t,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.DownloadUserReview=function(e,t,n,o){var i=(arguments.length>4&&void 0!==arguments[4]?arguments[4]:s)+"downloadREX/user/"+e+"/document/"+t+"?fileFormat="+n+"&isPrint="+o;return fetch(i,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return i}).then(function(e){return e})},t.UpdateDocReview=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:s;return fetch(o+"updateDocReview/user/"+e+"/document/"+t+"/rexOrder/"+n,{credentials:"include",method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getUserContactDetails=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"users/"+e+"/addresses",{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.updatePersonalDetail=function(e){var t=e.personalDetailObj,n=e.userId,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(o+"user/updatepersondetail?userId="+n,{method:"PATCH",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getPersonDetail=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:i;return fetch(t+"user/getpersondetail?userId="+e,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.saveUserAgreement=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i;return fetch(o+"user/"+e+"/agreement?portalCD="+t,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(n)})},t.getCountryClaims=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:i;return fetch(e+"/user/countryclaims").then(function(e){if(e.ok)return e.json()}).then(function(e){return e})};var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));var i=void 0,r=void 0,c=void 0,u=void 0,s=void 0;function a(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:i;return fetch(o+"users/"+e+"/userpreferences?portalCd="+n,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})}"undefined"!=typeof window&&(i=window.globalCompVars.BaseApiUrl,r=window.globalCompVars.BaseApiUrlV2,c=window.globalCompVars.BaseApiUrlV3,u=window.globalCompVars.EcomBaseApiUrl,s=window.globalCompVars.CustomizerApiUrl);t.updateUserV2=function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:r;return o.patch(i+"users/"+e+"/"+n,t)}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getEducationDegrees=function(e){return fetch(o+"config/degree_response?cultureCD="+e,{credentials:"include"}).then(function(e){return e.text()}).then(function(e){e=JSON.parse(e);for(var t=[],n=function(n){!t.find(function(t){return t&&e[n]&&t.id==e[n].id})&&e[n]&&e[n].label&&t.push(e[n])},o=0;o<e.length;o++)n(o);return t})},t.getSampleDocument=function(e){return fetch(o+"config/sample_doc?templateId="+e,{credentials:"include"}).then(function(e){return e.text()}).then(function(e){return JSON.parse(e)})},t.getPortalContent=function(e,t,n){return fetch(e+t.toUpperCase()+".htm"+(n?"?v="+n:"")).then(function(e){return e.text()}).then(function(e){return e})},t.getBlobContent=function(e){return fetch(e).then(function(e){return e.text()}).then(function(e){return JSON.parse(e)})};var o=window.globalCompVars.BaseApiUrl},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.trackAllEvents=function(e){return fetch(o+"tracking/trackall",{credentials:"include",method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(e)}).then(function(e){if(e.ok)return e}).then(function(e){return e})};var o=window.globalCompVars.BaseApiUrl;window.globalCompVars.BaseApiUrlV2},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.createRTARequest=function(e,t,n,i,r,c,u){var s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:o;return fetch(s+"GDPR/users/"+e+"/rta?headerClientCD="+r+"&clientRequestRefernce="+c+"&complianceCD="+u,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({authProviderCD:t,emailAddress:n,partyID:i})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.createRTERequest=function(e,t,n,i,r,c,u){var s=arguments.length>7&&void 0!==arguments[7]?arguments[7]:o;return fetch(s+"GDPR/users/"+e+"/rte?headerClientCD="+r+"&clientRequestRefernce="+c+"&complianceCD="+u,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({authProviderCD:t,emailAddress:n,partyID:i})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.sendCampaignEmail=function(e,t,n,i,r,c){var u=arguments.length>6&&void 0!==arguments[6]?arguments[6]:o;return fetch(u+"campaign/email?validateEmail=true",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({email_request:{to_email:e,reply_to:t,subType:n},portal_cd:i,expiry_days:r,emailverificationUrl:c})}).then(function(e){return e.ok?e.json():"404"==e.status?{status:"404",message:"User Not Found"}:void 0}).then(function(e){return e})},t.getRequestStatus=function(e,t,n,i,r){return fetch(o+"GDPR/users/"+e+"/status?showlatest="+t+"&request_type="+n+"&headerClientCD="+i+"&clientRequestRefernce="+r,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getDataFile=function(e,t,n){return fetch(o+"GDPR/users/datafile?requestId="+e+"&headerClientCD="+t+"&clientRequestRefernce="+n,{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.signoutUser=function(){return fetch(o+"user/signout",{method:"GET",credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})};var o=window.globalCompVars.BaseApiUrl},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getResumeReviewDetailsByDocV5=function(e,t){return fetch(e+"v5/resume/review",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetailsV5=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],c=""==(c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"")?"":"&country_cd="+c;return fetch(e+"v5/resume/review/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o+"&combined_experience="+r+c,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScoreByDocV5=function(e,t){return fetch(e+"v5/resume/score",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScoreV5=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];return fetch(e+"v5/resume/score/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o+"&combined_experience="+r,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetailsByDocV4=function(e,t){return fetch(e+"v4/resume/review",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetailsV4=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],c=""==(c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"")?"":"&include_kg_skills="+c;return fetch(e+"v4/resume/review/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o+"&combined_experience="+r+c,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScoreByDocV4=function(e,t){return fetch(e+"v4/resume/score",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScoreV4=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];return fetch(e+"v4/resume/score/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o+"&include_kg_skills="+r,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewGroupsByDocV4=function(e,t){return fetch(e+"v4/resume/review/groups",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewGroupsV4=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];return fetch(e+"v4/resume/review/groups/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o,"&include_kg_skills="+r,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetailsByDoc=function(e,t){return fetch(e+"v1/resume/review",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetailsByDocV3=function(e,t){return fetch(e+"v3/resume/review",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetails=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],c=""==(c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"")?"":"&country_cd="+c;return fetch(e+"v1/resume/review/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o+"&combined_experience="+r+c,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewDetailsV3=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5],c=""==(c=arguments.length>6&&void 0!==arguments[6]?arguments[6]:"")?"":"&country_cd="+c;return fetch(e+"v3/resume/review/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o+"&combined_experience="+r+c,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScoreByDoc=function(e,t){return fetch(e+"v1/resume/score",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScoreByDocV3=function(e,t){return fetch(e+"v3/resume/score",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScoreV1=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];return fetch(e+"v1/resume/score/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o+"&combinedExperience="+r,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeScoreV3=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=arguments.length>4&&void 0!==arguments[4]&&arguments[4],r=arguments.length>5&&void 0!==arguments[5]&&arguments[5];return fetch(e+"v3/resume/score/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o+"&combinedExperience="+r,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewGroups=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4];return fetch(e+"v1/resume/review/groups/users/"+t+"/documents/"+n+"?execute_title_flow="+i+"&job_title="+o,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeReviewGroupsByDoc=function(e,t){return fetch(e+"v1/resume/review/groups",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(t)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getResumeMetadata=function(e,t,n){return fetch(e+"v1/resume/metadata/users/"+t+"/documents/"+n,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})};t.getSalaryDetailsFromTitle=function(e,t,n){var o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"";return fetch(e+"/v1/salary",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({title:n,city:o,state:i,titleId:0})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getRelatedSkills=function(e,t){return fetch(e+"/v1/getjobtitleskills?title="+t,{credentials:"include"}).then(function(e){if(e.ok)return e.json()})},t.GetParsedJobDetailsFromURL=function(e,t,n){return fetch(e+"api/v1/Jobscraper/parseurl",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({url:t,parseTitleFromURL:n})}).then(function(e){if(e.ok)return e.json();throw e})},t.GetDSRecommendations=function(e,t,n,o,i,r,c){var u=arguments.length>7&&void 0!==arguments[7]&&arguments[7],s={};return s=o?{jobId:o}:{jobTitle:i,jobDescription:r,companyName:c,considerOnlySkillsScore:u},fetch(e+"v1/user/"+t+"/document/"+n+"/jobmatchresult",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(s)}).then(function(e){if(e.ok)return e.json()})},t.GetJobMatchScore=function(e,t,n,o,i,r){var c={};return c=o?{jobIds:[o]}:{jobTitle:i,jobText:r},fetch(e+"v1/user/"+t+"/document/"+n+"/jobmatchscore",{credentials:"include",method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(c)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetBottomsUpScore=function(e,t,n,o,i){var r={jobTitle:o,jobDescription:i,companyName:arguments.length>5&&void 0!==arguments[5]?arguments[5]:""};return fetch(e+"v1/user/"+t+"/document/"+n+"/bottomsupscore",{credentials:"include",method:"POST",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify(r)}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetJobQualityScore=function(e,t,n,o){return fetch(e+"v1/jobs/jobqualityscore",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({companyName:t,jobDescription:n,jobTitle:o})}).then(function(e){return e.ok?e.text():0}).then(function(e){return e}).catch(function(){return 0})};t.GetJobDetailsFromJD=function(e,t,n,o){return fetch(e+"/v1/jobs/jobdetails",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({companyName:o,jobDescription:t,jobTitle:n})}).then(function(e){if(e.ok)return e.json();throw e})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getSolrData=t.getSalaryData=void 0,t.PostAppliedJobs=function(e,t,n,o,i,c,u,s,a){var l=arguments.length>9&&void 0!==arguments[9]&&arguments[9];return fetch(a+"api/v1/jso/users/"+n+"/job?supersedeApply="+s,{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({jobId:e,isInternal:u,status:"APPLIED",countryCD:o,postedOn:i,resumeId:t,letterId:c})}).then(function(e){return e.ok?l?r(a,n,o):e.json():null}).then(function(e){return e})},t.GetResumeCoverDetails=function(e,t,n){return fetch(n+"api/v1/jso/users/"+e+"/jobs/"+t,{method:"GET",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"}}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.PutAppliedJobs=function(e,t,n,o,i,r,c,u){return fetch(u+"api/v1/jso/users/"+n+"/job",{method:"PUT",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({jobId:e,isInternal:c,status:"APPLIED",countryCD:o,postedOn:i,resumeId:t,letterId:r})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetAppliedJobsFromJSO=function(e,t,n,i){var r=o.InitialiseGetRequest();return fetch(e+"api/v1/jso/users/"+t+"/jobs?jobStatus="+i+"&jobType=INTERNAL&countryCD="+n,r).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetSolrDataV2=function(e){var t=e.limit?e.limit:5,n={ip:e.ip,useragent:navigator&&navigator.userAgent||"",q:e.title,l:e.location?e.location:"",pn:e.pgNo?e.pgNo:1,limit:t,sort:e.sort?e.sort:"relevance",radius:e.radius?e.radius:"25",age:e.age?e.age:"90",sr:e.sourceCD,uid:e.uId?e.uId:""},r=o.InitialisePostRequest(n),c=e.apiURL+"v2/jobsearch";return fetch(c,r).then(function(e){return e.ok?e.json():e.ok||404!==e.status?void 0:i}).then(function(e){return e})},t.GetSemanticData=function(e){var t=e.limit?e.limit:5,n={request:{resumeTitle:e.resumeTitle,resumeId:e.resumeID,resumeDescription:e.resumeDesc},ip:e.ip,useragent:navigator&&navigator.userAgent||"",pn:e.pgNo?e.pgNo:1,limit:t,l:e.location?e.location:"",radius:e.radius?e.radius:"25",age:e.age?e.age:"90",sr:e.sourceCD,uid:e.uId?e.uId:"",sort:e.sort?e.sort:"relevance"},r=o.InitialisePostRequest(n),c=e.apiURL+"v2/jobsearch/matches/resumes";return fetch(c,r).then(function(e){return e.ok?e.json():e.ok||404!==e.status?void 0:i}).then(function(e){return e})},t.GetSemanticDataWithJobs=function(e){var t=e.limit?e.limit:5,n={resumeTitle:e.resumeTitle,resumeId:e.resumeID,resumeDescription:e.resumeDesc},r={appliedJobs:e.appliedJobs,savedJobs:e.savedJobs,searchJobs:e.recentSearches},c={request:n,recommendedJobsRequest:r,ip:e.ip,useragent:navigator&&navigator.userAgent||"",pn:e.pgNo?e.pgNo:1,limit:t,l:e.location?e.location:"",radius:e.radius?e.radius:"25",age:e.age?e.age:"90",sr:e.sourceCD,uid:e.uId?e.uId:"",sort:e.sort?e.sort:"relevance"},u=o.InitialisePostRequest(c),s=e.apiURL+"v3/jobsearch/matches/resumes";return fetch(s,u).then(function(e){return e.ok?e.json():e.ok||404!==e.status?void 0:i}).then(function(e){return e})},t.GetJobByID=function(e,t){var n=!(arguments.length>2&&void 0!==arguments[2])||arguments[2],i=o.InitialiseGetRequest();return fetch(e+"v1/jobsearch/jobs/"+t+"?fr="+n,i).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetUserActivities=function(e,t,n){var i=o.InitialiseGetRequest();return fetch(e+"v1/users/"+n+"/details?type=job&jobtype=saved&sourcecd="+t,i).then(function(e){return e.ok?e.json():null}).then(function(e){return e})},t.SaveUserJob=function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"US",c=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],u=arguments.length>5&&void 0!==arguments[5]&&arguments[5],s=o.InitialisePutRequest();return fetch(e+"api/v1/jso/users/"+t+"/jobs/"+n+"/save?isInternal="+c+"&co="+i,s).then(function(n){if(n.ok)return u?r(e,t,i,"SAVED"):n.json()}).then(function(e){return e}).catch(function(e){return null})},t.UnSaveUserJob=function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"US",c=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],u=arguments.length>5&&void 0!==arguments[5]&&arguments[5],s=o.InitialiseDeleteRequest();return fetch(e+"api/v1/jso/users/"+t+"/jobs/"+n+"/unsave?isInternal="+c+"&co="+i,s).then(function(n){if(n.ok)return u?r(e,t,i,"SAVED"):n.json()}).then(function(e){return e}).catch(function(e){return null})},t.GetJobsFromJSO=r,t.UpdateJsoJobStatus=function(e,t,n,i){var c=arguments.length>4&&void 0!==arguments[4]?arguments[4]:null,u=arguments.length>5&&void 0!==arguments[5]?arguments[5]:"US",s={jobId:n,isInternal:!0,status:"APPLIED",countryCD:u,jobStatusType:"INFERRED",resumeId:i,letterId:c},a=o.InitialisePutRequest(s);return fetch(e+"/api/v1/jso/users/"+t+"/job",a).then(function(n){if(n.ok)return r(e,t,u)}).catch(function(e){return null})},t.GetJSOJobById=function(e,t,n){var i=o.InitialiseGetRequest();return fetch(e+"api/v1/jso/users/"+t+"/jobs/"+n,i).then(function(e){if(e.ok)return e}).catch(function(e){return null})},t.DeleteJob=function(e,t,n,i,r,c){var u=o.InitialiseDeleteRequest();return fetch(e+"/api/v1/jso/users/"+t+"/jobs/"+n+"?countryCD="+i+"&isInternal="+r+"&isAdditionToUserActivities="+c,u).then(function(e){if(e.ok)return e}).catch(function(e){return null})};var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0));var i={jobs:null,total:0};t.getSalaryData=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"";return fetch(e+"v1/getsalarydata",{method:"POST",credentials:"include",headers:{Accept:"application/json","Content-Type":"application/json"},body:JSON.stringify({title:t,city:n,state:o,eri_title_id:0})}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.getSolrData=function(e,t){var n=t.age?t.age:"",o=t.ip?t.ip:"127.0.0.1",i=t.jobLocation,r=t.pgNo?t.pgNo:1,c=t.jobCount,u=t.radius,s=t.sort?t.sort:"relevance",a=t.sourceCD,l=t.jobTitle?t.jobTitle:"",d=e+"v1/jobsearch?ip="+o+"&useragent="+(navigator&&navigator.userAgent||"")+"&q="+encodeURIComponent(l)+"&pn="+r+"&limit="+c+"&sr="+a+"&l="+encodeURIComponent(i)+"&sort="+s;return""!==n&&(d=d.concat("&age="+n)),""!==u&&(d=d.concat("&radius="+u)),fetch(d,{credentials:"include"}).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})};function r(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"APPLIED",r=(arguments.length>4&&void 0!==arguments[4]&&arguments[4],o.InitialiseGetRequest());return fetch(e+"api/v1/jso/users/"+t+"/jobs?jobStatus="+i+"&countryCD="+n,r).then(function(e){if(e.ok)return e.json()}).then(function(e){return e?e.Jobs:e})}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.SubscribeJobAlert=function(e,t,n){var i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"",r=arguments.length>4&&void 0!==arguments[4]?arguments[4]:"",c=o.InitialisePostRequest(t),u="v1/jobalert/subscribe?jobAlertLocation="+n;""!==i&&(u=u.concat("&country="+i));""!==r&&(u=u.concat("&ipAddress="+r));return fetch(e+u,c).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.GetAllSubscription=function(e,t,n){var i=o.InitialiseGetRequest(),r=e+"v1/jobalert/getallsubscriptions?email="+encodeURIComponent(t)+"&portalcd="+n;return fetch(r,i).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})},t.UnSubscribeSubscription=function(e,t,n,i,r){var c={email:n,userID:i,portalCD:r,isUserRegistered:!0},u=o.InitialiseDeleteRequest(c);return fetch(e+"v1/jobalert/"+t+"/unsubscribe",u).then(function(e){if(e.ok)return e.json()}).then(function(e){return e})};var o=function(e){if(e&&e.__esModule)return e;var t={};if(null!=e)for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n]);return t.default=e,t}(n(0))}]);

/***/ }),
/* 18 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _extends;
function _extends() {
  _extends = Object.assign || function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];

      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }

    return target;
  };

  return _extends.apply(this, arguments);
}

/***/ }),
/* 19 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(89);
} else {
  module.exports = __webpack_require__(90);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 20 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright 2014-2015, Facebook, Inc.
 * All rights reserved.
 *
 * This source code is licensed under the BSD-style license found in the
 * LICENSE file in the root directory of this source tree. An additional grant
 * of patent rights can be found in the PATENTS file in the same directory.
 */



/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */

var warning = function() {};

if (process.env.NODE_ENV !== 'production') {
  warning = function(condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error(
        '`warning(condition, format, ...args)` requires a warning ' +
        'message argument'
      );
    }

    if (format.length < 10 || (/^[s\W]*$/).test(format)) {
      throw new Error(
        'The warning format should be able to uniquely identify this ' +
        'warning. Please, use a more descriptive format than: ' + format
      );
    }

    if (!condition) {
      var argIndex = 0;
      var message = 'Warning: ' +
        format.replace(/%s/g, function() {
          return args[argIndex++];
        });
      if (typeof console !== 'undefined') {
        console.error(message);
      }
      try {
        // This error was thrown as a convenience so that you can use this stack
        // to find the callsite that caused this warning to fire.
        throw new Error(message);
      } catch(x) {}
    }
  };
}

module.exports = warning;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 21 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return createLocation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return locationsAreEqual; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_resolve_pathname__ = __webpack_require__(94);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_value_equal__ = __webpack_require__(95);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__PathUtils__ = __webpack_require__(16);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };





var createLocation = function createLocation(path, state, key, currentLocation) {
  var location = void 0;
  if (typeof path === 'string') {
    // Two-arg form: push(path, state)
    location = Object(__WEBPACK_IMPORTED_MODULE_2__PathUtils__["d" /* parsePath */])(path);
    location.state = state;
  } else {
    // One-arg form: push(location)
    location = _extends({}, path);

    if (location.pathname === undefined) location.pathname = '';

    if (location.search) {
      if (location.search.charAt(0) !== '?') location.search = '?' + location.search;
    } else {
      location.search = '';
    }

    if (location.hash) {
      if (location.hash.charAt(0) !== '#') location.hash = '#' + location.hash;
    } else {
      location.hash = '';
    }

    if (state !== undefined && location.state === undefined) location.state = state;
  }

  try {
    location.pathname = decodeURI(location.pathname);
  } catch (e) {
    if (e instanceof URIError) {
      throw new URIError('Pathname "' + location.pathname + '" could not be decoded. ' + 'This is likely caused by an invalid percent-encoding.');
    } else {
      throw e;
    }
  }

  if (key) location.key = key;

  if (currentLocation) {
    // Resolve incomplete/relative pathname relative to current location.
    if (!location.pathname) {
      location.pathname = currentLocation.pathname;
    } else if (location.pathname.charAt(0) !== '/') {
      location.pathname = Object(__WEBPACK_IMPORTED_MODULE_0_resolve_pathname__["a" /* default */])(location.pathname, currentLocation.pathname);
    }
  } else {
    // When there is no prior location and pathname is empty, set it to /
    if (!location.pathname) {
      location.pathname = '/';
    }
  }

  return location;
};

var locationsAreEqual = function locationsAreEqual(a, b) {
  return a.pathname === b.pathname && a.search === b.search && a.hash === b.hash && a.key === b.key && Object(__WEBPACK_IMPORTED_MODULE_1_value_equal__["a" /* default */])(a.state, b.state);
};

/***/ }),
/* 22 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _objectWithoutPropertiesLoose;
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;

  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }

  return target;
}

/***/ }),
/* 23 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _assertThisInitialized;
function _assertThisInitialized(self) {
  if (self === void 0) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }

  return self;
}

/***/ }),
/* 24 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  var ReactPropTypesSecret = __webpack_require__(26);
  var loggedTypeFailures = {};
  var has = __webpack_require__(37);

  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) { /**/ }
  };
}

/**
 * Assert that the values match with the type specs.
 * Error messages are memorized and will only be shown once.
 *
 * @param {object} typeSpecs Map of name to a ReactPropType
 * @param {object} values Runtime values that need to be type-checked
 * @param {string} location e.g. "prop", "context", "child context"
 * @param {string} componentName Name of the component for error messages.
 * @param {?Function} getStack Returns the component stack.
 * @private
 */
function checkPropTypes(typeSpecs, values, location, componentName, getStack) {
  if (process.env.NODE_ENV !== 'production') {
    for (var typeSpecName in typeSpecs) {
      if (has(typeSpecs, typeSpecName)) {
        var error;
        // Prop type validation may throw. In case they do, we don't want to
        // fail the render phase where it didn't fail before. So we log it.
        // After these have been cleaned up, we'll let them throw.
        try {
          // This is intentionally an invariant that gets caught. It's the same
          // behavior as without this statement except with a better message.
          if (typeof typeSpecs[typeSpecName] !== 'function') {
            var err = Error(
              (componentName || 'React class') + ': ' + location + ' type `' + typeSpecName + '` is invalid; ' +
              'it must be a function, usually from the `prop-types` package, but received `' + typeof typeSpecs[typeSpecName] + '`.' +
              'This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.'
            );
            err.name = 'Invariant Violation';
            throw err;
          }
          error = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, ReactPropTypesSecret);
        } catch (ex) {
          error = ex;
        }
        if (error && !(error instanceof Error)) {
          printWarning(
            (componentName || 'React class') + ': type specification of ' +
            location + ' `' + typeSpecName + '` is invalid; the type checker ' +
            'function must return `null` or an `Error` but returned a ' + typeof error + '. ' +
            'You may have forgotten to pass an argument to the type checker ' +
            'creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and ' +
            'shape all require an argument).'
          );
        }
        if (error instanceof Error && !(error.message in loggedTypeFailures)) {
          // Only monitor this failure once because there tends to be a lot of the
          // same error.
          loggedTypeFailures[error.message] = true;

          var stack = getStack ? getStack() : '';

          printWarning(
            'Failed ' + location + ' type: ' + error.message + (stack != null ? stack : '')
          );
        }
      }
    }
  }
}

/**
 * Resets warning cache when testing.
 *
 * @private
 */
checkPropTypes.resetWarningCache = function() {
  if (process.env.NODE_ENV !== 'production') {
    loggedTypeFailures = {};
  }
}

module.exports = checkPropTypes;

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 25 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _defineProperty;
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

/***/ }),
/* 26 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = 'SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED';

module.exports = ReactPropTypesSecret;


/***/ }),
/* 27 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);


var createTransitionManager = function createTransitionManager() {
  var prompt = null;

  var setPrompt = function setPrompt(nextPrompt) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(prompt == null, 'A history supports only one prompt at a time');

    prompt = nextPrompt;

    return function () {
      if (prompt === nextPrompt) prompt = null;
    };
  };

  var confirmTransitionTo = function confirmTransitionTo(location, action, getUserConfirmation, callback) {
    // TODO: If another transition starts while we're still confirming
    // the previous one, we may end up in a weird state. Figure out the
    // best way to handle this.
    if (prompt != null) {
      var result = typeof prompt === 'function' ? prompt(location, action) : prompt;

      if (typeof result === 'string') {
        if (typeof getUserConfirmation === 'function') {
          getUserConfirmation(result, callback);
        } else {
          __WEBPACK_IMPORTED_MODULE_0_warning___default()(false, 'A history needs a getUserConfirmation function in order to use a prompt message');

          callback(true);
        }
      } else {
        // Return false from a transition hook to cancel the transition.
        callback(result !== false);
      }
    } else {
      callback(true);
    }
  };

  var listeners = [];

  var appendListener = function appendListener(fn) {
    var isActive = true;

    var listener = function listener() {
      if (isActive) fn.apply(undefined, arguments);
    };

    listeners.push(listener);

    return function () {
      isActive = false;
      listeners = listeners.filter(function (item) {
        return item !== listener;
      });
    };
  };

  var notifyListeners = function notifyListeners() {
    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    listeners.forEach(function (listener) {
      return listener.apply(undefined, args);
    });
  };

  return {
    setPrompt: setPrompt,
    confirmTransitionTo: confirmTransitionTo,
    appendListener: appendListener,
    notifyListeners: notifyListeners
  };
};

/* harmony default export */ __webpack_exports__["a"] = (createTransitionManager);

/***/ }),
/* 28 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Router__ = __webpack_require__(29);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Router__["a" /* default */]);

/***/ }),
/* 29 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






/**
 * The public API for putting history on context.
 */

var Router = function (_React$Component) {
  _inherits(Router, _React$Component);

  function Router() {
    var _temp, _this, _ret;

    _classCallCheck(this, Router);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props.history.location.pathname)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Router.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        history: this.props.history,
        route: {
          location: this.props.history.location,
          match: this.state.match
        }
      })
    };
  };

  Router.prototype.computeMatch = function computeMatch(pathname) {
    return {
      path: "/",
      url: "/",
      params: {},
      isExact: pathname === "/"
    };
  };

  Router.prototype.componentWillMount = function componentWillMount() {
    var _this2 = this;

    var _props = this.props,
        children = _props.children,
        history = _props.history;


    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(children == null || __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.count(children) === 1, "A <Router> may have only one child element");

    // Do this here so we can setState when a <Redirect> changes the
    // location in componentWillMount. This happens e.g. when doing
    // server rendering using a <StaticRouter>.
    this.unlisten = history.listen(function () {
      _this2.setState({
        match: _this2.computeMatch(history.location.pathname)
      });
    });
  };

  Router.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(this.props.history === nextProps.history, "You cannot change <Router history>");
  };

  Router.prototype.componentWillUnmount = function componentWillUnmount() {
    this.unlisten();
  };

  Router.prototype.render = function render() {
    var children = this.props.children;

    return children ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.only(children) : null;
  };

  return Router;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);

Router.propTypes = {
  history: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
  children: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.node
};
Router.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
};
Router.childContextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Router);

/***/ }),
/* 30 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_path_to_regexp__);


var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;

var compilePath = function compilePath(pattern, options) {
  var cacheKey = "" + options.end + options.strict + options.sensitive;
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

  if (cache[pattern]) return cache[pattern];

  var keys = [];
  var re = __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default()(pattern, keys, options);
  var compiledPattern = { re: re, keys: keys };

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledPattern;
    cacheCount++;
  }

  return compiledPattern;
};

/**
 * Public API for matching a URL pathname to a path pattern.
 */
var matchPath = function matchPath(pathname) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var parent = arguments[2];

  if (typeof options === "string") options = { path: options };

  var _options = options,
      path = _options.path,
      _options$exact = _options.exact,
      exact = _options$exact === undefined ? false : _options$exact,
      _options$strict = _options.strict,
      strict = _options$strict === undefined ? false : _options$strict,
      _options$sensitive = _options.sensitive,
      sensitive = _options$sensitive === undefined ? false : _options$sensitive;


  if (path == null) return parent;

  var _compilePath = compilePath(path, { end: exact, strict: strict, sensitive: sensitive }),
      re = _compilePath.re,
      keys = _compilePath.keys;

  var match = re.exec(pathname);

  if (!match) return null;

  var url = match[0],
      values = match.slice(1);

  var isExact = pathname === url;

  if (exact && !isExact) return null;

  return {
    path: path, // the path pattern used to match
    url: path === "/" && url === "" ? "/" : url, // the matched portion of the URL
    isExact: isExact, // whether or not we matched exactly
    params: keys.reduce(function (memo, key, index) {
      memo[key.name] = values[index];
      return memo;
    }, {})
  };
};

/* harmony default export */ __webpack_exports__["a"] = (matchPath);

/***/ }),
/* 31 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return ReactReduxContext; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);

var ReactReduxContext = __WEBPACK_IMPORTED_MODULE_0_react___default.a.createContext(null);
/* unused harmony default export */ var _unused_webpack_default_export = (ReactReduxContext);

/***/ }),
/* 32 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ComponentMapper = exports.ComponentList = undefined;

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _Editor = __webpack_require__(64);

var _Editor2 = _interopRequireDefault(_Editor);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

var ComponentList = exports.ComponentList = {
  // Wizard: { Component: Wizard, Title: 'wizard', Name: 'Wizard' },
  Editor: { Component: _Editor2.default, Title: 'Cover Letter Builder', AuthenticationRequired: false
    //ContactInfo: { Component: ContactInfo, Title: 'Cover Letter Builder',
    // Path: window.RDL.Paths.BasePath + "contactinfo", Name: pageType.CONTACT_INFO, AuthenticationRequired: false },  
  } };

var ComponentMapper = exports.ComponentMapper = function () {
  function ComponentMapper() {
    _classCallCheck(this, ComponentMapper);
  }

  _createClass(ComponentMapper, [{
    key: 'map',
    value: function map(name) {
      switch (name.toLowerCase()) {
        case 'editor':
          return ComponentList.Editor;
        // case 'contactinfo':
        //     return ComponentList.ContactInfo;
        default:
          return ComponentList.Editor;

      }
    }
  }]);

  return ComponentMapper;
}();

/***/ }),
/* 33 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
    value: true
});

var _createClass = function () {
    function defineProperties(target, props) {
        for (var i = 0; i < props.length; i++) {
            var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
        }
    }return function (Constructor, protoProps, staticProps) {
        if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
    };
}();

var _localforage = __webpack_require__(10);

var localforage = _interopRequireWildcard(_localforage);

function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
        return obj;
    } else {
        var newObj = {};if (obj != null) {
            for (var key in obj) {
                if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
            }
        }newObj.default = obj;return newObj;
    }
}

function _classCallCheck(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}

if (!!localforage.setDriver) {
    localforage.setDriver([localforage.INDEXEDDB, localforage.LOCALSTORAGE]);
}

var _instance = null;

var QueueHandler = function () {
    function QueueHandler() {
        _classCallCheck(this, QueueHandler);

        if (!_instance) {
            // singleton
            _instance = this;
        } else {
            return _instance;
        }
    }

    _createClass(QueueHandler, [{
        key: "init",
        value: function init() {
            window.addEventListener("online", function (e) {
                console.log("browserOnline - QueueHandler");
                _instance.flush();
            });
            window.addEventListener("offline", function (e) {
                console.log("browserOffline - QueueHandler");
            });
        }
    }, {
        key: "load",
        value: function load(key) {
            return localforage.getItem(key) || {};
        }
    }, {
        key: "remove",
        value: function remove(key) {
            return localforage.removeItem(key);
        }
    }, {
        key: "enqueue",
        value: function enqueue(key, request) {
            return localforage.setItem(key, request).then(function (enqueuedRequest) {
                //console.log('Key is set!', enqueuedRequest);
            }).catch(function (err) {
                //exception handling
                console.log(err);
            });
        }
    }, {
        key: "flush",
        value: function flush() {
            localforage.iterate(function (value, key, iterationNumber) {
                _instance.send(value).then(function () {
                    localforage.removeItem(key);
                });
            }).then(function (result) {
                // alert('Offline queue flushed successfully!');
            }).catch(function (err) {
                //exception handling
                console.log(err);
            });
        }
    }, {
        key: "send",
        value: function send(request) {
            return new Promise(function (resolve, reject) {
                resolve();
            });
        }
    }, {
        key: "checkQueue",
        value: function checkQueue() {
            return localforage.keys().then(function (keys) {
                return {
                    hasKey: keys.some(function (x) {
                        return x.startsWith('Q_');
                    }),
                    keys: keys.filter(function (x) {
                        return x.startsWith('Q_');
                    })
                };
            });
        }
    }, {
        key: "tryOrFallback",
        value: function tryOrFallback(fakeResponse) {
            // Return a handler that...
            return function (request, response) {
                // If offline, enqueue and answer with the fake response.
                if (!navigator.onLine) {
                    console.log('No network availability, enqueuing');
                    return enqueue(request).then(function () {
                        // As the fake response will be reused but Response objects
                        // are one use only, we need to clone it each time we use it.
                        return fakeResponse.clone();
                    });
                }

                // If online, flush the queue and answer from network.
                console.log('Network available! Flushing queue.');
                return flush().then(function () {
                    return fetch(req);
                });
            };
        }
    }]);

    return QueueHandler;
}();

exports.default = QueueHandler;

/***/ }),
/* 34 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.LoginSuccess = LoginSuccess;
exports.UpdateUserSuccess = UpdateUserSuccess;
exports.ResetUser = ResetUser;
exports.signIn = signIn;
exports.GetGeoLocationFromZip = GetGeoLocationFromZip;
exports.IsPremiumUser = IsPremiumUser;
exports.SaveUserStages = SaveUserStages;
exports.setUserFromClaims = setUserFromClaims;
exports.handlePurgedUserScenario = handlePurgedUserScenario;
exports.GetUserByID = GetUserByID;
exports.UpdateUser = UpdateUser;
exports.UpdateUserInStore = UpdateUserInStore;
exports.conductExperiment = conductExperiment;
exports.setUserPreferences = setUserPreferences;
exports.updateEmailAddress = updateEmailAddress;
exports.getUserPreferences = getUserPreferences;
exports.SwitchUserExperiment = SwitchUserExperiment;
exports.getUserContactDetails = getUserContactDetails;
exports.saveUserAgreement = saveUserAgreement;

var _actionTypes = __webpack_require__(4);

var actionTypes = _interopRequireWildcard(_actionTypes);

var _ajaxhelper = __webpack_require__(17);

var _CommonUtils = __webpack_require__(8);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function LoginSuccess(User) {
  return { type: actionTypes.LOGIN_USER, request: User };
}

function UpdateUserSuccess(User) {
  return { type: actionTypes.UPDATE_USER, request: User };
}

function ResetUser() {
  return { type: actionTypes.RESET_USER };
}

function signIn(userId, username, password, portalCd, productCD, visitUID, user, emailOptin, gaClientId) {

  if (!user.PUID && RDL.currentPortalDetails.isIntl) {
    user.PUID = userId;
  }

  return function () {
    return _ajaxhelper.UserAjaxHelper.signIn(userId, username, password, portalCd, productCD, visitUID, user, emailOptin, gaClientId, "").then(function (User) {
      return User;
    });
  };
}

//Not tested as api's end point was not created at the time of writing helper.
function GetGeoLocationFromZip(zipCode) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.getGeoLocationFromZip(zipCode).then(function (loc) {
      return loc;
    });
  };
}

function IsPremiumUser(userId, productId) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.isPremiumUser(userId, productId).then(function (resp) {
      return resp;
    });
  };
}

function SaveUserStages(userID, userStageID, productCD, portalCD) {
  return function (dispatch) {
    return _ajaxhelper.UserAjaxHelper.saveUserStages(userID, userStageID, productCD, portalCD, undefined, true).then(function (resp) {
      if (resp && (0, _CommonUtils.isPurgeUserScenario)(resp)) {
        return handlePurgedUserScenario(dispatch).then(function (guest) {
          return _ajaxhelper.UserAjaxHelper.saveUserStages(guest.claims.user_uid, userStageID, productCD, portalCD, undefined, true);
        });
      } else {
        return resp;
      }
    });
  };
}

function setUserFromClaims(claims) {
  var user = {};
  user.UserUID = claims.user_uid;
  user.FirstName = claims.firstName;
  user.LastName = claims.lastName;
  user.EmailAddress = claims.email;
  user.PhoneNumber = claims.phoneNumber;
  user.CellNumber = claims.mobileNumber;
  user.CreatedOn = claims.createdOn;
  user.Role = claims.role;
  user.partyID = claims.partyid;
  (0, _CommonUtils.updateObjClaims)(user);
  return user;
}

function handlePurgedUserScenario(dispatch) {
  RDL.isPurgedUserScenario = true;
  var LOGIN = window.LOGIN || window.BOLD;
  return LOGIN.Accounts.createGuest(window.RDL.PortalSettings.ConfigureProductCd, null, window.location.href).then(function (guest) {
    if (dispatch) {
      //reduce store with claims   
      var user = setUserFromClaims(guest.claims);
      dispatch(UpdateUserSuccess(user));
      return guest;
    }
  });
}

function GetUserByID(userID) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.getUserByID(userID).then(function (user) {
      return user;
    });
  };
}

function UpdateUser(user, isFirstTimeUser) {
  return function (dispatch) {
    user.PortalCD = RDL.PortalSettings.ConfigurePortalCd;
    (0, _CommonUtils.updateObjClaims)(user); // Updating objClaims after successfull signup.
    if ((0, _CommonUtils.isValidUserUpdateRequest)(user)) {
      return _ajaxhelper.UserAjaxHelper.updateUser(user, isFirstTimeUser).then(function (User) {
        dispatch(UpdateUserSuccess(user));
        return User;
      });
    } else {
      dispatch(UpdateUserSuccess(user));
      return new Promise(function (resolve) {
        resolve("Blank promise");
      });
    }
  };
}

function UpdateUserInStore(user) {
  (0, _CommonUtils.updateObjClaims)(user); // Updating objClaims after successfull signin.
  return function (dispatch) {
    dispatch(UpdateUserSuccess(user));
  };
}

function conductExperiment(userId, experimentId) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.conductExperimentV2(userId, experimentId);
  };
}

function setUserPreferences(userId, userPreferences, portalCd) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.saveUserPreferencesV2(userId, userPreferences, portalCd);
  };
}

function updateEmailAddress(userId, email, isTrackEvent, fireGAEventForEmail) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.updateEmailAddressV2(userId, email, isTrackEvent, RDL.PortalSettings.ConfigurePortal, fireGAEventForEmail, RDL.PortalSettings.ConfigureProductCd);
  };
}

function getUserPreferences(userId) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.getUserPreferences(userId);
  };
}

function SwitchUserExperiment(oldUserId, newUserId) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.SwitchUserExperiment(oldUserId, newUserId);
  };
}

function getUserContactDetails(userId) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.getUserContactDetails(userId);
  };
}

function saveUserAgreement(userId, portalCd, body) {
  return function () {
    return _ajaxhelper.UserAjaxHelper.saveUserAgreement(userId, portalCd, body);
  };
}

/***/ }),
/* 35 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

function checkDCE() {
  /* global __REACT_DEVTOOLS_GLOBAL_HOOK__ */
  if (
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined' ||
    typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE !== 'function'
  ) {
    return;
  }
  if (process.env.NODE_ENV !== 'production') {
    // This branch is unreachable because this function is only called
    // in production, but the condition is true only in development.
    // Therefore if the branch is still here, dead code elimination wasn't
    // properly applied.
    // Don't change the message. React DevTools relies on it. Also make sure
    // this message doesn't occur elsewhere in this function, or it will cause
    // a false positive.
    throw new Error('^_^');
  }
  try {
    // Verify that the code above has been dead code eliminated (DCE'd).
    __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(checkDCE);
  } catch (err) {
    // DevTools shouldn't crash React, no matter what.
    // We should still report in case we break this code.
    console.error(err);
  }
}

if (process.env.NODE_ENV === 'production') {
  // DCE check should happen before ReactDOM bundle executes so that
  // DevTools can report bad minification during injection.
  checkDCE();
  module.exports = __webpack_require__(81);
} else {
  module.exports = __webpack_require__(84);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 36 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _inheritsLoose;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__setPrototypeOf_js__ = __webpack_require__(47);

function _inheritsLoose(subClass, superClass) {
  subClass.prototype = Object.create(superClass.prototype);
  subClass.prototype.constructor = subClass;
  Object(__WEBPACK_IMPORTED_MODULE_0__setPrototypeOf_js__["a" /* default */])(subClass, superClass);
}

/***/ }),
/* 37 */
/***/ (function(module, exports) {

module.exports = Function.call.bind(Object.prototype.hasOwnProperty);


/***/ }),
/* 38 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(82);
} else {
  module.exports = __webpack_require__(83);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 39 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__BrowserRouter__ = __webpack_require__(88);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "BrowserRouter", function() { return __WEBPACK_IMPORTED_MODULE_0__BrowserRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__HashRouter__ = __webpack_require__(98);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "HashRouter", function() { return __WEBPACK_IMPORTED_MODULE_1__HashRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Link__ = __webpack_require__(41);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Link", function() { return __WEBPACK_IMPORTED_MODULE_2__Link__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__MemoryRouter__ = __webpack_require__(99);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "MemoryRouter", function() { return __WEBPACK_IMPORTED_MODULE_3__MemoryRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__NavLink__ = __webpack_require__(101);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "NavLink", function() { return __WEBPACK_IMPORTED_MODULE_4__NavLink__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Prompt__ = __webpack_require__(103);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Prompt", function() { return __WEBPACK_IMPORTED_MODULE_5__Prompt__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__Redirect__ = __webpack_require__(105);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Redirect", function() { return __WEBPACK_IMPORTED_MODULE_6__Redirect__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__Route__ = __webpack_require__(42);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Route", function() { return __WEBPACK_IMPORTED_MODULE_7__Route__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Router__ = __webpack_require__(28);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Router", function() { return __WEBPACK_IMPORTED_MODULE_8__Router__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__StaticRouter__ = __webpack_require__(107);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "StaticRouter", function() { return __WEBPACK_IMPORTED_MODULE_9__StaticRouter__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10__Switch__ = __webpack_require__(109);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Switch", function() { return __WEBPACK_IMPORTED_MODULE_10__Switch__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11__generatePath__ = __webpack_require__(111);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "generatePath", function() { return __WEBPACK_IMPORTED_MODULE_11__generatePath__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12__matchPath__ = __webpack_require__(112);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "matchPath", function() { return __WEBPACK_IMPORTED_MODULE_12__matchPath__["a"]; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13__withRouter__ = __webpack_require__(113);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "withRouter", function() { return __WEBPACK_IMPORTED_MODULE_13__withRouter__["a"]; });





























/***/ }),
/* 40 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "b", function() { return canUseDOM; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "a", function() { return addEventListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "e", function() { return removeEventListener; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "c", function() { return getConfirmation; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "g", function() { return supportsHistory; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "h", function() { return supportsPopStateOnHashChange; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "f", function() { return supportsGoWithoutReloadUsingHash; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "d", function() { return isExtraneousPopstateEvent; });
var canUseDOM = !!(typeof window !== 'undefined' && window.document && window.document.createElement);

var addEventListener = function addEventListener(node, event, listener) {
  return node.addEventListener ? node.addEventListener(event, listener, false) : node.attachEvent('on' + event, listener);
};

var removeEventListener = function removeEventListener(node, event, listener) {
  return node.removeEventListener ? node.removeEventListener(event, listener, false) : node.detachEvent('on' + event, listener);
};

var getConfirmation = function getConfirmation(message, callback) {
  return callback(window.confirm(message));
}; // eslint-disable-line no-alert

/**
 * Returns true if the HTML5 history API is supported. Taken from Modernizr.
 *
 * https://github.com/Modernizr/Modernizr/blob/master/LICENSE
 * https://github.com/Modernizr/Modernizr/blob/master/feature-detects/history.js
 * changed to avoid false negatives for Windows Phones: https://github.com/reactjs/react-router/issues/586
 */
var supportsHistory = function supportsHistory() {
  var ua = window.navigator.userAgent;

  if ((ua.indexOf('Android 2.') !== -1 || ua.indexOf('Android 4.0') !== -1) && ua.indexOf('Mobile Safari') !== -1 && ua.indexOf('Chrome') === -1 && ua.indexOf('Windows Phone') === -1) return false;

  return window.history && 'pushState' in window.history;
};

/**
 * Returns true if browser fires popstate on hash change.
 * IE10 and IE11 do not.
 */
var supportsPopStateOnHashChange = function supportsPopStateOnHashChange() {
  return window.navigator.userAgent.indexOf('Trident') === -1;
};

/**
 * Returns false if using go(n) with hash history causes a full page reload.
 */
var supportsGoWithoutReloadUsingHash = function supportsGoWithoutReloadUsingHash() {
  return window.navigator.userAgent.indexOf('Firefox') === -1;
};

/**
 * Returns true if a given popstate event is an extraneous WebKit event.
 * Accounts for the fact that Chrome on iOS fires real popstate events
 * containing undefined state when pressing the back button.
 */
var isExtraneousPopstateEvent = function isExtraneousPopstateEvent(event) {
  return event.state === undefined && navigator.userAgent.indexOf('CriOS') === -1;
};

/***/ }),
/* 41 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history__ = __webpack_require__(13);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }






var isModifiedEvent = function isModifiedEvent(event) {
  return !!(event.metaKey || event.altKey || event.ctrlKey || event.shiftKey);
};

/**
 * The public API for rendering a history-aware <a>.
 */

var Link = function (_React$Component) {
  _inherits(Link, _React$Component);

  function Link() {
    var _temp, _this, _ret;

    _classCallCheck(this, Link);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.handleClick = function (event) {
      if (_this.props.onClick) _this.props.onClick(event);

      if (!event.defaultPrevented && // onClick prevented default
      event.button === 0 && // ignore everything but left clicks
      !_this.props.target && // let browser handle "target=_blank" etc.
      !isModifiedEvent(event) // ignore clicks with modifier keys
      ) {
          event.preventDefault();

          var history = _this.context.router.history;
          var _this$props = _this.props,
              replace = _this$props.replace,
              to = _this$props.to;


          if (replace) {
            history.replace(to);
          } else {
            history.push(to);
          }
        }
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Link.prototype.render = function render() {
    var _props = this.props,
        replace = _props.replace,
        to = _props.to,
        innerRef = _props.innerRef,
        props = _objectWithoutProperties(_props, ["replace", "to", "innerRef"]); // eslint-disable-line no-unused-vars

    __WEBPACK_IMPORTED_MODULE_2_invariant___default()(this.context.router, "You should not use <Link> outside a <Router>");

    __WEBPACK_IMPORTED_MODULE_2_invariant___default()(to !== undefined, 'You must specify the "to" property');

    var history = this.context.router.history;

    var location = typeof to === "string" ? Object(__WEBPACK_IMPORTED_MODULE_3_history__["c" /* createLocation */])(to, null, null, history.location) : to;

    var href = history.createHref(location);
    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement("a", _extends({}, props, { onClick: this.handleClick, href: href, ref: innerRef }));
  };

  return Link;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Link.propTypes = {
  onClick: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
  target: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  to: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object]).isRequired,
  innerRef: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func])
};
Link.defaultProps = {
  replace: false
};
Link.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
      push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
      replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
      createHref: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
    }).isRequired
  }).isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Link);

/***/ }),
/* 42 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Route__ = __webpack_require__(43);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Route__["a" /* default */]);

/***/ }),
/* 43 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__matchPath__ = __webpack_require__(30);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







var isEmptyChildren = function isEmptyChildren(children) {
  return __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.count(children) === 0;
};

/**
 * The public API for matching a single path and rendering.
 */

var Route = function (_React$Component) {
  _inherits(Route, _React$Component);

  function Route() {
    var _temp, _this, _ret;

    _classCallCheck(this, Route);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.state = {
      match: _this.computeMatch(_this.props, _this.context.router)
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  Route.prototype.getChildContext = function getChildContext() {
    return {
      router: _extends({}, this.context.router, {
        route: {
          location: this.props.location || this.context.router.route.location,
          match: this.state.match
        }
      })
    };
  };

  Route.prototype.computeMatch = function computeMatch(_ref, router) {
    var computedMatch = _ref.computedMatch,
        location = _ref.location,
        path = _ref.path,
        strict = _ref.strict,
        exact = _ref.exact,
        sensitive = _ref.sensitive;

    if (computedMatch) return computedMatch; // <Switch> already computed the match for us

    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(router, "You should not use <Route> or withRouter() outside a <Router>");

    var route = router.route;

    var pathname = (location || route.location).pathname;

    return Object(__WEBPACK_IMPORTED_MODULE_4__matchPath__["a" /* default */])(pathname, { path: path, strict: strict, exact: exact, sensitive: sensitive }, route.match);
  };

  Route.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(this.props.component && this.props.render), "You should not use <Route component> and <Route render> in the same route; <Route render> will be ignored");

    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(this.props.component && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route component> and <Route children> in the same route; <Route children> will be ignored");

    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(this.props.render && this.props.children && !isEmptyChildren(this.props.children)), "You should not use <Route render> and <Route children> in the same route; <Route children> will be ignored");
  };

  Route.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps, nextContext) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(nextProps.location && !this.props.location), '<Route> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!(!nextProps.location && this.props.location), '<Route> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');

    this.setState({
      match: this.computeMatch(nextProps, nextContext.router)
    });
  };

  Route.prototype.render = function render() {
    var match = this.state.match;
    var _props = this.props,
        children = _props.children,
        component = _props.component,
        render = _props.render;
    var _context$router = this.context.router,
        history = _context$router.history,
        route = _context$router.route,
        staticContext = _context$router.staticContext;

    var location = this.props.location || route.location;
    var props = { match: match, location: location, history: history, staticContext: staticContext };

    if (component) return match ? __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(component, props) : null;

    if (render) return match ? render(props) : null;

    if (typeof children === "function") return children(props);

    if (children && !isEmptyChildren(children)) return __WEBPACK_IMPORTED_MODULE_2_react___default.a.Children.only(children);

    return null;
  };

  return Route;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);

Route.propTypes = {
  computedMatch: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object, // private, from <Switch>
  path: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string,
  exact: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
  strict: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
  sensitive: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.bool,
  component: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
  render: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func,
  children: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.func, __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.node]),
  location: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
};
Route.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
    route: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
    staticContext: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object
  })
};
Route.childContextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Route);

/***/ }),
/* 44 */
/***/ (function(module, exports, __webpack_require__) {

var isarray = __webpack_require__(102)

/**
 * Expose `pathToRegexp`.
 */
module.exports = pathToRegexp
module.exports.parse = parse
module.exports.compile = compile
module.exports.tokensToFunction = tokensToFunction
module.exports.tokensToRegExp = tokensToRegExp

/**
 * The main path matching regexp utility.
 *
 * @type {RegExp}
 */
var PATH_REGEXP = new RegExp([
  // Match escaped characters that would otherwise appear in future matches.
  // This allows the user to escape special characters that won't transform.
  '(\\\\.)',
  // Match Express-style parameters and un-named parameters with a prefix
  // and optional suffixes. Matches appear as:
  //
  // "/:test(\\d+)?" => ["/", "test", "\d+", undefined, "?", undefined]
  // "/route(\\d+)"  => [undefined, undefined, undefined, "\d+", undefined, undefined]
  // "/*"            => ["/", undefined, undefined, undefined, undefined, "*"]
  '([\\/.])?(?:(?:\\:(\\w+)(?:\\(((?:\\\\.|[^\\\\()])+)\\))?|\\(((?:\\\\.|[^\\\\()])+)\\))([+*?])?|(\\*))'
].join('|'), 'g')

/**
 * Parse a string for the raw tokens.
 *
 * @param  {string}  str
 * @param  {Object=} options
 * @return {!Array}
 */
function parse (str, options) {
  var tokens = []
  var key = 0
  var index = 0
  var path = ''
  var defaultDelimiter = options && options.delimiter || '/'
  var res

  while ((res = PATH_REGEXP.exec(str)) != null) {
    var m = res[0]
    var escaped = res[1]
    var offset = res.index
    path += str.slice(index, offset)
    index = offset + m.length

    // Ignore already escaped sequences.
    if (escaped) {
      path += escaped[1]
      continue
    }

    var next = str[index]
    var prefix = res[2]
    var name = res[3]
    var capture = res[4]
    var group = res[5]
    var modifier = res[6]
    var asterisk = res[7]

    // Push the current path onto the tokens.
    if (path) {
      tokens.push(path)
      path = ''
    }

    var partial = prefix != null && next != null && next !== prefix
    var repeat = modifier === '+' || modifier === '*'
    var optional = modifier === '?' || modifier === '*'
    var delimiter = res[2] || defaultDelimiter
    var pattern = capture || group

    tokens.push({
      name: name || key++,
      prefix: prefix || '',
      delimiter: delimiter,
      optional: optional,
      repeat: repeat,
      partial: partial,
      asterisk: !!asterisk,
      pattern: pattern ? escapeGroup(pattern) : (asterisk ? '.*' : '[^' + escapeString(delimiter) + ']+?')
    })
  }

  // Match any characters still remaining.
  if (index < str.length) {
    path += str.substr(index)
  }

  // If the path exists, push it onto the end.
  if (path) {
    tokens.push(path)
  }

  return tokens
}

/**
 * Compile a string to a template function for the path.
 *
 * @param  {string}             str
 * @param  {Object=}            options
 * @return {!function(Object=, Object=)}
 */
function compile (str, options) {
  return tokensToFunction(parse(str, options), options)
}

/**
 * Prettier encoding of URI path segments.
 *
 * @param  {string}
 * @return {string}
 */
function encodeURIComponentPretty (str) {
  return encodeURI(str).replace(/[\/?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Encode the asterisk parameter. Similar to `pretty`, but allows slashes.
 *
 * @param  {string}
 * @return {string}
 */
function encodeAsterisk (str) {
  return encodeURI(str).replace(/[?#]/g, function (c) {
    return '%' + c.charCodeAt(0).toString(16).toUpperCase()
  })
}

/**
 * Expose a method for transforming tokens into the path function.
 */
function tokensToFunction (tokens, options) {
  // Compile all the tokens into regexps.
  var matches = new Array(tokens.length)

  // Compile all the patterns before compilation.
  for (var i = 0; i < tokens.length; i++) {
    if (typeof tokens[i] === 'object') {
      matches[i] = new RegExp('^(?:' + tokens[i].pattern + ')$', flags(options))
    }
  }

  return function (obj, opts) {
    var path = ''
    var data = obj || {}
    var options = opts || {}
    var encode = options.pretty ? encodeURIComponentPretty : encodeURIComponent

    for (var i = 0; i < tokens.length; i++) {
      var token = tokens[i]

      if (typeof token === 'string') {
        path += token

        continue
      }

      var value = data[token.name]
      var segment

      if (value == null) {
        if (token.optional) {
          // Prepend partial segment prefixes.
          if (token.partial) {
            path += token.prefix
          }

          continue
        } else {
          throw new TypeError('Expected "' + token.name + '" to be defined')
        }
      }

      if (isarray(value)) {
        if (!token.repeat) {
          throw new TypeError('Expected "' + token.name + '" to not repeat, but received `' + JSON.stringify(value) + '`')
        }

        if (value.length === 0) {
          if (token.optional) {
            continue
          } else {
            throw new TypeError('Expected "' + token.name + '" to not be empty')
          }
        }

        for (var j = 0; j < value.length; j++) {
          segment = encode(value[j])

          if (!matches[i].test(segment)) {
            throw new TypeError('Expected all "' + token.name + '" to match "' + token.pattern + '", but received `' + JSON.stringify(segment) + '`')
          }

          path += (j === 0 ? token.prefix : token.delimiter) + segment
        }

        continue
      }

      segment = token.asterisk ? encodeAsterisk(value) : encode(value)

      if (!matches[i].test(segment)) {
        throw new TypeError('Expected "' + token.name + '" to match "' + token.pattern + '", but received "' + segment + '"')
      }

      path += token.prefix + segment
    }

    return path
  }
}

/**
 * Escape a regular expression string.
 *
 * @param  {string} str
 * @return {string}
 */
function escapeString (str) {
  return str.replace(/([.+*?=^!:${}()[\]|\/\\])/g, '\\$1')
}

/**
 * Escape the capturing group by escaping special characters and meaning.
 *
 * @param  {string} group
 * @return {string}
 */
function escapeGroup (group) {
  return group.replace(/([=!:$\/()])/g, '\\$1')
}

/**
 * Attach the keys as a property of the regexp.
 *
 * @param  {!RegExp} re
 * @param  {Array}   keys
 * @return {!RegExp}
 */
function attachKeys (re, keys) {
  re.keys = keys
  return re
}

/**
 * Get the flags for a regexp from the options.
 *
 * @param  {Object} options
 * @return {string}
 */
function flags (options) {
  return options && options.sensitive ? '' : 'i'
}

/**
 * Pull out keys from a regexp.
 *
 * @param  {!RegExp} path
 * @param  {!Array}  keys
 * @return {!RegExp}
 */
function regexpToRegexp (path, keys) {
  // Use a negative lookahead to match only capturing groups.
  var groups = path.source.match(/\((?!\?)/g)

  if (groups) {
    for (var i = 0; i < groups.length; i++) {
      keys.push({
        name: i,
        prefix: null,
        delimiter: null,
        optional: false,
        repeat: false,
        partial: false,
        asterisk: false,
        pattern: null
      })
    }
  }

  return attachKeys(path, keys)
}

/**
 * Transform an array into a regexp.
 *
 * @param  {!Array}  path
 * @param  {Array}   keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function arrayToRegexp (path, keys, options) {
  var parts = []

  for (var i = 0; i < path.length; i++) {
    parts.push(pathToRegexp(path[i], keys, options).source)
  }

  var regexp = new RegExp('(?:' + parts.join('|') + ')', flags(options))

  return attachKeys(regexp, keys)
}

/**
 * Create a path regexp from string input.
 *
 * @param  {string}  path
 * @param  {!Array}  keys
 * @param  {!Object} options
 * @return {!RegExp}
 */
function stringToRegexp (path, keys, options) {
  return tokensToRegExp(parse(path, options), keys, options)
}

/**
 * Expose a function for taking tokens and returning a RegExp.
 *
 * @param  {!Array}          tokens
 * @param  {(Array|Object)=} keys
 * @param  {Object=}         options
 * @return {!RegExp}
 */
function tokensToRegExp (tokens, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  var strict = options.strict
  var end = options.end !== false
  var route = ''

  // Iterate over the tokens and create our regexp string.
  for (var i = 0; i < tokens.length; i++) {
    var token = tokens[i]

    if (typeof token === 'string') {
      route += escapeString(token)
    } else {
      var prefix = escapeString(token.prefix)
      var capture = '(?:' + token.pattern + ')'

      keys.push(token)

      if (token.repeat) {
        capture += '(?:' + prefix + capture + ')*'
      }

      if (token.optional) {
        if (!token.partial) {
          capture = '(?:' + prefix + '(' + capture + '))?'
        } else {
          capture = prefix + '(' + capture + ')?'
        }
      } else {
        capture = prefix + '(' + capture + ')'
      }

      route += capture
    }
  }

  var delimiter = escapeString(options.delimiter || '/')
  var endsWithDelimiter = route.slice(-delimiter.length) === delimiter

  // In non-strict mode we allow a slash at the end of match. If the path to
  // match already ends with a slash, we remove it for consistency. The slash
  // is valid at the end of a path match, not in the middle. This is important
  // in non-ending mode, where "/test/" shouldn't match "/test//route".
  if (!strict) {
    route = (endsWithDelimiter ? route.slice(0, -delimiter.length) : route) + '(?:' + delimiter + '(?=$))?'
  }

  if (end) {
    route += '$'
  } else {
    // In non-ending mode, we need the capturing groups to match as much as
    // possible by using a positive lookahead to the end or next path segment.
    route += strict && endsWithDelimiter ? '' : '(?=' + delimiter + '|$)'
  }

  return attachKeys(new RegExp('^' + route, flags(options)), keys)
}

/**
 * Normalize the given path string, returning a regular expression.
 *
 * An empty array can be passed in for the keys, which will hold the
 * placeholder key descriptions. For example, using `/user/:id`, `keys` will
 * contain `[{ name: 'id', delimiter: '/', optional: false, repeat: false }]`.
 *
 * @param  {(string|RegExp|Array)} path
 * @param  {(Array|Object)=}       keys
 * @param  {Object=}               options
 * @return {!RegExp}
 */
function pathToRegexp (path, keys, options) {
  if (!isarray(keys)) {
    options = /** @type {!Object} */ (keys || options)
    keys = []
  }

  options = options || {}

  if (path instanceof RegExp) {
    return regexpToRegexp(path, /** @type {!Array} */ (keys))
  }

  if (isarray(path)) {
    return arrayToRegexp(/** @type {!Array} */ (path), /** @type {!Array} */ (keys), options)
  }

  return stringToRegexp(/** @type {string} */ (path), /** @type {!Array} */ (keys), options)
}


/***/ }),
/* 45 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp__ = __webpack_require__(44);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_path_to_regexp__);


var patternCache = {};
var cacheLimit = 10000;
var cacheCount = 0;

var compileGenerator = function compileGenerator(pattern) {
  var cacheKey = pattern;
  var cache = patternCache[cacheKey] || (patternCache[cacheKey] = {});

  if (cache[pattern]) return cache[pattern];

  var compiledGenerator = __WEBPACK_IMPORTED_MODULE_0_path_to_regexp___default.a.compile(pattern);

  if (cacheCount < cacheLimit) {
    cache[pattern] = compiledGenerator;
    cacheCount++;
  }

  return compiledGenerator;
};

/**
 * Public API for generating a URL pathname from a pattern and parameters.
 */
var generatePath = function generatePath() {
  var pattern = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : "/";
  var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

  if (pattern === "/") {
    return pattern;
  }
  var generator = compileGenerator(pattern);
  return generator(params, { pretty: true });
};

/* harmony default export */ __webpack_exports__["a"] = (generatePath);

/***/ }),
/* 46 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__components_Provider__ = __webpack_require__(116);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__components_connectAdvanced__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_Context__ = __webpack_require__(31);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__connect_connect__ = __webpack_require__(117);
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "Provider", function() { return __WEBPACK_IMPORTED_MODULE_0__components_Provider__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "connectAdvanced", function() { return __WEBPACK_IMPORTED_MODULE_1__components_connectAdvanced__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "ReactReduxContext", function() { return __WEBPACK_IMPORTED_MODULE_2__components_Context__["a"]; });
/* harmony reexport (binding) */ __webpack_require__.d(__webpack_exports__, "connect", function() { return __WEBPACK_IMPORTED_MODULE_3__connect_connect__["a"]; });






/***/ }),
/* 47 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _setPrototypeOf;
function _setPrototypeOf(o, p) {
  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {
    o.__proto__ = p;
    return o;
  };

  return _setPrototypeOf(o, p);
}

/***/ }),
/* 48 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (immutable) */ __webpack_exports__["a"] = connectAdvanced;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_inheritsLoose__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_extends__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_hoist_non_react_statics__ = __webpack_require__(66);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_hoist_non_react_statics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_4_hoist_non_react_statics__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_5_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_6_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react_is__ = __webpack_require__(19);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7_react_is___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_7_react_is__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__Context__ = __webpack_require__(31);










var stringifyComponent = function stringifyComponent(Comp) {
  try {
    return JSON.stringify(Comp);
  } catch (err) {
    return String(Comp);
  }
};

function connectAdvanced(
/*
  selectorFactory is a func that is responsible for returning the selector function used to
  compute new props from state, props, and dispatch. For example:
     export default connectAdvanced((dispatch, options) => (state, props) => ({
      thing: state.things[props.thingId],
      saveThing: fields => dispatch(actionCreators.saveThing(props.thingId, fields)),
    }))(YourComponent)
   Access to dispatch is provided to the factory so selectorFactories can bind actionCreators
  outside of their selector as an optimization. Options passed to connectAdvanced are passed to
  the selectorFactory, along with displayName and WrappedComponent, as the second argument.
   Note that selectorFactory is responsible for all caching/memoization of inbound and outbound
  props. Do not use connectAdvanced directly without memoizing results between calls to your
  selector, otherwise the Connect component will re-render on every state or props change.
*/
selectorFactory, // options object:
_ref) {
  if (_ref === void 0) {
    _ref = {};
  }

  var _ref2 = _ref,
      _ref2$getDisplayName = _ref2.getDisplayName,
      getDisplayName = _ref2$getDisplayName === void 0 ? function (name) {
    return "ConnectAdvanced(" + name + ")";
  } : _ref2$getDisplayName,
      _ref2$methodName = _ref2.methodName,
      methodName = _ref2$methodName === void 0 ? 'connectAdvanced' : _ref2$methodName,
      _ref2$renderCountProp = _ref2.renderCountProp,
      renderCountProp = _ref2$renderCountProp === void 0 ? undefined : _ref2$renderCountProp,
      _ref2$shouldHandleSta = _ref2.shouldHandleStateChanges,
      shouldHandleStateChanges = _ref2$shouldHandleSta === void 0 ? true : _ref2$shouldHandleSta,
      _ref2$storeKey = _ref2.storeKey,
      storeKey = _ref2$storeKey === void 0 ? 'store' : _ref2$storeKey,
      _ref2$withRef = _ref2.withRef,
      withRef = _ref2$withRef === void 0 ? false : _ref2$withRef,
      _ref2$forwardRef = _ref2.forwardRef,
      forwardRef = _ref2$forwardRef === void 0 ? false : _ref2$forwardRef,
      _ref2$context = _ref2.context,
      context = _ref2$context === void 0 ? __WEBPACK_IMPORTED_MODULE_8__Context__["a" /* ReactReduxContext */] : _ref2$context,
      connectOptions = Object(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__["a" /* default */])(_ref2, ["getDisplayName", "methodName", "renderCountProp", "shouldHandleStateChanges", "storeKey", "withRef", "forwardRef", "context"]);

  __WEBPACK_IMPORTED_MODULE_5_invariant___default()(renderCountProp === undefined, "renderCountProp is removed. render counting is built into the latest React dev tools profiling extension");
  __WEBPACK_IMPORTED_MODULE_5_invariant___default()(!withRef, 'withRef is removed. To access the wrapped instance, use a ref on the connected component');
  var customStoreWarningMessage = 'To use a custom Redux store for specific components,  create a custom React context with ' + "React.createContext(), and pass the context object to React Redux's Provider and specific components" + ' like:  <Provider context={MyContext}><ConnectedComponent context={MyContext} /></Provider>. ' + 'You may also pass a {context : MyContext} option to connect';
  __WEBPACK_IMPORTED_MODULE_5_invariant___default()(storeKey === 'store', 'storeKey has been removed and does not do anything. ' + customStoreWarningMessage);
  var Context = context;
  return function wrapWithConnect(WrappedComponent) {
    if (process.env.NODE_ENV !== 'production') {
      __WEBPACK_IMPORTED_MODULE_5_invariant___default()(Object(__WEBPACK_IMPORTED_MODULE_7_react_is__["isValidElementType"])(WrappedComponent), "You must pass a component to the function returned by " + (methodName + ". Instead received " + stringifyComponent(WrappedComponent)));
    }

    var wrappedComponentName = WrappedComponent.displayName || WrappedComponent.name || 'Component';
    var displayName = getDisplayName(wrappedComponentName);

    var selectorFactoryOptions = Object(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_extends__["a" /* default */])({}, connectOptions, {
      getDisplayName: getDisplayName,
      methodName: methodName,
      renderCountProp: renderCountProp,
      shouldHandleStateChanges: shouldHandleStateChanges,
      storeKey: storeKey,
      displayName: displayName,
      wrappedComponentName: wrappedComponentName,
      WrappedComponent: WrappedComponent
    });

    var pure = connectOptions.pure;
    var OuterBaseComponent = __WEBPACK_IMPORTED_MODULE_6_react__["Component"];

    if (pure) {
      OuterBaseComponent = __WEBPACK_IMPORTED_MODULE_6_react__["PureComponent"];
    }

    function makeDerivedPropsSelector() {
      var lastProps;
      var lastState;
      var lastDerivedProps;
      var lastStore;
      var lastSelectorFactoryOptions;
      var sourceSelector;
      return function selectDerivedProps(state, props, store, selectorFactoryOptions) {
        if (pure && lastProps === props && lastState === state) {
          return lastDerivedProps;
        }

        if (store !== lastStore || lastSelectorFactoryOptions !== selectorFactoryOptions) {
          lastStore = store;
          lastSelectorFactoryOptions = selectorFactoryOptions;
          sourceSelector = selectorFactory(store.dispatch, selectorFactoryOptions);
        }

        lastProps = props;
        lastState = state;
        var nextProps = sourceSelector(state, props);
        lastDerivedProps = nextProps;
        return lastDerivedProps;
      };
    }

    function makeChildElementSelector() {
      var lastChildProps, lastForwardRef, lastChildElement, lastComponent;
      return function selectChildElement(WrappedComponent, childProps, forwardRef) {
        if (childProps !== lastChildProps || forwardRef !== lastForwardRef || lastComponent !== WrappedComponent) {
          lastChildProps = childProps;
          lastForwardRef = forwardRef;
          lastComponent = WrappedComponent;
          lastChildElement = __WEBPACK_IMPORTED_MODULE_6_react___default.a.createElement(WrappedComponent, Object(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_extends__["a" /* default */])({}, childProps, {
            ref: forwardRef
          }));
        }

        return lastChildElement;
      };
    }

    var Connect =
    /*#__PURE__*/
    function (_OuterBaseComponent) {
      Object(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_inheritsLoose__["a" /* default */])(Connect, _OuterBaseComponent);

      function Connect(props) {
        var _this;

        _this = _OuterBaseComponent.call(this, props) || this;
        __WEBPACK_IMPORTED_MODULE_5_invariant___default()(forwardRef ? !props.wrapperProps[storeKey] : !props[storeKey], 'Passing redux store in props has been removed and does not do anything. ' + customStoreWarningMessage);
        _this.selectDerivedProps = makeDerivedPropsSelector();
        _this.selectChildElement = makeChildElementSelector();
        _this.indirectRenderWrappedComponent = _this.indirectRenderWrappedComponent.bind(Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this));
        return _this;
      }

      var _proto = Connect.prototype;

      _proto.indirectRenderWrappedComponent = function indirectRenderWrappedComponent(value) {
        // calling renderWrappedComponent on prototype from indirectRenderWrappedComponent bound to `this`
        return this.renderWrappedComponent(value);
      };

      _proto.renderWrappedComponent = function renderWrappedComponent(value) {
        __WEBPACK_IMPORTED_MODULE_5_invariant___default()(value, "Could not find \"store\" in the context of " + ("\"" + displayName + "\". Either wrap the root component in a <Provider>, ") + "or pass a custom React context provider to <Provider> and the corresponding " + ("React context consumer to " + displayName + " in connect options."));
        var storeState = value.storeState,
            store = value.store;
        var wrapperProps = this.props;
        var forwardedRef;

        if (forwardRef) {
          wrapperProps = this.props.wrapperProps;
          forwardedRef = this.props.forwardedRef;
        }

        var derivedProps = this.selectDerivedProps(storeState, wrapperProps, store, selectorFactoryOptions);
        return this.selectChildElement(WrappedComponent, derivedProps, forwardedRef);
      };

      _proto.render = function render() {
        var ContextToUse = this.props.context && this.props.context.Consumer && Object(__WEBPACK_IMPORTED_MODULE_7_react_is__["isContextConsumer"])(__WEBPACK_IMPORTED_MODULE_6_react___default.a.createElement(this.props.context.Consumer, null)) ? this.props.context : Context;
        return __WEBPACK_IMPORTED_MODULE_6_react___default.a.createElement(ContextToUse.Consumer, null, this.indirectRenderWrappedComponent);
      };

      return Connect;
    }(OuterBaseComponent);

    Connect.WrappedComponent = WrappedComponent;
    Connect.displayName = displayName;

    if (forwardRef) {
      var forwarded = __WEBPACK_IMPORTED_MODULE_6_react___default.a.forwardRef(function forwardConnectRef(props, ref) {
        return __WEBPACK_IMPORTED_MODULE_6_react___default.a.createElement(Connect, {
          wrapperProps: props,
          forwardedRef: ref
        });
      });
      forwarded.displayName = displayName;
      forwarded.WrappedComponent = WrappedComponent;
      return __WEBPACK_IMPORTED_MODULE_4_hoist_non_react_statics___default()(forwarded, WrappedComponent);
    }

    return __WEBPACK_IMPORTED_MODULE_4_hoist_non_react_statics___default()(Connect, WrappedComponent);
  };
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 49 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (immutable) */ __webpack_exports__["a"] = wrapMapToPropsConstant;
/* unused harmony export getDependsOnOwnProps */
/* harmony export (immutable) */ __webpack_exports__["b"] = wrapMapToPropsFunc;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__ = __webpack_require__(50);

function wrapMapToPropsConstant(getConstant) {
  return function initConstantSelector(dispatch, options) {
    var constant = getConstant(dispatch, options);

    function constantSelector() {
      return constant;
    }

    constantSelector.dependsOnOwnProps = false;
    return constantSelector;
  };
} // dependsOnOwnProps is used by createMapToPropsProxy to determine whether to pass props as args
// to the mapToProps function being wrapped. It is also used by makePurePropsSelector to determine
// whether mapToProps needs to be invoked when props have changed.
//
// A length of one signals that mapToProps does not depend on props from the parent component.
// A length of zero is assumed to mean mapToProps is getting args via arguments or ...args and
// therefore not reporting its length accurately..

function getDependsOnOwnProps(mapToProps) {
  return mapToProps.dependsOnOwnProps !== null && mapToProps.dependsOnOwnProps !== undefined ? Boolean(mapToProps.dependsOnOwnProps) : mapToProps.length !== 1;
} // Used by whenMapStateToPropsIsFunction and whenMapDispatchToPropsIsFunction,
// this function wraps mapToProps in a proxy function which does several things:
//
//  * Detects whether the mapToProps function being called depends on props, which
//    is used by selectorFactory to decide if it should reinvoke on props changes.
//
//  * On first call, handles mapToProps if returns another function, and treats that
//    new function as the true mapToProps for subsequent calls.
//
//  * On first call, verifies the first result is a plain object, in order to warn
//    the developer that their mapToProps function is not returning a valid result.
//

function wrapMapToPropsFunc(mapToProps, methodName) {
  return function initProxySelector(dispatch, _ref) {
    var displayName = _ref.displayName;

    var proxy = function mapToPropsProxy(stateOrDispatch, ownProps) {
      return proxy.dependsOnOwnProps ? proxy.mapToProps(stateOrDispatch, ownProps) : proxy.mapToProps(stateOrDispatch);
    }; // allow detectFactoryAndVerify to get ownProps


    proxy.dependsOnOwnProps = true;

    proxy.mapToProps = function detectFactoryAndVerify(stateOrDispatch, ownProps) {
      proxy.mapToProps = mapToProps;
      proxy.dependsOnOwnProps = getDependsOnOwnProps(mapToProps);
      var props = proxy(stateOrDispatch, ownProps);

      if (typeof props === 'function') {
        proxy.mapToProps = props;
        proxy.dependsOnOwnProps = getDependsOnOwnProps(props);
        props = proxy(stateOrDispatch, ownProps);
      }

      if (process.env.NODE_ENV !== 'production') Object(__WEBPACK_IMPORTED_MODULE_0__utils_verifyPlainObject__["a" /* default */])(props, displayName, methodName);
      return props;
    };

    return proxy;
  };
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 50 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = verifyPlainObject;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__isPlainObject__ = __webpack_require__(121);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__warning__ = __webpack_require__(51);


function verifyPlainObject(value, displayName, methodName) {
  if (!Object(__WEBPACK_IMPORTED_MODULE_0__isPlainObject__["a" /* default */])(value)) {
    Object(__WEBPACK_IMPORTED_MODULE_1__warning__["a" /* default */])(methodName + "() in " + displayName + " must return a plain object. Instead received " + value + ".");
  }
}

/***/ }),
/* 51 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = warning;
/**
 * Prints a warning in the console if it exists.
 *
 * @param {String} message The warning message.
 * @returns {void}
 */
function warning(message) {
  /* eslint-disable no-console */
  if (typeof console !== 'undefined' && typeof console.error === 'function') {
    console.error(message);
  }
  /* eslint-enable no-console */


  try {
    // This error was thrown as a convenience so that if you enable
    // "break on all exceptions" in your console,
    // it would pause the execution at this line.
    throw new Error(message);
    /* eslint-disable no-empty */
  } catch (e) {}
  /* eslint-enable no-empty */

}

/***/ }),
/* 52 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _unsupportedIterableToArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__arrayLikeToArray_js__ = __webpack_require__(53);

function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return Object(__WEBPACK_IMPORTED_MODULE_0__arrayLikeToArray_js__["a" /* default */])(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return Object(__WEBPACK_IMPORTED_MODULE_0__arrayLikeToArray_js__["a" /* default */])(o, minLen);
}

/***/ }),
/* 53 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _arrayLikeToArray;
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;

  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }

  return arr2;
}

/***/ }),
/* 54 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _redux = __webpack_require__(15);

var _ajaxStatusReducer = __webpack_require__(134);

var _ajaxStatusReducer2 = _interopRequireDefault(_ajaxStatusReducer);

var _documentReducer = __webpack_require__(135);

var _documentReducer2 = _interopRequireDefault(_documentReducer);

var _chooseTemplateReducer = __webpack_require__(142);

var _chooseTemplateReducer2 = _interopRequireDefault(_chooseTemplateReducer);

var _userReducer = __webpack_require__(143);

var _userReducer2 = _interopRequireDefault(_userReducer);

var _commonReducer = __webpack_require__(144);

var _commonReducer2 = _interopRequireDefault(_commonReducer);

var _onboardingReducer = __webpack_require__(145);

var _onboardingReducer2 = _interopRequireDefault(_onboardingReducer);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var rootReducer = (0, _redux.combineReducers)({
  Document: _documentReducer2.default,
  AjaxStatus: _ajaxStatusReducer2.default,
  ChooseTemplate: _chooseTemplateReducer2.default,
  User: _userReducer2.default,
  Common: _commonReducer2.default,
  Onboarding: _onboardingReducer2.default
});
exports.default = rootReducer;

/***/ }),
/* 55 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.UploadPhotoToAzure = undefined;
exports.loadDocument = loadDocument;
exports.UpdateDocument = UpdateDocument;
exports.updateSkinCD = updateSkinCD;
exports.updateDocumentTemplate = updateDocumentTemplate;
exports.RemovePara = RemovePara;
exports.RemoveSection = RemoveSection;
exports.UpdateDocumentForDispatch = UpdateDocumentForDispatch;
exports.CreateInitialDocument = CreateInitialDocument;
exports.renameDocument = renameDocument;
exports.RenameDocument = RenameDocument;
exports.GetDocument = GetDocument;
exports.GetAllDocuments = GetAllDocuments;
exports.GetLightWeightUserDocuments = GetLightWeightUserDocuments;
exports.updateDocStyleSuccess = updateDocStyleSuccess;
exports.UpdateSectionsData = UpdateSectionsData;
exports.setSelectedSectionIndex = setSelectedSectionIndex;
exports.setMaxSectionCount = setMaxSectionCount;
exports.reorderSection = reorderSection;
exports.reorderPara = reorderPara;
exports.resetStyles = resetStyles;
exports.hoverDocStyles = hoverDocStyles;
exports.HoverDocumentSkin = HoverDocumentSkin;
exports.dispatchDocument = dispatchDocument;
exports.ApplyTemplateToDocument = ApplyTemplateToDocument;
exports.updateDocument = updateDocument;
exports.DownloadLetter = DownloadLetter;
exports.PreviewDocument = PreviewDocument;
exports.RegisterGuestUserSuccess = RegisterGuestUserSuccess;
exports.UpdateDocUserSuccess = UpdateDocUserSuccess;
exports.UpdateUserUID = UpdateUserUID;
exports.UpdateUser = UpdateUser;
exports.UpdateUserFromClaims = UpdateUserFromClaims;
exports.loadNameSectionPara = loadNameSectionPara;
exports.loadContactSectionPara = loadContactSectionPara;
exports.UpdateUserSuccess = UpdateUserSuccess;
exports.HideAlltipsForSession = HideAlltipsForSession;
exports.switchUserDocument = switchUserDocument;
exports.DeleteDocument = DeleteDocument;
exports.emailDocument = emailDocument;
exports.ResetDocument = ResetDocument;
exports.GetPaginated = GetPaginated;
exports.CreateLetterFromResume = CreateLetterFromResume;
exports.CreateInitialDocumentWithFile = CreateInitialDocumentWithFile;

var _actionTypes = __webpack_require__(4);

var actionTypes = _interopRequireWildcard(_actionTypes);

var _queueHandler2 = __webpack_require__(33);

var _queueHandler3 = _interopRequireDefault(_queueHandler2);

var _viewmodel = __webpack_require__(14);

var _ajaxhelper = __webpack_require__(17);

var _UserActions = __webpack_require__(34);

var _typeCodes = __webpack_require__(6);

var typeCd = _interopRequireWildcard(_typeCodes);

var _CommonUtils = __webpack_require__(8);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

var _queueHandler = new _queueHandler3.default();

function loadDocument(data) {
  return { type: actionTypes.LOAD_DOCUMENT, data: data };
}
function UpdateDocument(data) {
  return { type: actionTypes.DOCUMENT_CREATE_ID, data: data };
}

function updateSkinCD(data) {
  return { type: actionTypes.UPDATE_SKIN, data: data };
}
function updateDocumentTemplate(data) {
  return { type: actionTypes.UPDATE_TEMPLATEID, data: data };
}

function AddPara(paragraph) {
  return { type: actionTypes.ADD_PARAGRAPH, paragraph: paragraph };
}
function UpdatePara(paragraph) {
  return { type: actionTypes.UPDATE_PARAGRAPH, paragraph: paragraph };
}
function AddDocPreference(preferences) {
  return { type: actionTypes.UPDATE_DOC_PREFERENCE, preferences: preferences };
}
function UpdateDocPreference(preferences) {
  return { type: actionTypes.UPDATE_DOC_PREFERENCE, preferences: preferences };
}

function RemovePara(data) {
  return { type: actionTypes.REMOVE_PARAGRAPH, data: data };
}
function RemoveSection(data) {
  return { type: actionTypes.REMOVE_SECTION, data: data };
}

function ReOrderSection(sections) {
  return { type: actionTypes.REORDER_SECTIONS, sections: sections };
}
function ReOrderPara(paragraphs) {
  return { type: actionTypes.REORDER_PARA, paragraphs: paragraphs };
}
function UpdateDocumentForDispatch(updatedDocument) {
  return function (dispatch) {
    dispatch(UpdateDocument({ document: updatedDocument }));
  };
}
function CreateInitialDocument(_ref, isNoDispatch) {
  var userId = _ref.userId,
      document = _ref.document,
      portalId = _ref.portalId,
      templateId = _ref.templateId,
      productcd = _ref.productcd,
      preferences = _ref.preferences,
      skinCD = _ref.skinCD;

  window.RDL.Timer.init();
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.createDocumentV2(userId, document, skinCD, portalId, templateId, RDL.DocumentTypeCD, window.RDL.currentPortalDetails.culture, window.RDL.Localization.lbl_letterText.trim(), window.RDL.PortalSettings.ConfigureProductCd, "", preferences, "", false, window.RDL.isChangeSectionNames, undefined, undefined, undefined, true).then(function (resp) {
      if (resp && (0, _CommonUtils.isPurgeUserScenario)(resp)) {
        return (0, _UserActions.handlePurgedUserScenario)(dispatch).then(function () {
          return typeCd.errorCodes.purgedUserCase;
        });
      }

      if (window.RDL.isBuilderBasedFlowLocalized) {
        resp = (0, _CommonUtils.checkForNameAndContactSection)(resp, document);
      }

      var updatedDocument = resp;
      !isNoDispatch && dispatch(UpdateDocumentForDispatch(updatedDocument));
      return updatedDocument;
    }).catch(function (err) {

      if (window.RDL.dummyDocument) {
        var doc = window.RDL.dummyDocument;
        dispatch(UpdateDocumentForDispatch(doc));
        return doc;
      } else {
        _queueHandler.enqueue('Q_CreateInitialDocument', { userId: userId, document: document, portalId: portalId,
          templateId: templateId, productcd: productcd });
        return Promise.reject("Q_CreateInitialDocument");
      }
    });
  };
}

function renameDocument(userId, documentId, newDocName) {
  window.RDL.Timer.reset();
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.renameDocument(userId, documentId, newDocName).then(function (resp) {
      if (resp == window.RDL.Localization.lbl_DocumentRenamed) {
        dispatch(RenameDocument(newDocName));
        return true;
      }
    }).catch(function (error) {
      return false;
    });
  };
}

function RenameDocument(newDocName) {
  return { type: actionTypes.RENAME_DOCUMENT, newDocName: newDocName };
}

function GetDocument(userId, documentId, isNoDispatch) {
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.getDocumentV2(userId, documentId).then(function (updatedDocument) {
      if (updatedDocument && updatedDocument.id) {
        !isNoDispatch && dispatch(UpdateDocumentForDispatch(updatedDocument));
        return updatedDocument;
      } else {
        throw false;
      }
    }).catch(function (error) {
      return false;
    });
  };
}
function GetAllDocuments(userId, portalId) {
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.getUserDocuments(userId, portalId).then(function (Documents) {
      return Documents;
    }).catch(function (error) {
      throw error;
    });
  };
}
function GetLightWeightUserDocuments(userId, portalId) {
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.getLightWeightUserDocuments(userId, portalId, RDL.DocumentTypeCD).then(function (Documents) {
      return Documents;
    }).catch(function (error) {
      throw error;
    });
  };
}

function updateDocStyleSuccess(field) {
  return {
    type: actionTypes.UPDATE_DOC_STYLES,
    field: field
  };
}

function UpdateSectionsData(data) {
  return { type: actionTypes.UPDATE_SECTIONS, data: data };
}

function setSelectedSectionIndex(data) {
  return {
    type: actionTypes.SET_SELECTED_SECTION_INDEX,
    data: data
  };
}

function setMaxSectionCount(data) {
  return {
    type: actionTypes.SET_MAX_SECTION_COUNT,
    data: data
  };
}

function reorderSection(_ref2) {
  var userId = _ref2.userId,
      documentId = _ref2.documentId,
      sections = _ref2.sections;

  window.RDL.Timer.reset();
  return function (dispatch) {
    dispatch(ReOrderSection(sections));
    var sectionIndexes = sections.map(function (section) {
      return { key: section.id, value: section.index };
    });
    return _ajaxhelper.DocumentAjaxHelper.reOrderSection(userId, documentId, sectionIndexes).catch(function (err) {
      _queueHandler.enqueue('Q_reorderSection', { userId: userId, documentId: documentId, sections: sections });
      return Promise.reject("Q_reorderSection");
    });
  };
}

function reorderPara(_ref3) {
  var userId = _ref3.userId,
      documentId = _ref3.documentId,
      sectionId = _ref3.sectionId,
      paragraphs = _ref3.paragraphs;

  window.RDL.Timer.reset();
  return function (dispatch) {
    dispatch(ReOrderPara(paragraphs));
    var paragraphIndexes = paragraphs.map(function (paragraph) {
      return { key: paragraph.id, value: paragraph.index };
    });
    return _ajaxhelper.DocumentAjaxHelper.reOrderParagraph(userId, documentId, sectionId, paragraphIndexes).catch(function (err) {
      _queueHandler.enqueue("Q_reorderPara", { userId: userId, documentId: documentId, sectionId: sectionId, paragraphs: paragraphs });
      return Promise.reject("Q_reorderPara");
    });
  };
}

function resetStyles(userId, documentId) {
  window.RDL.Timer.reset();
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.resetStyles(userId, documentId).then(function (apiResponse) {
      return _ajaxhelper.DocumentAjaxHelper.getDocumentV2(userId, documentId).then(function (updatedDocument) {
        dispatch(updateDocStyleSuccess(updatedDocument.docStyles));
        return updatedDocument;
      });
    }).catch(function (error) {});
  };
}

function hoverDocStyles(styles) {
  return function (dispatch) {
    dispatch(updateDocStyleSuccess(styles));
  };
}

function HoverDocumentSkin(skinCd) {
  return function (dispatch) {
    dispatch(updateSkinCD({ skinCd: skinCd }));
  };
}

function dispatchDocument(documentObj) {
  return function (dispatch) {
    dispatch(UpdateDocumentForDispatch(documentObj));
    return documentObj;
  };
}

function ApplyTemplateToDocument(userUid, documentId, templateId, isNoDispatch) {
  window.RDL.Timer.reset();
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.updateDocTemplate(userUid, documentId, templateId, RDL.portalIDforUpdateTemplate).then(function (updatedDocument) {
      !isNoDispatch && dispatch(UpdateDocumentForDispatch(updatedDocument));
      dispatch(updateDocumentTemplate({ templateId: templateId }));
      return updatedDocument;
    });
  };
}

function updateDocument(userId, document, fromEB, isNoDispatch) {
  return function (dispatch) {
    !isNoDispatch && dispatch(UpdateDocumentForDispatch(document));
    return _ajaxhelper.DocumentAjaxHelper.updateDocument(userId, document, fromEB).then(function (updatedDocument) {
      return updatedDocument;
    }).catch(function (err) {
      return null;
    });
  };
}

function DownloadLetter(userId, documentId, portalId, fileFormatType, docFileType, styleSheetName, skipCacheCheck, isPrint, fileName, customApiPath, isEuropass, downloadSVG, templateName, sendDownloadEvent, isRedirect, letterType, isCopy, showEmptySections, isExtension, useV2, eventDetails, userPreferences, payperFeatureTrackParam) {
  if (!isPrint) {
    isPrint = "false";
  }
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.downloadDocument(userId, documentId, portalId, fileFormatType, docFileType, styleSheetName, skipCacheCheck, isPrint, fileName, customApiPath, isEuropass, downloadSVG, templateName, sendDownloadEvent, isRedirect, letterType, isCopy, showEmptySections, isExtension, useV2, eventDetails, userPreferences, payperFeatureTrackParam);
  };
}

function PreviewDocument(userId, documentId, dpiSize, previewfileFormatType, previewfileType, styleSheetName, previewFileTypeCd) {
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.previewDocument(userId, documentId, dpiSize, previewfileFormatType, previewfileType, styleSheetName, previewFileTypeCd);
  };
}

function RegisterGuestUserSuccess(User) {
  return { type: actionTypes.REGISTER_GUEST_USER, request: User };
}
function UpdateDocUserSuccess(User) {
  return { type: actionTypes.UPDATE_DOC_USER, request: User };
}
function UpdateUserUID(userUID) {
  return function (dispatch) {
    dispatch(RegisterGuestUserSuccess(userUID));
    dispatch(UpdateDocUserSuccess(userUID));
  };
}
function UpdateUser(user) {
  return function (dispatch) {
    dispatch(UpdateUserSuccess(user));
  };
}
function UpdateUserFromClaims(claims) {
  var user = new _viewmodel.User();
  user.UserUID = claims.user_uid;
  user.FirstName = claims.firstName;
  user.LastName = claims.lastName;
  user.EmailAddress = claims.email;
  user.PhoneNumber = claims.phoneNumber;
  user.CellNumber = claims.mobileNumber;
  user.CreatedOn = claims.createdOn;
  user.Role = claims.role;
  user.PartyID = claims.partyid;
  return function (dispatch) {
    return new Promise(function (resolve, reject) {
      resolve(dispatch(UpdateUserSuccess(user)));
    });
  };
}

function loadNameSectionPara(data) {
  return { type: actionTypes.SAVE_NAMESECTIONPARA, data: data };
}
function loadContactSectionPara(data) {
  return { type: actionTypes.SAVE_CONTACTSECTIONPARA, data: data };
}
function UpdateUserSuccess(User) {
  return { type: actionTypes.UPDATE_USER, request: User };
}

function HideAlltipsForSession(document) {
  return { type: actionTypes.HIDE_TIPS_COMPONENT, document: document };
}

function switchUserDocument(oldUserId, newuserId, documentObj) {
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.switchUserDocument(oldUserId, newuserId, documentObj.id);
  };
}

function DeleteDocument(userId, documentId) {
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.deleteDocument(userId, documentId);
  };
}
function emailDocument(_ref4) {
  var documentId = _ref4.documentId,
      letterId = _ref4.letterId,
      userId = _ref4.userId,
      portalId = _ref4.portalId,
      fileFormatType = _ref4.fileFormatType,
      toEmail = _ref4.toEmail,
      displayName = _ref4.displayName,
      subject = _ref4.subject,
      mailBody = _ref4.mailBody,
      styleSheetName = _ref4.styleSheetName,
      bccEmail = _ref4.bccEmail,
      fromEmailDomain = _ref4.fromEmailDomain,
      frmEmail = _ref4.frmEmail;

  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.emailDocumentV2({ documentId: documentId, letterId: letterId, userId: userId,
      portalId: portalId, fileFormatType: fileFormatType, toEmail: toEmail, displayName: displayName, subject: subject, mailBody: mailBody,
      styleSheetName: styleSheetName, bccEmail: bccEmail, fromEmailDomain: fromEmailDomain, frmEmail: frmEmail });
  };
}

function ResetDocument() {
  return { type: actionTypes.RESET_DOCUMENT };
}

function GetPaginated(userId, portalCD, documentType, count, pagenum, showDocFiles) {
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.getPaginated(userId, portalCD, documentType, count, pagenum, showDocFiles, RDL.currentPortalDetails.portalsListForDocuments).then(function (Documents) {
      return Documents;
    }).catch(function (error) {
      throw error;
    });
  };
}

function CreateLetterFromResume(userId, documentId) {
  return function (dispatch) {
    var templateName = window.RDL.Localization.lbl_templates_name_DEFAULT;
    var theme = window.RDL.v2Templates.find(function (x) {
      if (window.RDL.Localization[x.templateName] == templateName) return true;
    });
    return _ajaxhelper.DocumentAjaxHelper.createLetterFromResume(userId, documentId, {
      cultureCD: window.RDL.currentPortalDetails.culture,
      localizedDocText: window.RDL.Localization.lbl_letterText.trim(),
      flowName: typeCd.eventPropsValues.coverLetterV2React,
      productCD: window.RDL.PortalSettings.ConfigureProductCd,
      defaultSkinCD: window.RDL.defaultSkinCD,
      docTypeCd: window.RDL.DocumentTypeCD,
      // skinColor: ,
      defaultHighSchoolTemplateID: theme.highSchoolTemplate,
      defaultTemplateID: RDL.features.isBuilderBasedFlow ? window.RDL.defaultTemplateID : theme.highPerformanceTemplate,
      defaultCollegeTemplateID: theme.earlyCareerTemplate,
      isIntl: window.RDL.currentPortalDetails.isIntl
    }).then(function (result) {
      return result;
    }).catch(function (error) {
      throw error;
    });
  };
}

function CreateInitialDocumentWithFile(_ref5) {
  var userId = _ref5.userId,
      document = _ref5.document,
      skinCD = _ref5.skinCD,
      portalId = _ref5.portalId,
      fileExtension = _ref5.fileExtension,
      templateId = _ref5.templateId,
      cultureCd = _ref5.cultureCd,
      flowName = _ref5.flowName,
      portalCd = _ref5.portalCd,
      localizedDocumentText = _ref5.localizedDocumentText,
      isINTLDocument = _ref5.isINTLDocument,
      skinColor = _ref5.skinColor,
      uploadMethod = _ref5.uploadMethod,
      docStyles = _ref5.docStyles;

  var nonSupportedSections = [];
  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.parseDocument(userId, document, skinCD, portalId, fileExtension, templateId, cultureCd, flowName, portalCd, localizedDocumentText, isINTLDocument, skinColor, nonSupportedSections, uploadMethod, docStyles).then(function (updatedDocument) {
      return updatedDocument;
    }).catch(function (err) {
      return Promise.reject("Q_CreateInitialDocumentWithFile");
    });
  };
}

var UploadPhotoToAzure = exports.UploadPhotoToAzure = function UploadPhotoToAzure(userId, imgBase, X, Y, W, H, imgWidth, imgHeight, documentId, countryCD) {
  var photoType = arguments.length > 10 && arguments[10] !== undefined ? arguments[10] : 'photo';

  return function (dispatch) {
    return _ajaxhelper.DocumentAjaxHelper.uploadPhotoToAzure(userId, imgBase, X, Y, W, H, imgWidth, imgHeight, documentId, countryCD, photoType).then(function (fileURL) {
      return fileURL;
    }).catch(function (error) {
      return error;
    });
  };
};

/***/ }),
/* 56 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.setJobTitle = setJobTitle;
exports.ResetCommon = ResetCommon;
exports.storeSections = storeSections;
exports.setEnterBuilder = setEnterBuilder;
exports.setDocumentType = setDocumentType;
exports.setLoginViewType = setLoginViewType;
exports.cacheExamplesLocally = cacheExamplesLocally;
exports.cacheExamplesSectionWise = cacheExamplesSectionWise;
exports.getSpellCheckResults = getSpellCheckResults;
exports.getCityAutoPopulated = getCityAutoPopulated;
exports.GetSchoolsAutoPopulated = GetSchoolsAutoPopulated;
exports.getJobsAutoPopulated = getJobsAutoPopulated;
exports.getCompanyAutoPopulated = getCompanyAutoPopulated;
exports.getDegreeAutoPopulated = getDegreeAutoPopulated;
exports.getFieldOfStudyAutoPopulated = getFieldOfStudyAutoPopulated;
exports.getJobTitleSkills = getJobTitleSkills;
exports.GetEducationDegrees = GetEducationDegrees;
exports.GetSampleDocument = GetSampleDocument;
exports.GetPortalContent = GetPortalContent;
exports.clearStore = clearStore;
exports.getRelatedJobTitles = getRelatedJobTitles;

var _actionTypes = __webpack_require__(4);

var types = _interopRequireWildcard(_actionTypes);

var _localforage = __webpack_require__(10);

var localforage = _interopRequireWildcard(_localforage);

var _typeCodes = __webpack_require__(6);

var typeCd = _interopRequireWildcard(_typeCodes);

var _UserActions = __webpack_require__(34);

var _documentActions = __webpack_require__(55);

var _onboardingActions = __webpack_require__(57);

var _ajaxhelper = __webpack_require__(17);

var _CommonUtility = __webpack_require__(137);

var _helper = __webpack_require__(7);

var _CommonUtils = __webpack_require__(8);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

function setJobTitle(jobtitle) {
  return { type: types.SET_JOBTITLE, data: jobtitle };
}
function ResetCommon() {
  return { type: types.RESET_COMMON };
}
function storeSections(sections) {
  return { type: types.STORE_SECTIONS, data: sections };
}
function setEnterBuilder(triggerEnterBuilder) {
  return { type: types.SET_ENTERBUILDER, data: triggerEnterBuilder };
}
function setDocumentType(documentType) {
  return { type: types.SET_DOCUMENTTYPE, data: documentType };
}

function setLoginViewType(loginViewed) {
  return { type: types.SET_LOGINVIEWED, data: loginViewed };
}

function cacheExamplesLocally(portalCD, templateTypeCD, sections, additionalSections) {
  return function (dispatch) {
    //Update Window.RDL.Content from Forage
    localforage.getItem(typeCd.ForageKeyNames.TTCContent).then(function (value) {
      if (value) {
        window.RDL.Content = value;
      }
      if (templateTypeCD && sections && sections.length) {
        var sectionsClone = [].concat(_toConsumableArray(sections));
        if (additionalSections) sectionsClone = sectionsClone.concat(additionalSections);
        sectionsClone.slice().reverse().forEach(function (section) {
          cacheExamplesSectionWise(portalCD, templateTypeCD, section.sectionTypeCD);
        });
      }
    });
  };
}

function cacheExamplesSectionWise(portalCD, templateTypeCD, sectionTypeCD) {
  if (window.RDL.Content == undefined) {
    //If RDL.Content is empty, fill it from localForage and then get texttunercontent
    return localforage.getItem(typeCd.ForageKeyNames.TTCContent).then(function (value) {
      if (value) {
        window.RDL.Content = value;
      } else {
        window.RDL.Content = {};
      }
      return cacheExamplesSectionWise(portalCD, templateTypeCD, sectionTypeCD).then(function (resp) {
        return resp;
      });
    });
  } else {
    var key = sectionTypeCD + templateTypeCD;
    if (portalCD && templateTypeCD && sectionTypeCD && window.RDL.Content[key] == undefined && sectionTypeCD != _helper.TypeCodes.sectionTypeCd.Name && sectionTypeCD != _helper.TypeCodes.sectionTypeCd.Contact && sectionTypeCD != _helper.TypeCodes.sectionTypeCd.Recipient && sectionTypeCD != _helper.TypeCodes.sectionTypeCd.Date) {
      return _ajaxhelper.ContentAjaxHelper.getTextTunerContent(portalCD, templateTypeCD, sectionTypeCD, RDL.buildVersion).then(function (resp) {
        window.RDL.Content[key] = resp;
        if (sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Closer) {
          (0, _CommonUtils.updateHTMLContent)(key);
        }
        localforage.setItem(typeCd.ForageKeyNames.TTCContent, window.RDL.Content);
        return resp;
      });
    }
  }
}

function getSpellCheckResults(text) {
  return function (dispatch) {
    return _ajaxhelper.ContentAjaxHelper.postSpellCheckText(text, window.RDL.PortalSettings.ConfigurePortalCd).then(function (resp) {
      return resp;
    });
  };
}
function getCityAutoPopulated(search_string) {
  return function (dispatch) {
    if (window.RDL.countryDetails.countryCode) {
      return _ajaxhelper.ContentAjaxHelper.getCities(_CommonUtility.apiPath, search_string, window.RDL.countryDetails.countryCode.toLowerCase()).then(function (resp) {
        return resp;
      });
    } else {
      //Return Blank Promise
      return new Promise(function (resolve) {
        resolve("Blank promise");
      });
    }
  };
}
function GetSchoolsAutoPopulated(search_string) {
  return function (dispatch) {
    return _ajaxhelper.ContentAjaxHelper.getSchoolData(_CommonUtility.apiPath, search_string).then(function (resp) {
      return resp;
    });
  };
}
function getJobsAutoPopulated(search_string) {
  return function (dispatch) {
    return _ajaxhelper.ContentAjaxHelper.getJobTitles(_CommonUtility.apiPath, search_string).then(function (resp) {
      return resp;
    });
  };
}
function getCompanyAutoPopulated(countrycd, search_string) {
  return function (dispatch) {
    return _ajaxhelper.ContentAjaxHelper.getEmployers(_CommonUtility.apiPath, countrycd, search_string).then(function (resp) {
      return resp;
    });
  };
}
function getDegreeAutoPopulated(search_string) {
  return function (dispatch) {
    return _ajaxhelper.ContentAjaxHelper.getDegrees(_CommonUtility.apiPath, search_string).then(function (resp) {
      return resp;
    });
  };
}
function getFieldOfStudyAutoPopulated(search_string) {
  return function (dispatch) {
    return _ajaxhelper.ContentAjaxHelper.getFieldOfStudy(_CommonUtility.apiPath, search_string).then(function (resp) {
      return resp;
    });
  };
}

function getJobTitleSkills(userUid, sectionTypeCD, productCD, jobTitle, searchItemType, isEnableFuzzySearch, isEnhancedSkills, jobHierarchy) {
  var transformedSkillVariance = isEnhancedSkills ? typeCd.transformedSkillVariance.transformedskill : typeCd.transformedSkillVariance.empty;
  return function (dispatch) {
    return _ajaxhelper.ContentAjaxHelper.getTextTunerContentFromContentEngine(userUid, productCD, sectionTypeCD, jobTitle, searchItemType, "", RDL.currentPortalDetails.culture, isEnableFuzzySearch, [], false, false, 'fuzzy', 'baseline', false, null, null, 'baseline', '', transformedSkillVariance, undefined, undefined, jobHierarchy).then(function (skills) {
      return skills;
    }).catch(function (error) {
      return [];
    });
  };
}
function GetEducationDegrees() {
  return function (dispatch) {
    return _ajaxhelper.ConfigAjaxHelper.getEducationDegrees(window.RDL.currentPortalDetails.culture);
  };
}
function GetSampleDocument(templateId) {
  return function (dispatch) {
    return _ajaxhelper.ConfigAjaxHelper.getSampleDocument(templateId);
  };
}

function GetPortalContent(templateid) {
  return function (dispatch) {
    return localforage.getItem(templateid).then(function (value) {
      if (value == null) {
        var blobSkinsUrl = window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/common/skins/html/";
        if (window.RDL.blobSkinUrl) {
          blobSkinsUrl = window.RDL.blobSkinUrl;
        }
        return _ajaxhelper.ConfigAjaxHelper.getPortalContent(blobSkinsUrl, templateid, RDL.buildVersion).then(function (Skin) {
          Skin = Skin.replace('font-size:100%', '').replace('font-size: 100%', '');
          localforage.setItem(templateid, Skin);
          return Skin;
        });
      }
      return value;
    });
  };
}

function clearStore(isPersistOnboardingData) {
  return function (dispatch) {
    dispatch((0, _documentActions.ResetDocument)());
    dispatch((0, _UserActions.ResetUser)());
    dispatch(ResetCommon());
    !isPersistOnboardingData && dispatch((0, _onboardingActions.resetOnboarding)());
  };
}

function getRelatedJobTitles(search_string, documentID, userID) {
  return function (dispatch) {
    var jobTitledata = {
      cultureCD: RDL.currentPortalDetails.culture,
      countrycd: RDL.countryDetails.countryCode,
      DocumentID: documentID ? documentID : _helper.TypeCodes.emptyGuid,
      PortalCD: RDL.PortalSettings.ConfigurePortalCd,
      ProductCD: RDL.PortalSettings.ConfigureProductCd,
      SearchString: search_string,
      Placement: typeCd.customFieldsId.jobTitle,
      UserID: userID
    };
    return _ajaxhelper.ContentAjaxHelper.getJobTitlesV2(_CommonUtility.apiPath, jobTitledata).then(function (resp) {
      return resp;
    });
  };
}

/***/ }),
/* 57 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.saveOnboardingStepArr = saveOnboardingStepArr;
exports.saveOnboardingUserInput = saveOnboardingUserInput;
exports.saveJobSkillsList = saveJobSkillsList;
exports.savePreviousFlowArr = savePreviousFlowArr;
exports.setInputModified = setInputModified;
exports.updateReviewState = updateReviewState;
exports.resetOnboarding = resetOnboarding;
exports.resetOnboardingData = resetOnboardingData;
exports.setSkipStepsArr = setSkipStepsArr;
exports.saveResumeArr = saveResumeArr;
exports.saveDocumentCreatedFromResume = saveDocumentCreatedFromResume;
exports.saveResumeReviewArr = saveResumeReviewArr;
exports.saveUploadResumeReviewArr = saveUploadResumeReviewArr;
exports.resetResumeOnboarding = resetResumeOnboarding;
exports.saveResumeUserInput = saveResumeUserInput;
exports.saveCustomSkillsArray = saveCustomSkillsArray;
exports.onSignUpSkip = onSignUpSkip;
exports.saveDocColor = saveDocColor;
exports.setSignUpOnContactStatus = setSignUpOnContactStatus;
exports.setPersonalizationInputModified = setPersonalizationInputModified;
exports.setUserInteractedOnYOE = setUserInteractedOnYOE;
exports.setShowJobInPreview = setShowJobInPreview;
exports.saveEnhancedSkillsList = saveEnhancedSkillsList;
exports.setOnboardingHistoryLength = setOnboardingHistoryLength;

var _actionTypes = __webpack_require__(4);

var types = _interopRequireWildcard(_actionTypes);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function saveOnboardingStepArr(arr) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_ONBOARDING_STEP_ARR, data: arr });
  };
}

function saveOnboardingUserInput(inputData) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_ONBOARDING_USER_INPUT, data: inputData });
  };
}

function saveJobSkillsList(arr) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_JOB_SKILLS_LIST, data: arr });
  };
}

function savePreviousFlowArr(arr) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_PREVIOUS_FLOW_ARR, data: arr });
  };
}

function setInputModified(flag) {
  return function (dispatch) {
    dispatch({ type: types.SET_INPUT_MODIFIED, data: flag });
  };
}

function updateReviewState(data) {
  return function (dispatch) {
    dispatch({ type: types.UPDATE_REVIEW_STATE, data: data });
  };
}

function resetOnboarding() {
  return { type: types.RESET_ONBOARDING_DATA };
}

function resetOnboardingData() {
  return function (dispatch) {
    dispatch(resetOnboarding());
  };
}

function setSkipStepsArr(arr) {
  return function (dispatch) {
    dispatch({ type: types.SET_SKIP_STEPS_ARR, data: arr });
  };
}

function saveResumeArr(arr) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_RESUME_ARR, data: arr });
  };
}

function saveDocumentCreatedFromResume(doc) {
  return function (dispatch) {
    dispatch({ type: types.DOC_FROM_RESUME, data: doc });
  };
}

function saveResumeReviewArr(arr) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_REVIEW_ARR, data: arr });
  };
}

function saveUploadResumeReviewArr(arr) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_UPLOAD_REVIEW_ARR, data: arr });
  };
}

function resetResumeOnboarding() {
  return function (dispatch) {
    dispatch({ type: types.RESET_RESUME_ONBOARDING });
  };
}

function saveResumeUserInput(inputData) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_RESUME_USER_INPUT, data: inputData });
  };
}

function saveCustomSkillsArray(arr) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_CUSTOM_SKILLS, data: arr });
  };
}

function onSignUpSkip(flag) {
  return function (dispatch) {
    dispatch({ type: types.SET_SIGN_UP_MODAL_SKIP, data: flag });
  };
}

function saveDocColor(color) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_DOC_COLOR, data: color });
  };
}

function setSignUpOnContactStatus(value) {
  return function (dispatch) {
    dispatch({ type: types.CONTACT_SIGNUP_STATUS, data: value });
  };
}

function setPersonalizationInputModified(flag) {
  return function (dispatch) {
    dispatch({ type: types.SET_PERSONALIZATION_INPUT_MODIFIED, data: flag });
  };
}

function setUserInteractedOnYOE(flag) {
  return function (dispatch) {
    dispatch({ type: types.SET_USER_INTERACTED_ON_YOE, data: flag });
  };
}

function setShowJobInPreview(flag) {
  return function (dispatch) {
    dispatch({ type: types.SET_SHOW_JOB_IN_PREVIEW, data: flag });
  };
}

function saveEnhancedSkillsList(arr) {
  return function (dispatch) {
    dispatch({ type: types.SAVE_ENHANCED_SKILLS_LIST, data: arr });
  };
}

function setOnboardingHistoryLength(length) {
  return function (dispatch) {
    dispatch({ type: types.SET_ONBOARDING_HISTORY_LENGTH, data: length });
  };
}

/***/ }),
/* 58 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
function createThunkMiddleware(extraArgument) {
  return function (_ref) {
    var dispatch = _ref.dispatch,
        getState = _ref.getState;
    return function (next) {
      return function (action) {
        if (typeof action === 'function') {
          return action(dispatch, getState, extraArgument);
        }

        return next(action);
      };
    };
  };
}

var thunk = createThunkMiddleware();
thunk.withExtraArgument = createThunkMiddleware;

/* harmony default export */ __webpack_exports__["default"] = (thunk);

/***/ }),
/* 59 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 *
 */



/**
 * Use invariant() to assert state which your program assumes to be true.
 *
 * Provide sprintf-style format (only %s is supported) and arguments
 * to provide information about what broke and what you were
 * expecting.
 *
 * The invariant message will be stripped in production, but the invariant
 * will remain to ensure logic does not differ in production.
 */

var validateFormat = function validateFormat(format) {};

if (process.env.NODE_ENV !== 'production') {
  validateFormat = function validateFormat(format) {
    if (format === undefined) {
      throw new Error('invariant requires an error message argument');
    }
  };
}

function invariant(condition, format, a, b, c, d, e, f) {
  validateFormat(format);

  if (!condition) {
    var error;
    if (format === undefined) {
      error = new Error('Minified exception occurred; use the non-minified dev environment ' + 'for the full error message and additional helpful warnings.');
    } else {
      var args = [a, b, c, d, e, f];
      var argIndex = 0;
      error = new Error(format.replace(/%s/g, function () {
        return args[argIndex++];
      }));
      error.name = 'Invariant Violation';
    }

    error.framesToPop = 1; // we don't care about invariant's own frame
    throw error;
  }
}

module.exports = invariant;
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 60 */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),
/* 61 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* WEBPACK VAR INJECTION */(function(process) {/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SortableContainer", function() { return sortableContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortableContainer", function() { return sortableContainer; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SortableElement", function() { return sortableElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortableElement", function() { return sortableElement; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "SortableHandle", function() { return sortableHandle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "sortableHandle", function() { return sortableHandle; });
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "arrayMove", function() { return arrayMove; });
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_slicedToArray__ = __webpack_require__(67);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_objectSpread__ = __webpack_require__(68);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_classCallCheck__ = __webpack_require__(69);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_createClass__ = __webpack_require__(70);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_possibleConstructorReturn__ = __webpack_require__(71);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_getPrototypeOf__ = __webpack_require__(72);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__babel_runtime_helpers_esm_inherits__ = __webpack_require__(73);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__ = __webpack_require__(23);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__ = __webpack_require__(25);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_10_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_10_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_11_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_11_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_react_dom__ = __webpack_require__(35);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_12_react_dom___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_12_react_dom__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_13_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_13_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_14__babel_runtime_helpers_esm_toConsumableArray__ = __webpack_require__(74);
















var Manager = function () {
  function Manager() {
    Object(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, Manager);

    Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(this, "refs", {});
  }

  Object(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_createClass__["a" /* default */])(Manager, [{
    key: "add",
    value: function add(collection, ref) {
      if (!this.refs[collection]) {
        this.refs[collection] = [];
      }

      this.refs[collection].push(ref);
    }
  }, {
    key: "remove",
    value: function remove(collection, ref) {
      var index = this.getIndex(collection, ref);

      if (index !== -1) {
        this.refs[collection].splice(index, 1);
      }
    }
  }, {
    key: "isActive",
    value: function isActive() {
      return this.active;
    }
  }, {
    key: "getActive",
    value: function getActive() {
      var _this = this;

      return this.refs[this.active.collection].find(function (_ref) {
        var node = _ref.node;
        return node.sortableInfo.index == _this.active.index;
      });
    }
  }, {
    key: "getIndex",
    value: function getIndex(collection, ref) {
      return this.refs[collection].indexOf(ref);
    }
  }, {
    key: "getOrderedRefs",
    value: function getOrderedRefs() {
      var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.active.collection;
      return this.refs[collection].sort(sortByIndex);
    }
  }]);

  return Manager;
}();

function sortByIndex(_ref2, _ref3) {
  var index1 = _ref2.node.sortableInfo.index;
  var index2 = _ref3.node.sortableInfo.index;
  return index1 - index2;
}

function arrayMove(array, from, to) {
  if (process.env.NODE_ENV !== 'production') {
    if (typeof console !== 'undefined') {
      console.warn("Deprecation warning: arrayMove will no longer be exported by 'react-sortable-hoc' in the next major release. Please install the `array-move` package locally instead. https://www.npmjs.com/package/array-move");
    }
  }

  array = array.slice();
  array.splice(to < 0 ? array.length + to : to, 0, array.splice(from, 1)[0]);
  return array;
}
function omit(obj, keysToOmit) {
  return Object.keys(obj).reduce(function (acc, key) {
    if (keysToOmit.indexOf(key) === -1) {
      acc[key] = obj[key];
    }

    return acc;
  }, {});
}
var events = {
  end: ['touchend', 'touchcancel', 'mouseup'],
  move: ['touchmove', 'mousemove'],
  start: ['touchstart', 'mousedown']
};
var vendorPrefix = function () {
  if (typeof window === 'undefined' || typeof document === 'undefined') {
    return '';
  }

  var styles = window.getComputedStyle(document.documentElement, '') || ['-moz-hidden-iframe'];
  var pre = (Array.prototype.slice.call(styles).join('').match(/-(moz|webkit|ms)-/) || styles.OLink === '' && ['', 'o'])[1];

  switch (pre) {
    case 'ms':
      return 'ms';

    default:
      return pre && pre.length ? pre[0].toUpperCase() + pre.substr(1) : '';
  }
}();
function setInlineStyles(node, styles) {
  Object.keys(styles).forEach(function (key) {
    node.style[key] = styles[key];
  });
}
function setTranslate3d(node, translate) {
  node.style["".concat(vendorPrefix, "Transform")] = translate == null ? '' : "translate3d(".concat(translate.x, "px,").concat(translate.y, "px,0)");
}
function setTransitionDuration(node, duration) {
  node.style["".concat(vendorPrefix, "TransitionDuration")] = duration == null ? '' : "".concat(duration, "ms");
}
function closest(el, fn) {
  while (el) {
    if (fn(el)) {
      return el;
    }

    el = el.parentNode;
  }

  return null;
}
function limit(min, max, value) {
  return Math.max(min, Math.min(value, max));
}

function getPixelValue(stringValue) {
  if (stringValue.substr(-2) === 'px') {
    return parseFloat(stringValue);
  }

  return 0;
}

function getElementMargin(element) {
  var style = window.getComputedStyle(element);
  return {
    bottom: getPixelValue(style.marginBottom),
    left: getPixelValue(style.marginLeft),
    right: getPixelValue(style.marginRight),
    top: getPixelValue(style.marginTop)
  };
}
function provideDisplayName(prefix, Component$$1) {
  var componentName = Component$$1.displayName || Component$$1.name;
  return componentName ? "".concat(prefix, "(").concat(componentName, ")") : prefix;
}
function getScrollAdjustedBoundingClientRect(node, scrollDelta) {
  var boundingClientRect = node.getBoundingClientRect();
  return {
    top: boundingClientRect.top + scrollDelta.top,
    left: boundingClientRect.left + scrollDelta.left
  };
}
function getPosition(event) {
  if (event.touches && event.touches.length) {
    return {
      x: event.touches[0].pageX,
      y: event.touches[0].pageY
    };
  } else if (event.changedTouches && event.changedTouches.length) {
    return {
      x: event.changedTouches[0].pageX,
      y: event.changedTouches[0].pageY
    };
  } else {
    return {
      x: event.pageX,
      y: event.pageY
    };
  }
}
function isTouchEvent(event) {
  return event.touches && event.touches.length || event.changedTouches && event.changedTouches.length;
}
function getEdgeOffset(node, parent) {
  var offset = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {
    left: 0,
    top: 0
  };

  if (!node) {
    return undefined;
  }

  var nodeOffset = {
    left: offset.left + node.offsetLeft,
    top: offset.top + node.offsetTop
  };

  if (node.parentNode === parent) {
    return nodeOffset;
  }

  return getEdgeOffset(node.parentNode, parent, nodeOffset);
}
function getTargetIndex(newIndex, prevIndex, oldIndex) {
  if (newIndex < oldIndex && newIndex > prevIndex) {
    return newIndex - 1;
  } else if (newIndex > oldIndex && newIndex < prevIndex) {
    return newIndex + 1;
  } else {
    return newIndex;
  }
}
function getLockPixelOffset(_ref) {
  var lockOffset = _ref.lockOffset,
      width = _ref.width,
      height = _ref.height;
  var offsetX = lockOffset;
  var offsetY = lockOffset;
  var unit = 'px';

  if (typeof lockOffset === 'string') {
    var match = /^[+-]?\d*(?:\.\d*)?(px|%)$/.exec(lockOffset);
    __WEBPACK_IMPORTED_MODULE_13_invariant___default()(match !== null, 'lockOffset value should be a number or a string of a ' + 'number followed by "px" or "%". Given %s', lockOffset);
    offsetX = parseFloat(lockOffset);
    offsetY = parseFloat(lockOffset);
    unit = match[1];
  }

  __WEBPACK_IMPORTED_MODULE_13_invariant___default()(isFinite(offsetX) && isFinite(offsetY), 'lockOffset value should be a finite. Given %s', lockOffset);

  if (unit === '%') {
    offsetX = offsetX * width / 100;
    offsetY = offsetY * height / 100;
  }

  return {
    x: offsetX,
    y: offsetY
  };
}
function getLockPixelOffsets(_ref2) {
  var height = _ref2.height,
      width = _ref2.width,
      lockOffset = _ref2.lockOffset;
  var offsets = Array.isArray(lockOffset) ? lockOffset : [lockOffset, lockOffset];
  __WEBPACK_IMPORTED_MODULE_13_invariant___default()(offsets.length === 2, 'lockOffset prop of SortableContainer should be a single ' + 'value or an array of exactly two values. Given %s', lockOffset);

  var _offsets = Object(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(offsets, 2),
      minLockOffset = _offsets[0],
      maxLockOffset = _offsets[1];

  return [getLockPixelOffset({
    height: height,
    lockOffset: minLockOffset,
    width: width
  }), getLockPixelOffset({
    height: height,
    lockOffset: maxLockOffset,
    width: width
  })];
}

function isScrollable(el) {
  var computedStyle = window.getComputedStyle(el);
  var overflowRegex = /(auto|scroll)/;
  var properties = ['overflow', 'overflowX', 'overflowY'];
  return properties.find(function (property) {
    return overflowRegex.test(computedStyle[property]);
  });
}

function getScrollingParent(el) {
  if (!(el instanceof HTMLElement)) {
    return null;
  } else if (isScrollable(el)) {
    return el;
  } else {
    return getScrollingParent(el.parentNode);
  }
}
function getContainerGridGap(element) {
  var style = window.getComputedStyle(element);

  if (style.display === 'grid') {
    return {
      x: getPixelValue(style.gridColumnGap),
      y: getPixelValue(style.gridRowGap)
    };
  }

  return {
    x: 0,
    y: 0
  };
}
var KEYCODE = {
  TAB: 9,
  ESC: 27,
  SPACE: 32,
  LEFT: 37,
  UP: 38,
  RIGHT: 39,
  DOWN: 40
};
var NodeType = {
  Anchor: 'A',
  Button: 'BUTTON',
  Canvas: 'CANVAS',
  Input: 'INPUT',
  Option: 'OPTION',
  Textarea: 'TEXTAREA',
  Select: 'SELECT'
};
function cloneNode(node) {
  var selector = 'input, textarea, select, canvas, [contenteditable]';
  var fields = node.querySelectorAll(selector);
  var clonedNode = node.cloneNode(true);

  var clonedFields = Object(__WEBPACK_IMPORTED_MODULE_14__babel_runtime_helpers_esm_toConsumableArray__["a" /* default */])(clonedNode.querySelectorAll(selector));

  clonedFields.forEach(function (field, i) {
    if (field.type !== 'file') {
      field.value = fields[i].value;
    }

    if (field.type === 'radio' && field.name) {
      field.name = "__sortableClone__".concat(field.name);
    }

    if (field.tagName === NodeType.Canvas && fields[i].width > 0 && fields[i].height > 0) {
      var destCtx = field.getContext('2d');
      destCtx.drawImage(fields[i], 0, 0);
    }
  });
  return clonedNode;
}

function sortableHandle(WrappedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withRef: false
  };
  return _temp = _class = function (_React$Component) {
    Object(__WEBPACK_IMPORTED_MODULE_7__babel_runtime_helpers_esm_inherits__["a" /* default */])(WithSortableHandle, _React$Component);

    function WithSortableHandle() {
      Object(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, WithSortableHandle);

      return Object(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, Object(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(WithSortableHandle).apply(this, arguments));
    }

    Object(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_createClass__["a" /* default */])(WithSortableHandle, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        var node = Object(__WEBPACK_IMPORTED_MODULE_12_react_dom__["findDOMNode"])(this);
        node.sortableHandle = true;
      }
    }, {
      key: "getWrappedInstance",
      value: function getWrappedInstance() {
        __WEBPACK_IMPORTED_MODULE_13_invariant___default()(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableHandle() call');
        return this.refs.wrappedInstance;
      }
    }, {
      key: "render",
      value: function render() {
        var ref = config.withRef ? 'wrappedInstance' : null;
        return Object(__WEBPACK_IMPORTED_MODULE_10_react__["createElement"])(WrappedComponent, Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__["a" /* default */])({
          ref: ref
        }, this.props));
      }
    }]);

    return WithSortableHandle;
  }(__WEBPACK_IMPORTED_MODULE_10_react__["Component"]), Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_class, "displayName", provideDisplayName('sortableHandle', WrappedComponent)), _temp;
}
function isSortableHandle(node) {
  return node.sortableHandle != null;
}

var AutoScroller = function () {
  function AutoScroller(container, onScrollCallback) {
    Object(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, AutoScroller);

    this.container = container;
    this.onScrollCallback = onScrollCallback;
  }

  Object(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_createClass__["a" /* default */])(AutoScroller, [{
    key: "clear",
    value: function clear() {
      if (this.interval == null) {
        return;
      }

      clearInterval(this.interval);
      this.interval = null;
    }
  }, {
    key: "update",
    value: function update(_ref) {
      var _this = this;

      var translate = _ref.translate,
          minTranslate = _ref.minTranslate,
          maxTranslate = _ref.maxTranslate,
          width = _ref.width,
          height = _ref.height;
      var direction = {
        x: 0,
        y: 0
      };
      var speed = {
        x: 1,
        y: 1
      };
      var acceleration = {
        x: 10,
        y: 10
      };
      var _this$container = this.container,
          scrollTop = _this$container.scrollTop,
          scrollLeft = _this$container.scrollLeft,
          scrollHeight = _this$container.scrollHeight,
          scrollWidth = _this$container.scrollWidth,
          clientHeight = _this$container.clientHeight,
          clientWidth = _this$container.clientWidth;
      var isTop = scrollTop === 0;
      var isBottom = scrollHeight - scrollTop - clientHeight === 0;
      var isLeft = scrollLeft === 0;
      var isRight = scrollWidth - scrollLeft - clientWidth === 0;

      if (translate.y >= maxTranslate.y - height / 2 && !isBottom) {
        direction.y = 1;
        speed.y = acceleration.y * Math.abs((maxTranslate.y - height / 2 - translate.y) / height);
      } else if (translate.x >= maxTranslate.x - width / 2 && !isRight) {
        direction.x = 1;
        speed.x = acceleration.x * Math.abs((maxTranslate.x - width / 2 - translate.x) / width);
      } else if (translate.y <= minTranslate.y + height / 2 && !isTop) {
        direction.y = -1;
        speed.y = acceleration.y * Math.abs((translate.y - height / 2 - minTranslate.y) / height);
      } else if (translate.x <= minTranslate.x + width / 2 && !isLeft) {
        direction.x = -1;
        speed.x = acceleration.x * Math.abs((translate.x - width / 2 - minTranslate.x) / width);
      }

      if (this.interval) {
        this.clear();
        this.isAutoScrolling = false;
      }

      if (direction.x !== 0 || direction.y !== 0) {
        this.interval = setInterval(function () {
          _this.isAutoScrolling = true;
          var offset = {
            left: speed.x * direction.x,
            top: speed.y * direction.y
          };
          _this.container.scrollTop += offset.top;
          _this.container.scrollLeft += offset.left;

          _this.onScrollCallback(offset);
        }, 5);
      }
    }
  }]);

  return AutoScroller;
}();

function defaultGetHelperDimensions(_ref) {
  var node = _ref.node;
  return {
    height: node.offsetHeight,
    width: node.offsetWidth
  };
}

function defaultShouldCancelStart(event) {
  var interactiveElements = [NodeType.Input, NodeType.Textarea, NodeType.Select, NodeType.Option, NodeType.Button];

  if (interactiveElements.indexOf(event.target.tagName) !== -1) {
    return true;
  }

  if (closest(event.target, function (el) {
    return el.contentEditable === 'true';
  })) {
    return true;
  }

  return false;
}

var propTypes = {
  axis: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.oneOf(['x', 'y', 'xy']),
  contentWindow: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.any,
  disableAutoscroll: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.bool,
  distance: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number,
  getContainer: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.func,
  getHelperDimensions: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.func,
  helperClass: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.string,
  helperContainer: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.func, typeof HTMLElement === 'undefined' ? __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.any : __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.instanceOf(HTMLElement)]),
  hideSortableGhost: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.bool,
  keyboardSortingTransitionDuration: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number,
  lockAxis: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.string,
  lockOffset: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number, __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number, __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.string]))]),
  lockToContainerEdges: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.bool,
  onSortEnd: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.func,
  onSortMove: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.func,
  onSortOver: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.func,
  onSortStart: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.func,
  pressDelay: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number,
  pressThreshold: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number,
  keyCodes: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.shape({
    lift: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number),
    drop: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number),
    cancel: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number),
    up: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number),
    down: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.arrayOf(__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number)
  }),
  shouldCancelStart: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.func,
  transitionDuration: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number,
  updateBeforeSortStart: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.func,
  useDragHandle: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.bool,
  useWindowAsScrollContainer: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.bool
};
var defaultKeyCodes = {
  lift: [KEYCODE.SPACE],
  drop: [KEYCODE.SPACE],
  cancel: [KEYCODE.ESC],
  up: [KEYCODE.UP, KEYCODE.LEFT],
  down: [KEYCODE.DOWN, KEYCODE.RIGHT]
};
var defaultProps = {
  axis: 'y',
  disableAutoscroll: false,
  distance: 0,
  getHelperDimensions: defaultGetHelperDimensions,
  hideSortableGhost: true,
  lockOffset: '50%',
  lockToContainerEdges: false,
  pressDelay: 0,
  pressThreshold: 5,
  keyCodes: defaultKeyCodes,
  shouldCancelStart: defaultShouldCancelStart,
  transitionDuration: 300,
  useWindowAsScrollContainer: false
};
var omittedProps = Object.keys(propTypes);
function validateProps(props) {
  __WEBPACK_IMPORTED_MODULE_13_invariant___default()(!(props.distance && props.pressDelay), 'Attempted to set both `pressDelay` and `distance` on SortableContainer, you may only use one or the other, not both at the same time.');
}

function _finallyRethrows(body, finalizer) {
  try {
    var result = body();
  } catch (e) {
    return finalizer(true, e);
  }

  if (result && result.then) {
    return result.then(finalizer.bind(null, false), finalizer.bind(null, true));
  }

  return finalizer(false, value);
}
function sortableContainer(WrappedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withRef: false
  };
  return _temp = _class = function (_React$Component) {
    Object(__WEBPACK_IMPORTED_MODULE_7__babel_runtime_helpers_esm_inherits__["a" /* default */])(WithSortableContainer, _React$Component);

    function WithSortableContainer(props) {
      var _this;

      Object(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, WithSortableContainer);

      _this = Object(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, Object(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(WithSortableContainer).call(this, props));

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "state", {});

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "handleStart", function (event) {
        var _this$props = _this.props,
            distance = _this$props.distance,
            shouldCancelStart = _this$props.shouldCancelStart;

        if (event.button === 2 || shouldCancelStart(event)) {
          return;
        }

        _this.touched = true;
        _this.position = getPosition(event);
        var node = closest(event.target, function (el) {
          return el.sortableInfo != null;
        });

        if (node && node.sortableInfo && _this.nodeIsChild(node) && !_this.state.sorting) {
          var useDragHandle = _this.props.useDragHandle;
          var _node$sortableInfo = node.sortableInfo,
              index = _node$sortableInfo.index,
              collection = _node$sortableInfo.collection,
              disabled = _node$sortableInfo.disabled;

          if (disabled) {
            return;
          }

          if (useDragHandle && !closest(event.target, isSortableHandle)) {
            return;
          }

          _this.manager.active = {
            collection: collection,
            index: index
          };

          if (!isTouchEvent(event) && event.target.tagName === NodeType.Anchor) {
            event.preventDefault();
          }

          if (!distance) {
            if (_this.props.pressDelay === 0) {
              _this.handlePress(event);
            } else {
              _this.pressTimer = setTimeout(function () {
                return _this.handlePress(event);
              }, _this.props.pressDelay);
            }
          }
        }
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "nodeIsChild", function (node) {
        return node.sortableInfo.manager === _this.manager;
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "handleMove", function (event) {
        var _this$props2 = _this.props,
            distance = _this$props2.distance,
            pressThreshold = _this$props2.pressThreshold;

        if (!_this.state.sorting && _this.touched && !_this._awaitingUpdateBeforeSortStart) {
          var position = getPosition(event);
          var delta = {
            x: _this.position.x - position.x,
            y: _this.position.y - position.y
          };
          var combinedDelta = Math.abs(delta.x) + Math.abs(delta.y);
          _this.delta = delta;

          if (!distance && (!pressThreshold || combinedDelta >= pressThreshold)) {
            clearTimeout(_this.cancelTimer);
            _this.cancelTimer = setTimeout(_this.cancel, 0);
          } else if (distance && combinedDelta >= distance && _this.manager.isActive()) {
            _this.handlePress(event);
          }
        }
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "handleEnd", function () {
        _this.touched = false;

        _this.cancel();
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "cancel", function () {
        var distance = _this.props.distance;
        var sorting = _this.state.sorting;

        if (!sorting) {
          if (!distance) {
            clearTimeout(_this.pressTimer);
          }

          _this.manager.active = null;
        }
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "handlePress", function (event) {
        try {
          var active = _this.manager.getActive();

          var _temp6 = function () {
            if (active) {
              var _temp7 = function _temp7() {
                var index = _node.sortableInfo.index;
                var margin = getElementMargin(_node);
                var gridGap = getContainerGridGap(_this.container);

                var containerBoundingRect = _this.scrollContainer.getBoundingClientRect();

                var dimensions = _getHelperDimensions({
                  index: index,
                  node: _node,
                  collection: _collection
                });

                _this.node = _node;
                _this.margin = margin;
                _this.gridGap = gridGap;
                _this.width = dimensions.width;
                _this.height = dimensions.height;
                _this.marginOffset = {
                  x: _this.margin.left + _this.margin.right + _this.gridGap.x,
                  y: Math.max(_this.margin.top, _this.margin.bottom, _this.gridGap.y)
                };
                _this.boundingClientRect = _node.getBoundingClientRect();
                _this.containerBoundingRect = containerBoundingRect;
                _this.index = index;
                _this.newIndex = index;
                _this.axis = {
                  x: _axis.indexOf('x') >= 0,
                  y: _axis.indexOf('y') >= 0
                };
                _this.offsetEdge = getEdgeOffset(_node, _this.container);

                if (_isKeySorting) {
                  _this.initialOffset = getPosition(Object(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_objectSpread__["a" /* default */])({}, event, {
                    pageX: _this.boundingClientRect.left,
                    pageY: _this.boundingClientRect.top
                  }));
                } else {
                  _this.initialOffset = getPosition(event);
                }

                _this.initialScroll = {
                  left: _this.scrollContainer.scrollLeft,
                  top: _this.scrollContainer.scrollTop
                };
                _this.initialWindowScroll = {
                  left: window.pageXOffset,
                  top: window.pageYOffset
                };
                _this.helper = _this.helperContainer.appendChild(cloneNode(_node));
                setInlineStyles(_this.helper, {
                  boxSizing: 'border-box',
                  height: "".concat(_this.height, "px"),
                  left: "".concat(_this.boundingClientRect.left - margin.left, "px"),
                  pointerEvents: 'none',
                  position: 'fixed',
                  top: "".concat(_this.boundingClientRect.top - margin.top, "px"),
                  width: "".concat(_this.width, "px")
                });

                if (_isKeySorting) {
                  _this.helper.focus();
                }

                if (_hideSortableGhost) {
                  _this.sortableGhost = _node;
                  setInlineStyles(_node, {
                    opacity: 0,
                    visibility: 'hidden'
                  });
                }

                _this.minTranslate = {};
                _this.maxTranslate = {};

                if (_isKeySorting) {
                  var _ref = _useWindowAsScrollContainer ? {
                    top: 0,
                    left: 0,
                    width: _this.contentWindow.innerWidth,
                    height: _this.contentWindow.innerHeight
                  } : _this.containerBoundingRect,
                      containerTop = _ref.top,
                      containerLeft = _ref.left,
                      containerWidth = _ref.width,
                      containerHeight = _ref.height;

                  var containerBottom = containerTop + containerHeight;
                  var containerRight = containerLeft + containerWidth;

                  if (_this.axis.x) {
                    _this.minTranslate.x = containerLeft - _this.boundingClientRect.left;
                    _this.maxTranslate.x = containerRight - (_this.boundingClientRect.left + _this.width);
                  }

                  if (_this.axis.y) {
                    _this.minTranslate.y = containerTop - _this.boundingClientRect.top;
                    _this.maxTranslate.y = containerBottom - (_this.boundingClientRect.top + _this.height);
                  }
                } else {
                  if (_this.axis.x) {
                    _this.minTranslate.x = (_useWindowAsScrollContainer ? 0 : containerBoundingRect.left) - _this.boundingClientRect.left - _this.width / 2;
                    _this.maxTranslate.x = (_useWindowAsScrollContainer ? _this.contentWindow.innerWidth : containerBoundingRect.left + containerBoundingRect.width) - _this.boundingClientRect.left - _this.width / 2;
                  }

                  if (_this.axis.y) {
                    _this.minTranslate.y = (_useWindowAsScrollContainer ? 0 : containerBoundingRect.top) - _this.boundingClientRect.top - _this.height / 2;
                    _this.maxTranslate.y = (_useWindowAsScrollContainer ? _this.contentWindow.innerHeight : containerBoundingRect.top + containerBoundingRect.height) - _this.boundingClientRect.top - _this.height / 2;
                  }
                }

                if (_helperClass) {
                  _helperClass.split(' ').forEach(function (className) {
                    return _this.helper.classList.add(className);
                  });
                }

                _this.listenerNode = event.touches ? _node : _this.contentWindow;

                if (_isKeySorting) {
                  _this.listenerNode.addEventListener('wheel', _this.handleKeyEnd, true);

                  _this.listenerNode.addEventListener('mousedown', _this.handleKeyEnd, true);

                  _this.listenerNode.addEventListener('keydown', _this.handleKeyDown);
                } else {
                  events.move.forEach(function (eventName) {
                    return _this.listenerNode.addEventListener(eventName, _this.handleSortMove, false);
                  });
                  events.end.forEach(function (eventName) {
                    return _this.listenerNode.addEventListener(eventName, _this.handleSortEnd, false);
                  });
                }

                _this.setState({
                  sorting: true,
                  sortingIndex: index
                });

                if (_onSortStart) {
                  _onSortStart({
                    node: _node,
                    index: index,
                    collection: _collection,
                    isKeySorting: _isKeySorting,
                    nodes: _this.manager.getOrderedRefs(),
                    helper: _this.helper
                  }, event);
                }

                if (_isKeySorting) {
                  _this.keyMove(0);
                }
              };

              var _this$props3 = _this.props,
                  _axis = _this$props3.axis,
                  _getHelperDimensions = _this$props3.getHelperDimensions,
                  _helperClass = _this$props3.helperClass,
                  _hideSortableGhost = _this$props3.hideSortableGhost,
                  updateBeforeSortStart = _this$props3.updateBeforeSortStart,
                  _onSortStart = _this$props3.onSortStart,
                  _useWindowAsScrollContainer = _this$props3.useWindowAsScrollContainer;
              var _node = active.node,
                  _collection = active.collection;
              var _isKeySorting = _this.manager.isKeySorting;

              var _temp8 = function () {
                if (typeof updateBeforeSortStart === 'function') {
                  _this._awaitingUpdateBeforeSortStart = true;

                  var _temp9 = _finallyRethrows(function () {
                    var index = _node.sortableInfo.index;
                    return Promise.resolve(updateBeforeSortStart({
                      collection: _collection,
                      index: index,
                      node: _node,
                      isKeySorting: _isKeySorting
                    }, event)).then(function () {});
                  }, function (_wasThrown, _result) {
                    _this._awaitingUpdateBeforeSortStart = false;
                    if (_wasThrown) throw _result;
                    return _result;
                  });

                  if (_temp9 && _temp9.then) return _temp9.then(function () {});
                }
              }();

              return _temp8 && _temp8.then ? _temp8.then(_temp7) : _temp7(_temp8);
            }
          }();

          return Promise.resolve(_temp6 && _temp6.then ? _temp6.then(function () {}) : void 0);
        } catch (e) {
          return Promise.reject(e);
        }
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "handleSortMove", function (event) {
        var onSortMove = _this.props.onSortMove;

        if (typeof event.preventDefault === 'function') {
          event.preventDefault();
        }

        _this.updateHelperPosition(event);

        _this.animateNodes();

        _this.autoscroll();

        if (onSortMove) {
          onSortMove(event);
        }
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "handleSortEnd", function (event) {
        var _this$props4 = _this.props,
            hideSortableGhost = _this$props4.hideSortableGhost,
            onSortEnd = _this$props4.onSortEnd;
        var _this$manager = _this.manager,
            collection = _this$manager.active.collection,
            isKeySorting = _this$manager.isKeySorting;

        var nodes = _this.manager.getOrderedRefs();

        if (_this.listenerNode) {
          if (isKeySorting) {
            _this.listenerNode.removeEventListener('wheel', _this.handleKeyEnd, true);

            _this.listenerNode.removeEventListener('mousedown', _this.handleKeyEnd, true);

            _this.listenerNode.removeEventListener('keydown', _this.handleKeyDown);
          } else {
            events.move.forEach(function (eventName) {
              return _this.listenerNode.removeEventListener(eventName, _this.handleSortMove);
            });
            events.end.forEach(function (eventName) {
              return _this.listenerNode.removeEventListener(eventName, _this.handleSortEnd);
            });
          }
        }

        _this.helper.parentNode.removeChild(_this.helper);

        if (hideSortableGhost && _this.sortableGhost) {
          setInlineStyles(_this.sortableGhost, {
            opacity: '',
            visibility: ''
          });
        }

        for (var i = 0, len = nodes.length; i < len; i++) {
          var _node2 = nodes[i];
          var el = _node2.node;
          _node2.edgeOffset = null;
          _node2.boundingClientRect = null;
          setTranslate3d(el, null);
          setTransitionDuration(el, null);
          _node2.translate = null;
        }

        _this.autoScroller.clear();

        _this.manager.active = null;
        _this.manager.isKeySorting = false;

        _this.setState({
          sorting: false,
          sortingIndex: null
        });

        if (typeof onSortEnd === 'function') {
          onSortEnd({
            collection: collection,
            newIndex: _this.newIndex,
            oldIndex: _this.index,
            isKeySorting: isKeySorting,
            nodes: nodes
          }, event);
        }

        _this.touched = false;
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "autoscroll", function () {
        var disableAutoscroll = _this.props.disableAutoscroll;
        var isKeySorting = _this.manager.isKeySorting;

        if (disableAutoscroll) {
          _this.autoScroller.clear();

          return;
        }

        if (isKeySorting) {
          var translate = Object(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_objectSpread__["a" /* default */])({}, _this.translate);

          var scrollX = 0;
          var scrollY = 0;

          if (_this.axis.x) {
            translate.x = Math.min(_this.maxTranslate.x, Math.max(_this.minTranslate.x, _this.translate.x));
            scrollX = _this.translate.x - translate.x;
          }

          if (_this.axis.y) {
            translate.y = Math.min(_this.maxTranslate.y, Math.max(_this.minTranslate.y, _this.translate.y));
            scrollY = _this.translate.y - translate.y;
          }

          _this.translate = translate;
          setTranslate3d(_this.helper, _this.translate);
          _this.scrollContainer.scrollLeft += scrollX;
          _this.scrollContainer.scrollTop += scrollY;
          return;
        }

        _this.autoScroller.update({
          height: _this.height,
          maxTranslate: _this.maxTranslate,
          minTranslate: _this.minTranslate,
          translate: _this.translate,
          width: _this.width
        });
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "onAutoScroll", function (offset) {
        _this.translate.x += offset.left;
        _this.translate.y += offset.top;

        _this.animateNodes();
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "handleKeyDown", function (event) {
        var keyCode = event.keyCode;
        var _this$props5 = _this.props,
            shouldCancelStart = _this$props5.shouldCancelStart,
            _this$props5$keyCodes = _this$props5.keyCodes,
            customKeyCodes = _this$props5$keyCodes === void 0 ? {} : _this$props5$keyCodes;

        var keyCodes = Object(__WEBPACK_IMPORTED_MODULE_2__babel_runtime_helpers_esm_objectSpread__["a" /* default */])({}, defaultKeyCodes, customKeyCodes);

        if (_this.manager.active && !_this.manager.isKeySorting || !_this.manager.active && (!keyCodes.lift.includes(keyCode) || shouldCancelStart(event) || !_this.isValidSortingTarget(event))) {
          return;
        }

        event.stopPropagation();
        event.preventDefault();

        if (keyCodes.lift.includes(keyCode) && !_this.manager.active) {
          _this.keyLift(event);
        } else if (keyCodes.drop.includes(keyCode) && _this.manager.active) {
          _this.keyDrop(event);
        } else if (keyCodes.cancel.includes(keyCode)) {
          _this.newIndex = _this.manager.active.index;

          _this.keyDrop(event);
        } else if (keyCodes.up.includes(keyCode)) {
          _this.keyMove(-1);
        } else if (keyCodes.down.includes(keyCode)) {
          _this.keyMove(1);
        }
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "keyLift", function (event) {
        var target = event.target;
        var node = closest(target, function (el) {
          return el.sortableInfo != null;
        });
        var _node$sortableInfo2 = node.sortableInfo,
            index = _node$sortableInfo2.index,
            collection = _node$sortableInfo2.collection;
        _this.initialFocusedNode = target;
        _this.manager.isKeySorting = true;
        _this.manager.active = {
          index: index,
          collection: collection
        };

        _this.handlePress(event);
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "keyMove", function (shift) {
        var nodes = _this.manager.getOrderedRefs();

        var lastIndex = nodes[nodes.length - 1].node.sortableInfo.index;
        var newIndex = _this.newIndex + shift;
        var prevIndex = _this.newIndex;

        if (newIndex < 0 || newIndex > lastIndex) {
          return;
        }

        _this.prevIndex = prevIndex;
        _this.newIndex = newIndex;
        var targetIndex = getTargetIndex(_this.newIndex, _this.prevIndex, _this.index);
        var target = nodes.find(function (_ref2) {
          var node = _ref2.node;
          return node.sortableInfo.index === targetIndex;
        });
        var targetNode = target.node;
        var scrollDelta = _this.containerScrollDelta;
        var targetBoundingClientRect = target.boundingClientRect || getScrollAdjustedBoundingClientRect(targetNode, scrollDelta);
        var targetTranslate = target.translate || {
          x: 0,
          y: 0
        };
        var targetPosition = {
          top: targetBoundingClientRect.top + targetTranslate.y - scrollDelta.top,
          left: targetBoundingClientRect.left + targetTranslate.x - scrollDelta.left
        };
        var shouldAdjustForSize = prevIndex < newIndex;
        var sizeAdjustment = {
          x: shouldAdjustForSize && _this.axis.x ? targetNode.offsetWidth - _this.width : 0,
          y: shouldAdjustForSize && _this.axis.y ? targetNode.offsetHeight - _this.height : 0
        };

        _this.handleSortMove({
          pageX: targetPosition.left + sizeAdjustment.x,
          pageY: targetPosition.top + sizeAdjustment.y,
          ignoreTransition: shift === 0
        });
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "keyDrop", function (event) {
        _this.handleSortEnd(event);

        if (_this.initialFocusedNode) {
          _this.initialFocusedNode.focus();
        }
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "handleKeyEnd", function (event) {
        if (_this.manager.active) {
          _this.keyDrop(event);
        }
      });

      Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(Object(__WEBPACK_IMPORTED_MODULE_8__babel_runtime_helpers_esm_assertThisInitialized__["a" /* default */])(_this)), "isValidSortingTarget", function (event) {
        var useDragHandle = _this.props.useDragHandle;
        var target = event.target;
        var node = closest(target, function (el) {
          return el.sortableInfo != null;
        });
        return node && node.sortableInfo && !node.sortableInfo.disabled && (useDragHandle ? isSortableHandle(target) : target.sortableInfo);
      });

      validateProps(props);
      _this.manager = new Manager();
      _this.events = {
        end: _this.handleEnd,
        move: _this.handleMove,
        start: _this.handleStart
      };
      return _this;
    }

    Object(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_createClass__["a" /* default */])(WithSortableContainer, [{
      key: "getChildContext",
      value: function getChildContext() {
        return {
          manager: this.manager
        };
      }
    }, {
      key: "componentDidMount",
      value: function componentDidMount() {
        var _this2 = this;

        var useWindowAsScrollContainer = this.props.useWindowAsScrollContainer;
        var container = this.getContainer();
        Promise.resolve(container).then(function (containerNode) {
          _this2.container = containerNode;
          _this2.document = _this2.container.ownerDocument || document;
          var contentWindow = _this2.props.contentWindow || _this2.document.defaultView || window;
          _this2.contentWindow = typeof contentWindow === 'function' ? contentWindow() : contentWindow;
          _this2.scrollContainer = useWindowAsScrollContainer ? _this2.document.scrollingElement || _this2.document.documentElement : getScrollingParent(_this2.container) || _this2.container;
          _this2.autoScroller = new AutoScroller(_this2.scrollContainer, _this2.onAutoScroll);
          Object.keys(_this2.events).forEach(function (key) {
            return events[key].forEach(function (eventName) {
              return _this2.container.addEventListener(eventName, _this2.events[key], false);
            });
          });

          _this2.container.addEventListener('keydown', _this2.handleKeyDown);
        });
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        var _this3 = this;

        if (this.helper && this.helper.parentNode) {
          this.helper.parentNode.removeChild(this.helper);
        }

        if (!this.container) {
          return;
        }

        Object.keys(this.events).forEach(function (key) {
          return events[key].forEach(function (eventName) {
            return _this3.container.removeEventListener(eventName, _this3.events[key]);
          });
        });
        this.container.removeEventListener('keydown', this.handleKeyDown);
      }
    }, {
      key: "updateHelperPosition",
      value: function updateHelperPosition(event) {
        var _this$props6 = this.props,
            lockAxis = _this$props6.lockAxis,
            lockOffset = _this$props6.lockOffset,
            lockToContainerEdges = _this$props6.lockToContainerEdges,
            transitionDuration = _this$props6.transitionDuration,
            _this$props6$keyboard = _this$props6.keyboardSortingTransitionDuration,
            keyboardSortingTransitionDuration = _this$props6$keyboard === void 0 ? transitionDuration : _this$props6$keyboard;
        var isKeySorting = this.manager.isKeySorting;
        var ignoreTransition = event.ignoreTransition;
        var offset = getPosition(event);
        var translate = {
          x: offset.x - this.initialOffset.x,
          y: offset.y - this.initialOffset.y
        };
        translate.y -= window.pageYOffset - this.initialWindowScroll.top;
        translate.x -= window.pageXOffset - this.initialWindowScroll.left;
        this.translate = translate;

        if (lockToContainerEdges) {
          var _getLockPixelOffsets = getLockPixelOffsets({
            height: this.height,
            lockOffset: lockOffset,
            width: this.width
          }),
              _getLockPixelOffsets2 = Object(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_slicedToArray__["a" /* default */])(_getLockPixelOffsets, 2),
              minLockOffset = _getLockPixelOffsets2[0],
              maxLockOffset = _getLockPixelOffsets2[1];

          var minOffset = {
            x: this.width / 2 - minLockOffset.x,
            y: this.height / 2 - minLockOffset.y
          };
          var maxOffset = {
            x: this.width / 2 - maxLockOffset.x,
            y: this.height / 2 - maxLockOffset.y
          };
          translate.x = limit(this.minTranslate.x + minOffset.x, this.maxTranslate.x - maxOffset.x, translate.x);
          translate.y = limit(this.minTranslate.y + minOffset.y, this.maxTranslate.y - maxOffset.y, translate.y);
        }

        if (lockAxis === 'x') {
          translate.y = 0;
        } else if (lockAxis === 'y') {
          translate.x = 0;
        }

        if (isKeySorting && keyboardSortingTransitionDuration && !ignoreTransition) {
          setTransitionDuration(this.helper, keyboardSortingTransitionDuration);
        }

        setTranslate3d(this.helper, translate);
      }
    }, {
      key: "animateNodes",
      value: function animateNodes() {
        var _this$props7 = this.props,
            transitionDuration = _this$props7.transitionDuration,
            hideSortableGhost = _this$props7.hideSortableGhost,
            onSortOver = _this$props7.onSortOver;
        var containerScrollDelta = this.containerScrollDelta,
            windowScrollDelta = this.windowScrollDelta;
        var nodes = this.manager.getOrderedRefs();
        var sortingOffset = {
          left: this.offsetEdge.left + this.translate.x + containerScrollDelta.left,
          top: this.offsetEdge.top + this.translate.y + containerScrollDelta.top
        };
        var isKeySorting = this.manager.isKeySorting;
        var prevIndex = this.newIndex;
        this.newIndex = null;

        for (var i = 0, len = nodes.length; i < len; i++) {
          var _node3 = nodes[i].node;
          var index = _node3.sortableInfo.index;
          var width = _node3.offsetWidth;
          var height = _node3.offsetHeight;
          var offset = {
            height: this.height > height ? height / 2 : this.height / 2,
            width: this.width > width ? width / 2 : this.width / 2
          };
          var mustShiftBackward = isKeySorting && index > this.index && index <= prevIndex;
          var mustShiftForward = isKeySorting && index < this.index && index >= prevIndex;
          var translate = {
            x: 0,
            y: 0
          };
          var edgeOffset = nodes[i].edgeOffset;

          if (!edgeOffset) {
            edgeOffset = getEdgeOffset(_node3, this.container);
            nodes[i].edgeOffset = edgeOffset;

            if (isKeySorting) {
              nodes[i].boundingClientRect = getScrollAdjustedBoundingClientRect(_node3, containerScrollDelta);
            }
          }

          var nextNode = i < nodes.length - 1 && nodes[i + 1];
          var prevNode = i > 0 && nodes[i - 1];

          if (nextNode && !nextNode.edgeOffset) {
            nextNode.edgeOffset = getEdgeOffset(nextNode.node, this.container);

            if (isKeySorting) {
              nextNode.boundingClientRect = getScrollAdjustedBoundingClientRect(nextNode.node, containerScrollDelta);
            }
          }

          if (index === this.index) {
            if (hideSortableGhost) {
              this.sortableGhost = _node3;
              setInlineStyles(_node3, {
                opacity: 0,
                visibility: 'hidden'
              });
            }

            continue;
          }

          if (transitionDuration) {
            setTransitionDuration(_node3, transitionDuration);
          }

          if (this.axis.x) {
            if (this.axis.y) {
              if (mustShiftForward || index < this.index && (sortingOffset.left + windowScrollDelta.left - offset.width <= edgeOffset.left && sortingOffset.top + windowScrollDelta.top <= edgeOffset.top + offset.height || sortingOffset.top + windowScrollDelta.top + offset.height <= edgeOffset.top)) {
                translate.x = this.width + this.marginOffset.x;

                if (edgeOffset.left + translate.x > this.containerBoundingRect.width - offset.width) {
                  if (nextNode) {
                    translate.x = nextNode.edgeOffset.left - edgeOffset.left;
                    translate.y = nextNode.edgeOffset.top - edgeOffset.top;
                  }
                }

                if (this.newIndex === null) {
                  this.newIndex = index;
                }
              } else if (mustShiftBackward || index > this.index && (sortingOffset.left + windowScrollDelta.left + offset.width >= edgeOffset.left && sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top || sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top + height)) {
                translate.x = -(this.width + this.marginOffset.x);

                if (edgeOffset.left + translate.x < this.containerBoundingRect.left + offset.width) {
                  if (prevNode) {
                    translate.x = prevNode.edgeOffset.left - edgeOffset.left;
                    translate.y = prevNode.edgeOffset.top - edgeOffset.top;
                  }
                }

                this.newIndex = index;
              }
            } else {
              if (mustShiftBackward || index > this.index && sortingOffset.left + windowScrollDelta.left + offset.width >= edgeOffset.left) {
                translate.x = -(this.width + this.marginOffset.x);
                this.newIndex = index;
              } else if (mustShiftForward || index < this.index && sortingOffset.left + windowScrollDelta.left <= edgeOffset.left + offset.width) {
                translate.x = this.width + this.marginOffset.x;

                if (this.newIndex == null) {
                  this.newIndex = index;
                }
              }
            }
          } else if (this.axis.y) {
            if (mustShiftBackward || index > this.index && sortingOffset.top + windowScrollDelta.top + offset.height >= edgeOffset.top) {
              translate.y = -(this.height + this.marginOffset.y);
              this.newIndex = index;
            } else if (mustShiftForward || index < this.index && sortingOffset.top + windowScrollDelta.top <= edgeOffset.top + offset.height) {
              translate.y = this.height + this.marginOffset.y;

              if (this.newIndex == null) {
                this.newIndex = index;
              }
            }
          }

          setTranslate3d(_node3, translate);
          nodes[i].translate = translate;
        }

        if (this.newIndex == null) {
          this.newIndex = this.index;
        }

        if (isKeySorting) {
          this.newIndex = prevIndex;
        }

        var oldIndex = isKeySorting ? this.prevIndex : prevIndex;

        if (onSortOver && this.newIndex !== oldIndex) {
          onSortOver({
            collection: this.manager.active.collection,
            index: this.index,
            newIndex: this.newIndex,
            oldIndex: oldIndex,
            isKeySorting: isKeySorting,
            nodes: nodes,
            helper: this.helper
          });
        }
      }
    }, {
      key: "getWrappedInstance",
      value: function getWrappedInstance() {
        __WEBPACK_IMPORTED_MODULE_13_invariant___default()(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableContainer() call');
        return this.refs.wrappedInstance;
      }
    }, {
      key: "getContainer",
      value: function getContainer() {
        var getContainer = this.props.getContainer;

        if (typeof getContainer !== 'function') {
          return Object(__WEBPACK_IMPORTED_MODULE_12_react_dom__["findDOMNode"])(this);
        }

        return getContainer(config.withRef ? this.getWrappedInstance() : undefined);
      }
    }, {
      key: "render",
      value: function render() {
        var ref = config.withRef ? 'wrappedInstance' : null;
        return Object(__WEBPACK_IMPORTED_MODULE_10_react__["createElement"])(WrappedComponent, Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__["a" /* default */])({
          ref: ref
        }, omit(this.props, omittedProps)));
      }
    }, {
      key: "helperContainer",
      get: function get() {
        var helperContainer = this.props.helperContainer;

        if (typeof helperContainer === 'function') {
          return helperContainer();
        }

        return this.props.helperContainer || this.document.body;
      }
    }, {
      key: "containerScrollDelta",
      get: function get() {
        var useWindowAsScrollContainer = this.props.useWindowAsScrollContainer;

        if (useWindowAsScrollContainer) {
          return {
            left: 0,
            top: 0
          };
        }

        return {
          left: this.scrollContainer.scrollLeft - this.initialScroll.left,
          top: this.scrollContainer.scrollTop - this.initialScroll.top
        };
      }
    }, {
      key: "windowScrollDelta",
      get: function get() {
        return {
          left: this.contentWindow.pageXOffset - this.initialWindowScroll.left,
          top: this.contentWindow.pageYOffset - this.initialWindowScroll.top
        };
      }
    }]);

    return WithSortableContainer;
  }(__WEBPACK_IMPORTED_MODULE_10_react__["Component"]), Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_class, "displayName", provideDisplayName('sortableList', WrappedComponent)), Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_class, "defaultProps", defaultProps), Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_class, "propTypes", propTypes), Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_class, "childContextTypes", {
    manager: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.object.isRequired
  }), _temp;
}

var propTypes$1 = {
  index: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number.isRequired,
  collection: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.number, __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.string]),
  disabled: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.bool
};
var omittedProps$1 = Object.keys(propTypes$1);
function sortableElement(WrappedComponent) {
  var _class, _temp;

  var config = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
    withRef: false
  };
  return _temp = _class = function (_React$Component) {
    Object(__WEBPACK_IMPORTED_MODULE_7__babel_runtime_helpers_esm_inherits__["a" /* default */])(WithSortableElement, _React$Component);

    function WithSortableElement() {
      Object(__WEBPACK_IMPORTED_MODULE_3__babel_runtime_helpers_esm_classCallCheck__["a" /* default */])(this, WithSortableElement);

      return Object(__WEBPACK_IMPORTED_MODULE_5__babel_runtime_helpers_esm_possibleConstructorReturn__["a" /* default */])(this, Object(__WEBPACK_IMPORTED_MODULE_6__babel_runtime_helpers_esm_getPrototypeOf__["a" /* default */])(WithSortableElement).apply(this, arguments));
    }

    Object(__WEBPACK_IMPORTED_MODULE_4__babel_runtime_helpers_esm_createClass__["a" /* default */])(WithSortableElement, [{
      key: "componentDidMount",
      value: function componentDidMount() {
        this.register();
      }
    }, {
      key: "componentDidUpdate",
      value: function componentDidUpdate(prevProps) {
        if (this.node) {
          if (prevProps.index !== this.props.index) {
            this.node.sortableInfo.index = this.props.index;
          }

          if (prevProps.disabled !== this.props.disabled) {
            this.node.sortableInfo.disabled = this.props.disabled;
          }
        }

        if (prevProps.collection !== this.props.collection) {
          this.unregister(prevProps.collection);
          this.register();
        }
      }
    }, {
      key: "componentWillUnmount",
      value: function componentWillUnmount() {
        this.unregister();
      }
    }, {
      key: "register",
      value: function register() {
        var _this$props = this.props,
            collection = _this$props.collection,
            disabled = _this$props.disabled,
            index = _this$props.index;
        var node = Object(__WEBPACK_IMPORTED_MODULE_12_react_dom__["findDOMNode"])(this);
        node.sortableInfo = {
          collection: collection,
          disabled: disabled,
          index: index,
          manager: this.context.manager
        };
        this.node = node;
        this.ref = {
          node: node
        };
        this.context.manager.add(collection, this.ref);
      }
    }, {
      key: "unregister",
      value: function unregister() {
        var collection = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : this.props.collection;
        this.context.manager.remove(collection, this.ref);
      }
    }, {
      key: "getWrappedInstance",
      value: function getWrappedInstance() {
        __WEBPACK_IMPORTED_MODULE_13_invariant___default()(config.withRef, 'To access the wrapped instance, you need to pass in {withRef: true} as the second argument of the SortableElement() call');
        return this.refs.wrappedInstance;
      }
    }, {
      key: "render",
      value: function render() {
        var ref = config.withRef ? 'wrappedInstance' : null;
        return Object(__WEBPACK_IMPORTED_MODULE_10_react__["createElement"])(WrappedComponent, Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__["a" /* default */])({
          ref: ref
        }, omit(this.props, omittedProps$1)));
      }
    }]);

    return WithSortableElement;
  }(__WEBPACK_IMPORTED_MODULE_10_react__["Component"]), Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_class, "displayName", provideDisplayName('sortableElement', WrappedComponent)), Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_class, "contextTypes", {
    manager: __WEBPACK_IMPORTED_MODULE_11_prop_types___default.a.object.isRequired
  }), Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_class, "propTypes", propTypes$1), Object(__WEBPACK_IMPORTED_MODULE_9__babel_runtime_helpers_esm_defineProperty__["a" /* default */])(_class, "defaultProps", {
    collection: 0
  }), _temp;
}



/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 62 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/*
 * Date Format 1.2.3
 * (c) 2007-2009 Steven Levithan <stevenlevithan.com>
 * MIT license
 *
 * Includes enhancements by Scott Trenda <scott.trenda.net>
 * and Kris Kowal <cixar.com/~kris.kowal/>
 *
 * Accepts a date, a mask, or a date and a mask.
 * Returns a formatted version of the given date.
 * The date defaults to the current date/time.
 * The mask defaults to dateFormat.masks.default.
 */

(function(global) {
  'use strict';

  var dateFormat = (function() {
      var token = /d{1,4}|m{1,4}|yy(?:yy)?|([HhMsTt])\1?|[LloSZWN]|"[^"]*"|'[^']*'/g;
      var timezone = /\b(?:[PMCEA][SDP]T|(?:Pacific|Mountain|Central|Eastern|Atlantic) (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)(?:[-+]\d{4})?)\b/g;
      var timezoneClip = /[^-+\dA-Z]/g;
  
      // Regexes and supporting functions are cached through closure
      return function (date, mask, utc, gmt) {
  
        // You can't provide utc if you skip other args (use the 'UTC:' mask prefix)
        if (arguments.length === 1 && kindOf(date) === 'string' && !/\d/.test(date)) {
          mask = date;
          date = undefined;
        }
  
        date = date || new Date;
  
        if(!(date instanceof Date)) {
          date = new Date(date);
        }
  
        if (isNaN(date)) {
          throw TypeError('Invalid date');
        }
  
        mask = String(dateFormat.masks[mask] || mask || dateFormat.masks['default']);
  
        // Allow setting the utc/gmt argument via the mask
        var maskSlice = mask.slice(0, 4);
        if (maskSlice === 'UTC:' || maskSlice === 'GMT:') {
          mask = mask.slice(4);
          utc = true;
          if (maskSlice === 'GMT:') {
            gmt = true;
          }
        }
  
        var _ = utc ? 'getUTC' : 'get';
        var d = date[_ + 'Date']();
        var D = date[_ + 'Day']();
        var m = date[_ + 'Month']();
        var y = date[_ + 'FullYear']();
        var H = date[_ + 'Hours']();
        var M = date[_ + 'Minutes']();
        var s = date[_ + 'Seconds']();
        var L = date[_ + 'Milliseconds']();
        var o = utc ? 0 : date.getTimezoneOffset();
        var W = getWeek(date);
        var N = getDayOfWeek(date);
        var flags = {
          d:    d,
          dd:   pad(d),
          ddd:  dateFormat.i18n.dayNames[D],
          dddd: dateFormat.i18n.dayNames[D + 7],
          m:    m + 1,
          mm:   pad(m + 1),
          mmm:  dateFormat.i18n.monthNames[m],
          mmmm: dateFormat.i18n.monthNames[m + 12],
          yy:   String(y).slice(2),
          yyyy: y,
          h:    H % 12 || 12,
          hh:   pad(H % 12 || 12),
          H:    H,
          HH:   pad(H),
          M:    M,
          MM:   pad(M),
          s:    s,
          ss:   pad(s),
          l:    pad(L, 3),
          L:    pad(Math.round(L / 10)),
          t:    H < 12 ? dateFormat.i18n.timeNames[0] : dateFormat.i18n.timeNames[1],
          tt:   H < 12 ? dateFormat.i18n.timeNames[2] : dateFormat.i18n.timeNames[3],
          T:    H < 12 ? dateFormat.i18n.timeNames[4] : dateFormat.i18n.timeNames[5],
          TT:   H < 12 ? dateFormat.i18n.timeNames[6] : dateFormat.i18n.timeNames[7],
          Z:    gmt ? 'GMT' : utc ? 'UTC' : (String(date).match(timezone) || ['']).pop().replace(timezoneClip, ''),
          o:    (o > 0 ? '-' : '+') + pad(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4),
          S:    ['th', 'st', 'nd', 'rd'][d % 10 > 3 ? 0 : (d % 100 - d % 10 != 10) * d % 10],
          W:    W,
          N:    N
        };
  
        return mask.replace(token, function (match) {
          if (match in flags) {
            return flags[match];
          }
          return match.slice(1, match.length - 1);
        });
      };
    })();

  dateFormat.masks = {
    'default':               'ddd mmm dd yyyy HH:MM:ss',
    'shortDate':             'm/d/yy',
    'mediumDate':            'mmm d, yyyy',
    'longDate':              'mmmm d, yyyy',
    'fullDate':              'dddd, mmmm d, yyyy',
    'shortTime':             'h:MM TT',
    'mediumTime':            'h:MM:ss TT',
    'longTime':              'h:MM:ss TT Z',
    'isoDate':               'yyyy-mm-dd',
    'isoTime':               'HH:MM:ss',
    'isoDateTime':           'yyyy-mm-dd\'T\'HH:MM:sso',
    'isoUtcDateTime':        'UTC:yyyy-mm-dd\'T\'HH:MM:ss\'Z\'',
    'expiresHeaderFormat':   'ddd, dd mmm yyyy HH:MM:ss Z'
  };

  // Internationalization strings
  dateFormat.i18n = {
    dayNames: [
      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat',
      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
    ],
    monthNames: [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec',
      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'
    ],
    timeNames: [
      'a', 'p', 'am', 'pm', 'A', 'P', 'AM', 'PM'
    ]
  };

function pad(val, len) {
  val = String(val);
  len = len || 2;
  while (val.length < len) {
    val = '0' + val;
  }
  return val;
}

/**
 * Get the ISO 8601 week number
 * Based on comments from
 * http://techblog.procurios.nl/k/n618/news/view/33796/14863/Calculate-ISO-8601-week-and-year-in-javascript.html
 *
 * @param  {Object} `date`
 * @return {Number}
 */
function getWeek(date) {
  // Remove time components of date
  var targetThursday = new Date(date.getFullYear(), date.getMonth(), date.getDate());

  // Change date to Thursday same week
  targetThursday.setDate(targetThursday.getDate() - ((targetThursday.getDay() + 6) % 7) + 3);

  // Take January 4th as it is always in week 1 (see ISO 8601)
  var firstThursday = new Date(targetThursday.getFullYear(), 0, 4);

  // Change date to Thursday same week
  firstThursday.setDate(firstThursday.getDate() - ((firstThursday.getDay() + 6) % 7) + 3);

  // Check if daylight-saving-time-switch occurred and correct for it
  var ds = targetThursday.getTimezoneOffset() - firstThursday.getTimezoneOffset();
  targetThursday.setHours(targetThursday.getHours() - ds);

  // Number of weeks between target Thursday and first Thursday
  var weekDiff = (targetThursday - firstThursday) / (86400000*7);
  return 1 + Math.floor(weekDiff);
}

/**
 * Get ISO-8601 numeric representation of the day of the week
 * 1 (for Monday) through 7 (for Sunday)
 * 
 * @param  {Object} `date`
 * @return {Number}
 */
function getDayOfWeek(date) {
  var dow = date.getDay();
  if(dow === 0) {
    dow = 7;
  }
  return dow;
}

/**
 * kind-of shortcut
 * @param  {*} val
 * @return {String}
 */
function kindOf(val) {
  if (val === null) {
    return 'null';
  }

  if (val === undefined) {
    return 'undefined';
  }

  if (typeof val !== 'object') {
    return typeof val;
  }

  if (Array.isArray(val)) {
    return 'array';
  }

  return {}.toString.call(val)
    .slice(8, -1).toLowerCase();
};



  if (true) {
    !(__WEBPACK_AMD_DEFINE_RESULT__ = (function () {
      return dateFormat;
    }).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
  } else if (typeof exports === 'object') {
    module.exports = dateFormat;
  } else {
    global.dateFormat = dateFormat;
  }
})(this);


/***/ }),
/* 63 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = Loader;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function Loader(_ref) {
  var isHide = _ref.isHide,
      process = _ref.process;

  return _react2.default.createElement('section', { className: 'clb-global-loader-overlay ' + (isHide ? 'd-none' : '') }, _react2.default.createElement('section', { className: 'clb-global-loader-wrapper clearfix' }, _react2.default.createElement('div', { className: 'spinner-circle float-left' }, _react2.default.createElement('div', { className: 'spinner-circle-gradient' }), _react2.default.createElement('div', { className: 'spinner-circle-inner' })), _react2.default.createElement('p', { className: 'loader-text' }, process)));
}

Loader.defaultProps = {
  process: window.RDL.Localization.lbl_updatingloader
};

/***/ }),
/* 64 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.EditorContext = undefined;

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
  return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
  return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _reactLoadable = __webpack_require__(75);

var _reactLoadable2 = _interopRequireDefault(_reactLoadable);

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRedux = __webpack_require__(46);

var _redux = __webpack_require__(15);

var _typeCodes = __webpack_require__(6);

var typeCd = _interopRequireWildcard(_typeCodes);

var _Loader = __webpack_require__(63);

var _Loader2 = _interopRequireDefault(_Loader);

var _documentActions = __webpack_require__(55);

var DocumentActions = _interopRequireWildcard(_documentActions);

var _UserActions = __webpack_require__(34);

var UserActions = _interopRequireWildcard(_UserActions);

var _commonActions = __webpack_require__(56);

var CommonActions = _interopRequireWildcard(_commonActions);

var _onboardingActions = __webpack_require__(57);

var OnboardingActions = _interopRequireWildcard(_onboardingActions);

var _CommonUtils = __webpack_require__(8);

var CommonUtils = _interopRequireWildcard(_CommonUtils);

var _localforage = __webpack_require__(10);

var localforage = _interopRequireWildcard(_localforage);

var _ReviewLoader = __webpack_require__(76);

var _ReviewLoader2 = _interopRequireDefault(_ReviewLoader);

var _viewmodel = __webpack_require__(14);

var _helper = __webpack_require__(7);

var _experimentUtils = __webpack_require__(65);

var _webfontloader = __webpack_require__(138);

var _webfontloader2 = _interopRequireDefault(_webfontloader);

var _ProgressBar = __webpack_require__(77);

var _ProgressBar2 = _interopRequireDefault(_ProgressBar);

var _TransparentOverlay = __webpack_require__(139);

var _TransparentOverlay2 = _interopRequireDefault(_TransparentOverlay);

var _WarningBanner = __webpack_require__(140);

var _WarningBanner2 = _interopRequireDefault(_WarningBanner);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof2(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof2(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
} /* eslint-disable no-console */

var ReviewPopup = (0, _reactLoadable2.default)({
  loader: function loader() {
    return __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 152));
  },
  loading: function loading() {
    return _react2.default.createElement(_Loader2.default, null);
  }
});
var Header = (0, _reactLoadable2.default)({
  loader: function loader() {
    return __webpack_require__.e/* import() */(0).then(__webpack_require__.bind(null, 153));
  },
  loading: function loading() {
    return _react2.default.createElement(_Loader2.default, null);
  }
});
var Letter = (0, _reactLoadable2.default)({
  loader: function loader() {
    return __webpack_require__.e/* import() */(2).then(__webpack_require__.bind(null, 151));
  },
  loading: function loading() {
    return _react2.default.createElement(_Loader2.default, null);
  }
});
var MasterPopup = (0, _reactLoadable2.default)({
  loader: function loader() {
    return __webpack_require__.e/* import() */(3).then(__webpack_require__.bind(null, 150));
  },
  loading: function loading() {
    return _react2.default.createElement(_Loader2.default, null);
  }
});
var OnBoardingV2Master = (0, _reactLoadable2.default)({
  loader: function loader() {
    return __webpack_require__.e/* import() */(1).then(__webpack_require__.bind(null, 154));
  },
  loading: function loading() {
    return _react2.default.createElement(_Loader2.default, { process: window.RDL.Localization.lbl_loadingPlzWait });
  }
});
var ExistingUserLoader = (0, _reactLoadable2.default)({
  loader: function loader() {
    return __webpack_require__.e/* import() */(4).then(__webpack_require__.bind(null, 155));
  },
  loading: function loading() {
    return _react2.default.createElement(_Loader2.default, null);
  }
});

var EditorContext = exports.EditorContext = (0, _react.createContext)({});

var Editor = function (_Component) {
  _inherits(Editor, _Component);

  function Editor(props, context) {
    _classCallCheck(this, Editor);

    CommonUtils.setTypeCodesProperties();

    var _this = _possibleConstructorReturn(this, (Editor.__proto__ || Object.getPrototypeOf(Editor)).call(this, props, context));

    _initialiseProps.call(_this);

    _this.state = {
      PopupName: "",
      userUid: _this.props.user.UserUID,
      docHtml: '',
      customColor: '',
      isOpenExistingUserLoader: false,
      isOpenSignInModal: false,
      isLoggedIn: _this.props.user && _this.props.user.Role == _helper.TypeCodes.userRoles.User,
      incompleteSectionList: [],
      templateTypeCD: window.RDL.defaultTemplateTypeCD,
      templateId: window.RDL.defaultTemplateID,
      skipRenderForCreateNew: true,
      skipRenderForDocEdit: true,
      hideLoader: false,
      ProgressBar: false,
      previousDocId: '',
      editSectionSecCode: '',
      isMultiColumnSkin: false,
      redirecting: false,
      progressAnimationClasses: {
        sortableListClass: "",
        signupModalClass: ""
      },
      zoomScale: 1,
      zoomOption: typeCd.letterZoomTypes.fitWidth.label,
      zoomClass: "",
      scaleOptionsStyle: {},
      selectedReviewStep: {},
      showReviewLoader: false,
      isDataUpdated: false,
      showExportPopup: false,
      popupType: "",
      isPremium: false,
      fetchDocumentSwitch: true,
      bannerInfo: {
        isVisible: false,
        message: ""
      },
      renderOnboarding: true,
      isLetterDownloaded: false,
      isLetterPrinted: false,
      payPerDownloadRespObj: {},
      hardRegFor: '',
      sectionToEdit: '',
      sectionToAdd: '',
      isRenderOnboardingV2: false,
      isbackToFinalize: false,
      isDelayShowSignature: false
    };
    typeCd.reInitProperties();
    RDL.editorComponent = _this;
    return _this;
  }

  _createClass(Editor, [{
    key: 'redirectToSellPage',
    value: function redirectToSellPage(format, param) {
      var _RDL$TrackEvents;

      var fromQuery = param === _helper.TypeCodes.finishLetterTypes.finish ? "" : "&from=html" + param;
      RDL.TrackEvents(typeCd.eventTypes.exitBuilder, (_RDL$TrackEvents = {}, _defineProperty(_RDL$TrackEvents, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents, typeCd.eventPropsKeys.exitPagePath, window.RDL.Paths.SellPageUrl), _defineProperty(_RDL$TrackEvents, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents), this.props.UserUID, this.state.isLoggedIn.toString().toUpperCase());
      CommonUtils.redirectPage(window.RDL.Paths.SellPageUrl + "&docid=" + this.props.documentObj.id + "&useruid=" + this.props.UserUID + fromQuery);
    }

    //Setting State for displaying Popups

    ///

  }, {
    key: 'render',
    value: function render() {
      var _this2 = this;

      this.localVar.renderState.renderOnBoardingV2 = false;
      this.localVar.renderState.renderEditor = false;

      if (window.RDL.defaultDocImage == true) {
        document.getElementById("resumeDoc") && document.getElementById("resumeDoc").classList.add('defaultDocImage');
      }

      if (this.state.skipRenderForCreateNew || this.state.skipRenderForDocEdit || this.state.skipForOnboardingInit) {
        return _react2.default.createElement('div', null); //Waiting for store to be cleared.
      }
      //For OnboardingV2 Render
      if (this.props.documentObj && !this.props.documentObj.id || this.props.user && this.props.user.Role != "User" && !RDL.experimentControl.isDelayLoginPopup) {
        this.localVar.renderState.renderOnBoardingV2 = !this.localVar.renderState.unMountedV2;
        // Will never be true if it has already been unMounted
      }
      //For OnBoardingV1 & Editor Render
      if (this.props.documentObj && this.props.documentObj.id && !this.state.isRenderOnboardingV2) {
        this.localVar.renderState.renderEditor = true;
        this.localVar.renderState.renderOnBoardingV2 = this.props.user.Role != "User" && !this.props.onboardingData.signUpModalSkipped && !RDL.experimentControl.isDelayLoginPopup;
        //!this.localVar.renderState.unMountedV2; // Will never be true if it has already been unMounted   
      }

      if (this.state.ProgressBar && this.state.PopupName == "") {
        this.localVar.renderState.renderOnBoardingV2 = false;
        this.localVar.renderState.renderEditor = true;
      }

      //Unmount V2 if V2 is mounted and in case of Resign Letter
      // || if user is logged in and Document is already created.
      if (window.RDL.resignationTemplateId || this.props.documentObj && this.props.documentObj.id && (this.props.user && this.props.user.Role == "User" || this.props.onboardingData.signUpModalSkipped)) {
        if (this.localVar.renderState.renderOnBoardingV2 && document.querySelector(".cln-v2")) {
          setTimeout(function () {
            _this2.localVar.renderState.renderOnBoardingV2 = false;
            _this2.localVar.renderState.unMountedV2 = true;
            _this2.forceUpdate();
          }, 1500);
        }
      }
      if (this.state.isRenderOnboardingV2) {
        this.localVar.renderState.renderOnBoardingV2 = true;
        this.localVar.renderState.renderEditor = true;
        this.localVar.renderState.showOnBoardingV2 = true;
      }
      var editorContextProps = this.getEditorContextProps();
      return _react2.default.createElement(EditorContext.Provider, { value: editorContextProps }, _react2.default.createElement('main', { className: 'cln-v2-wrapper ' + (this.state.redirecting ? "d-none" : "") + '\n          ' + (this.props.onboardingData.isReviewMode ? 'review-question-open ' : '') + '\n          ' + (this.state.showReviewLoader && this.state.isThemeChange ? 'review-progress-bar-active ' : '') }, this.state.bannerInfo.isVisible && _react2.default.createElement(_WarningBanner2.default, { bannerText: this.state.bannerInfo.message }), _react2.default.createElement(_Loader2.default, { isHide: true }), this.props.user && this.props.user.Role !== "User" && !this.props.onboardingData.signUpModalSkipped && !RDL.experimentControl.isDelayLoginPopup && _react2.default.createElement(_TransparentOverlay2.default, { setZindex: 9999 }), this.localVar.renderState.renderOnBoardingV2 && this.renderOnBoardingV2(), this.localVar.renderState.renderEditor && this.renderEditor()));
    }
  }, {
    key: 'updateContainerSectionsIndex',
    value: function updateContainerSectionsIndex(templateDocFormat, sections) {
      var templateContainerIndexes = CommonUtils.GetDefaultSectionContainerIndexes(templateDocFormat, sections);
      sections.forEach(function (section) {
        var sectionContainerIndexData = templateContainerIndexes.find(function (data) {
          return data.sectionCode == section.sectionTypeCD;
        });
        if (sectionContainerIndexData) {
          section.sectionContainerIndex = sectionContainerIndexData.value;
        }
      });
      return sections;
    }
  }, {
    key: 'restoreCustomSectionIndices',
    value: function restoreCustomSectionIndices(lstSections, customSectionsIndices) {
      customSectionsIndices.forEach(function (element) {

        var customSection = lstSections.splice(lstSections.findIndex(function (x) {
          return x.sectionTypeCD == element.secName;
        }), 1);
        lstSections.splice(lstSections.findIndex(function (x) {
          return x.sectionTypeCD == element.prevSection;
        }) + 1, 0, customSection[0]);
      });
      lstSections.forEach(function (element, i) {
        element.index = i + 1;
      });
      return lstSections;
    }
  }, {
    key: 'getCustomSectionOrder',
    value: function getCustomSectionOrder(doc) {
      var customSectionsIndices = [];
      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = typeCd.customSectionsTypeCdArr[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var secTypeCd = _step.value;

          var prevSection = null;
          var sec = doc.sections.find(function (obj, ind) {
            if (ind > 0) prevSection = doc.sections[ind - 1];
            return obj.sectionTypeCD === secTypeCd;
          });
          if (sec && sec.paragraphs && sec.paragraphs.length > 0) customSectionsIndices.push({
            secName: secTypeCd,
            prevSection: prevSection.sectionTypeCD,
            index: sec.index
          });
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      customSectionsIndices.sort(function (a, b) {
        return a.index - b.index;
      });
      return customSectionsIndices;
    }
  }, {
    key: 'addRemoveRecipientSectionPara',
    value: function addRemoveRecipientSectionPara(updatedDoc, onBoardingUserInput) {
      var recipientSection = void 0,
          recipientSectionPara = void 0,
          recipientDataList = [],
          sectionData = void 0;
      var companyName = onBoardingUserInput[typeCd.dataObjMappingKeys.companyName],
          state = onBoardingUserInput[typeCd.dataObjMappingKeys.state],
          city = onBoardingUserInput[typeCd.dataObjMappingKeys.city],
          zip = onBoardingUserInput[typeCd.dataObjMappingKeys.zip];

      var recipientFName = onBoardingUserInput[typeCd.dataObjMappingKeys.recipientFName] || "";
      var recipientLName = onBoardingUserInput[typeCd.dataObjMappingKeys.recipientLName] || "";
      var recipientStreet = onBoardingUserInput[typeCd.dataObjMappingKeys.recipientStreet] || "";

      recipientSection = _helper.CommonHelper.getSectionByCD(updatedDoc.sections, _helper.TypeCodes.sectionTypeCd.Recipient);
      recipientDataList = CommonUtils.createDataForRecipientSection(recipientFName, recipientLName, companyName, "", "", city, state, zip, this.props.user.UserUID, recipientStreet);

      //If user has entered company name
      if (companyName) {
        // Case when paragraph when exists
        if (recipientSection && recipientSection.paragraphs.length > 0) {
          sectionData = recipientSection.paragraphs[0].docDatas.find(function (x) {
            return x.fieldCD == _helper.TypeCodes.fieldCd.Company;
          });
          //If compane name is not same as before
          if (sectionData && sectionData.charValue != companyName) {
            recipientSectionPara = new _viewmodel.Paragraph({
              id: recipientSection.paragraphs[0].id,
              index: recipientSection.paragraphs[0].index,
              sectionID: recipientSection.id,
              docDatas: recipientDataList
            });
          }
        }
        // Case when paragraph does not exists
        else recipientSectionPara = new _viewmodel.Paragraph({ sectionID: recipientSection.id, docDatas: recipientDataList });

        if (recipientSectionPara) updatedDoc = this.documentActionsWrapper.AddUpdateParagraph(recipientSectionPara, false, updatedDoc, true);
      }
      // If user didn't enter any company name
      else {
          if (recipientSection && recipientSection.paragraphs.length > 0) {
            sectionData = recipientSection.paragraphs[0].docDatas.find(function (x) {
              return x.fieldCD == _helper.TypeCodes.fieldCd.Company;
            });
            if (sectionData && sectionData.charValue !== "") {
              recipientSectionPara = new _viewmodel.Paragraph({
                id: recipientSection.paragraphs[0].id,
                index: recipientSection.paragraphs[0].index,
                sectionID: recipientSection.id,
                docDatas: recipientDataList
              });
              updatedDoc = this.documentActionsWrapper.AddUpdateParagraph(recipientSectionPara, true, updatedDoc, true);
            }
          }
        }
      return updatedDoc;
    }

    //CLOSE RIGHTSIDEBAR

  }, {
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this3 = this;

      var claims = window.RDL.objClaims;
      var docIdParam = window.RDL.GetQueryString("docid");
      var createNewParam = window.RDL.GetQueryString("createnew");
      var covidParam = window.RDL.GetQueryString("covid");
      var _props$onboardingData = this.props.onboardingData,
          onboardingUserInput = _props$onboardingData.onboardingUserInput,
          onboardingStepArr = _props$onboardingData.onboardingStepArr,
          isReviewMode = _props$onboardingData.isReviewMode;

      if (!claims || !claims.user_uid || claims.user_uid == _helper.TypeCodes.emptyGuid) {
        this.commonActionsWrapper.clearStore();
        console.log("Claims not found");
        window.location = window.RDL.Paths.rootURL + window.RDL.rguPagePath;
      } else {
        this.checkBuildAndVerifyStore();
        if (this.props.documentObj.Sections) {
          this.commonActionsWrapper.clearStore(true);
        }
        window.RDL.createLS(typeCd.ForageKeyNames.isResignLetter, ""); //Delete this cookie if available

        window.onpageshow = function (event) {
          if (event.persisted) {
            window.location.reload();
          }
        };

        if (RDL.features.isRegOnContact) {
          if (!claims.firstName && !claims.lastName) {
            RDL.objClaims.firstName = onboardingUserInput[typeCd.dataObjMappingKeys.FirstName] ? onboardingUserInput[typeCd.dataObjMappingKeys.FirstName] : '';
            RDL.objClaims.lastName = onboardingUserInput[typeCd.dataObjMappingKeys.LastName] ? onboardingUserInput[typeCd.dataObjMappingKeys.LastName] : '';
          }
        }

        if (createNewParam && createNewParam == 1) {
          this.commonActionsWrapper.clearStore(true);
          window.RDL.resignationTemplateId = "";
          this.clearOnBoardingV2UserData();
        } else if (covidParam && covidParam == 1) {
          this.commonActionsWrapper.clearStore();
        } else if (this.localVar.isSkipQS) this.commonActionsWrapper.clearStore();else {
          this.setState({ skipRenderForCreateNew: false });
        }
        //To clear store and fetch the document on every refresh if exists in store--
        // sometimes document exists in store but has been deleted from dashboard.
        if (!docIdParam && !createNewParam && !window.RDL.resignationTemplateId && this.props.documentObj.id && this.props.UserUID == claims.user_uid) {
          docIdParam = this.props.documentObj.id;
        }
        if (docIdParam && onboardingStepArr.length == 0) {
          this.commonActionsWrapper.clearStore(true);
          window.RDL.resignationTemplateId = "";
          claims.role == "User" && !isReviewMode && this.clearOnBoardingV2UserData();
        } else {
          this.setState({ skipRenderForDocEdit: false });
        }
        if (window.RDL.resignationTemplateId) {
          window.RDL.createLS(typeCd.ForageKeyNames.isResignLetter, "1");
          window.history.replaceState({}, document.title, window.location.href.replace("?resign=1", ""));
        }
        // this.props.userActions.GetUserGeoLocation().then(userLocation =>{
        //     window.RDL.userLocation = userLocation;
        // });

        // window.RDL.IsEuropeanContinent = claims.isEuropianContinent;
        if (this.props.UserUID != claims.user_uid) {
          this.setState({ skipRenderForCreateNew: true });
          this.commonActionsWrapper.clearStore();
        }
        this.initializeEditorComponent(claims, docIdParam, createNewParam);
        this.checkForMultiColumnSkin(this.props.documentObj.skinCD || onboardingUserInput.selectedSkinCD);
      }

      // this.props.documentObj.skinCD != nextProps.documentObj.skinCD || this.props.documentObj.templateID

      if (this.props.documentObj && this.props.documentObj.id) {
        // this.localVar.indentyCall = false;
        this.localVar.udpatedLetterTypeDetails = {
          skinCD: this.props.documentObj.skinCD,
          templateId: this.props.documentObj.templateID
        };
      }
      var isLoggedIn = claims.role == _helper.TypeCodes.userRoles.User;
      if (isLoggedIn) {
        this.setState({ renderOnboarding: false });
        this.userActionsWrapper.getUserPreferences(claims.user_uid).then(function (prefList) {
          if (prefList && prefList.length > 0) {
            if (RDL.experimentsObj.PersonalizationV1 && RDL.experimentsObj.PersonalizationV1.portalsForConduction.indexOf(window.RDL.PortalSettings.ConfigurePortalCd) != -1) {
              var _pref = prefList.find(function (pref) {
                return pref.code == typeCd.userPreferenceKeys.personalizationV1;
              });
              if (_pref && _pref.value == 1) {
                RDL.experimentControl.isPersonalizationV1 = true;
                _this3.setState({ personalizationSkins: (0, _experimentUtils.handlePersonalizationV1)(onboardingUserInput) });
              }
            }
            var pref = prefList.find(function (pref) {
              return pref.code == typeCd.userPreferenceKeys.templatesTipShown;
            });
            if (pref && pref.value == 1) {
              window.RDL.createLS(typeCd.ForageKeyNames.templatesTipShown, 1);
            }
          }
          _this3.setState({ renderOnboarding: true });
        });
      }
      if (onboardingStepArr.length == 0 && !isLoggedIn) {
        if (!RDL.experimentsObj.ColorPicker.activeVariant) window.RDL.ConductExperiment(RDL.experimentsObj.ColorPicker, false, true);
      }

      (RDL.experimentControl.showColorPicker || window.RDL.showColorPicker) && (0, _experimentUtils.handleColorPickerSkins)();

      var skipNameScreen = isLoggedIn && !(onboardingUserInput.doNotSkipNameScreen && createNewParam != 1);
      (0, _experimentUtils.handleBuilderBasedFlow)(skipNameScreen);
      RDL.features.isRegOnContact && (0, _experimentUtils.handleRegOnContact)();
      (0, _experimentUtils.handleCEIntegrationExp)(claims.user_uid, this.props.documentObj, onboardingUserInput, onboardingStepArr);
      this.checkUserResumeAndConductExp(claims.user_uid, isLoggedIn, this.props, createNewParam);
      window.RDL.features.covid19 && (0, _experimentUtils.showCovidGapsAndLetterTypes)();
      window.RDL.features.isCustomSkills && (0, _experimentUtils.handleCustomSkills)();
      var isUploadResumeFlow = onboardingUserInput[typeCd.dataObjMappingKeys.isUploadResume] == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()];
      RDL.experimentControl.isPersonalizationV1 && this.setState({ personalizationSkins: (0, _experimentUtils.handlePersonalizationV1)(onboardingUserInput) });
      RDL.experimentControl.isUploadResume && (0, _experimentUtils.handleUploadResume)(isUploadResumeFlow, this.props.onboardingData, skipNameScreen, undefined, undefined, this.props.isLoggedIn);
      RDL.experimentControl.isSkillsV2NewUI && (0, _experimentUtils.handleSkillsEnhancementsV1)();
      RDL.experimentControl.isTemplatePageSocialProof && (0, _experimentUtils.handleSocialTemplate)();
      RDL.experimentControl.isSkipChooseTemplate && (0, _experimentUtils.handleSkipTemplate)();
      if (window.RDL.customFontFamilies.length != 0) {
        _webfontloader2.default.load({
          google: {
            families: window.RDL.customFontFamilies
          }
        });
      }
      var showTOSPPMsg = !isLoggedIn && !window.RDL.readLS(window.RDL.IS_TOS_PP_AGREED);
      if (RDL.features.showTemplatesAndHIW && showTOSPPMsg) {
        // "RDL.isTOSPPAceepted" is being set to true when user continues from the HIW page.
        if (RDL.isTOSPPAceepted) {
          this.updateUserAgreement();
        } else {
          var interval = setInterval(function () {
            if (RDL.isTOSPPAceepted) {
              _this3.updateUserAgreement();
              clearInterval(interval);
            }
          }, 500);
        }
      }
      typeCd.onBoardingStepsV2.SubjectTTC.subHeadingText = window.RDL.Localization.lbl_tellTheReader;

      if ((RDL.experimentControl.isFinalize2Funnel || RDL.features.showSignature) && this.props.documentObj && this.props.documentObj.id && this.props.onboardingData.onboardingStepArr.length == 1 && this.props.onboardingData.onboardingStepArr[0] !== typeCd.onBoardingStepsV2.ChooseTemplate.index) {
        this.setState({ isRenderOnboardingV2: true });
      }
      if (RDL.enableReactRoutes) {
        var isHIW = isHIWVisible();
        if (isHIW) {
          var title = typeCd.OnboardingStepDocTitle.HowItWorks;
          var pathname = RDL.Routes.HowItWorks;
          this.setTitleAndRoute(title, pathname, true);
        } else {
          var _title = this.getDocTitleByPathname();
          if (_title) document.title = _title;
        }
      }
    }
  }, {
    key: 'componentDidMount',
    value: function componentDidMount() {
      var _this4 = this;

      var isLoggedIn = this.props.user && this.props.user.Role == _helper.TypeCodes.userRoles.User ? true : false;
      window.RDL.AsyncTrack();
      !this.localVar.isSkipQS && this.trackEnterBuilderEvent();
      RDL.TrackOptimizelyEvents(typeCd.optimizelyEventTypes.enteredBuilder);
      setTimeout(function () {
        document.getElementById("editorDiv") && !(_this4.state.PopupName == typeCd.PopUpNames.OnBoardingV2) && document.getElementById("editorDiv").classList.remove('d-none');
        document.getElementById("editorDiv") && _this4.state.PopupName == typeCd.PopUpNames.OnBoardingV2 && document.getElementById("editorDiv").classList.add('d-none');
        _this4.setState({ hideLoader: true });
      }, 1000);
      this.fetchSkins(isLoggedIn);
      window.RDL.Timer.init();
      !this.localVar.delayHideLoaderAnimation && hideloadingAnimation();

      window.RDL.isResumeExpert ? document.documentElement.classList.add("resume-expert") : "";

      if (this.localVar.renderState.showOnBoardingV2) {
        document.getElementById("editorDiv") && document.getElementById("editorDiv").classList.remove("d-none");
      }
      !(this.state.isRenderOnboardingV2 || this.state.isbackToFinalize) && this.showHideEditorDiv();
      this.setTemplateTypeCD();
      isLoggedIn && this.loadScripts(20000);
      RDL.enableReactRoutes && window.addEventListener("popstate", this.onPopState.bind(this));
    }
  }, {
    key: 'componentDidUpdate',
    value: function componentDidUpdate(prevProps) {
      var _this5 = this;

      if (this.props.onboardingData.isReviewMode) {
        (function () {
          var isDataUpdated = false,
              isThemeChange = _this5.state.isThemeChange;
          var onboardingUserInput = _this5.props.onboardingData.onboardingUserInput,
              docPreferences = _this5.props.documentObj.preferences,
              updatedDocPreferences = _this5.setPreference(typeCd.docPreference, onboardingUserInput);

          var _loop = function _loop(i) {
            var index = docPreferences.findIndex(function (pref) {
              return pref.docPreferenceTypeCD == updatedDocPreferences[i].docPreferenceTypeCD;
            });
            if (index < 0 && _this5.isOnboardingModified(updatedDocPreferences[i].value, '', updatedDocPreferences[i].docPreferenceTypeCD) || index >= 0 && _this5.isOnboardingModified(updatedDocPreferences[i].value, docPreferences[index].value, updatedDocPreferences[i].docPreferenceTypeCD)) {
              if (updatedDocPreferences[i].docPreferenceTypeCD === typeCd.themeChange.workingStyle || updatedDocPreferences[i].docPreferenceTypeCD === typeCd.themeChange.workExperience && typeCd.onBoardingStepsV2.WorkExperience.reviewData.isBranchChange({ Number: updatedDocPreferences[i].value }, { Number: updatedDocPreferences[i].value })) isThemeChange = true;
              isDataUpdated = true;
            }
          };

          for (var i = 0; i < updatedDocPreferences.length; i++) {
            _loop(i);
          }

          isDataUpdated != _this5.state.isDataUpdated && _this5.setState({ isDataUpdated: isDataUpdated });
          isThemeChange != _this5.state.isThemeChange && _this5.setState({ isThemeChange: isThemeChange });
        })();
      }
      //remove active class
      if (window.RDL.features.showReskinnedFinalize && !this.props.onboardingData.isReviewMode) {
        var reviewAnsNode = document.querySelector(".js-nav-reviewans");
        if (RDL.features.showReskinnedFinalize && reviewAnsNode) {
          reviewAnsNode.classList.remove("active");
        }
      }
      !(this.state.isRenderOnboardingV2 || this.state.isbackToFinalize) && this.showHideEditorDiv();
      if (window.RDL.resignationTemplateId) {
        !this.localVar.delayHideLoaderAnimation && this.props.documentObj.id && window.RDL.defaultDocImage == false && hideloadingAnimation(); //Only for resignTemplate case.
      } else {
        !this.localVar.delayHideLoaderAnimation && hideloadingAnimation();
      }
      if (this.props.documentObj.id != prevProps.documentObj.id) this.setTemplateTypeCD();

      if (this.state.ProgressBar && !document.getElementsByTagName("body")[0].style.overflow) document.getElementsByTagName("body")[0].style.overflow = "hidden";else if (!this.state.ProgressBar && document.getElementsByTagName("body")[0].style.overflow) document.getElementsByTagName("body")[0].style.overflow = "";

      this.setDocIDQueryString();
      if ((RDL.experimentControl.isFinalize2Funnel || RDL.features.showSignature) && this.props.documentObj && this.props.documentObj.id && this.props.onboardingData.onboardingStepArr.length == 1 && this.props.onboardingData.onboardingStepArr[0] !== typeCd.onBoardingStepsV2.ChooseTemplate.index) {
        document.getElementById("editorDiv") && !document.getElementById("editorDiv").classList.contains("d-none") && document.getElementById("editorDiv").classList.add('d-none');
      }
      if (this.props.documentObj.id != prevProps.documentObj.id && this.state.isLoggedIn && !this.state.isRenderOnboardingV2) {
        var onboardingData = CommonUtils.fetchOnboardingdata(this.props.documentObj);
        if (onboardingData) {
          this.onboardingActionsWrapper.saveOnboardingUserInput(onboardingData);
        }
      }
    }
  }, {
    key: 'componentWillReceiveProps',
    value: function componentWillReceiveProps(nextProps) {
      if (this.props != nextProps) {
        this.setState({
          isLoggedIn: nextProps.user && nextProps.user.Role == _helper.TypeCodes.userRoles.User
        });
        this.getIncompleteSection(nextProps);
        if (this.state.skipRenderForCreateNew && !nextProps.documentObj.id && !nextProps.onboardingData.onboardingStepArr.length) {
          this.setState({ skipRenderForCreateNew: false });
          this.setOnBoardingPopUpState(nextProps);
        }

        if (!this.localVar.udpatedLetterTypeDetails && nextProps.documentObj.id) {
          this.updateUserTraits(nextProps);
        } else if (nextProps.documentObj.id && (this.localVar.udpatedLetterTypeDetails.skinCD != nextProps.documentObj.skinCD || this.localVar.udpatedLetterTypeDetails.templateId != nextProps.documentObj.templateID)) {
          this.updateUserTraits(nextProps);
        }

        if (this.props.documentObj.skinCD != nextProps.documentObj.skinCD) {
          this.checkForMultiColumnSkin(nextProps.documentObj.skinCD || nextProps.onboardingData.onboardingUserInput.selectedSkinCD);
        }

        if (nextProps.documentObj && nextProps.documentObj.id && !this.props.documentObj.id) {
          this.openSuggestDesktopVersionPopup();
        }
      }
      this.setTemplateTypeCD();
      var _commonTypeCodes$sect = _helper.TypeCodes.sectionTypeCd,
          Subject = _commonTypeCodes$sect.Subject,
          Greetings = _commonTypeCodes$sect.Greetings,
          Confidentiality = _commonTypeCodes$sect.Confidentiality,
          SalaryRuquirements = _commonTypeCodes$sect.SalaryRuquirements,
          Availablity = _commonTypeCodes$sect.Availablity,
          Relocation = _commonTypeCodes$sect.Relocation,
          Closer = _commonTypeCodes$sect.Closer;

      var additionalSections = [{ sectionTypeCD: Subject }, { sectionTypeCD: Greetings }, { sectionTypeCD: Confidentiality }, { sectionTypeCD: SalaryRuquirements }, { sectionTypeCD: Availablity }, { sectionTypeCD: Relocation }, { sectionTypeCD: Closer }];
      this.localVar.templateTypeCD && this.commonActionsWrapper.cacheExamplesLocally(window.RDL.customPortalForTTC || window.RDL.PortalSettings.ConfigurePortalCd, this.localVar.templateTypeCD, nextProps.documentObj.sections, RDL.experimentControl.isFinalize2Funnel && additionalSections);
    }
  }, {
    key: 'updateUserTraits',

    //#endRegion

    value: function updateUserTraits(nextProps) {
      var _RDL$TrackEvents2;

      var udpatedLetterTypeDetails = CommonUtils.getLetterTypeDetails(nextProps.documentObj);
      this.localVar.udpatedLetterTypeDetails = {
        skinCD: nextProps.documentObj.skinCD,
        templateId: nextProps.documentObj.templateID
      };
      RDL.TrackEvents(typeCd.eventTypes.identify, (_RDL$TrackEvents2 = {}, _defineProperty(_RDL$TrackEvents2, typeCd.traitsPropsKey.templateName, udpatedLetterTypeDetails.skinName), _defineProperty(_RDL$TrackEvents2, typeCd.traitsPropsKey.letterType, udpatedLetterTypeDetails.letterTypeName), _RDL$TrackEvents2), this.props.user.UserUID, this.props.user.Role && this.props.user.Role == "User" ? 'TRUE' : 'FALSE');
    }

    //#region for UserActions Wrapper Functions

    //endregion
    //#region for CommonActions Wrapper Functions

    //endregion
    //#region for DocumentActions Wrapper Functions

    //#region for OnboardingActions Wrapper Functions

  }]);

  return Editor;
}(_react.Component);

var _initialiseProps = function _initialiseProps() {
  var _this6 = this;

  this.localVar = {
    delayHideLoaderAnimation: false,
    defaultWidthSet: false,
    renderState: {
      renderOnBoardingV2: false,
      renderEditor: false,
      showOnBoardingV2: false,
      unMountedV2: false
    },
    mountCounter: 0,
    fadeDocForResignLetter: false,
    isSkipQS: RDL.GetQueryString(typeCd.QueryStringParams.isSkip)
  };
  this.userRole = '';

  this.setEditorState = function (state, value) {
    _this6.setState(_defineProperty({}, state, value));
  };

  this.getIncompleteSection = function (nextProps) {
    nextProps = nextProps ? nextProps : _this6.props;
    var incompleteSectionList = CommonUtils.getIncompleteSection(nextProps.documentObj);
    _this6.setState({ incompleteSectionList: incompleteSectionList });
  };

  this.setBannerInfo = function (isVisible, message) {
    _this6.setState({ bannerInfo: { isVisible: isVisible, message: message } });
  };

  this.checkNameSection = function () {
    var nameDetails = _helper.CommonHelper.getNameSectionVal(_this6.props.documentObj);
    if (nameDetails.fName || nameDetails.lName) {
      return true;
    } else {
      return false;
    }
  };

  this.downloadLetterAsImage = function (docFormat) {
    var fileFormat = docFormat;
    _this6.documentActionsWrapper.PreviewDocument(_this6.props.UserUID, _this6.props.documentObj.id, null, null, null, null, fileFormat).then(function (resp) {
      if (resp) {
        resp.filter(function (x) {
          return x.fileType == typeCd.docFileTypeCD.Preview;
        }).forEach(function (res) {
          var length = res && res.images && res.images.length;
          res.images && res.images.forEach(function (img, index) {
            var name = _this6.props.documentObj.name || '';
            if (length > 1) {
              name = name + '_' + (index + 1).toString();
            }
            if (navigator.msSaveBlob) {
              // IE10+
              var contentType = 'image/' + fileFormat.toLowerCase() + '+xml';
              var blob = CommonUtils.b64toBlob(img.file.binaryData, contentType);
              return navigator.msSaveOrOpenBlob(blob, name + '.' + fileFormat.toLowerCase());
            } else {
              CommonUtils.downloadFile("data:image/" + fileFormat.toLowerCase() + "+xml;base64," + img.file.binaryData, name, fileFormat.toLowerCase());
            }
          });
        });
      }
    });
  };

  this.startDownload = function (docFormat) {
    var payPerDownloadRespObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var letterTypeDetails = CommonUtils.getLetterTypeDetails(_this6.props.documentObj);
    var isDownloadSVG = false;
    var useV2 = void 0,
        eventDetails = void 0,
        userPreferences = void 0,
        payperFeatureTrackParam = void 0;

    if (RDL.features.isPayPerDownload || RDL.experimentControl.isPayPerDownloadDesktop) {
      var _ref2, _ref3;

      var userType = typeCd.eventPropsValues.csAgent;
      useV2 = true;
      if (!payPerDownloadRespObj.isAgent) {
        var _ref;

        userType = typeCd.eventPropsValues.user;
        userPreferences = [(_ref = {}, _defineProperty(_ref, typeCd.customFields.code, typeCd.userPreferenceKeys.payPerFeature), _defineProperty(_ref, typeCd.customFields.value, typeCd.customFields.True), _ref)];
      }
      eventDetails = [(_ref2 = {}, _defineProperty(_ref2, typeCd.customFields.name, typeCd.eventPropsKeys.screenName), _defineProperty(_ref2, typeCd.customFields.value, typeCd.eventPropsValues.screenNames.finalize), _ref2), (_ref3 = {}, _defineProperty(_ref3, typeCd.customFields.name, typeCd.eventPropsKeys.downloadedBy), _defineProperty(_ref3, typeCd.customFields.value, userType), _ref3)];
      payperFeatureTrackParam = {
        eventID: null, isAgent: payPerDownloadRespObj.isAgent,
        eventType: _helper.TypeCodes.finishLetterTypes.download,
        productCD: RDL.PortalSettings.ConfigureProductCd,
        emailTo: null, orderID: payPerDownloadRespObj.orderID,
        wasCharged: payPerDownloadRespObj.wasCharged
      };
    }
    if (typeCd.imageDownloadOption.includes(docFormat)) {
      _this6.downloadLetterAsImage(docFormat);
    } else {
      _this6.documentActionsWrapper.DownloadLetter(_this6.props.UserUID, _this6.props.documentObj.id, window.RDL.PortalSettings.ConfigurePortal, docFormat, "eXPT", CommonUtils.getStyleSheetForDownload(docFormat), true, false, "", "", false, isDownloadSVG, letterTypeDetails.skinName, true, true, letterTypeDetails.letterTypeName, undefined, undefined, undefined, useV2, eventDetails, userPreferences, payperFeatureTrackParam);
    }
    (RDL.features.isPayPerDownload || RDL.experimentControl.isPayPerDownloadDesktop) && payPerDownloadRespObj.wasCharged && _this6.onLetterDownloaded();
  };

  this.onDownloadClick = function (docFormat, docAction, payPerDownloadRespObj, isCallBack) {
    var _RDL$TrackEvents3;

    RDL.TrackEvents(typeCd.eventTypes.builderUsage, (_RDL$TrackEvents3 = {}, _defineProperty(_RDL$TrackEvents3, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents3, typeCd.eventPropsKeys.action, typeCd.eventPropsValues.actions.clicked), _defineProperty(_RDL$TrackEvents3, typeCd.eventPropsKeys.screenName, typeCd.eventPropsValues.coverLetterEditor), _defineProperty(_RDL$TrackEvents3, typeCd.eventPropsKeys.clickOption, typeCd.eventPropsValues.clickOptions.download), _defineProperty(_RDL$TrackEvents3, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents3), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());
    return _this6.userActionsWrapper.IsPremiumUser(_this6.props.UserUID, window.RDL.PortalSettings.ConfigureProductId).then(function (resp) {
      if (resp != null) {
        if (resp && (RDL.features.isPayPerDownload || RDL.experimentControl.isPayPerDownloadDesktop) && !isCallBack && docFormat != _helper.TypeCodes.documentFormat.PlainText) {
          _this6.checkAndOpenPayPerDownload(docAction, docFormat);
          return;
        }
        if (resp || docFormat == _helper.TypeCodes.documentFormat.PlainText) {
          _this6.startDownload(docFormat, payPerDownloadRespObj);
          return true;
        } else {
          var _RDL$TrackEvents4;

          RDL.TrackEvents(typeCd.eventTypes.exitBuilder, (_RDL$TrackEvents4 = {}, _defineProperty(_RDL$TrackEvents4, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents4, typeCd.eventPropsKeys.exitPagePath, window.RDL.Paths.SellPageUrl), _defineProperty(_RDL$TrackEvents4, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents4), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());
          CommonUtils.redirectPage(window.RDL.Paths.SellPageUrl + "&docid=" + _this6.props.documentObj.id + "&useruid=" + _this6.props.UserUID + "&doctype=" + docFormat.toLowerCase() + "&from=htmldownload");
        }
      }
    });
  };

  this.checkAndOpenPayPerDownload = function (docAction) {
    var docFormat = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _helper.TypeCodes.documentFormat.AdobePDF;

    if (typeof PPFWidget != "undefined" && PPFWidget) {
      var payperFeatureRequest = {};
      payperFeatureRequest.productCD = window.RDL.PortalSettings.ConfigureProductCd;
      payperFeatureRequest.docAction = docAction;
      payperFeatureRequest.docID = _this6.props.documentObj.id;
      payperFeatureRequest.docFormat = docFormat;
      payperFeatureRequest.screenName = typeCd.eventPropsValues.screenNames.clbFinalize;
      _this6.payperFeatureRequest = payperFeatureRequest;
      PPFWidget.checkAndOpen(payperFeatureRequest, _this6.payPerDownloadSuccess, _this6.payPerDownloadError);
    }
  };

  this.payPerDownloadSuccess = function (payPerDownloadRespObj) {
    //responseObj: {wasCharged: false, isAgent: false}
    switch (_this6.payperFeatureRequest.docAction) {
      case typeCd.exportOptions.Download:
        _this6.onDownloadClick(_this6.payperFeatureRequest.docFormat, _this6.payperFeatureRequest.docAction, payPerDownloadRespObj, true);
        break;
      case typeCd.exportOptions.Email:
        _this6.LoadExportPopup(false, _helper.TypeCodes.finishLetterTypes.email, undefined, _this6.payperFeatureRequest.docAction, payPerDownloadRespObj, true);
        break;
      case typeCd.exportOptions.Print:
        _this6.LoadExportPopup(false, _helper.TypeCodes.finishLetterTypes.print, undefined, _this6.payperFeatureRequest.docAction, payPerDownloadRespObj, true);
        break;
    }
  };

  this.payPerDownloadError = function () {
    RDL.LogError("Error in payperFeatureRequest: " + JSON.stringify(_this6.payperFeatureRequest), "Sidebar.jsx -> checkAndOpenPayPerDownload", false, _this6.payperFeatureRequest.docID);
  };

  this.checkOnBoardingV2ExitStep = function () {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this6.props;

    var isExitStep = void 0;
    var onBoardingStepArr = props.onboardingData.onboardingStepArr;
    if (onBoardingStepArr && onBoardingStepArr.length && onBoardingStepArr[onBoardingStepArr.length - 1] == typeCd.onBoardingStepsV2.Exit.index) {
      isExitStep = true;
    }
    return isExitStep;
  };

  this.showSigInForResign = function () {
    if (_this6.props.user && _this6.props.user.Role != "User") {
      _this6.setState({
        PopupName: typeCd.PopUpNames.SignUp,
        progressAnimationClasses: Object.assign(_this6.state.progressAnimationClasses, { signupModalClass: " fade-screen" })
      });
      setTimeout(function () {
        _this6.setState({
          progressAnimationClasses: Object.assign(_this6.state.progressAnimationClasses, { signupModalClass: "" })
        });
      }, 1000);
    }
  };

  this.setExportPopUp = function (value) {
    _this6.setState({ showExportPopup: value });
  };

  this.openSpellCheckPopup = function () {
    var _RDL$TrackEvents5;

    RDL.TrackEvents(typeCd.eventTypes.builderUsage, (_RDL$TrackEvents5 = {}, _defineProperty(_RDL$TrackEvents5, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents5, typeCd.eventPropsKeys.action, typeCd.eventPropsValues.actions.clicked), _defineProperty(_RDL$TrackEvents5, typeCd.eventPropsKeys.screenName, typeCd.eventPropsValues.coverLetterEditor), _defineProperty(_RDL$TrackEvents5, typeCd.eventPropsKeys.clickOption, typeCd.eventPropsValues.clickOptions.spelling), _defineProperty(_RDL$TrackEvents5, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents5), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());
    showLoaderOverlay();
    var docDataString = CommonUtils.getConcatenatedDocDataText(_this6.props.documentObj.sections);
    docDataString = docDataString.replace("[", "").replace("]", "");
    (docDataString == "" || docDataString) && _this6.commonActionsWrapper.getSpellCheckResults(docDataString).then(function (resp) {
      _this6.setState({
        spellCheckString: docDataString, spellCheckResponse: resp,
        PopupName: typeCd.PopUpNames.SpellCheckModal
      });
      hideLoaderOverlay();
    });
  };

  this.exportDoc = function (docAction, docFormat, payPerDownloadRespObj, isSignUpSuccessful) {
    if (_this6.state.isLoggedIn || isSignUpSuccessful) {
      switch (docAction) {
        case _helper.TypeCodes.finishLetterTypes.finish:
          _this6.openFinishLetter();
          break;
        case typeCd.exportOptions.Download:
          _this6.onDownloadClick(docFormat, docAction, payPerDownloadRespObj);
          break;
        case typeCd.exportOptions.Email:
          _this6.LoadExportPopup(false, _helper.TypeCodes.finishLetterTypes.email, undefined, docAction, payPerDownloadRespObj);
          break;
        case typeCd.exportOptions.Print:
          _this6.LoadExportPopup(false, _helper.TypeCodes.finishLetterTypes.print, undefined, docAction, payPerDownloadRespObj);
          break;
      }
    } else _this6.showHardReg(docAction, docFormat, payPerDownloadRespObj);
  };

  this.LoadExportPopup = function (forceExport, popupType, isPremium, docAction) {
    var _RDL$TrackEvents6;

    var payPerDownloadRespObj = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : {};
    var isCallBack = arguments[5];

    RDL.TrackEvents(typeCd.eventTypes.builderUsage, (_RDL$TrackEvents6 = {}, _defineProperty(_RDL$TrackEvents6, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents6, typeCd.eventPropsKeys.action, typeCd.eventPropsValues.actions.clicked), _defineProperty(_RDL$TrackEvents6, typeCd.eventPropsKeys.screenName, typeCd.eventPropsValues.coverLetterEditor), _defineProperty(_RDL$TrackEvents6, typeCd.eventPropsKeys.clickOption, popupType), _defineProperty(_RDL$TrackEvents6, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents6), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());

    if (forceExport) {
      _this6.setState({ showExportPopup: true, popupType: popupType, isPremium: isPremium, payPerDownloadRespObj: payPerDownloadRespObj });
    } else {
      _this6.userActionsWrapper.IsPremiumUser(_this6.props.UserUID, window.RDL.PortalSettings.ConfigureProductId).then(function (resp) {
        if (resp != null) {
          if (resp) {
            if ((RDL.features.isPayPerDownload || RDL.experimentControl.isPayPerDownloadDesktop) && !isCallBack) {
              _this6.checkAndOpenPayPerDownload(docAction, _helper.TypeCodes.documentFormat.AdobePDF);
              return;
            }
            if ((RDL.features.isPayPerDownload || RDL.experimentControl.isPayPerDownloadDesktop) && payPerDownloadRespObj.wasCharged && popupType == _helper.TypeCodes.finishLetterTypes.email) {
              _this6.setState({
                PopupName: typeCd.PopUpNames.DifferentEmailConf,
                popupType: popupType, isPremium: true, payPerDownloadRespObj: payPerDownloadRespObj
              });
            } else _this6.setState({ showExportPopup: true, popupType: popupType, isPremium: true, payPerDownloadRespObj: payPerDownloadRespObj });
          } else {
            _this6.redirectToSellPage(_helper.TypeCodes.documentFormat.AdobePDF, _this6.state.popupType);
          }
        }
      });
    }
  };

  this.setOnBoardingPopUpState = function (nextProps) {
    nextProps = nextProps ? nextProps : _this6.props;
    var setStateObj = {};
    var isLoggedIn = nextProps.user && nextProps.user.Role == "User";
    if (window.RDL.mobileCheck.isMobile) {
      window.RDL.mobileCheck.MetaScaleAdd();
    }
    var docIdParam = window.RDL.GetQueryString(typeCd.QueryStringParams.docid);
    _this6.localVar.renderState.showOnBoardingV2 = false;
    if (window.RDL.resignationTemplateId && !isLoggedIn) {
      setTimeout(function () {
        var userStageHit = window.RDL.readLS(typeCd.ForageKeyNames.userStageHit);
        if (userStageHit != "1") {
          window.RDL.createLS(typeCd.ForageKeyNames.userStageHit, "1");
          _this6.userActionsWrapper.SaveUserStages(nextProps.user.UserUID, typeCd.userStages.EnteredBuilder, window.RDL.PortalSettings.ConfigureProductCd, window.RDL.PortalSettings.ConfigurePortalCd);
        }
      }, 300);
    } else if (!docIdParam && (nextProps.documentObj == null || nextProps.documentObj.id == null)) {
      if (_this6.checkOnBoardingV2ExitStep(nextProps)) {
        _this6.getPreviousOnboardingStep(nextProps);
      };
      setStateObj = { PopupName: typeCd.PopUpNames.OnBoardingV2 };
      _this6.localVar.renderState.showOnBoardingV2 = true;
    } else if (!isLoggedIn && !_this6.props.onboardingData.signUpModalSkipped && !RDL.experimentControl.isDelayLoginPopup) {
      var isExitStep = _this6.checkOnBoardingV2ExitStep();
      if (isExitStep) {
        setStateObj = { PopupName: typeCd.PopUpNames.SignUp };
      } else {
        setStateObj = { PopupName: typeCd.PopUpNames.OnBoardingV2 };
        _this6.localVar.renderState.showOnBoardingV2 = true;
      }
    } else if (isLoggedIn || _this6.props.onboardingData.signUpModalSkipped) {
      if (window.RDL.mobileCheck.isMobile) {
        window.RDL.mobileCheck.MetaScaleRemove();
      }
      _this6.localVar.renderState.showOnBoardingV2 = false;
      setStateObj = {
        templateId: nextProps.documentObj.templateID,
        PopupName: _this6.state.PopupName == typeCd.PopUpNames.OnBoardingV2 ? "" : _this6.state.PopupName
      };
      _this6.openSuggestDesktopVersionPopup();
    }
    _this6.setState(setStateObj);
  };

  this.isCheckAndConductImportResumeExp = function (isLoggedIn, props, createNewParam) {
    return isLoggedIn && RDL.experimentsObj.ImportFromResume && RDL.experimentsObj.ImportFromResume.portalsForConduction.indexOf(window.RDL.PortalSettings.ConfigurePortalCd) != -1 && ((!props.onboardingData.resumeArr || !props.onboardingData.resumeArr.length) && !props.onboardingData.onboardingStepArr.length && !props.documentObj.id || createNewParam);
  };

  this.checkUserResumeAndConductExp = function (userUID, isLoggedIn, props, createNewParam) {
    var setStateObj = {};
    if (_this6.isCheckAndConductImportResumeExp(isLoggedIn, props, createNewParam)) {
      _this6.setState({ renderOnboarding: false });
      _this6.documentActionsWrapper.GetPaginated(userUID, RDL.PortalSettings.ConfigurePortalCd, _helper.TypeCodes.documentTypeCD.resume).then(function (resumeArr) {
        if (resumeArr && resumeArr.length) {
          //  TODO: uncomment later on
          //  window.RDL.ConductExperiment(RDL.experimentsObj.ImportFromResume, false, true);
          if (RDL.experimentControl.isImportFromResume) {
            _this6.onboardingActionsWrapper.saveResumeArr(resumeArr);
            _this6.initializeResumeImportOB(setStateObj);
          }
        }
        setStateObj.renderOnboarding = true;
        _this6.setState(setStateObj);
      });
    } else if (props.onboardingData.onboardingStepArr[0] == typeCd.onBoardingStepsV2.ImportResumeScreen.index) {
      RDL.experimentControl.isImportFromResume = true;
      _this6.initializeResumeImportOB(setStateObj);
      _this6.setState(setStateObj);
    }
  };

  this.initializeResumeImportOB = function () {
    var setStateObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    (0, _experimentUtils.handleResumeImport)();
    setStateObj.firstStep = typeCd.onBoardingStepsV2.ImportResumeScreen.index;
  };

  this.closeAllModalsExcept = function (OpenModal) {
    Object.keys(_this6.state).map(function (key) {
      if (key && key.toString() != '' && key.toString().indexOf('isOpen') > -1) {
        _this6.setState(_defineProperty({}, key, key === OpenModal), function () {
          return;
        });
      }
    });
  };

  this.openSignUpScreen = function () {
    RDL.enableReactRoutes && _this6.setTitleAndRoute(typeCd.OnboardingStepDocTitle.Finalize, RDL.Routes.Finalize);
    var isDataChange = _this6.props.onboardingData.isInputModified;
    _this6.localVar.renderState.showOnBoardingV2 = false;
    var userData = _this6.props.onboardingData.onboardingUserInput;
    var contact = {
      firstName: userData[typeCd.dataObjMappingKeys.FirstName],
      lastName: userData[typeCd.dataObjMappingKeys.LastName],
      email: userData[typeCd.dataObjMappingKeys.email],
      phone: userData[typeCd.dataObjMappingKeys.phone],
      city: userData[typeCd.dataObjMappingKeys.userCity],
      state: userData[typeCd.dataObjMappingKeys.userState],
      zip: userData[typeCd.dataObjMappingKeys.userZip],
      street: userData[typeCd.dataObjMappingKeys.userStreet]
    };

    userData && _this6.UpdateNameContactInDocument(contact);
    // this cookie ensure progress bar will be shown only first time
    var progBarCookie = window.RDL.readLS(typeCd.ForageKeyNames.progressBar);
    if (_this6.state.PopupName == typeCd.PopUpNames.OnBoardingV2 && (isDataChange || progBarCookie == null)) {
      _this6.setState({
        ProgressBar: true,
        PopupName: "",
        progressAnimationClasses: Object.assign(_this6.state.progressAnimationClasses, { sortableListClass: " hide-section" })
      });
      setTimeout(function () {
        _this6.setState({
          ProgressBar: false,
          PopupName: typeCd.PopUpNames.SignUp,
          progressAnimationClasses: Object.assign(_this6.state.progressAnimationClasses, { signupModalClass: " fade-screen" })
        });
      }, 9000);
      setTimeout(function () {
        _this6.setState({
          progressAnimationClasses: Object.assign(_this6.state.progressAnimationClasses, { signupModalClass: "" })
        });
      }, 10000);
      window.RDL.createLS(typeCd.ForageKeyNames.progressBar, "1", 1);
    } else {
      if (_this6.props.user && _this6.props.user.Role != "User" && !_this6.props.onboardingData.signUpModalSkipped) {
        _this6.setState({
          PopupName: typeCd.PopUpNames.SignUp,
          progressAnimationClasses: Object.assign(_this6.state.progressAnimationClasses, { signupModalClass: " fade-screen" })
        });
      } else {
        _this6.CloseAllModals();
      }
    }
  };

  this.closeReview = function () {
    _this6.setState({ PopupName: "" });
    _this6.onboardingActionsWrapper.updateReviewState(false);
  };

  this.CloseAllModals = function () {
    _this6.setState({ PopupName: "" });
  };

  this.openExportModal = function () {
    _this6.setState({ showExportPopup: true, PopupName: "" });
  };

  this.trackEventsForDesktopSuggestion = function (status) {
    var _RDL$TrackEvents7;

    RDL.TrackEvents(typeCd.eventTypes.finalizeToDesktop, (_RDL$TrackEvents7 = {}, _defineProperty(_RDL$TrackEvents7, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents7, typeCd.eventPropsKeys.action, typeCd.eventPropsValues.actions.clicked), _defineProperty(_RDL$TrackEvents7, typeCd.eventPropsKeys.clickOption, status), _defineProperty(_RDL$TrackEvents7, typeCd.eventPropsKeys.email, _this6.props.user.EmailAddress), _defineProperty(_RDL$TrackEvents7, typeCd.eventPropsKeys.docId, _this6.props.documentObj ? _this6.props.documentObj.id : ""), _RDL$TrackEvents7), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());
  };

  this.openNameRegScreen = function () {
    _this6.localVar.renderState.showOnBoardingV2 = false;
    if (_this6.props.user && _this6.props.user.Role != "User") {
      if (_this6.checkOnBoardingV2ExitStep()) {
        _this6.getPreviousOnboardingStep();
      };
      _this6.localVar.renderState.showOnBoardingV2 = true;
      _this6.setState({ PopupName: typeCd.PopUpNames.OnBoardingV2 });
      /*******  Adding fade animation from builder to back name screen v2 ********/
      // document.querySelector(".cln-v2") && document.querySelector(".cln-v2")
      //.classList.add("entry-to-onboarding");
      // document.querySelector(".cln-v2") && document.querySelector(".cln-v2").classList.remove("d-none");
    } else {
      _this6.setState({ PopupName: "" });
      if (_this6.props.user && _this6.props.user.Role === "User") {
        _this6.userActionsWrapper.SaveUserStages(_this6.props.user.UserUID, typeCd.userStages.EditorReached, window.RDL.PortalSettings.ConfigureProductCd, window.RDL.PortalSettings.ConfigurePortalCd);
      }
    }
  };

  this.showHardReg = function (docAction, docFormat, payPerDownloadRespObj) {
    _this6.setState({
      PopupName: typeCd.PopUpNames.SignUp,
      progressAnimationClasses: Object.assign(_this6.state.progressAnimationClasses, { signupModalClass: " fade-screen" }),
      hardRegFor: { docAction: docAction, docFormat: docFormat, payPerDownloadRespObj: payPerDownloadRespObj }
    });
  };

  this.openCongratulationsScreen = function () {
    //this.conductExperiments(commonTypeCodes.userRoles.User, 
    //typeCd.experimentList.letterTypePreview, this.prefetchSampleTemplate); 
    //Conducting Preview Experiment
    _this6.setState({ PopupName: typeCd.PopUpNames.Congratulations });
    RDL.TrackOptimizelyEvents(typeCd.optimizelyEventTypes.registration);
    _this6.loadScripts();
  };

  this.openExistingUserLoader = function () {
    _this6.setState({ PopupName: '', isOpenExistingUserLoader: true });
  };

  this.showEditorTips = function () {
    _this6.closeAllModalsExcept('');
    var isopenTemplateTips = RDL.features.showReskinnedFinalize ? false : true;
    _this6.setState({ isOpenTips: true, isopenTemplateTips: isopenTemplateTips, PopupName: "" });
    _this6.openSuggestDesktopVersionPopup();
  };

  this.navigateToOnboarding = function (sectionTypeCD) {
    _this6.onboardingActionsWrapper.saveOnboardingStepArr([]);
    var firstStep = Object.values(typeCd.onBoardingStepsV2).find(function (item) {
      return item.sectionType && item.sectionType.includes(sectionTypeCD);
    });
    if (firstStep) _this6.firstStep = firstStep.index;
    !document.getElementById("editorDiv").classList.contains("d-none") && document.getElementById("editorDiv").classList.add('d-none');
    _this6.setState({
      isRenderOnboardingV2: true, renderOnboarding: true, isbackToFinalize: false,
      isDelayShowSignature: RDL.experimentControl.isDelayLoginPopup ? true : false
    });
  };

  this.backToFinalize = function () {
    _this6.localVar.renderState.renderOnBoardingV2 = false;
    _this6.setState({
      PopupName: "", renderOnboarding: false, isRenderOnboardingV2: false,
      isbackToFinalize: true, isDelayShowSignature: false
    });
    _this6.onboardingActionsWrapper.saveOnboardingStepArr([]);
    document.getElementById("editorDiv").classList.contains("d-none") && document.getElementById("editorDiv").classList.remove('d-none');
    _this6.setZoomScale();
    hideLoaderOverlay();
  };

  this.openWelcomeBackPopup = function (resp) {
    //this.conductExperiments(commonTypeCodes.userRoles.User, 
    //typeCd.experimentList.letterTypePreview, this.prefetchSampleTemplate);
    //Conducting Preview Experiment
    _this6.setState({ PopupName: typeCd.PopUpNames.WelcomeBack });
    if (resp.length > 1) _this6.setState({ previousDocId: resp[1].id });
    _this6.loadScripts();
  };

  this.closeWelcomeBackPopup = function () {
    _this6.setState({ PopupName: "" });
    _this6.openSuggestDesktopVersionPopup();
  };

  this.openSuggestDesktopVersionPopup = function () {
    if (window.RDL.mobileCheck.isMobile && !window.RDL.mobileCheck.isTablet && window.RDL.suggestDesktopVersion) {
      var _RDL$TrackEvents8;

      window.RDL.mobileCheck.MetaScaleUpdateContent("width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=0");
      _this6.setState({ PopupName: typeCd.PopUpNames.DesktopSuggestionPopup });
      RDL.TrackEvents(typeCd.eventTypes.finalizeToDesktop, (_RDL$TrackEvents8 = {}, _defineProperty(_RDL$TrackEvents8, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents8, typeCd.eventPropsKeys.action, typeCd.eventPropsValues.actions.viewed), _defineProperty(_RDL$TrackEvents8, typeCd.eventPropsKeys.email, _this6.props.user.EmailAddress), _defineProperty(_RDL$TrackEvents8, typeCd.eventPropsKeys.docId, _this6.props.documentObj ? _this6.props.documentObj.id : ""), _RDL$TrackEvents8), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());
    }
  };

  this.CloseAllPopups = function () {
    _this6.closeAllModalsExcept('isOpenContactModal');
  };

  this.closeTemplateTips = function () {
    _this6.setState({ isopenTemplateTips: false });
  };

  this.showTemplateTips = function () {
    if (!window.RDL.readLS(typeCd.ForageKeyNames.templatesTipShown)) {
      var _ref4;

      _this6.setState({ isopenTemplateTips: true });
      window.RDL.createLS(typeCd.ForageKeyNames.templatesTipShown, 1);

      var preference = [(_ref4 = {}, _defineProperty(_ref4, typeCd.customFields.code, typeCd.userPreferenceKeys.templatesTipShown), _defineProperty(_ref4, typeCd.customFields.value, 1), _ref4)];

      _this6.userActionsWrapper.setUserPreferences(_this6.props.UserUID, preference, window.RDL.PortalSettings.ConfigurePortalCd);
    }
  };

  this.closeEditSectionTip = function () {
    _this6.setState({ isOpenTips: false });
    var onboardingUserInput = _this6.props.onboardingData.onboardingUserInput;
    _this6.onboardingActionsWrapper.saveOnboardingUserInput(Object.assign(onboardingUserInput, _defineProperty({}, typeCd.dataObjMappingKeys.isNewUser, false)));
  };

  this.closeModalsExcept = function (secCode) {
    _this6.setState({ editSectionSecCode: secCode });
    //this.refs.Letter.editSection(secCode);
  };

  this.setRedirectingState = function () {
    _this6.setState({ redirecting: true });
  };

  this.showReviewScreen = function () {
    _this6.onboardingActionsWrapper.updateReviewState(true);
    var onboardingData = CommonUtils.getOnboardingDataFromDocPref(_this6.props.documentObj);
    var nameSectionVal = _helper.CommonHelper.getNameSectionVal(_this6.props.documentObj);
    onboardingData[typeCd.dataObjMappingKeys.FirstName] = nameSectionVal.fName;
    onboardingData[typeCd.dataObjMappingKeys.LastName] = nameSectionVal.lName;
    _this6.onboardingActionsWrapper.saveOnboardingUserInput(onboardingData);

    //clear skipStepsArr
    if (_this6.props.onboardingData.skipStepsArr && _this6.props.onboardingData.skipStepsArr.length) {
      _this6.onboardingActionsWrapper.setSkipStepsArr([]);
    }
  };

  this.onReviewCancel = function (isCancelClicked) {
    var clickOption = isCancelClicked ? typeCd.eventPropsValues.clickOptions.cancel : typeCd.eventPropsValues.clickOptions.closeButton;
    _this6.trackReviewClickEvent(clickOption);
    var stateObj = { selectedReviewStep: {}, isThemeChange: false };
    if (_this6.state.isDataUpdated) {
      stateObj.PopupName = typeCd.PopUpNames.SaveReviewChangesPopup;
    } else _this6.onboardingActionsWrapper.updateReviewState(false);
    _this6.setState(stateObj);

    var reviewAnsNode = document.querySelector(".js-nav-reviewans");
    if (RDL.features.showReskinnedFinalize && reviewAnsNode) {
      reviewAnsNode.classList.remove("active");
    }
  };

  this.getTemplateId = function (theme) {
    var refObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    var userInput = _this6.props.onboardingData.onboardingUserInput;
    if (CommonUtils.isHighSchoolUser(userInput)) {
      //if user enters a "high school" in current school
      refObj[typeCd.dataObjMappingKeys.isHighSchoolTemplate] = true;
      return theme.highSchoolTemplate;
    } else {
      refObj[typeCd.dataObjMappingKeys.isHighSchoolTemplate] = false;
      return userInput[typeCd.dataObjMappingKeys.experience] >= 1 ? theme.highPerformanceTemplate : theme.earlyCareerTemplate;
    }
  };

  this.toggleFetchDocumentSwitch = function () {
    _this6.setState({ fetchDocumentSwitch: !_this6.state.fetchDocumentSwitch });
  };

  this.updateLetter = function () {
    _this6.trackReviewClickEvent(typeCd.eventPropsValues.clickOptions.save);
    var onboardingUserInput = _this6.props.onboardingData.onboardingUserInput;

    var templateName = onboardingUserInput[typeCd.dataObjMappingKeys.templateName] || RDL.Localization.lbl_templates_name_DEFAULT;
    var theme = window.RDL.v2Templates.find(function (x) {
      if (window.RDL.Localization[x.templateName] == templateName) return true;
    });
    var templateID = _this6.getTemplateId(theme, {});
    onboardingUserInput[typeCd.dataObjMappingKeys.templateId] = templateID;
    onboardingUserInput[typeCd.dataObjMappingKeys.selectedSkinCD] = _this6.props.documentObj.skinCD;
    _this6.setState({ PopupName: "", showReviewLoader: true, selectedReviewStep: {} });
    _this6.createDocument(onboardingUserInput, true, typeCd.onBoardingUserInput.yes).then(function () {
      _this6.setState({ showReviewLoader: false, isThemeChange: false });
      _this6.onboardingActionsWrapper.updateReviewState(false);
    });
  };

  this.getFirstOnboardingStep = function () {
    var firstStep = RDL.experimentControl.isJobTitleEnhancement ? typeCd.onBoardingStepsV2.JobInMind.index : typeCd.onBoardingStepsV2.JobTitle.index;
    if (_this6.state.firstStep && !(_this6.props.onboardingData.isReviewMode && _this6.state.firstStep == typeCd.onBoardingStepsV2.ImportResumeScreen.index)) {
      firstStep = _this6.state.firstStep;
    } else firstStep = _this6.state.selectedReviewStep.stepIndex || firstStep;
    return firstStep;
  };

  this.openFinishLetter = function () {
    if (!_this6.state.isLoggedIn) _this6.showHardReg(_helper.TypeCodes.finishLetterTypes.finish);else {
      var _RDL$TrackEvents9;

      RDL.TrackEvents(typeCd.eventTypes.builderUsage, (_RDL$TrackEvents9 = {}, _defineProperty(_RDL$TrackEvents9, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents9, typeCd.eventPropsKeys.action, typeCd.eventPropsValues.actions.clicked), _defineProperty(_RDL$TrackEvents9, typeCd.eventPropsKeys.screenName, typeCd.eventPropsValues.coverLetterEditor), _defineProperty(_RDL$TrackEvents9, typeCd.eventPropsKeys.clickOption, "finish letter"), _defineProperty(_RDL$TrackEvents9, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents9), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());
      _this6.userActionsWrapper.IsPremiumUser(_this6.props.UserUID, RDL.PortalSettings.ConfigureProductId).then(function (resp) {
        if (resp) {
          window.location.href = window.RDL.Paths.BaseUrl + (window.RDL.Paths.BaseUrl.indexOf("?") == -1 ? "?" : "&") + "docid=" + _this6.props.documentObj.id + "&useruid=" + _this6.props.UserUID;
        } else {
          var _RDL$TrackEvents10;

          RDL.TrackEvents(typeCd.eventTypes.exitBuilder, (_RDL$TrackEvents10 = {}, _defineProperty(_RDL$TrackEvents10, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents10, typeCd.eventPropsKeys.exitPagePath, window.RDL.Paths.SellPageUrl), _defineProperty(_RDL$TrackEvents10, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents10), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());
          CommonUtils.redirectPage(window.RDL.Paths.SellPageUrl + "&docid=" + _this6.props.documentObj.id + "&useruid=" + _this6.props.UserUID);
        }
      });
    }
  };

  this.setEnhancedDocStyles = function () {
    var documentObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this6.props.documentObj;
    var isReturnDoc = arguments[1];

    (0, _experimentUtils.handleFinalizePageEnhancements)(documentObj.skinCD, documentObj.docStyles);
    if (isReturnDoc) return documentObj;
    return _this6.documentActionsWrapper.updateDocument(documentObj, _this6.props.user, true);
  };

  this.renderOnBoardingV2 = function () {
    if (_this6.checkOnBoardingV2ExitStep()) {
      _this6.localVar.renderState.showOnBoardingV2 = false;
    };
    if (!_this6.state.renderOnboarding) return null;
    return _react2.default.createElement(OnBoardingV2Master, {
      isLoggedIn: _this6.state.isLoggedIn,
      documentObj: _this6.props.documentObj,
      user: _this6.props.user,
      postNameRegCTAAction: _this6.openSignUpScreen,
      setOnBoardingPopUpState: _this6.setOnBoardingPopUpState,
      showOnBoardingV2: _this6.localVar.renderState.showOnBoardingV2,
      clearOnBoardingV2UserData: _this6.clearOnBoardingV2UserData,
      SaveUserStages: _this6.userActionsWrapper.SaveUserStages,
      UpdateSections: _this6.documentActionsWrapper.UpdateSections,
      ApplyTemplateToDocument: _this6.documentActionsWrapper.ApplyTemplateToDocument,
      SetDocumentPreferences: _this6.documentActionsWrapper.SetDocumentPreferences,
      AddUpdateParagraph: _this6.documentActionsWrapper.AddUpdateParagraph,
      GetEducationDegrees: _this6.commonActionsWrapper.GetEducationDegrees,
      getJobTitleSkills: _this6.commonActionsWrapper.getJobTitleSkills,
      getCompanyAutoPopulated: _this6.commonActionsWrapper.getCompanyAutoPopulated,
      getJobsAutoPopulated: _this6.commonActionsWrapper.getJobsAutoPopulated,
      getDegreeAutoPopulated: _this6.commonActionsWrapper.getDegreeAutoPopulated,
      getFieldOfStudyAutoPopulated: _this6.commonActionsWrapper.getFieldOfStudyAutoPopulated,
      GetSchoolsAutoPopulated: _this6.commonActionsWrapper.GetSchoolsAutoPopulated,
      AddSection: _this6.documentActionsWrapper.AddSection,
      createDocument: _this6.createDocument,
      updateEmailAddress: _this6.userActionsWrapper.updateEmailAddress,
      saveOnboardingStepArr: _this6.onboardingActionsWrapper.saveOnboardingStepArr,
      saveOnboardingUserInput: _this6.onboardingActionsWrapper.saveOnboardingUserInput,
      saveJobSkillsList: _this6.onboardingActionsWrapper.saveJobSkillsList,
      savePreviousFlowArr: _this6.onboardingActionsWrapper.savePreviousFlowArr,
      setInputModified: _this6.onboardingActionsWrapper.setInputModified,
      onboardingData: JSON.parse(JSON.stringify(_this6.props.onboardingData)),
      getPreviousOnboardingStep: _this6.getPreviousOnboardingStep,
      setRedirectingState: _this6.setRedirectingState,
      GetPortalContent: _this6.commonActionsWrapper.GetPortalContent,
      zoomScale: _this6.state.zoomScale,
      UpdateNameContactInDocument: _this6.UpdateNameContactInDocument,
      getDefaultSkinStyles: _this6.getDefaultSkinStyles,
      firstStep: _this6.state.isRenderOnboardingV2 ? _this6.firstStep : _this6.getFirstOnboardingStep(),
      isReviewMode: _this6.props.onboardingData.isReviewMode,
      backToReview: function backToReview() {
        return _this6.setState({ selectedReviewStep: "" });
      },
      isBuilderBasedFlow: _this6.props.onboardingData.isReviewMode ? false : RDL.features.isBuilderBasedFlow,
      getSkinHtm: _this6.getSkinHtm,
      GetAllDocuments: _this6.documentActionsWrapper.GetAllDocuments,
      setLetters: _this6.setLetters,
      setOnboardingUserInput: _this6.setOnboardingUserInput,
      trackBannerEvents: _this6.trackBannerEvents,
      setBannerInfo: _this6.setBannerInfo,
      getUserContactDetails: _this6.userActionsWrapper.getUserContactDetails,
      CreateLetterFromResume: _this6.documentActionsWrapper.CreateLetterFromResume,
      updateDocument: _this6.documentActionsWrapper.updateDocument,
      saveDocumentCreatedFromResume: _this6.onboardingActionsWrapper.saveDocumentCreatedFromResume,
      saveResumeReviewArr: _this6.onboardingActionsWrapper.saveResumeReviewArr,
      saveUploadResumeReviewArr: _this6.onboardingActionsWrapper.saveUploadResumeReviewArr,
      DeleteDocument: _this6.documentActionsWrapper.DeleteDocument,
      setSkipStepsArr: _this6.onboardingActionsWrapper.setSkipStepsArr,
      resetResumeOnboarding: _this6.onboardingActionsWrapper.resetResumeOnboarding,
      saveResumeUserInput: _this6.onboardingActionsWrapper.saveResumeUserInput,
      saveCustomSkillsArray: _this6.onboardingActionsWrapper.saveCustomSkillsArray,
      setEnhancedDocStyles: _this6.setEnhancedDocStyles,
      saveDocColor: _this6.onboardingActionsWrapper.saveDocColor,
      UpdateUser: _this6.userActionsWrapper.UpdateUser,
      UpdateUserInStore: _this6.userActionsWrapper.UpdateUserInStore,
      GetDocument: _this6.documentActionsWrapper.GetDocument,
      removeQueryStringParam: _this6.removeQueryStringParam,
      addQueryStringParam: _this6.addQueryStringParam,
      loadScripts: _this6.loadScripts,
      setSignUpOnContactStatus: _this6.onboardingActionsWrapper.setSignUpOnContactStatus,
      CreateInitialDocumentWithFile: _this6.CreateInitialDocumentWithFile,
      getCityAutoPopulated: _this6.commonActionsWrapper.getCityAutoPopulated,
      addUpdateDocDataField: _this6.documentActionsWrapper.addUpdateDocDataField,
      personalizationSkins: _this6.state.personalizationSkins,
      updateUserAgreement: _this6.updateUserAgreement,
      setPersonalizationInputModified: _this6.onboardingActionsWrapper.setPersonalizationInputModified,
      setUserInteractedOnYOE: _this6.onboardingActionsWrapper.setUserInteractedOnYOE,
      setShowJobInPreview: _this6.onboardingActionsWrapper.setShowJobInPreview,
      getRelatedJobTitles: _this6.commonActionsWrapper.getRelatedJobTitles,
      saveEnhancedSkillsList: _this6.onboardingActionsWrapper.saveEnhancedSkillsList,
      finalizeToFunnel: _this6.isFinalizeToFunnel(),
      backToFinalize: _this6.backToFinalize,
      CheckAndUploadSignature: _this6.CheckAndUploadSignature,
      templateTypeCD: _this6.state.templateTypeCD,
      setPreference: _this6.setPreference,
      setTitleAndRoute: _this6.setTitleAndRoute,
      templateId: _this6.props.templateId,
      isDelayShowSignature: _this6.state.isDelayShowSignature
    });
  };

  this.isFinalizeToFunnel = function () {
    return _this6.state.isRenderOnboardingV2 && (RDL.experimentControl.isFinalize2Funnel || RDL.features.showSignature);
  };

  this.onReviewStepClick = function (selectedReviewStep) {
    if (_this6.state.selectedReviewStep.stepIndex != selectedReviewStep.stepIndex) {
      _this6.trackReviewClickEvent(selectedReviewStep.clickAction);
      _this6.localVar.renderState.showOnBoardingV2 = true;
      _this6.onboardingActionsWrapper.saveOnboardingStepArr([]);
      _this6.setState({ selectedReviewStep: "" }, function () {
        return _this6.setState({ selectedReviewStep: selectedReviewStep });
      });
    }
  };

  this.trackBannerEvents = function (eventName, action, screenName) {
    var _RDL$TrackEvents11;

    RDL.TrackEvents(eventName, (_RDL$TrackEvents11 = {}, _defineProperty(_RDL$TrackEvents11, typeCd.eventPropsKeys.category, typeCd.eventPropsValues.builder), _defineProperty(_RDL$TrackEvents11, typeCd.eventPropsKeys.action, action), _defineProperty(_RDL$TrackEvents11, typeCd.eventPropsKeys.screenName, screenName), _defineProperty(_RDL$TrackEvents11, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents11), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());
  };

  this.trackReviewClickEvent = function (clickOption) {
    var _RDL$TrackEvents12;

    RDL.TrackEvents(typeCd.eventTypes.reviewAnswers, (_RDL$TrackEvents12 = {}, _defineProperty(_RDL$TrackEvents12, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents12, typeCd.eventPropsKeys.action, typeCd.eventPropsValues.actions.clicked), _defineProperty(_RDL$TrackEvents12, typeCd.eventPropsKeys.clickOption, clickOption), _defineProperty(_RDL$TrackEvents12, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents12), _this6.props.UserUID, _this6.state.isLoggedIn.toString().toUpperCase());
  };

  this.removeMenuActiceClass = function (className) {
    var elm = document.querySelectorAll(".nav-item." + className);

    for (var i = 0; i < elm.length; i++) {
      elm[i].classList.remove(className);
    }
  };

  this.navResize = function () {
    var documentWidth = document.body.clientWidth;
    var leftNav = document.getElementById("nav-left");
    var rightNav = document.getElementById("nav-right");
    if (rightNav && leftNav) {
      if (documentWidth < 1050) {
        leftNav.classList.add("label-hide");
      } else {
        leftNav.classList.remove("label-hide");
      }
    }
  };

  this.updateColor = function (color) {
    _this6.setState({ customColor: color });
  };

  this.openTemplate = function (event) {
    var _RDL$TrackEvents13;

    event && RDL.TrackEvents(typeCd.eventTypes.builderUsage, (_RDL$TrackEvents13 = {}, _defineProperty(_RDL$TrackEvents13, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_RDL$TrackEvents13, typeCd.eventPropsKeys.action, typeCd.eventPropsValues.actions.clicked), _defineProperty(_RDL$TrackEvents13, typeCd.eventPropsKeys.screenName, typeCd.eventPropsValues.coverLetterEditor), _defineProperty(_RDL$TrackEvents13, typeCd.eventPropsKeys.clickOption, typeCd.eventPropsValues.clickOptions.templates), _defineProperty(_RDL$TrackEvents13, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _RDL$TrackEvents13), _this6.props.UserUid, _this6.state.isLoggedIn.toString().toUpperCase());

    _this6.removeMenuActiceClass("active");
    if (document.body.classList.contains('sidebar-open') && !document.body.classList.contains('formatting')) {
      //Closing Template
      RDL.features.showReskinnedFinalize && _this6.showTemplateTips();
      document.body.classList.remove("sidebar-animation");
      setTimeout(function () {
        document.body.classList.remove("sidebar-open");
      }, 400);
    } else {
      RDL.features.showReskinnedFinalize && _this6.closeTemplateTips();
      document.body.classList.add("sidebar-open");
      document.body.classList.add("sidebar-animation");
      document.body.classList.remove("formatting");
      document.querySelector(".nav-template") && document.querySelector(".nav-template").classList.add("active");
    }

    _this6.navResize();
    setTimeout(function () {
      _this6.setZoomScale();
    }, 400);
  };

  this.onLetterDownloaded = function () {
    _this6.setState({ PopupName: typeCd.PopUpNames.LetterDownloaded });
  };

  this.onLetterPrinted = function () {
    _this6.setState({ PopupName: typeCd.PopUpNames.LetterPrinted });
  };

  this.renderEditor = function () {
    var selectedReviewStep = _this6.state.selectedReviewStep;

    if (RDL.enableReactRoutes && _this6.state.PopupName != typeCd.PopUpNames.SignUp && !_this6.state.isRenderOnboardingV2 && (!_this6.props.onboardingData.onboardingStepArr.length || _this6.props.onboardingData.onboardingStepArr[_this6.props.onboardingData.onboardingStepArr.length - 1] == typeCd.onBoardingStepsV2.Exit.index || _this6.props.user.Role == _helper.TypeCodes.userRoles.User || window.RDL.readLS("isResignLetter") == 1)) {
      _this6.setTitleAndRoute(typeCd.OnboardingStepDocTitle.Finalize, RDL.Routes.Finalize);
    }
    return _react2.default.createElement('section', { id: 'editorDiv', className: 'page-wrapper ' + (RDL.features.covid19 ? "feature-covid-banner" : "") + ' d-none' }, _react2.default.createElement(_react.Fragment, null, _react2.default.createElement('div', { className: "review-answer-section-left " + (selectedReviewStep.stepIndex ? "active" : "") }, _this6.props.onboardingData.isReviewMode && selectedReviewStep.stepIndex && _this6.renderOnBoardingV2(), _this6.state.showReviewLoader && _this6.state.isThemeChange && _react2.default.createElement(_ReviewLoader2.default, { loaderLabel: window.RDL.Localization.lbl_updating_cover_letter })), _react2.default.createElement('div', { className: 'review-answer-section-right' }, _this6.state.showReviewLoader && !_this6.state.isThemeChange && _react2.default.createElement('span', { className: 'loader-bar' }, _react2.default.createElement('span', { className: 'loader-inner' })), _this6.props.onboardingData.isReviewMode && _react2.default.createElement(ReviewPopup, {
      popupName: _this6.state.PopupName,
      isDataUpdated: _this6.state.isDataUpdated,
      onboardingData: _this6.props.onboardingData,
      onReviewStepClick: _this6.onReviewStepClick,
      selected: selectedReviewStep.stepIndex,
      saveOnboardingUserInput: _this6.onboardingActionsWrapper.saveOnboardingUserInput,
      onCancel: function onCancel(isCancelClicked) {
        return _this6.onReviewCancel(isCancelClicked);
      },
      onSave: _this6.updateLetter,
      UserUID: _this6.props.UserUID
    }))), _react2.default.createElement(Header, {
      isLoggedIn: _this6.state.isLoggedIn,
      documentObj: _this6.props.documentObj, closeModalsExcept: _this6.closeModalsExcept,
      UserUID: _this6.props.UserUID, hoverFontUpdate: _this6.hoverFontUpdate,
      downloadLetter: _this6.documentActionsWrapper.DownloadLetter,
      setZoomScale: _this6.setZoomScale, templateTypeCD: _this6.state.templateTypeCD,
      PopupName: _this6.state.PopupName,
      ProgressBar: _this6.state.ProgressBar,
      user: _this6.props.user,
      clearOnBoardingV2UserData: _this6.clearOnBoardingV2UserData,
      closeEditSectionTip: _this6.closeEditSectionTip,
      isTemplateTipsOpen: _this6.state.isopenTemplateTips,
      IsPremiumUser: _this6.userActionsWrapper.IsPremiumUser,
      GetAllDocuments: _this6.documentActionsWrapper.GetAllDocuments,
      UpdateSections: _this6.documentActionsWrapper.UpdateSections,
      emailDocument: _this6.documentActionsWrapper.emailDocument,
      clearStore: _this6.commonActionsWrapper.clearStore,
      getSpellCheckResults: _this6.commonActionsWrapper.getSpellCheckResults,
      cacheExamplesLocally: _this6.commonActionsWrapper.cacheExamplesLocally,
      isMultiColumnSkin: _this6.state.isMultiColumnSkin,
      LoadExportPopup: _this6.LoadExportPopup,
      showExportPopup: _this6.state.showExportPopup,
      popupType: _this6.state.popupType,
      payPerDownloadRespObj: _this6.state.payPerDownloadRespObj,
      isPremium: _this6.state.isPremium,
      setExportPopUp: _this6.setExportPopUp,
      redirectToSellPage: _this6.redirectToSellPage,
      onDownloadClick: _this6.onDownloadClick,
      startDownload: _this6.startDownload,
      openSpellCheckPopup: _this6.openSpellCheckPopup,
      onReviewClick: _this6.showReviewScreen,
      fetchDocumentSwitch: _this6.state.fetchDocumentSwitch,
      openTemplate: _this6.openTemplate,
      navResize: _this6.navResize,
      removeMenuActiceClass: _this6.removeMenuActiceClass,
      onLetterPrinted: _this6.onLetterPrinted,
      openFinishLetter: _this6.openFinishLetter,
      exportDoc: _this6.exportDoc,
      setEditorState: _this6.setEditorState,
      incompleteSectionList: _this6.state.incompleteSectionList,
      closeTemplateTips: _this6.closeTemplateTips,
      onUserRegisterOrLogin: _this6.onUserRegisterOrLogin,
      showUserSignUpPage: _this6.showSigInForResign,
      setUserPreferences: _this6.userActionsWrapper.setUserPreferences,
      updateColor: _this6.updateColor,
      onboardingData: JSON.parse(JSON.stringify(_this6.props.onboardingData)),
      saveDocColor: _this6.onboardingActionsWrapper.saveDocColor
    }), _react2.default.createElement(Letter, {
      isReviewMode: _this6.props.onboardingData.isReviewMode,
      onboardingData: JSON.parse(JSON.stringify(_this6.props.onboardingData)),
      onReviewClick: _this6.showReviewScreen,
      isLoggedIn: _this6.state.isLoggedIn,
      documentObj: _this6.props.documentObj,
      userUid: _this6.props.UserUID, history: _this6.props.history,
      UpdateUser: _this6.userActionsWrapper.UpdateUser,
      documentHtml: !_this6.state.isLoggedIn ? _this6.state.docHtml : '',
      isWritingTipsOpen: _this6.state.isOpenTips,
      closeEditSectionTip: _this6.closeEditSectionTip,
      templateTypeCD: _this6.state.templateTypeCD,
      templateTypeName: _this6.state.templateTypeName,
      user: _this6.props.user,
      updateClosureSection: _this6.updateClosureSection,
      showSigInForResign: _this6.showSigInForResign,
      preFetchTemplateData: _this6.preFetchTemplateData,
      GetDocument: _this6.documentActionsWrapper.GetDocument,
      GetAllDocuments: _this6.documentActionsWrapper.GetAllDocuments,
      DeleteSection: _this6.documentActionsWrapper.DeleteSection,
      reorderSection: _this6.documentActionsWrapper.reorderSection,
      reorderPara: _this6.documentActionsWrapper.reorderPara,
      updateDocStyle: _this6.documentActionsWrapper.updateDocStyle,
      resetStyles: _this6.documentActionsWrapper.resetStyles,
      UpdateSections: _this6.documentActionsWrapper.UpdateSections,
      UpdateDocumentSkinWithStyles: _this6.documentActionsWrapper.UpdateDocumentSkinWithStyles,
      ApplyTemplateToDocument: _this6.documentActionsWrapper.ApplyTemplateToDocument,
      SetDocumentPreferences: _this6.documentActionsWrapper.SetDocumentPreferences,
      AddUpdateParagraph: _this6.documentActionsWrapper.AddUpdateParagraph,
      GetPortalContent: _this6.commonActionsWrapper.GetPortalContent,
      getCompanyAutoPopulated: _this6.commonActionsWrapper.getCompanyAutoPopulated,
      getCityAutoPopulated: _this6.commonActionsWrapper.getCityAutoPopulated,
      cacheExamplesLocally: _this6.commonActionsWrapper.cacheExamplesLocally,
      AddMultipleParagraphs: _this6.documentActionsWrapper.AddMultipleParagraphs,
      addUpdateDocDataField: _this6.documentActionsWrapper.addUpdateDocDataField,
      editSectionSecCode: _this6.state.editSectionSecCode,
      closeModalsExcept: _this6.closeModalsExcept,
      setDocStylesFromSkin: _this6.setDocStylesFromSkin,
      InsertNameContactSections: _this6.InsertNameContactSections,
      UpdateNameContactInDocument: _this6.UpdateNameContactInDocument,
      updateDocStyleSuccess: _this6.props.documentActions.updateDocStyleSuccess,
      progressAnimationClasses: JSON.parse(JSON.stringify(_this6.state.progressAnimationClasses)),
      updateProgressAnimationClasses: _this6.updateProgressAnimationClasses,
      zoomScale: _this6.state.zoomScale,
      setZoomScale: _this6.setZoomScale,
      zoomOptionText: _this6.state.zoomOption,
      zoomClass: _this6.state.zoomClass,
      scaleOptionsStyle: _this6.state.scaleOptionsStyle,
      isOnboardingShown: _this6.localVar.renderState.showOnBoardingV2 && _this6.localVar.renderState.renderOnBoardingV2,
      getSkinHtm: _this6.getSkinHtm,
      LoadExportPopup: _this6.LoadExportPopup,
      onDownloadClick: _this6.onDownloadClick,
      openSpellCheckPopup: _this6.openSpellCheckPopup,
      updateDocument: _this6.documentActionsWrapper.updateDocument,
      closeSidebar: _this6.closeSidebar,
      keyPressCloseSideBar: _this6.keyPressCloseSideBar,
      trackBannerEvents: _this6.trackBannerEvents,
      toggleFetchDocumentSwitch: _this6.toggleFetchDocumentSwitch,
      getDefaultStylesFromSkin: _this6.getDefaultStylesFromSkin,
      setBannerInfo: _this6.setBannerInfo,
      addRemoveGapsSection: _this6.addRemoveGapsSection,
      exportDoc: _this6.exportDoc,
      sectionToEdit: _this6.state.sectionToEdit,
      sectionToAdd: _this6.state.sectionToAdd,
      setEditorState: _this6.setEditorState,
      updateContainerSectionsIndex: _this6.updateContainerSectionsIndex,
      updateEmailAddress: _this6.userActionsWrapper.updateEmailAddress,
      showEditorTips: _this6.showEditorTips,
      saveDocColor: _this6.onboardingActionsWrapper.saveDocColor,
      navigateToOnboarding: _this6.navigateToOnboarding,
      onUserRegisterOrLogin: _this6.onUserRegisterOrLogin,
      saveOnboardingUserInput: _this6.onboardingActionsWrapper.saveOnboardingUserInput,
      customColor: _this6.state.customColor,
      finalizeToFunnel: _this6.state.isRenderOnboardingV2 && (RDL.experimentControl.isFinalize2Funnel || RDL.features.showSignature)
    }), _this6.state.ProgressBar ? _react2.default.createElement(_ProgressBar2.default, { isLoggedIn: _this6.state.isLoggedIn,
      updateProgressAnimationClasses: _this6.updateProgressAnimationClasses }) : null, _this6.state.isOpenExistingUserLoader && _react2.default.createElement(ExistingUserLoader, {
      isLoggedIn: _this6.state.isLoggedIn,
      UserUID: _this6.props.UserUID,
      isOpenExistingUserLoader: _this6.state.isOpenExistingUserLoader
    }), _this6.state.PopupName != "" ? _react2.default.createElement(MasterPopup
    //Common props
    , { closeAllModals: _this6.CloseAllModals,
      onCancelConfirmationSecondaryClick: _this6.closeReview,
      PopupName: _this6.state.PopupName,
      isLoggedIn: _this6.state.isLoggedIn,
      openNameRegScreen: function openNameRegScreen() {
        return _this6.openNameRegScreen(_this6);
      },
      documentObj: _this6.props.documentObj,
      UserUID: _this6.props.UserUID,
      documentId: _this6.props.documentId,
      user: _this6.props.user,
      SaveUserStages: _this6.userActionsWrapper.SaveUserStages,
      UpdateUser: _this6.userActionsWrapper.UpdateUser,
      AddUpdateParagraph: _this6.documentActionsWrapper.AddUpdateParagraph,
      GetDocument: _this6.documentActionsWrapper.GetDocument

      //NameRegistration props
      , openSignUpScreen: _this6.openSignUpScreen

      //SignUp props
      , hardRegFor: _this6.state.hardRegFor,
      openSigninPopup: function openSigninPopup() {
        return _this6.openSigninPopup(_this6);
      },
      updateDocument: _this6.documentActionsWrapper.updateDocument,
      updateEmailAddress: _this6.userActionsWrapper.updateEmailAddress,
      onboardingData: _this6.props.onboardingData,
      progressAnimationClasses: _this6.state.progressAnimationClasses,
      closeEditSectionTip: _this6.closeEditSectionTip,
      isUploadResumeFlow: _this6.props.onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.isUploadResume] == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]

      //SignIn props

      //Congratulations props
      , showEditorTips: _this6.showEditorTips,
      keyPressCloseSideBar: _this6.keyPressCloseSideBar,
      closeSidebar: _this6.closeSidebar,
      openTemplate: _this6.openTemplate

      //ChooseTemplate props
      , templateId: _this6.props.templateId

      //WelcomeBack props
      , openWelcomeBackPopup: function openWelcomeBackPopup(resp) {
        return _this6.openWelcomeBackPopup(resp);
      },
      CloseAllModals: _this6.closeWelcomeBackPopup,
      previousDocId: _this6.state.previousDocId,
      showOnBoardingV2: _this6.localVar.renderState.showOnBoardingV2,
      DeleteDocument: _this6.documentActionsWrapper.DeleteDocument,
      removeQueryStringParam: _this6.removeQueryStringParam,
      addQueryStringParam: _this6.addQueryStringParam

      //SpellCheckModal props
      , UpdateSections: _this6.documentActionsWrapper.UpdateSections,
      spellCheckString: _this6.state.spellCheckString,
      spellCheckResponse: _this6.state.spellCheckResponse,
      modalClose: _this6.CloseAllModals

      //DesktopSuggestion Popup
      , onContinue: _this6.CloseAllModals,
      trackEventsForDesktopSuggestion: _this6.trackEventsForDesktopSuggestion,
      onSignUpSkip: _this6.onboardingActionsWrapper.onSignUpSkip
      //LETTER DOWNLOADED AND PRINT POPUP
      , EmailAddress: _this6.props.user.EmailAddress

      //Different Email Confirmation
      , openExportModal: _this6.openExportModal

      //Customize Letter MOdal
      , setDocumentPreference: _this6.documentActionsWrapper.SetDocumentPreference,
      showReviewScreen: _this6.showReviewScreen
    }) : '');
  };

  this.getEditorContextProps = function () {
    return {
      //Editor Variables/State/Constants
      user: _this6.props.user,
      UserUID: _this6.props.user.UserUID,
      isLoggedIn: _this6.state.isLoggedIn,

      //Editor Methods
      openCongratulationsScreen: _this6.openCongratulationsScreen,
      openExistingUserLoader: _this6.openExistingUserLoader,
      updateClosureSection: _this6.updateClosureSection,
      clearOnBoardingV2UserData: _this6.clearOnBoardingV2UserData,
      exportDoc: _this6.exportDoc,
      setRedirectingState: _this6.setRedirectingState,
      updateUserAgreement: _this6.updateUserAgreement,
      getUserPreferencesOnSwitch: _this6.getUserPreferencesOnSwitch,
      onUserRegisterOrLogin: _this6.onUserRegisterOrLogin,
      setZoomScale: _this6.setZoomScale,

      //Action Wrapper Methods
      GetUserByID: _this6.userActionsWrapper.GetUserByID,
      SaveUserStages: _this6.userActionsWrapper.SaveUserStages,
      IsPremiumUser: _this6.userActionsWrapper.IsPremiumUser,
      signIn: _this6.userActionsWrapper.signIn,
      GetLightWeightUserDocuments: _this6.documentActionsWrapper.GetLightWeightUserDocuments,
      AddUpdateParagraph: _this6.documentActionsWrapper.AddUpdateParagraph,
      switchUserDocument: _this6.documentActionsWrapper.switchUserDocument,
      UpdateUser: _this6.userActionsWrapper.UpdateUser,
      UpdateUserInStore: _this6.userActionsWrapper.UpdateUserInStore,
      updateDocument: _this6.documentActionsWrapper.updateDocument,
      GetDocument: _this6.documentActionsWrapper.GetDocument,
      SwitchUserExperiment: _this6.userActionsWrapper.SwitchUserExperiment,
      updateEmailAddress: _this6.userActionsWrapper.updateEmailAddress,
      setUserPreferences: _this6.userActionsWrapper.setUserPreferences
    };
  };

  this.CreateInitialDocumentWithFile = function (fileExt, fileData, uploadMethod) {
    var doc = {};
    var onboardingUserInput = _this6.props.onboardingData.onboardingUserInput;

    doc.fileData = fileData;
    var data = {
      userId: _this6.props.user.UserUID, document: doc,
      skinCD: onboardingUserInput.selectedSkinCD || RDL.defaultSkinCD,
      portalId: window.RDL.PortalSettings.ConfigurePortal, fileExtension: fileExt.toUpperCase(),
      templateId: window.RDL.defaultTemplateIDForUploadResume || window.RDL.defaultTemplateID,
      cultureCd: window.RDL.currentPortalDetails.culture,
      flowName: "",
      portalCd: RDL.PortalSettings.ConfigurePortalCd,
      localizedDocumentText: window.RDL.Localization.lbl_resume,
      isINTLDocument: false,
      skinColor: "",
      uploadMethod: uploadMethod,
      docStyles: []
    };
    return _this6.documentActionsWrapper.CreateInitialDocumentWithFile(data);
  };

  this.createDoc = function (templateId, preference, skinCD) {
    // let docObj = { firstName: this.props.user.FirstName, lastName: this.props.user.LastName };
    var onboardingUserInput = _this6.props.onboardingData.onboardingUserInput;

    var fName = onboardingUserInput[typeCd.dataObjMappingKeys.FirstName] ? onboardingUserInput[typeCd.dataObjMappingKeys.FirstName] : _this6.props.user.FirstName;
    var lName = onboardingUserInput[typeCd.dataObjMappingKeys.LastName] ? onboardingUserInput[typeCd.dataObjMappingKeys.LastName] : _this6.props.user.LastName;
    var phone = onboardingUserInput[typeCd.dataObjMappingKeys.phone] ? onboardingUserInput[typeCd.dataObjMappingKeys.phone] : "";
    var email = onboardingUserInput[typeCd.dataObjMappingKeys.email] ? onboardingUserInput[typeCd.dataObjMappingKeys.email] : "";
    var userCity = onboardingUserInput[typeCd.dataObjMappingKeys.userCity] ? onboardingUserInput[typeCd.dataObjMappingKeys.userCity] : "";
    var userState = onboardingUserInput[typeCd.dataObjMappingKeys.userState] ? onboardingUserInput[typeCd.dataObjMappingKeys.userState] : "";
    var userZip = onboardingUserInput[typeCd.dataObjMappingKeys.userZip] ? onboardingUserInput[typeCd.dataObjMappingKeys.userZip] : "";
    var userStreet = onboardingUserInput[typeCd.dataObjMappingKeys.userStreet] ? onboardingUserInput[typeCd.dataObjMappingKeys.userStreet] : "";

    var docObj = { firstName: fName, lastName: lName, phone: phone, email: email, userCity: userCity, userState: userState, userZip: userZip, userStreet: userStreet };
    var data = {
      userId: _this6.props.user.UserUID, document: docObj,
      portalId: window.RDL.PortalSettings.ConfigurePortal, templateId: templateId,
      productcd: window.RDL.PortalSettings.ConfigureProductCd,
      preferences: preference,
      skinCD: skinCD
    };
    return _this6.documentActionsWrapper.CreateInitialDocument(data, window.RDL.isSetDocStylesFromSkin).then(function (createdDoc) {
      if (createdDoc && createdDoc.id && window.RDL.isSetDocStylesFromSkin) {
        return _this6.setDocStylesFromSkin(createdDoc, true);
      } else {
        return new Promise(function (resolve) {
          resolve(createdDoc);
        });
      }
    });
  };

  this.getDefaultStyleVal = function (skinCD) {
    var index = RDL.Skins.findIndex(function (skin) {
      return skin.skinCD == skinCD && skin.enhanceStyles;
    });
    var styleVal = {};
    if (index >= 0) {
      styleVal = RDL.Skins[index].enhanceStyles;
    }
    return styleVal;
  };

  this.setDocStylesFromSkin = function (docObj, isCookieCreationAvoided, isReturnDoc) {
    return _this6.props.commonActions.GetPortalContent(docObj.skinCD).then(function (skinHtm) {
      var parser = new DOMParser();
      var template = parser.parseFromString(skinHtm.replace('font-size:100%', '').replace('font-size: 100%', ''), "text/html");
      var defaultStylesVal = _this6.getDefaultStylesFromSkin(template);
      defaultStylesVal = Object.assign(defaultStylesVal, _this6.getDefaultStyleVal(docObj.skinCD));
      var newDocObj = JSON.parse(JSON.stringify(docObj));
      if (_this6.state.isMultiColumnSkin) {
        var templateDocFormat = RDL.GetHTMLDocFromString(skinHtm);
        var newSections = _this6.updateContainerSectionsIndex(templateDocFormat, newDocObj.sections);
        newDocObj.sections = newSections;
      }
      var docColorStyleIndexFound = false;
      newDocObj.docStyles.map(function (style) {
        style.value = defaultStylesVal[style.styleTypeCD];
        if (style.styleTypeCD === _helper.TypeCodes.styleTypeCD.styleDocColor && _this6.props.onboardingData.docColor) {
          style.value = _this6.props.onboardingData.docColor == 'default' ? '' : _this6.props.onboardingData.docColor;
          docColorStyleIndexFound = true;
        }
      });
      if (_this6.props.onboardingData.docColor && !docColorStyleIndexFound) {
        newDocObj.docStyles.push({
          docId: 0,
          docStyleId: 0,
          documentID: newDocObj.docStyles[0].documentID,
          id: "29abd9dc-3ff2-40b0-b2ae-216cd4052420",
          styleTypeCD: _helper.TypeCodes.styleTypeCD.styleDocColor,
          value: _this6.props.onboardingData.docColor == 'default' ? '' : _this6.props.onboardingData.docColor
        });
      }

      return _this6.documentActionsWrapper.updateDocStyle(newDocObj.docStyles, newDocObj, isReturnDoc, isCookieCreationAvoided);
    });
  };

  this.getDefaultStylesFromSkin = function (template, isParseFromString) {
    if (isParseFromString) {
      var parser = new DOMParser();
      template = parser.parseFromString(template, "text/html");
    }
    var defaultVals = {};
    var defaults = template.querySelectorAll("default");
    Array.from(defaults).forEach(function (element) {
      var key = element.getAttribute("name");
      var val = element.getAttribute("content");
      defaultVals[key] = val;
    });
    return defaultVals;
  };

  this.setPreference = function (preference, onBoardingUserInput) {
    var i = void 0;
    var _typeCd$userPreferenc = typeCd.userPreferenceKeys,
        bodyTTCList = _typeCd$userPreferenc.bodyTTCList,
        openerTTCList = _typeCd$userPreferenc.openerTTCList,
        gapsTTCList = _typeCd$userPreferenc.gapsTTCList,
        callToActionTTCList = _typeCd$userPreferenc.callToActionTTCList,
        subjectTTCList = _typeCd$userPreferenc.subjectTTCList,
        greetingTTCList = _typeCd$userPreferenc.greetingTTCList,
        relocationTTCList = _typeCd$userPreferenc.relocationTTCList,
        salaryRequirementTTCList = _typeCd$userPreferenc.salaryRequirementTTCList,
        availablityTTCList = _typeCd$userPreferenc.availablityTTCList,
        confidentialityTTCList = _typeCd$userPreferenc.confidentialityTTCList,
        closerTTCList = _typeCd$userPreferenc.closerTTCList,
        availablityTTC = _typeCd$userPreferenc.availablityTTC,
        confidentialityTTC = _typeCd$userPreferenc.confidentialityTTC,
        salaryRequirementTTC = _typeCd$userPreferenc.salaryRequirementTTC,
        closerTTCObj = _typeCd$userPreferenc.closerTTCObj,
        relocationTTC = _typeCd$userPreferenc.relocationTTC,
        bodyTTCObj = _typeCd$userPreferenc.bodyTTCObj,
        openerTTCObj = _typeCd$userPreferenc.openerTTCObj,
        gapsTTCObj = _typeCd$userPreferenc.gapsTTCObj,
        callToActionTTCObj = _typeCd$userPreferenc.callToActionTTCObj,
        greetingTTC = _typeCd$userPreferenc.greetingTTC,
        subjectTTC = _typeCd$userPreferenc.subjectTTC;

    for (i = 0; i < preference.length; i++) {
      var fieldDetails = typeCd.fieldsToUpdateKeys.find(function (x) {
        return x.fieldCD == preference[i].docPreferenceTypeCD;
      });
      var key = fieldDetails && fieldDetails.fieldKey;
      var fieldCD = fieldDetails && fieldDetails.fieldCD;
      var listArr = [bodyTTCList, openerTTCList, gapsTTCList, callToActionTTCList, subjectTTCList, greetingTTCList, relocationTTCList, salaryRequirementTTCList, availablityTTCList, confidentialityTTCList, closerTTCList, relocationTTC, greetingTTC, subjectTTC, availablityTTC, confidentialityTTC, salaryRequirementTTC, closerTTCObj, bodyTTCObj, gapsTTCObj, callToActionTTCObj, openerTTCObj];
      if (listArr.includes(fieldCD) && onBoardingUserInput[key] && _typeof(onBoardingUserInput[key]) == "object") {
        preference[i].value = JSON.stringify(onBoardingUserInput[key]);
      } else if (onBoardingUserInput[key] && _typeof(onBoardingUserInput[key]) == "object" && JSON.stringify(onBoardingUserInput[key]).indexOf("{") == 0) preference[i].value = onBoardingUserInput[key].text || "";else if (onBoardingUserInput[key] && _typeof(onBoardingUserInput[key]) == "object" && JSON.stringify(onBoardingUserInput[key]).indexOf("[") == 0) preference[i].value = onBoardingUserInput[key].join();else if (onBoardingUserInput[key] || onBoardingUserInput[key] == 0) preference[i].value = onBoardingUserInput[key];else preference[i].value = '';

      preference[i].id = _helper.CommonHelper.guid();
    }
    return preference;
  };

  this.createDocument = function (onboardingUserInput, isInputModified, reviewSaveAction) {
    var letterTypeDetails = void 0;
    var isCustomSectionAdded = void 0,
        customSectionsIndices = void 0;
    if (isInputModified || !_this6.props.documentObj.id) {
      var documentObj = _this6.props.documentObj;

      if (_this6.props.onboardingData.documentCreatedFromResume.id && (!documentObj || !documentObj.id)) {
        documentObj = JSON.parse(JSON.stringify(_this6.props.onboardingData.documentCreatedFromResume));
      }
      var onBoardingUserInput = JSON.parse(JSON.stringify(onboardingUserInput));
      if (RDL.features.assignDefaultSkills && !_this6.props.onboardingData.isReviewMode) onBoardingUserInput = CommonUtils.setDefaultsforSkillsAndStrengths(onBoardingUserInput);
      _this6.onboardingActionsWrapper.setInputModified(false);
      var preference = JSON.parse(JSON.stringify(_this6.setPreference(typeCd.docPreference, onBoardingUserInput)));
      var autoCoverLetter = documentObj.preferences.filter(function (x) {
        return x.docPreferenceTypeCD == typeCd.userPreferenceKeys.autoCoverLetter || x.docPreferenceTypeCD == typeCd.userPreferenceKeys.autoCoverLetterViewed;
      });
      if (autoCoverLetter && autoCoverLetter.length) {
        autoCoverLetter.forEach(function (element) {
          preference.push({
            docPreferenceTypeCD: element.docPreferenceTypeCD,
            value: element.value, id: element.id
          });
        });
      }
      var templateId = onBoardingUserInput[typeCd.dataObjMappingKeys.templateId];
      if (!templateId || RDL.features.isBuilderBasedFlow) {
        templateId = window.RDL.defaultTemplateID;
      }
      var skinCD = onBoardingUserInput[typeCd.dataObjMappingKeys.selectedSkinCD] || window.RDL.defaultSkinCD;

      if (documentObj == null || documentObj.id == null) {
        var obj = { templateID: templateId, skinCD: skinCD };
        letterTypeDetails = CommonUtils.getLetterTypeDetails(obj);
        CommonUtils.AddDocTraitsInCookie(letterTypeDetails, typeCd.eventPropsValues.coverLetterV2React);

        return _this6.createDoc(templateId, preference, skinCD).then(function (resp) {
          var createDocPromise = new Promise(function (resolve) {
            resolve(resp);
          });
          if (resp == typeCd.errorCodes.purgedUserCase) {
            createDocPromise = _this6.createDoc(templateId, preference, skinCD);
            //Retry as purged guest user case has already been handled.
          }
          return createDocPromise.then(function (updatedDoc) {
            RDL.TrackOptimizelyEvents(typeCd.optimizelyEventTypes.docCreated);
            return _this6.customizeDocForUser(updatedDoc, onBoardingUserInput);
          });
        });
      } else {
        if (reviewSaveAction === typeCd.onBoardingUserInput.yes) {
          isCustomSectionAdded = documentObj.sections.filter(function (section) {
            return typeCd.customSectionsTypeCdArr.indexOf(section.sectionTypeCD) != -1;
          }).length;
          customSectionsIndices = isCustomSectionAdded ? _this6.getCustomSectionOrder(documentObj) : null;
        }
        return _this6.documentActionsWrapper.ApplyTemplateToDocument(_this6.props.user.UserUID, documentObj.id, templateId, true).then(function (updatedDoc) {
          return _this6.documentActionsWrapper.GetDocument(_this6.props.UserUID, documentObj.id, true).then(function (returnedDocument) {
            var lstSections = returnedDocument.sections;
            if (isCustomSectionAdded) {
              if (!customSectionsIndices) {
                customSectionsIndices = _this6.getCustomSectionOrder(returnedDocument);
              }
              lstSections = _this6.restoreCustomSectionIndices(lstSections, customSectionsIndices);
            }
            updatedDoc.sections = lstSections;
            updatedDoc = _this6.documentActionsWrapper.SetDocumentPreferences(preference, updatedDoc, true);
            return _this6.customizeDocForUser(updatedDoc, onBoardingUserInput, skinCD, true);
          });
        });
      }
    } else {
      //Return Blank Promise
      return new Promise(function (resolve) {
        resolve("Blank promise");
      });
    }
  };

  this.customizeDocForUser = function (updatedDoc, onBoardingUserInput, skinCD, isUpdateExistingLetter) {
    // Create or update existing gap section
    updatedDoc = _this6.addRemoveGapsSection(updatedDoc, onBoardingUserInput);
    var lstSections = [];
    var isUploadResumeFlow = onBoardingUserInput[typeCd.dataObjMappingKeys.isUploadResume] == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()];
    if (RDL.features.isBuilderBasedFlow) {
      (0, _experimentUtils.setSectionsCharValFromTTC)(updatedDoc.sections, onBoardingUserInput, _this6.props.user);
      if (_this6.state.isLoggedIn) {
        var firstName = void 0,
            lastName = void 0;
        if (!onBoardingUserInput[typeCd.dataObjMappingKeys.FirstName] && !onBoardingUserInput[typeCd.dataObjMappingKeys.LastName]) {
          firstName = isUploadResumeFlow ? '' : RDL.objClaims.firstName || '';
          lastName = isUploadResumeFlow ? '' : RDL.objClaims.lastName || '';
        } else {
          firstName = onBoardingUserInput[typeCd.dataObjMappingKeys.FirstName] || '';
          lastName = onBoardingUserInput[typeCd.dataObjMappingKeys.LastName] || '';
        }
        var nameContact = {
          firstName: firstName,
          lastName: lastName,
          email: onBoardingUserInput.email || (isUploadResumeFlow ? '' : RDL.objClaims.email),
          city: onBoardingUserInput.userCity,
          state: onBoardingUserInput.userState,
          zip: onBoardingUserInput.userZip,
          phone: onBoardingUserInput.phone,
          street: onBoardingUserInput.recipientStreet
        };
        if (RDL.features.isRegOnContact && (onBoardingUserInput[typeCd.dataObjMappingKeys.FirstName] || onBoardingUserInput[typeCd.dataObjMappingKeys.LastName])) {
          nameContact.firstName = onBoardingUserInput[typeCd.dataObjMappingKeys.FirstName];
          nameContact.lastName = onBoardingUserInput[typeCd.dataObjMappingKeys.LastName];
        }
        updatedDoc = _this6.UpdateNameContactInDocument(nameContact, updatedDoc, true, isUploadResumeFlow);
      }
    }
    var textColor = RDL.features.isBuilderBasedFlow && !isUploadResumeFlow ? RDL.placeholderColor : undefined;
    lstSections = JSON.parse(CommonUtils.autoPopulateDynamicTextField(onBoardingUserInput, updatedDoc, false, false, textColor));
    updatedDoc.sections = lstSections;

    if (_this6.props.user && _this6.props.user.Role == _helper.TypeCodes.userRoles.User) {
      if (!isUploadResumeFlow) {
        updatedDoc = _this6.updateEmailInDoc(updatedDoc, _this6.props.user);
      }
      lstSections = CommonUtils.replaceNameInClosure(updatedDoc, _this6.props.user, null, isUploadResumeFlow);
      CommonUtils.reOrderIndicesOfSections(lstSections);
      CommonUtils.reOrderCloserSection(lstSections);
      updatedDoc.sections = lstSections;
    }
    updatedDoc = _this6.addRemoveRecipientSectionPara(updatedDoc, onBoardingUserInput);
    if (skinCD && updatedDoc.skinCD != skinCD) {
      updatedDoc.skinCD = skinCD;
    }
    if (window.RDL.features.saveLetterByName && (!isUpdateExistingLetter || isUploadResumeFlow)) {
      var _firstName = _this6.props.user.FirstName || _this6.props.onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.FirstName];
      var _lastName = _this6.props.user.LastName || _this6.props.onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.LastName];
      if (isUploadResumeFlow) {
        _firstName = _this6.props.onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.FirstName];
        _lastName = _this6.props.onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.LastName];
      }

      var companyName = _this6.props.onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.companyName];
      var docName = CommonUtils.getDocumentName(_firstName, _lastName, companyName, _this6.state.Letters);
      updatedDoc.name = docName;
    }

    return _this6.setDocStylesFromSkin(updatedDoc, true, true).then(function (updatedDoc) {
      _this6.toggleFetchDocumentSwitch();
      updatedDoc = _this6.setEnhancedDocStyles(updatedDoc, true);
      if (window.RDL.features.showSignature) {
        updatedDoc = CommonUtils.getSignatureUpdatedDocument(updatedDoc, _this6.props.user, onBoardingUserInput);
      }
      if (RDL.experimentControl.isFinalize2Funnel) updatedDoc = CommonUtils.getSectionsNameUpdateDoc(updatedDoc, _this6.props.user);
      _this6.CheckAndUploadSignature(updatedDoc);
      if (onBoardingUserInput[typeCd.dataObjMappingKeys.isNewUser]) {
        _this6.showEditorTips();
        onBoardingUserInput[typeCd.dataObjMappingKeys.isNewUser] = false;
        _this6.onboardingActionsWrapper.saveOnboardingUserInput(onBoardingUserInput);
      }
      return _this6.documentActionsWrapper.updateDocument(updatedDoc, undefined, true);
    });
  };

  this.onUserRegisterOrLogin = function (userId) {
    _this6.CheckAndUploadSignature(_this6.props.documentObj);
  };

  this.CheckAndUploadSignature = function (doc) {
    if (RDL.objClaims.role.toLowerCase() == "user" || RDL.uploadSignatureBeforeLogin) {
      _this6.uploadSignature(doc);
    }
  };

  this.uploadSignature = function (document, isNoDispatch) {
    var sgtrSection = _helper.CommonHelper.getSectionByCD(document.sections, _helper.TypeCodes.sectionTypeCd.Signature);
    if (sgtrSection && sgtrSection.paragraphs && sgtrSection.paragraphs.length > 0 && sgtrSection.paragraphs[0]) {
      var surlValue = _helper.CommonHelper.getCharValue(sgtrSection.paragraphs[0].docDatas, _helper.TypeCodes.fieldCd.SignatureURL);
      if (surlValue && surlValue.indexOf("https") == -1) {
        _this6.documentActionsWrapper.UploadSignature(_this6.props.user.UserUID, surlValue, "", "", "", "", "", "", document.id, RDL.countryDetails.countryCode).then(function (fileURL) {
          var surl = sgtrSection.paragraphs[0].docDatas.find(function (cmp) {
            return cmp.fieldCD == _helper.TypeCodes.fieldCd.SignatureURL;
          });
          if (surl && surl.charValue) {
            surl.charValue = fileURL + "?" + Math.random();
          }
          if (sgtrSection.paragraphs[0]) {
            var sgtrSectionPara = new _viewmodel.Paragraph({
              id: sgtrSection.paragraphs[0].id,
              sectionID: sgtrSection.id,
              docDatas: sgtrSection.paragraphs[0].docDatas
            });
            _this6.documentActionsWrapper.AddUpdateParagraph(sgtrSectionPara, false, document, isNoDispatch);
          }
        });
      }
    }
  };

  this.addRemoveGapsSection = function (updatedDoc, onBoardingUserInput) {
    //Declaration
    var gapSection = void 0,
        newSection = void 0,
        lstSections = [];
    var gapSectionPara = void 0,
        docDataList = [],
        docData = void 0,
        paraContent = void 0,
        gapReasonDetails = void 0;

    gapSection = updatedDoc.sections.find(function (section) {
      return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Gaps;
    });
    //ADD: Gaps selected yes by user but not available in document.
    if ((onBoardingUserInput[typeCd.dataObjMappingKeys.WorkGaps] == window.RDL.Localization.lbl_yes || onBoardingUserInput[typeCd.dataObjMappingKeys.selectedGapsTTC]) && !gapSection) {
      //Add Gap Section
      newSection = new _viewmodel.Section({
        sectionTypeCD: _helper.TypeCodes.sectionTypeCd.Gaps,
        name: window.RDL.Localization.lbl_sectionList_name_GAPS,
        docZoneTypeCD: _helper.TypeCodes.docZoneTypeCd.BODY,
        documentID: updatedDoc.id,
        index: window.RDL.gapSectionIndex
      });

      updatedDoc = _this6.documentActionsWrapper.AddSection(newSection, updatedDoc, true);
    }
    //REMOVE: Gaps not selected yes by user but available in document.
    else if (!onBoardingUserInput[typeCd.dataObjMappingKeys.selectedGapsTTC] && onBoardingUserInput[typeCd.dataObjMappingKeys.WorkGaps] != window.RDL.Localization.lbl_yes && gapSection) {
        //Remove Gap Section
        updatedDoc && updatedDoc.sections.map(function (section) {
          if (section.sectionTypeCD != _helper.TypeCodes.sectionTypeCd.Gaps) {
            lstSections.push(section);
          }
        });
        updatedDoc = _this6.documentActionsWrapper.UpdateSections(lstSections, updatedDoc, true);
      }

    //Make sure that Gaps section should be at window.RDL.gapSectionIndex
    gapSection = _helper.CommonHelper.getSectionByCD(updatedDoc.sections, _helper.TypeCodes.sectionTypeCd.Gaps);
    if (gapSection && gapSection.index != window.RDL.gapSectionIndex) {
      var sections = updatedDoc.sections;
      sections.splice(window.RDL.gapSectionIndex - 1, 0, sections.splice(gapSection.index - 1, 1)[0]);
      CommonUtils.reOrderIndicesOfSections(sections);
    }

    //AddRemove Gaps Para if GapSection is available
    if (gapSection) {
      var selectedGapReason = onBoardingUserInput[typeCd.dataObjMappingKeys.WorkGapsReason];
      if (!selectedGapReason && onBoardingUserInput[typeCd.dataObjMappingKeys.selectedGapsTTC]) {
        paraContent = onBoardingUserInput[typeCd.dataObjMappingKeys.selectedGapsTTC].text || onBoardingUserInput[typeCd.dataObjMappingKeys.selectedGapsTTC];
      };
      //If GapReason is selected.
      if (selectedGapReason || paraContent) {
        if (!paraContent) {
          gapReasonDetails = window.RDL.workGapReasons.find(function (gapReason) {
            return window.RDL.Localization[gapReason.reason] == selectedGapReason;
          });
          if (gapReasonDetails) {
            paraContent = window.RDL.Localization[gapReasonDetails.paraContent];
          }
        }
        if (paraContent) {
          docData = new _viewmodel.DocData({
            userId: _this6.props.user.UserUID,
            fieldCD: _helper.TypeCodes.fieldCd.FreeFormat, charValue: paraContent
          });
          docDataList.push(docData);
          if (gapSection.paragraphs.length) gapSectionPara = new _viewmodel.Paragraph({
            id: gapSection.paragraphs[0].id,
            sectionID: gapSection.id, docDatas: docDataList
          });else gapSectionPara = new _viewmodel.Paragraph({ sectionID: gapSection.id, docDatas: docDataList });
          updatedDoc = _this6.documentActionsWrapper.AddUpdateParagraph(gapSectionPara, false, updatedDoc, true);
        }
      }
      //If gap reason is not selected but available in gaps section.
      else if (gapSection.paragraphs.length) {
          gapSectionPara = new _viewmodel.Paragraph({ id: gapSection.paragraphs[0].id, sectionID: gapSection.id });
          updatedDoc = _this6.documentActionsWrapper.AddUpdateParagraph(gapSectionPara, true, updatedDoc, true);
        }
    }
    return updatedDoc;
  };

  this.keyPressCloseSideBar = function (event) {
    event.keyCode == 27 && _this6.closeSidebar();
  };

  this.closeSidebar = function () {
    if (document.body.classList.contains("sidebar-animation")) {
      if (!document.body.classList.contains('formatting')) //Closing Template
        _this6.showTemplateTips();
      document.body.classList.remove("sidebar-animation");
      document.querySelector(".nav-item.active").classList.remove("active");
    }
    setTimeout(function () {
      document.body.className = document.body.className.replace("sidebar-open", "").replace("formatting", "");
      _this6.setZoomScale();
    }, 400);
  };

  this.setZoomScale = function () {
    var zoomOption = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this6.state.zoomOption;

    var zoomScale = void 0,
        zoomType = void 0,
        zoomClass = void 0,
        newWidth = void 0,
        prevZoomScale = void 0,
        prevWidth = void 0,
        x = void 0,
        setStateObj = {};
    zoomType = Object.keys(typeCd.letterZoomTypes).find(function (x) {
      return typeCd.letterZoomTypes[x].label == zoomOption;
    });
    zoomScale = typeCd.letterZoomTypes[zoomType].scale;
    zoomClass = typeCd.letterZoomTypes[zoomType].type;
    if (window.RDL.features.showReskinnedFinalize) {
      zoomScale = CommonUtils.getScaleVal();
    } else if (!zoomScale) {
      zoomScale = _this6.getZoomToFitScale();
      if (zoomScale == null) zoomScale = _this6.state.zoomScale;
    }

    if (zoomScale != _this6.state.zoomScale || zoomOption != _this6.state.zoomOption) {
      if (!window.RDL.features.showReskinnedFinalize && RDL.currentPortalDetails.isCssScaling && document.querySelector(".zoom")) {
        prevZoomScale = _this6.state.zoomScale || 1;
        prevWidth = document.querySelector(".zoom").getBoundingClientRect().width;
        x = prevWidth / prevZoomScale;
        newWidth = x * zoomScale;
        setStateObj.scaleOptionsStyle = { width: newWidth + "px" };
      }
      setStateObj.zoomScale = zoomScale;
      setStateObj.zoomOption = zoomOption;
      setStateObj.zoomClass = zoomClass;
      _this6.setState(setStateObj);
    }
  };

  this.getZoomToFitScale = function () {
    var scale = null;
    if (document.body && document.getElementById("resumeDoc") && document.querySelector(".zoom") && document.querySelector(".zoom-last-saved-wrapper") && document.querySelector(".zoom").getBoundingClientRect().width) {
      var isSideBarOpen = document.body.classList.contains('sidebar-open');
      var sideBarWidth = document.getElementsByClassName("left-sidebar")[0].offsetWidth || 357;
      var w = document.documentElement.clientWidth;
      var r = isSideBarOpen ? sideBarWidth : 0;
      var p = 130;
      var s = 614;
      var z = w - (r + p);
      var nz = z / s;
      scale = nz;
    }
    return scale;
  };

  this.InsertNameContactSections = function (docId, docSections) {
    var isUpdate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;

    if (docSections) {
      var isNameSectionPresent = docSections.filter(function (section) {
        return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Name;
      }).length > 0 ? true : false;

      var isContactSectionPresent = docSections.filter(function (section) {
        return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Contact;
      }).length > 0 ? true : false;

      if (isNameSectionPresent && isContactSectionPresent) {
        return false;
      }
      var lstSections = [];
      var section = void 0;
      var indexIncrement = 0;

      if (!isNameSectionPresent) {
        section = new _viewmodel.Section({
          id: _helper.CommonHelper.guid(),
          sectionTypeCD: _helper.TypeCodes.sectionTypeCd.Name,
          name: window.RDL.Localization.lbl_namesection,
          docZoneTypeCD: _helper.TypeCodes.docZoneTypeCd.HEAD,
          documentID: docId,
          index: 1
        });
        indexIncrement = indexIncrement + 1;
        lstSections.push(section);
      }

      if (!isContactSectionPresent) {
        section = new _viewmodel.Section({
          id: _helper.CommonHelper.guid(),
          sectionTypeCD: _helper.TypeCodes.sectionTypeCd.Contact,
          name: window.RDL.Localization.lbl_contactsection,
          docZoneTypeCD: _helper.TypeCodes.docZoneTypeCd.HEAD,
          documentID: docId,
          index: 2
        });
        indexIncrement = indexIncrement + 1;
        lstSections.push(section);
      }

      docSections.map(function (section) {
        section.index = section.index + (section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Name ? 0 : indexIncrement);
        lstSections.push(section);
      });
      lstSections.sort(function (a, b) {
        return a.index - b.index;
      }); //Sorting based on index
      if (isUpdate) {
        return _this6.documentActionsWrapper.UpdateSections(lstSections);
      } else {
        return lstSections;
      }
    } else return false;
  };

  this.updateEmailInDoc = function (updatedDoc, user) {
    var contactSectionPara = null;
    var contactSection = null;
    var addressList = [];
    var userId = user.UserUID;
    if (updatedDoc && updatedDoc.id && user.EmailAddress.length > 0) {
      var docData = new _viewmodel.DocData({
        userId: userId, fieldCD: _helper.TypeCodes.fieldCd.Email,
        charValue: user.EmailAddress
      });
      addressList.push(docData);
      if (user.PhoneNumber && user.PhoneNumber.length > 0) {
        docData = new _viewmodel.DocData({
          userId: userId, fieldCD: _helper.TypeCodes.fieldCd.HomePhone,
          charValue: _this6.props.user.PhoneNumber
        });
        addressList.push(docData);
      }

      if (!window.RDL.prflEnabled && !RDL.features.isBuilderBasedFlow) {
        contactSection = _helper.CommonHelper.getSectionByCD(updatedDoc.sections, _helper.TypeCodes.sectionTypeCd.Contact);
        if (contactSection) {
          if (contactSection.paragraphs.length > 0) {
            contactSectionPara = new _viewmodel.Paragraph({
              id: contactSection.paragraphs[0].id,
              index: contactSection.paragraphs[0].index, sectionID: contactSection.id,
              docDatas: addressList
            });
          } else {
            contactSectionPara = new _viewmodel.Paragraph({ sectionID: contactSection.id, docDatas: addressList });
          }
          updatedDoc = _this6.documentActionsWrapper.AddUpdateParagraph(contactSectionPara, true, updatedDoc, true);
        }
      } else {
        var newList = void 0;
        if (RDL.features.isBuilderBasedFlow) contactSection = _helper.CommonHelper.getSectionByCD(updatedDoc.sections, _helper.TypeCodes.sectionTypeCd.Contact);else contactSection = _helper.CommonHelper.getSectionByCD(updatedDoc.sections, _helper.TypeCodes.sectionTypeCd.CProfile);
        if (contactSection) {
          if (contactSection.paragraphs.length > 0) {
            var existindocs = contactSection.paragraphs[0].docDatas;
            var exstEmail = contactSection.paragraphs[0].docDatas.find(function (x) {
              return x.fieldCD == 'EMAI';
            });
            if (exstEmail) {
              contactSection.paragraphs[0].docDatas.find(function (x) {
                return x.fieldCD == 'EMAI';
              }).charValue = user.EmailAddress;
              newList = contactSection.paragraphs[0].docDatas;
            } else {
              newList = [].concat(_toConsumableArray(existindocs), [docData]);
            }
            contactSectionPara = new _viewmodel.Paragraph({
              id: contactSection.paragraphs[0].id,
              index: contactSection.paragraphs[0].index, sectionID: contactSection.id, docDatas: newList
            });
          } else {
            contactSectionPara = new _viewmodel.Paragraph({ sectionID: contactSection.id, docDatas: addressList });
          }
          updatedDoc = _this6.documentActionsWrapper.AddUpdateParagraph(contactSectionPara, true, updatedDoc, true);
        }
      }
    }
    return updatedDoc;
  };

  this.UpdateNameContactInDocument = function (_ref5, updatedDoc, isReturnDoc, isUploadResumeFlow) {
    var _ref5$firstName = _ref5.firstName,
        firstName = _ref5$firstName === undefined ? "" : _ref5$firstName,
        _ref5$lastName = _ref5.lastName,
        lastName = _ref5$lastName === undefined ? "" : _ref5$lastName,
        _ref5$email = _ref5.email,
        email = _ref5$email === undefined ? "" : _ref5$email,
        _ref5$phone = _ref5.phone,
        phone = _ref5$phone === undefined ? "" : _ref5$phone,
        _ref5$city = _ref5.city,
        city = _ref5$city === undefined ? "" : _ref5$city,
        _ref5$state = _ref5.state,
        state = _ref5$state === undefined ? "" : _ref5$state,
        _ref5$zip = _ref5.zip,
        zip = _ref5$zip === undefined ? "" : _ref5$zip,
        _ref5$street = _ref5.street,
        street = _ref5$street === undefined ? "" : _ref5$street;

    var nameData = null,
        contactData = null;
    var nameSectionPara = null,
        contactSectionPara = null;
    var nameSection = null,
        contactSection = null;
    var nameList = [],
        contactList = [];
    var userId = _this6.props.user.UserUID;
    var updatedDocumentObj = JSON.parse(JSON.stringify(updatedDoc || _this6.props.documentObj));
    var isDocUpdated = false;

    _this6.onboardingActionsWrapper.setInputModified(false);

    //For Name Section
    if (window.RDL.prflEnabled) {
      nameData = CommonUtils.getProfileNameSectionVal(updatedDocumentObj);
    } else {
      nameData = _helper.CommonHelper.getNameSectionVal(updatedDocumentObj);
    }

    if (firstName != nameData.fName || lastName != nameData.lName) {
      var docData = new _viewmodel.DocData({
        userId: userId, fieldCD: _helper.TypeCodes.fieldCd.FirstName,
        charValue: firstName
      });
      nameList.push(docData);

      docData = new _viewmodel.DocData({
        userId: _this6.props.userId, fieldCD: _helper.TypeCodes.fieldCd.LastName,
        charValue: lastName
      });
      nameList.push(docData);
      if (window.RDL.prflEnabled) {
        nameSection = _helper.CommonHelper.getSectionByCD(updatedDocumentObj.sections, _helper.TypeCodes.sectionTypeCd.CProfile);
      } else {
        nameSection = _helper.CommonHelper.getSectionByCD(updatedDocumentObj.sections, _helper.TypeCodes.sectionTypeCd.Name);
      }
      if (nameSection && nameSection.paragraphs && nameSection.paragraphs.length > 0 && nameSection.paragraphs[0]) {
        nameSectionPara = new _viewmodel.Paragraph({
          id: nameSection.paragraphs[0].id,
          index: nameSection.paragraphs[0].index, sectionID: nameSection.id, docDatas: nameList
        });
      } else {
        nameSectionPara = new _viewmodel.Paragraph({ sectionID: nameSection.id, docDatas: nameList });
      }
      var docName = '';
      if (window.RDL.features.saveLetterByName) {
        var companyName = _this6.props.onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.companyName];
        docName = CommonUtils.getDocumentName(firstName, lastName, companyName, _this6.state.Letters);
        updatedDocumentObj.name = docName;
      } else {
        docName = (firstName && firstName + '_') + (lastName && lastName + '_') + window.RDL.Localization.lbl_letterText.trim() + '_1';
        updatedDocumentObj.Name = docName;
      }

      updatedDocumentObj = _this6.documentActionsWrapper.AddUpdateParagraph(nameSectionPara, true, updatedDocumentObj, true);
      isDocUpdated = true;
    }
    // //For Closer Section
    updatedDocumentObj = _this6.updateClosureSection(updatedDocumentObj, true, isUploadResumeFlow);

    //For Contact Section

    if (window.RDL.prflEnabled) {
      contactData = CommonUtils.getProfileContactSectionVal(updatedDocumentObj);
    } else {
      contactData = _helper.CommonHelper.getContactSectionVal(updatedDocumentObj);
    }

    if (email && email != contactData.email || phone && phone != contactData.phone || state && state != contactData.state || city && city != contactData.city || zip && zip != contactData.zip || street && street != contactData.strt) {
      var _docData = new _viewmodel.DocData({
        userId: userId, fieldCD: _helper.TypeCodes.fieldCd.Email,
        charValue: email
      });
      contactList.push(_docData);

      _docData = new _viewmodel.DocData({
        userId: _this6.props.userId, fieldCD: _helper.TypeCodes.fieldCd.CellPhone,
        charValue: phone
      });
      contactList.push(_docData);

      _docData = new _viewmodel.DocData({ userId: _this6.props.userId, fieldCD: _helper.TypeCodes.fieldCd.City, charValue: city });
      contactList.push(_docData);

      _docData = new _viewmodel.DocData({
        userId: _this6.props.userId, fieldCD: _helper.TypeCodes.fieldCd.State,
        charValue: state
      });
      contactList.push(_docData);

      _docData = new _viewmodel.DocData({
        userId: _this6.props.userId, fieldCD: _helper.TypeCodes.fieldCd.ZipCode,
        charValue: zip
      });
      contactList.push(_docData);

      _docData = new _viewmodel.DocData({
        userId: _this6.props.userId, fieldCD: _helper.TypeCodes.fieldCd.Street,
        charValue: street
      });
      contactList.push(_docData);

      if (window.RDL.isNameAddedInContactSection) {
        _docData = new _viewmodel.DocData({
          userId: _this6.props.userId, fieldCD: _helper.TypeCodes.fieldCd.FirstName,
          charValue: firstName
        });
        contactList.push(_docData);

        _docData = new _viewmodel.DocData({
          userId: _this6.props.userId, fieldCD: _helper.TypeCodes.fieldCd.LastName,
          charValue: lastName
        });
        contactList.push(_docData);
      }

      if (window.RDL.prflEnabled) {
        contactSection = _helper.CommonHelper.getSectionByCD(updatedDocumentObj.sections, _helper.TypeCodes.sectionTypeCd.CProfile);
      } else {
        contactSection = _helper.CommonHelper.getSectionByCD(updatedDocumentObj.sections, _helper.TypeCodes.sectionTypeCd.Contact);
      }
      if (contactSection.paragraphs[0]) {
        contactSectionPara = new _viewmodel.Paragraph({
          id: contactSection.paragraphs[0].id,
          index: contactSection.paragraphs[0].index, sectionID: contactSection.id,
          docDatas: contactList
        });
      } else {
        contactSectionPara = new _viewmodel.Paragraph({ sectionID: contactSection.id, docDatas: contactList });
      }

      updatedDocumentObj = _this6.documentActionsWrapper.AddUpdateParagraph(contactSectionPara, true, updatedDocumentObj, true);
      isDocUpdated = true;
    }
    if (isReturnDoc) {
      return updatedDocumentObj;
    } else if (isDocUpdated) {
      return _this6.documentActionsWrapper.updateDocument(updatedDocumentObj);
    } else {
      //Return Blank Promise
      return new Promise(function (resolve) {
        resolve("Blank promise");
      });
    }
  };

  this.updateClosureSection = function (docParam, isNoDispatch, isUploadResumeFlow) {
    var doc = docParam ? docParam : _this6.props.documentObj;
    //Retaining the values from document.
    var firstNameVal = void 0,
        lastNameVal = void 0,
        nameData = void 0,
        closerSection = void 0,
        closerCharvalue = void 0,
        sectionDataList = void 0,
        docDataName = void 0,
        sectionDataPara = void 0;

    if (window.RDL.prflEnabled) {
      nameData = CommonUtils.getProfileNameSectionVal(doc);
    } else {
      nameData = _helper.CommonHelper.getNameSectionVal(doc);
    }

    firstNameVal = nameData.fName;
    lastNameVal = nameData.lName;

    //If user is logged in and name is available
    if (!isUploadResumeFlow && !firstNameVal && !lastNameVal) {
      firstNameVal = _this6.props.user.FirstName;
      lastNameVal = _this6.props.user.LastName;
    }

    if (firstNameVal || lastNameVal) {
      closerSection = doc.sections.find(function (section) {
        return section.sectionTypeCD == _helper.TypeCodes.sectionTypeCd.Closer;
      });
      closerCharvalue = closerSection.paragraphs[0].docDatas[0].charValue;
      closerCharvalue = RDL.features.isBuilderBasedFlow && RDL.Localization.lbl_closer_static_content || closerCharvalue;
      closerCharvalue = CommonUtils.replaceClosureDynamicTextField(closerCharvalue, firstNameVal, lastNameVal);

      sectionDataList = [];
      docDataName = new _viewmodel.DocData({
        userId: _this6.props.UserUID, fieldCD: _helper.TypeCodes.fieldCd.FreeFormat,
        charValue: closerCharvalue
      });
      sectionDataList.push(docDataName);
      sectionDataPara;
      sectionDataPara = new _viewmodel.Paragraph({
        id: closerSection.paragraphs[0].id,
        index: closerSection.paragraphs[0].index, sectionID: closerSection.id, docDatas: sectionDataList
      });
      if (isNoDispatch) {
        doc = _this6.documentActionsWrapper.AddUpdateParagraph(sectionDataPara, false, doc, isNoDispatch);
        return doc;
      } else {
        return _this6.documentActionsWrapper.AddUpdateParagraph(sectionDataPara);
      }
    } else {
      if (isNoDispatch) {
        return doc;
      } else {
        //Return Blank Promise
        return new Promise(function (resolve) {
          resolve("Blank promise");
        });
      }
    }
  };

  this.clearOnBoardingV2UserData = function (clearExpCookie) {
    _this6.state.isLoggedIn && _this6.onboardingActionsWrapper.resetOnboardingData();
    window.RDL.deleteLS(typeCd.ForageKeyNames.progressBar);
    clearExpCookie && CommonUtils.deleteExperimentCookies();
  };

  this.removeQueryStringParam = function (param) {
    var url = window.location.href;
    url = url.replace("?" + param + "&", "?");
    url = url.replace("&" + param, "");
    url = url.replace(param, "");
    if (url.indexOf("?") == url.length - 1) {
      url = url.replace("?", "");
    }
    window.history.replaceState({}, document.title, url);
  };

  this.addQueryStringParam = function (param, val) {
    var url = window.location.href;
    var char = url.includes("?") ? "&" : "?";
    url = url + char + param + "=" + val;
    window.history.replaceState({}, document.title, url);
  };

  this.fetchAndSaveJobSkills = function () {
    var documentObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this6.props.documentObj;
    var jobTitle = arguments[1];

    if (!jobTitle && documentObj) {
      jobTitle = CommonUtils.getValFromDocPreference(documentObj, typeCd.userPreferenceKeys.jobTitle);
      jobTitle = jobTitle && jobTitle.value;
    }
    if (jobTitle) {
      var jobHierarchy = CommonUtils.getJobHierarchyByExp(_this6.props.onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.experience]);
      return _this6.commonActionsWrapper.getJobTitleSkills(_this6.props.user.UserUID, _helper.TypeCodes.sectionTypeCd.Skills, window.RDL.jobTitleSkillsProductCD, jobTitle, "", RDL.features.isFuzzyLogic, undefined, jobHierarchy).then(function (skills) {
        if (skills) {
          skills = skills.length <= typeCd.onBoardingStepsV2.Skills.MaxOptions ? skills : skills.slice(0, typeCd.onBoardingStepsV2.Skills.MaxOptions);
          var skillsList = CommonUtils.removeHTML(skills.map(function (x) {
            return CommonUtils.convertToTitleCase(x.htmlString || x.HTMLString);
          }));
          typeCd.onBoardingStepsV2.Skills.options = skillsList;
          _this6.onboardingActionsWrapper.saveJobSkillsList(skillsList);
        }
      });
    }
  };

  this.setOnboardingUserInput = function (userInputKey, val) {
    var userData = _this6.props.onboardingData.onboardingUserInput;
    userData[userInputKey] = val;
    _this6.onboardingActionsWrapper.saveOnboardingUserInput(userData);
  };

  this.setOnboardingUserInputFromQS = function () {
    var onboardingUserInput = JSON.parse(JSON.stringify(_this6.props.onboardingData.onboardingUserInput)),
        skipStepsArr = [],
        QSVal = void 0,
        decodedQSVal = void 0,
        isSkip = void 0,
        isUpdated = void 0,
        blankPromise = new Promise(function (resolve) {
      resolve("");
    }),
        promiseArr = [blankPromise],
        enterBuilderProps = {};

    isSkip = _this6.localVar.isSkipQS;
    isSkip && _this6.removeQueryStringParam(typeCd.QueryStringParams.isSkip + "=" + isSkip);

    typeCd.onboardingQSStepMapping.map(function (key) {
      QSVal = RDL.GetQueryString(key.QSKey);
      if (QSVal != null) {
        (isSkip || key.isSkip && key.isSkip(QSVal)) && skipStepsArr.push(key.stepIndex);
        isUpdated = true;
        !_this6.state.skipForOnboardingInit && _this6.setState({ skipForOnboardingInit: true });
        QSVal = QSVal || "";
        decodedQSVal = decodeURIComponent(QSVal);
        decodedQSVal = key.customizeValAndSetEnteredBuilderProps ? key.customizeValAndSetEnteredBuilderProps(decodedQSVal, enterBuilderProps) : decodedQSVal;
        onboardingUserInput[key.fieldMapKey] = key.isSanitize ? CommonUtils.sanitizeVal(decodedQSVal) : decodedQSVal;
        if (key.getMatchedSuggestedVal && onboardingUserInput[key.fieldMapKey].length > 1) {
          promiseArr.push(key.getMatchedSuggestedVal(_this6.commonActionsWrapper, onboardingUserInput, key.fieldMapKey, enterBuilderProps));
        }
        _this6.removeQueryStringParam(key.QSKey + "=" + (QSVal || ""));
      }
    });

    if (isUpdated) {
      Promise.all(promiseArr).then(function () {
        _this6.onboardingActionsWrapper.saveOnboardingUserInput(onboardingUserInput);
        skipStepsArr.length && _this6.onboardingActionsWrapper.setSkipStepsArr(skipStepsArr);
        _this6.trackEnterBuilderEvent(enterBuilderProps);

        var promise = new Promise(function (resolve) {
          resolve("");
        });
        if (onboardingUserInput[typeCd.dataObjMappingKeys.jobTitle]) {
          promise = _this6.fetchAndSaveJobSkills(undefined, onboardingUserInput[typeCd.dataObjMappingKeys.jobTitle]);
        }
        promise.then(function () {
          _this6.setState({ skipForOnboardingInit: false });
        });
      });
    }
  };

  this.postGoogleOneTapSignIn = function (isExistingUser) {
    var userInput = _this6.props.onboardingData.onboardingUserInput;

    if (isExistingUser) {
      _this6.userActionsWrapper.IsPremiumUser(RDL.objClaims.user_uid, RDL.PortalSettings.ConfigureProductId).then(function (resp) {
        if (resp) {
          _this6.userActionsWrapper.SwitchUserExperiment(_this6.props.UserUID, RDL.objClaims.user_uid);
          window.location = window.RDL.Paths.BaseUrl;
        }
      });
    } else {
      userInput[typeCd.dataObjMappingKeys.isNewUser] = true;
    }
    userInput[typeCd.dataObjMappingKeys.FirstName] = RDL.objClaims.firstName;
    userInput[typeCd.dataObjMappingKeys.LastName] = RDL.objClaims.lastName;
    userInput[typeCd.dataObjMappingKeys.email] = RDL.objClaims.email;
    userInput[typeCd.dataObjMappingKeys.phone] = RDL.objClaims.phoneNumber;
    userInput[typeCd.dataObjMappingKeys.userCity] = RDL.objClaims.city;
    userInput[typeCd.dataObjMappingKeys.userState] = RDL.objClaims.state;
    userInput.doNotSkipNameScreen = true;
    _this6.onboardingActionsWrapper.saveOnboardingUserInput(userInput);
    var loaderElement = document.getElementsByClassName("clb-global-loader-overlay");
    loaderElement && loaderElement[0] && loaderElement[0].classList.add("d-none");
  };

  this.initializeEditorComponent = function (claims, docIdParam, createNewParam, isExistingUser, postGoogleOneTap) {
    var onboardingStepArr = _this6.props.onboardingData.onboardingStepArr;

    postGoogleOneTap && _this6.postGoogleOneTapSignIn(isExistingUser);
    var updateUserPromise = void 0;
    if (postGoogleOneTap && !isExistingUser) {
      updateUserPromise = _this6.userActionsWrapper.UpdateUser;
      claims = {
        UserUID: claims.user_uid,
        EmailAddress: claims.email,
        FirstName: claims.firstName,
        LastName: claims.lastName,
        MobileNumber: claims.mobileNumber,
        PhoneNumber: claims.phoneNumber,
        Country: claims.countryCode,
        PortalCD: claims.portal_cd,
        Role: claims.role
      };
    } else {
      updateUserPromise = _this6.documentActionsWrapper.UpdateUserFromClaims;
    }
    updateUserPromise(claims, true).then(function () {
      _this6.setOnboardingUserInputFromQS();
      //for Edit Letter case
      if (docIdParam) {
        _this6.documentActionsWrapper.GetDocument(claims.user_uid, docIdParam).then(function (updatedDoc) {
          //Only if docId of loggedIn User Exists
          var updatedDocument = JSON.parse(JSON.stringify(updatedDoc));
          if (updatedDocument) {
            if (updatedDocument.preferences) {
              (0, _experimentUtils.handleCEIntegrationExp)(claims.user_uid, updatedDocument);
              var i = void 0,
                  key = void 0,
                  preferenceKey = void 0,
                  preferenceVal = void 0,
                  onBoardingUserInput = {},
                  lstSections = void 0,
                  autoCoverLetter = void 0;
              autoCoverLetter = updatedDocument.preferences.find(function (x) {
                return x.docPreferenceTypeCD == typeCd.userPreferenceKeys.autoCoverLetter;
              });
              if (autoCoverLetter && autoCoverLetter.value === "1") {
                for (i = 0; i < typeCd.fieldsToUpdateKeys.length; i++) {
                  if (typeCd.fieldsToUpdateKeys[i].fieldKey && typeCd.fieldsToUpdateKeys[i].fieldCD) {
                    key = typeCd.fieldsToUpdateKeys[i].fieldKey;
                    preferenceKey = typeCd.fieldsToUpdateKeys[i].fieldCD;
                    preferenceVal = CommonUtils.getValFromDocPreference(updatedDocument, preferenceKey);
                    if (preferenceVal) {
                      onBoardingUserInput[key] = preferenceVal.value;
                    }
                  }
                }
                lstSections = updatedDocument.sections;
                if (onBoardingUserInput && Object.keys(onBoardingUserInput).length) {
                  lstSections = JSON.parse(CommonUtils.autoPopulateDynamicTextField(onBoardingUserInput, updatedDocument));
                }
                updatedDocument.sections = lstSections;
                lstSections = CommonUtils.replaceNameInClosure(updatedDocument, _this6.props.user);
                if (!RDL.isCustomizeAutoCL) autoCoverLetter.value = "0";
                _this6.documentActionsWrapper.UpdateSections(lstSections, updatedDocument);

                if (RDL.isCustomizeAutoCL) {
                  var letterViwedPref = updatedDocument.preferences.find(function (x) {
                    return x.docPreferenceTypeCD == typeCd.userPreferenceKeys.autoCoverLetterViewed;
                  });
                  if (!(letterViwedPref && letterViwedPref.value == "1")) _this6.setState({ PopupName: typeCd.PopUpNames.CustomizeLetterModal });
                }
              }
              var result = _this6.verifyAndUpdateDocSections(updatedDocument);
              if (onboardingStepArr.length <= 1 && !_this6.state.isRenderOnboardingV2) {
                var onboardingData = void 0;
                onboardingData = CommonUtils.fetchOnboardingdata(_this6.props.documentObj);
                _this6.onboardingActionsWrapper.saveOnboardingUserInput(onboardingData);
              }
              result.then(function () {
                _this6.setState({ skipRenderForDocEdit: false });
                _this6.setOnBoardingPopUpState(null);
                _this6.fetchAndSaveJobSkills();
              });
            } else {
              var _result = _this6.verifyAndUpdateDocSections(updatedDocument);
              _result.then(function () {
                _this6.setState({ skipRenderForDocEdit: false });
                _this6.setOnBoardingPopUpState(null);
              });
            }
          } else {
            window.location = claims.role == _helper.TypeCodes.userRoles.User ? window.RDL.Paths.BaseUrl : window.RDL.Paths.rootURL + window.RDL.Paths.BasePath.substr(1);
          }
        });
      }
      //CreateNew Letter case
      else if (createNewParam && createNewParam == 1) {
          _this6.removeQueryStringParam("createnew=1");
        }
        //if User comes from Resignation LP
        else if (window.RDL.resignationTemplateId) {
            if (_this6.props.user && _this6.props.user.Role != _helper.TypeCodes.userRoles.User) {
              _this6.setState({
                progressAnimationClasses: Object.assign(_this6.state.progressAnimationClasses, { sortableListClass: " hide-section" })
              });
            }
            if (!_this6.props.documentObj.id || _this6.props.documentObj.id && _this6.props.documentObj.templateID != window.RDL.resignationTemplateId) {
              var data = {
                userId: _this6.props.UserUID, document: {},
                portalId: window.RDL.PortalSettings.ConfigurePortal, templateId: window.RDL.resignationTemplateId,
                productcd: window.RDL.PortalSettings.ConfigureProductCd,
                preferences: [], skinCD: window.RDL.defaultSkinCD
              };
              _this6.localVar.delayHideLoaderAnimation = true;
              return _this6.documentActionsWrapper.CreateInitialDocument(data, window.RDL.isSetDocStylesFromSkin).then(function (createdDoc) {
                _this6.localVar.delayHideLoaderAnimation = false;
                _this6.fireDocCreatedEvents(createdDoc);
                if (window.RDL.isSetDocStylesFromSkin) {
                  return _this6.setDocStylesFromSkin(createdDoc);
                } else {
                  return new Promise(function (resolve) {
                    resolve(createdDoc);
                  });
                }
              });
            } else {
              _this6.setOnBoardingPopUpState();
              _this6.localVar.delayHideLoaderAnimation = false;
            }
          } else {
            _this6.setOnBoardingPopUpState(null);
          }
      RDL.currentPortalDetails[typeCd.userPreferenceKeys.lastVisited] && _this6.setLastVisitedUserPreference(); //CLB-1748
      if (RDL.joshuaTreeINTL) {
        var _ref6;

        var preference = [(_ref6 = {}, _defineProperty(_ref6, typeCd.customFields.code, typeCd.userPreferenceKeys.JoushuaTree), _defineProperty(_ref6, typeCd.customFields.value, 4), _ref6)];
        _this6.userActionsWrapper.setUserPreferences(_this6.props.user.UserUID, preference, RDL.PortalSettings.ConfigurePortalCd);
      }
    });

    //Update Window.RDL.Content from Forage --Refresh case
    localforage.getItem(typeCd.ForageKeyNames.TTCContent).then(function (value) {
      if (value) {
        window.RDL.Content = value;
      }
    });
    //Update Window.RDL.contentEngineTTC from Forage --Refresh case
    localforage.getItem(typeCd.ForageKeyNames.contentEngineTTC).then(function (value) {
      if (value) {
        window.RDL.contentEngineTTC = value;
      }
    });
  };

  this.handleHIWContinue = function () {
    if (RDL.enableReactRoutes) {
      var onboardingArr = _this6.props.onboardingData.onboardingStepArr || [];
      if (onboardingArr.length == 1 && !_this6.props.onboardingData.isReviewMode) {
        var stepData = Object.values(typeCd.onBoardingStepsV2).find(function (data) {
          return data.index == onboardingArr[0];
        });
        if (stepData && stepData.route) {
          _this6.setTitleAndRoute(stepData.documentTitle, stepData.route);
        }
      }
    }
    if (RDL.experimentControl.isSectionBreak && !_this6.state.sectionBreakThemeAppliedonHIW) {
      // setting the state just to repaint the screen with the new theme 
      //as the chooseTemplate screen was already loaded.
      _this6.setState({ sectionBreakThemeAppliedonHIW: true });
    }
    RDL.experimentControl.isTemplatePageSocialProof && (0, _experimentUtils.handleSocialTemplate)();
    RDL.experimentControl.isSkipChooseTemplate && (0, _experimentUtils.handleSkipTemplate)();

    _this6.setState({ reload: true });
  };

  this.verifyAndUpdateDocSections = function (updatedDocument) {
    var lastSections = updatedDocument.sections;
    if (!RDL.prflEnabled) lastSections = _this6.InsertNameContactSections(updatedDocument.id, updatedDocument.sections, false) || Array.from(updatedDocument.sections);
    CommonUtils.reOrderIndicesOfSections(lastSections);
    lastSections = CommonUtils.reOrderCloserSection(lastSections);
    if (JSON.stringify(lastSections) != JSON.stringify(updatedDocument.sections)) {
      return _this6.documentActionsWrapper.UpdateSections(lastSections);
    }
    return Promise.resolve(false);
  };

  this.checkBuildAndVerifyStore = function () {
    var cookieBuildVersion = RDL.readLS(typeCd.ForageKeyNames.buildVersion);
    if (!cookieBuildVersion || cookieBuildVersion != RDL.buildVersion) {
      RDL.buildVersion && RDL.createLS(typeCd.ForageKeyNames.buildVersion, RDL.buildVersion);
      // remove TTC Content
      localforage.removeItem(typeCd.ForageKeyNames.TTCContent);
      RDL.Skins && RDL.Skins.map(function (skin) {
        // remove each skin
        localforage.removeItem(skin.skinCD);
      });
    }
  };

  this.getTitleSuffix = function () {
    var titleSuffix = window.RDL.Localization["lbl_" + RDL.PortalSettings.ConfigurePortalCd.toLowerCase()] || "Cover Letter Now";
    return titleSuffix;
  };

  this.setTitleAndRoute = function (title, pathname, isHIW) {
    if (_this6.localVar.blockRouting || !RDL.enableReactRoutes) return;
    var completePath = RDL.Paths.BasePath + pathname + window.location.search;
    var titleSuffix = _this6.getTitleSuffix();
    if (!titleSuffix) return;
    var completeTitle = title + " - " + titleSuffix;
    if (completePath != window.location.pathname && pathname || isHIW && completeTitle != document.title) {
      document.title = completeTitle;
      var pathTitle = _this6.getDocTitleByPathname(completePath);
      if (completePath != window.location.pathname && (!pathTitle || pathTitle == completeTitle)) {
        if (RDL.Paths.BasePath + pathname == window.location.pathname) return;else window.history.pushState({}, document.title, completePath);
      }
    }
    if (!_this6.props.onboardingData.historyLength) {
      _this6.onboardingActionsWrapper.setOnboardingHistoryLength(window.history.length);
      return;
    }
    if (_this6.props.onboardingData.historyLength > window.history.length) {
      _this6.onboardingActionsWrapper.setOnboardingHistoryLength(window.history.length - 1);
      return;
    }
  };

  this.getDocTitleByPathname = function (path) {
    var route = (path || window.location.pathname).replace(RDL.Paths.BasePath, "");
    if (route) {
      var stepData = Object.values(typeCd.onBoardingStepsV2).find(function (stepData) {
        return stepData.route === route;
      });
      var titleSuffix = _this6.getTitleSuffix();
      if (stepData && stepData.documentTitle && titleSuffix) return stepData.documentTitle + " - " + titleSuffix;
    }
  };

  this.getUserPreferencesOnSwitch = function (userId) {
    if (userId) {
      _this6.userActionsWrapper.getUserPreferences(userId).then(function (prefList) {
        if (prefList && prefList.length > 0) {
          var pref = prefList.find(function (pref) {
            return pref.code == typeCd.userPreferenceKeys.templatesTipShown;
          });
          if (pref && pref.value == 1) {
            window.RDL.createLS(typeCd.ForageKeyNames.templatesTipShown, 1);
          }
        }
      });
    }
  };

  this.updateUserAgreement = function () {
    window.RDL.createLS(window.RDL.IS_TOS_PP_AGREED, "1", undefined, true);
    var body = [{
      agreementCD: _helper.TypeCodes.AgreementCD.PrivacyPolicy,
      isAgreed: true
    }, {
      agreementCD: _helper.TypeCodes.AgreementCD.TermsOfUse,
      isAgreed: true
    }];
    _this6.userActionsWrapper.saveUserAgreement(_this6.props.user.UserUID, RDL.PortalSettings.ConfigurePortalCd, body);
  };

  this.fireDocCreatedEvents = function (resp) {
    var letterTypeDetails = CommonUtils.getLetterTypeDetails(resp);
    CommonUtils.AddDocTraitsInCookie(letterTypeDetails, typeCd.eventPropsValues.coverLetterV2React);
    RDL.TrackOptimizelyEvents(typeCd.optimizelyEventTypes.docCreated);
  };

  this.showHideEditorDiv = function () {
    if (_this6.state.hideLoader && document.getElementById("editorDiv")) {
      if (!_this6.localVar.renderState.showOnBoardingV2 || _this6.props.user.Role == "User") {
        document.getElementById("editorDiv").classList.contains("d-none") && document.getElementById("editorDiv").classList.remove('d-none');
        _this6.setZoomScale();
      } else {
        !document.getElementById("editorDiv").classList.contains("d-none") && document.getElementById("editorDiv").classList.add('d-none');
      }
    }
  };

  this.getDefaultSkinStyles = function (skinHtm) {
    //maps defaultStylesVal object to docStyles array
    var docStyles = void 0,
        defaultStylesVal = void 0;
    docStyles = JSON.parse(JSON.stringify(_this6.props.documentObj.docStyles));
    defaultStylesVal = _this6.getDefaultStylesFromSkin(skinHtm);
    docStyles.map(function (style) {
      defaultStylesVal[style.styleTypeCD] && (style.value = defaultStylesVal[style.styleTypeCD]);
    });
    return docStyles;
  };

  this.getSkinHtm = function (skinCD, needStylesInArray) {
    var templateDocFormat = void 0,
        defaultStyleValues = void 0,
        localForagePromise = new Promise(function (resolve) {
      resolve("");
    }); //Blank Promise
    if (localforage.ready) {
      localForagePromise = localforage.getItem(skinCD);
    }

    return localForagePromise.then(function (value) {
      var portalContentPromise = void 0;
      if (value) portalContentPromise = new Promise(function (resolve) {
        resolve(value);
      });else portalContentPromise = _this6.commonActionsWrapper.GetPortalContent(skinCD);
      return portalContentPromise.then(function (skinHtm) {
        skinHtm = skinHtm.replace('font-size:100%', '').replace('font-size: 100%', '');
        templateDocFormat = RDL.GetHTMLDocFromString(skinHtm);
        defaultStyleValues = needStylesInArray ? _this6.getDefaultSkinStyles(templateDocFormat) : _this6.getDefaultStylesFromSkin(templateDocFormat);
        defaultStyleValues = Object.assign(defaultStyleValues, _this6.getDefaultStyleVal(skinCD));
        return { templateDocFormat: templateDocFormat, defaultStyleValues: defaultStyleValues, skinHtm: skinHtm };
      });
    });
  };

  this.setTemplateTypeCD = function () {
    var templateInfo = void 0;
    templateInfo = window.RDL.moreTemplatesInfo.filter(function (templateInfo) {
      return templateInfo.TemplateId == _this6.props.documentObj.templateID;
    })[0];
    if (templateInfo && window.RDL.Localization[templateInfo.Name]) {
      _this6.localVar.templateTypeCD = templateInfo.TemplateTypeCD;
      _this6.setState({
        templateTypeCD: templateInfo.TemplateTypeCD,
        templateTypeName: window.RDL.Localization[templateInfo.Name]
      });
    }
  };

  this.preFetchTemplateData = function (templateId, isMultiFetch, templatesArr) {
    return localforage.getItem(typeCd.ForageKeyNames.arrSampleTemplateObj).then(function (value) {
      var arrSampleTemplateObj = {};
      if (value) {
        arrSampleTemplateObj = value;
      }

      if (!isMultiFetch) {
        //Fetch only if not fetched already
        if (!arrSampleTemplateObj[templateId]) {
          return _this6.commonActionsWrapper.GetSampleDocument(templateId).then(function (templateFileData) {
            arrSampleTemplateObj[templateId] = templateFileData.Sections;
            return localforage.setItem(typeCd.ForageKeyNames.arrSampleTemplateObj, arrSampleTemplateObj);
          }).catch(function (error) {
            //Return Blank Promise
            return new Promise(function (resolve) {
              resolve(_helper.TypeCodes.resultTypes.Error);
            });
          });
        }
      } else if (templatesArr && templatesArr.length) {
        var fetchedCount = 0;
        templatesArr.map(function (template) {
          if (!arrSampleTemplateObj[template.TemplateId]) {
            _this6.commonActionsWrapper.GetSampleDocument(template.TemplateId).then(function (templateFileData) {
              arrSampleTemplateObj[template.TemplateId] = templateFileData.Sections;
              fetchedCount = fetchedCount + 1;
              if (templatesArr.length == fetchedCount) {
                //To be done for the last fetched template
                localforage.setItem(typeCd.ForageKeyNames.arrSampleTemplateObj, arrSampleTemplateObj);
              }
            });
          } else {
            fetchedCount = fetchedCount + 1;
            if (templatesArr.length == fetchedCount) {
              //To be done for the last fetched template
              localforage.setItem(typeCd.ForageKeyNames.arrSampleTemplateObj, arrSampleTemplateObj);
            }
          }
        });
      }
    });
  };

  this.setLastVisitedUserPreference = function () {
    var userPreferences = [];
    userPreferences.push({
      code: typeCd.userPreferenceKeys.lastVisited,
      value: RDL.currentPortalDetails[typeCd.userPreferenceKeys.lastVisited]
    });
    _this6.userActionsWrapper.setUserPreferences(_this6.props.user.UserUID, userPreferences, RDL.PortalSettings.ConfigurePortalCd);
  };

  this.trackEnterBuilderEvent = function () {
    var _properties;

    var customProperties = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    var isLoggedIn = _this6.props.user && _this6.props.user.Role == _helper.TypeCodes.userRoles.User ? true : false;
    var properties = (_properties = {}, _defineProperty(_properties, typeCd.eventPropsKeys.builderType, typeCd.eventPropsValues.coverLetters), _defineProperty(_properties, typeCd.eventPropsKeys.flowName, typeCd.eventPropsValues.coverLetterV2React), _properties);
    RDL.TrackEvents(typeCd.eventTypes.enterBuilder, Object.assign(properties, customProperties), _this6.props.UserUID, isLoggedIn.toString().toUpperCase());
    //fire HIW viewed event if HIW page is visible
    var showingHIW = isHIWVisible() || window.RDL.readLS(typeCd.ForageKeyNames.showingHIW) == 1;
    if (showingHIW && typeof fireHIWViewedEvent == "function") {
      fireHIWViewedEvent();
    }
  };

  this.onPopState = function () {
    var onboardingArr = _this6.props.onboardingData.onboardingStepArr || [];
    var isHIW = isHIWVisible();
    var is2ndCL = _this6.props.user.Role == _helper.TypeCodes.userRoles.User && !_this6.props.onboardingData.registrationOnContactStatus;
    if (isHIW || (!RDL.features.showTemplatesAndHIW || is2ndCL) && onboardingArr.length == 1 && !_this6.props.onboardingData.isReviewMode && _this6.props.onboardingData.historyLength) {
      var browserRouteOffset = is2ndCL ? 3 : 1;
      var gobackLength = -window.history.length - browserRouteOffset + (_this6.props.onboardingData.historyLength || 0);
      _this6.localVar.blockRouting = true;
      _this6.onboardingActionsWrapper.setOnboardingHistoryLength(0);
      window.history.go(gobackLength);
    }
  };

  this.fetchSkins = function (isLoggedIn) {
    var timeOutDuration = isLoggedIn ? 40000 : 0;
    setTimeout(function () {
      window.RDL.Skins.map(function (skin) {
        _this6.props.commonActions.GetPortalContent(skin.skinCD);
      });
    }, timeOutDuration);
  };

  this.setLetters = function (documents) {
    _this6.setState({ Letters: documents });
  };

  this.loadScripts = function () {
    var delayedLoadTime = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;

    setTimeout(function () {
      RDL.postPageLoadScriptURLs.map(function (scriptURL) {
        addScript(scriptURL.replace("token_buildversion", RDL.buildVersion));
      }, delayedLoadTime);
    });
  };

  this.prefetchSampleTemplate = function () {
    //fetch current template first, then fetch all.
    if (_this6.props.documentObj && _this6.props.documentObj.templateID) {
      _this6.preFetchTemplateData(_this6.props.documentObj.templateID).then(function () {
        _this6.preFetchTemplateData('', true, window.RDL.moreTemplatesInfo);
      });
    } else {
      _this6.preFetchTemplateData('', true, window.RDL.moreTemplatesInfo);
    }
  };

  this.setDocIDQueryString = function () {
    if (_this6.props.user && _this6.props.user.Role == _helper.TypeCodes.userRoles.User && _this6.props.documentObj.id && !window.RDL.GetQueryString(typeCd.QueryStringParams.docid)) {
      _this6.addQueryStringParam(typeCd.QueryStringParams.docid, _this6.props.documentObj.id);
      RDL.enableReactRoutes && _this6.setTitleAndRoute(typeCd.OnboardingStepDocTitle.Finalize, RDL.Routes.Finalize);
    }
  };

  this.isOnboardingModified = function (oldVal, newVal, preferenceCD) {
    if (preferenceCD == typeCd.userPreferenceKeys.WorkGaps || preferenceCD == typeCd.userPreferenceKeys.isHighSchoolTheme) {
      return false;
    } else if (oldVal != newVal) {
      return true;
    } else {
      return false;
    }
  };

  this.checkForMultiColumnSkin = function (skinCD) {
    if (!skinCD) {
      skinCD = RDL.defaultSkinCD;
    }
    localforage.getItem(skinCD).then(function (value) {
      var templateDocFormat = RDL.GetHTMLDocFromString(value);
      if (value == null) {
        _this6.commonActionsWrapper.GetPortalContent(skinCD).then(function (skinHtm) {
          templateDocFormat = RDL.GetHTMLDocFromString(skinHtm);
        });
      }
      _this6.setState({
        isMultiColumnSkin: templateDocFormat && Array.from(templateDocFormat.querySelectorAll("container")).length > 0 ? true : false
      });
    });
  };

  this.getPreviousOnboardingStep = function () {
    var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this6.props;

    var nextOnBoardingStep = void 0,
        onBoardingStepArr = JSON.parse(JSON.stringify(props.onboardingData.onboardingStepArr));
    if (!(onBoardingStepArr && onBoardingStepArr.length)) {
      nextOnBoardingStep = -1;
    } else {
      if (onBoardingStepArr.length > 1) {
        onBoardingStepArr.splice(-1, 1);
        nextOnBoardingStep = onBoardingStepArr[onBoardingStepArr.length - 1];
        _this6.onboardingActionsWrapper.saveOnboardingStepArr(onBoardingStepArr);
      } else if (_this6.props.onboardingData.isReviewMode) {
        _this6.onboardingActionsWrapper.saveOnboardingStepArr([]);
      } else {
        nextOnBoardingStep = onBoardingStepArr[0];
      }
    }
    return nextOnBoardingStep;
  };

  this.updateProgressAnimationClasses = function (updatedProp) {
    _this6.setState({
      progressAnimationClasses: Object.assign(_this6.state.progressAnimationClasses, updatedProp)
    });
  };

  this.userActionsWrapper = {
    signIn: function signIn(userId, username, password, portalCd, productCD, visitUID, user, emailOptin) {
      return _this6.props.userActions.signIn(userId, username, password, portalCd, productCD, visitUID, user, emailOptin, window.RDL.gaClientId);
    },
    IsPremiumUser: function IsPremiumUser(userId, productId) {
      return _this6.props.userActions.IsPremiumUser(userId, productId);
    },
    SaveUserStages: function SaveUserStages(userID, userStageID, productCD, portalCD) {
      if (window.RDL.isDisableSaveUserStage) {
        return;
      }
      return _this6.props.userActions.SaveUserStages(userID, userStageID, productCD, portalCD);
    },
    GetUserByID: function GetUserByID(userID) {
      return _this6.props.userActions.GetUserByID(userID);
    },
    UpdateUser: function UpdateUser(user, isFirstTimeUser) {
      return _this6.props.userActions.UpdateUser(user, isFirstTimeUser);
    },
    UpdateUserInStore: function UpdateUserInStore(user) {
      return _this6.props.userActions.UpdateUserInStore(user);
    },
    conductExperiment: function conductExperiment(userId, experimentId, eventType, loggedInStatus) {
      var isDisableTests = RDL.readCookie(typeCd.ForageKeyNames.disableTests);
      if (isDisableTests) {
        return CommonUtils.getVariantFromRunTest(experimentId);
      } else {
        return _this6.props.userActions.conductExperiment(userId, experimentId).then(function (result) {
          if (result && result.data && result.data.experimentname && result.data.variantname) {
            var experimentTraits = {};
            experimentTraits["Experiment: " + result.data.experimentname] = result.data.variantname;
          };
          return result;
        });;
      }
    },
    setUserPreferences: function setUserPreferences(userId, userPreferences, portalCd) {
      return _this6.props.userActions.setUserPreferences(userId, userPreferences, portalCd);
    },
    updateEmailAddress: function updateEmailAddress(userId, email, isTrackEvent, fireGAEventForEmail) {
      return _this6.props.userActions.updateEmailAddress(userId, email, isTrackEvent, fireGAEventForEmail).then(function () {
        RDL.IdentifyTraits(userId, { email: email }, false);
      });
    },
    getUserPreferences: function getUserPreferences(userId) {
      return _this6.props.userActions.getUserPreferences(userId);
    },
    SwitchUserExperiment: function SwitchUserExperiment(oldUserId, newUserId) {
      return _this6.props.userActions.SwitchUserExperiment(oldUserId, newUserId);
    },
    getUserContactDetails: function getUserContactDetails(userId) {
      return _this6.props.userActions.getUserContactDetails(userId);
    },
    saveUserAgreement: function saveUserAgreement(userId, portalCd, body) {
      return _this6.props.userActions.saveUserAgreement(userId, portalCd, body);
    } };
  this.commonActionsWrapper = {
    cacheExamplesLocally: function cacheExamplesLocally(portalCD, templateTypeCD, sections, additionalSections) {
      return _this6.props.commonActions.cacheExamplesLocally(portalCD, templateTypeCD, sections, additionalSections);
    },
    getSpellCheckResults: function getSpellCheckResults(text) {
      return _this6.props.commonActions.getSpellCheckResults(text);
    },
    getCityAutoPopulated: function getCityAutoPopulated(search_string) {
      return _this6.props.commonActions.getCityAutoPopulated(search_string);
    },
    GetSchoolsAutoPopulated: function GetSchoolsAutoPopulated(search_string) {
      return _this6.props.commonActions.GetSchoolsAutoPopulated(search_string);
    },
    getJobsAutoPopulated: function getJobsAutoPopulated(search_string) {
      return _this6.props.commonActions.getJobsAutoPopulated(search_string);
    },
    getDegreeAutoPopulated: function getDegreeAutoPopulated(search_string) {
      return _this6.props.commonActions.getDegreeAutoPopulated(search_string);
    },
    getFieldOfStudyAutoPopulated: function getFieldOfStudyAutoPopulated(search_string) {
      return _this6.props.commonActions.getFieldOfStudyAutoPopulated(search_string);
    },
    getCompanyAutoPopulated: function getCompanyAutoPopulated(countrycd, search_string) {
      return _this6.props.commonActions.getCompanyAutoPopulated(countrycd, search_string);
    },
    getJobTitleSkills: function getJobTitleSkills(userUid, sectionTypeCD, productCD, jobTitle, searchItemType, isEnableFuzzySearch, isEnhancedSkills, jobHierarchy) {
      return _this6.props.commonActions.getJobTitleSkills(userUid, sectionTypeCD, productCD, jobTitle, searchItemType, isEnableFuzzySearch, isEnhancedSkills, jobHierarchy);
    },
    GetEducationDegrees: function GetEducationDegrees() {
      return _this6.props.commonActions.GetEducationDegrees();
    },
    GetSampleDocument: function GetSampleDocument(templateId) {
      return _this6.props.commonActions.GetSampleDocument(templateId);
    },
    GetPortalContent: function GetPortalContent(templateid) {
      return _this6.props.commonActions.GetPortalContent(templateid);
    },
    clearStore: function clearStore(isPersistOnboardingData) {
      return _this6.props.commonActions.clearStore(isPersistOnboardingData);
    },
    getRelatedJobTitles: function getRelatedJobTitles(search_string, documentID, userId) {
      return _this6.props.commonActions.getRelatedJobTitles(search_string, documentID, userId);
    } };
  this.documentActionsWrapper = {
    CreateInitialDocument: function CreateInitialDocument(data, isNoDispatch) {
      RDL.createBEUserActionCookie && _this6.props.user.Role == _helper.TypeCodes.userRoles.User && CommonUtils.AddBEUserActionCookie(typeCd.CLUserActions.documentCreated);
      return _this6.props.documentActions.CreateInitialDocument(data, isNoDispatch);
    },
    switchUserDocument: function switchUserDocument(oldUserId, newuserId, documentObj) {
      return _this6.props.documentActions.switchUserDocument(oldUserId, newuserId, documentObj);
    },
    renameDocument: function renameDocument(userId, documentId, newDocName) {
      return _this6.props.documentActions.renameDocument(userId, documentId, newDocName);
    },
    GetDocument: function GetDocument(userId, documentId, isNoDispatch) {
      return _this6.props.documentActions.GetDocument(userId, documentId, isNoDispatch);
    },
    GetAllDocuments: function GetAllDocuments(userId, portalId) {
      return userId ? _this6.props.documentActions.GetAllDocuments(userId, portalId) : Promise.resolve([]);
    },
    GetLightWeightUserDocuments: function GetLightWeightUserDocuments(userId, portalId) {
      return _this6.props.documentActions.GetLightWeightUserDocuments(userId, portalId);
    },
    DeleteSection: function DeleteSection(sectionId) {
      var updatedDoc = _helper.DocumentHelper.removeSection(_this6.props.documentObj, sectionId);
      return _this6.documentActionsWrapper.updateDocument(updatedDoc);
    },
    reorderSection: function reorderSection(data) {
      return _this6.props.documentActions.reorderSection(data);
    },
    reorderPara: function reorderPara(data) {
      return _this6.props.documentActions.reorderPara(data);
    },
    updateDocStyle: function updateDocStyle(styles) {
      var documentObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this6.props.documentObj;
      var isNoDispatch = arguments[2];
      var isCookieCreationAvoided = arguments[3];

      var updatedDoc = _helper.DocumentHelper.updateDocumentWithDocStyles(documentObj, styles);
      if (isNoDispatch) return updatedDoc;else {
        _this6.documentActionsWrapper.dispatchDocument(updatedDoc);
        //Render styles fast- without wating for updateDocument call.
        return _this6.documentActionsWrapper.updateDocument(updatedDoc, undefined, isCookieCreationAvoided);
      }
    },
    resetStyles: function resetStyles() {
      var userId = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this6.props.user.UserUID;
      var documentId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this6.props.documentObj.id;

      return _this6.props.documentActions.resetStyles(userId, documentId);
    },
    UpdateSections: function UpdateSections(sections) {
      var documentObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this6.props.documentObj;
      var isNoDispatch = arguments[2];
      var isCookieCreationAvoided = arguments[3];

      var updatedDoc = _helper.DocumentHelper.updateDocumentWithSections(documentObj, sections);
      if (isNoDispatch) return updatedDoc;else {
        _this6.documentActionsWrapper.dispatchDocument(updatedDoc); //Render doc fast- without wating for updateDocument call.
        return _this6.documentActionsWrapper.updateDocument(updatedDoc, undefined, isCookieCreationAvoided);
      }
    },
    UpdateDocumentSkinWithStyles: function UpdateDocumentSkinWithStyles() {
      var documentObj = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _this6.props.documentObj;
      var skinCd = arguments[1];
      var styles = arguments[2];
      var isNoDispatch = arguments[3];

      _this6.props.documentActions.dispatchDocument(documentObj); //Dispatching before calling API to avoid flickering.
      var updatedDoc = _helper.DocumentHelper.updateDocumentWithSkinCD(documentObj, skinCd);
      updatedDoc = _helper.DocumentHelper.updateDocumentWithDocStyles(updatedDoc, styles);
      return _this6.documentActionsWrapper.updateDocument(updatedDoc, undefined, undefined, isNoDispatch);
    },
    ApplyTemplateToDocument: function ApplyTemplateToDocument(userUid, documentId, templateId, isNoDispatch) {
      return _this6.props.documentActions.ApplyTemplateToDocument(userUid, documentId, templateId, isNoDispatch);
    },
    SetDocumentPreferences: function SetDocumentPreferences(docPreferences) {
      var documentObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this6.props.documentObj;
      var isNoDispatch = arguments[2];

      var updatedDoc = _helper.DocumentHelper.setDocumentPreferences(documentObj, docPreferences);
      if (isNoDispatch) return updatedDoc;else return _this6.documentActionsWrapper.updateDocument(updatedDoc);
    },
    SetDocumentPreference: function SetDocumentPreference(preferenceFieldCd, value) {
      var documentObj = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : _this6.props.documentObj;

      var allPreferences = documentObj.preferences;
      var existingPreference = allPreferences.find(function (x) {
        return x.docPreferenceTypeCD == preferenceFieldCd;
      });
      if (existingPreference) existingPreference.value = value;else {
        var preference = {
          "id": _helper.CommonHelper.guid(),
          "docPrefId": 0,
          "documentID": documentObj.id,
          "docId": 0,
          "docPreferenceTypeCD": preferenceFieldCd,
          "value": value
        };
        allPreferences.push(preference);
      }
      return _this6.documentActionsWrapper.SetDocumentPreferences(allPreferences);
    },
    DownloadLetter: function DownloadLetter(userId, documentId, portalId, fileFormatType, docFileType, styleSheetName, skipCacheCheck, isPrint, fileName, customApiPath, isEuropass, downloadSVG, templateName, sendDownloadEvent, isRedirect, letterType, isCopy, showEmptySections, isExtension, useV2, eventDetails, userPreferences, payperFeatureTrackParam) {
      return _this6.props.documentActions.DownloadLetter(userId, documentId, portalId, fileFormatType, docFileType, styleSheetName, skipCacheCheck, isPrint, fileName, customApiPath, isEuropass, downloadSVG, templateName, sendDownloadEvent, isRedirect, letterType, isCopy, showEmptySections, isExtension, useV2, eventDetails, userPreferences, payperFeatureTrackParam);
    },

    PreviewDocument: function PreviewDocument(userId, documentId, dpiSize, previewfileFormatType, previewfileType, styleSheetName, previewFileTypeCd) {
      return _this6.props.documentActions.PreviewDocument(userId, documentId, dpiSize, previewfileFormatType, previewfileType, styleSheetName, previewFileTypeCd);
    },

    UpdateUserFromClaims: function UpdateUserFromClaims(claims) {
      return _this6.props.documentActions.UpdateUserFromClaims(claims);
    },
    // When isReturnUpdatedDoc == true, API call won't be fired, only the updated
    // document from helper is returned.
    AddUpdateParagraph: function AddUpdateParagraph(para, isDeleteEmptyPara, documentObj, isNoDispatch) {
      var updatedDoc = documentObj || _this6.props.documentObj; //If document is passed in parameter,
      // it will be used otherwise document from store is used.
      var isDocDataEmpty = para.docDatas.filter(function (item) {
        return item.charValue != "";
      }).length < 1;
      if (isDocDataEmpty && isDeleteEmptyPara && para.sectionID && para.id) {
        updatedDoc = _helper.DocumentHelper.removeParagraph(updatedDoc, para.sectionID, para.id);
      } else if (!isDocDataEmpty) {
        updatedDoc = _helper.DocumentHelper.addUpdateParagraph(updatedDoc, para.sectionID, para.id, para.docDatas, para.index).document;
      }
      if (!isNoDispatch) {
        return _this6.documentActionsWrapper.updateDocument(updatedDoc);
      } else {
        return updatedDoc;
      }
    },
    AddSection: function AddSection(section) {
      var documentObj = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this6.props.documentObj;
      var isNoDispatch = arguments[2];

      var updatedDoc = _helper.DocumentHelper.addSection(documentObj, section.name, section.docZoneTypeCD, section.index, section.sectionTypeCD, 0);
      if (isNoDispatch) return updatedDoc;else return _this6.documentActionsWrapper.updateDocument(updatedDoc);
    },
    DeleteDocument: function DeleteDocument(userId, documentId) {
      return _this6.props.documentActions.DeleteDocument(userId, documentId);
    },
    emailDocument: function emailDocument(data) {
      return _this6.props.documentActions.emailDocument(data);
    },
    updateDocument: function updateDocument(documentObj) {
      var user = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : _this6.props.user;
      var isCookieCreationAvoided = arguments[2];
      var isNoDispatch = arguments[3];

      !isCookieCreationAvoided && RDL.createBEUserActionCookie && user.Role == _helper.TypeCodes.userRoles.User && CommonUtils.AddBEUserActionCookie(typeCd.CLUserActions.documentUpdated);
      var preference = documentObj.preferences.find(function (x) {
        return x.docPreferenceTypeCD == "EMBD";
      });
      if (!preference) {
        preference = {
          docPreferenceTypeCD: "EMBD",
          documentID: documentObj.id,
          value: "1",
          id: _helper.CommonHelper.guid()
        };
        documentObj.preferences.push(preference);
      }
      // code to change the color of the text from blue to orange
      if (window.RDL.currentPortalDetails.placeholderColorTxtColor) {
        var docString = JSON.stringify(documentObj.sections);
        docString = docString.replaceAllOccurrences(window.RDL.defaultPlaceholderColor, window.RDL.placeholderColor);
        documentObj.sections = JSON.parse(docString);
      }
      return _this6.props.documentActions.updateDocument(user.UserUID, documentObj, undefined, isNoDispatch);
    },
    addUpdateDocDataField: function addUpdateDocDataField(docDatas, fieldCD, value, userId) {
      return _helper.DocumentHelper.addUpdateDocDataField(docDatas, fieldCD, value, userId);
    },
    dispatchDocument: function dispatchDocument(documentObj) {
      _this6.props.documentActions.dispatchDocument(documentObj);
    },
    GetPaginated: function GetPaginated(userId, portalCD) {
      var documentType = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : RDL.DocumentTypeCD;
      var count = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : 8;
      var pagenum = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 1;
      var showDocFiles = arguments.length > 5 && arguments[5] !== undefined ? arguments[5] : true;

      return _this6.props.documentActions.GetPaginated(userId, portalCD, documentType, count, pagenum, showDocFiles);
    },
    CreateLetterFromResume: function CreateLetterFromResume(userId, documentId) {
      return _this6.props.documentActions.CreateLetterFromResume(userId, documentId);
    },
    CreateInitialDocumentWithFile: function CreateInitialDocumentWithFile(data) {
      return _this6.props.documentActions.CreateInitialDocumentWithFile(data);
    },
    UploadSignature: function UploadSignature(userId, imgBase, X, Y, W, H, imgWidth, imgHeight, documentId, countryCD) {
      return _this6.props.documentActions.UploadPhotoToAzure(userId, imgBase, X, Y, W, H, imgWidth, imgHeight, documentId, countryCD, RDL.enableDomainPhotoUrl ? 'signature' : 'photo');
    } };
  this.onboardingActionsWrapper = {
    saveOnboardingStepArr: function saveOnboardingStepArr(arr) {
      return _this6.props.onboardingActions.saveOnboardingStepArr(arr);
    },
    saveOnboardingUserInput: function saveOnboardingUserInput(inputData) {
      return _this6.props.onboardingActions.saveOnboardingUserInput(inputData);
    },
    saveJobSkillsList: function saveJobSkillsList(arr) {
      return _this6.props.onboardingActions.saveJobSkillsList(arr);
    },
    savePreviousFlowArr: function savePreviousFlowArr(arr) {
      return _this6.props.onboardingActions.savePreviousFlowArr(arr);
    },
    setInputModified: function setInputModified(flag) {
      return _this6.props.onboardingActions.setInputModified(flag);
    },
    resetOnboardingData: function resetOnboardingData() {
      return _this6.props.onboardingActions.resetOnboardingData();
    },
    updateReviewState: function updateReviewState(isReviewMode) {
      return _this6.props.onboardingActions.updateReviewState(isReviewMode);
    },
    setSkipStepsArr: function setSkipStepsArr(arr) {
      return _this6.props.onboardingActions.setSkipStepsArr(arr);
    },
    saveResumeArr: function saveResumeArr(arr) {
      return _this6.props.onboardingActions.saveResumeArr(arr);
    },
    saveDocumentCreatedFromResume: function saveDocumentCreatedFromResume(doc) {
      return _this6.props.onboardingActions.saveDocumentCreatedFromResume(doc);
    },
    saveResumeReviewArr: function saveResumeReviewArr(arr) {
      return _this6.props.onboardingActions.saveResumeReviewArr(arr);
    },
    saveUploadResumeReviewArr: function saveUploadResumeReviewArr(arr) {
      return _this6.props.onboardingActions.saveUploadResumeReviewArr(arr);
    },
    resetResumeOnboarding: function resetResumeOnboarding() {
      return _this6.props.onboardingActions.resetResumeOnboarding();
    },
    saveResumeUserInput: function saveResumeUserInput(inputData) {
      return _this6.props.onboardingActions.saveResumeUserInput(inputData);
    },
    saveCustomSkillsArray: function saveCustomSkillsArray(arr) {
      return _this6.props.onboardingActions.saveCustomSkillsArray(arr);
    },
    onSignUpSkip: function onSignUpSkip(flag) {
      return _this6.props.onboardingActions.onSignUpSkip(flag);
    },
    saveDocColor: function saveDocColor(color) {
      return _this6.props.onboardingActions.saveDocColor(color);
    },
    setSignUpOnContactStatus: function setSignUpOnContactStatus(value) {
      return _this6.props.onboardingActions.setSignUpOnContactStatus(value);
    },
    setPersonalizationInputModified: function setPersonalizationInputModified(flag) {
      return _this6.props.onboardingActions.setPersonalizationInputModified(flag);
    },
    setUserInteractedOnYOE: function setUserInteractedOnYOE(flag) {
      return _this6.props.onboardingActions.setUserInteractedOnYOE(flag);
    },
    setShowJobInPreview: function setShowJobInPreview(flag) {
      return _this6.props.onboardingActions.setShowJobInPreview(flag);
    },
    saveEnhancedSkillsList: function saveEnhancedSkillsList(arr) {
      return _this6.props.onboardingActions.saveEnhancedSkillsList(arr);
    },
    setOnboardingHistoryLength: function setOnboardingHistoryLength(length) {
      return _this6.props.onboardingActions.setOnboardingHistoryLength(length);
    } };
};

function mapStateToProps(state, ownProps) {
  return {
    templateId: state.Document.templateID,
    documentObj: state.Document,
    skinCD: state.Document.skinCD,
    Skins: state.ChooseTemplate.Skins,
    UserUID: state.User.UserUID,
    user: state.User,
    onboardingData: state.Onboarding
  };
}
function mapDispatchToProps(dispatch) {
  return {
    documentActions: (0, _redux.bindActionCreators)(DocumentActions, dispatch),
    userActions: (0, _redux.bindActionCreators)(UserActions, dispatch),
    commonActions: (0, _redux.bindActionCreators)(CommonActions, dispatch),
    onboardingActions: (0, _redux.bindActionCreators)(OnboardingActions, dispatch)
  };
}
exports.default = (0, _reactRedux.connect)(mapStateToProps, mapDispatchToProps)(Editor);

/***/ }),
/* 65 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.handleSkillsEnhancementsV1 = exports.handlePersonalizationV1 = undefined;

var _slicedToArray = function () {
  function sliceIterator(arr, i) {
    var _arr = [];var _n = true;var _d = false;var _e = undefined;try {
      for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
        _arr.push(_s.value);if (i && _arr.length === i) break;
      }
    } catch (err) {
      _d = true;_e = err;
    } finally {
      try {
        if (!_n && _i["return"]) _i["return"]();
      } finally {
        if (_d) throw _e;
      }
    }return _arr;
  }return function (arr, i) {
    if (Array.isArray(arr)) {
      return arr;
    } else if (Symbol.iterator in Object(arr)) {
      return sliceIterator(arr, i);
    } else {
      throw new TypeError("Invalid attempt to destructure non-iterable instance");
    }
  };
}();

exports.showCovidGapsAndLetterTypes = showCovidGapsAndLetterTypes;
exports.handleColorPickerSkins = handleColorPickerSkins;
exports.handleFinalizePageEnhancements = handleFinalizePageEnhancements;
exports.handleJobTitleEnhancement = handleJobTitleEnhancement;
exports.handleResumeImport = handleResumeImport;
exports.handleRegistrationModal = handleRegistrationModal;
exports.handleRegOnContact = handleRegOnContact;
exports.fetchStepSequence = fetchStepSequence;
exports.handleUploadResume = handleUploadResume;
exports.updatePersonalizationV1Flow = updatePersonalizationV1Flow;
exports.handleBuilderBasedFlow = handleBuilderBasedFlow;
exports.handleSocialTemplate = handleSocialTemplate;
exports.handleCEIntegrationExp = handleCEIntegrationExp;
exports.setSectionsCharValFromTTC = setSectionsCharValFromTTC;
exports.handleCovid19Feature = handleCovid19Feature;
exports.handleCustomSkills = handleCustomSkills;
exports.handleOnboardingBundleFeatures = handleOnboardingBundleFeatures;
exports.VerticalProgressBarNodes = VerticalProgressBarNodes;
exports.handleSkipTemplate = handleSkipTemplate;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _typeCodes = __webpack_require__(6);

var typeCd = _interopRequireWildcard(_typeCodes);

var _localforage = __webpack_require__(10);

var localforage = _interopRequireWildcard(_localforage);

var _helper = __webpack_require__(7);

var _CommonUtils = __webpack_require__(8);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _toConsumableArray(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) {
      arr2[i] = arr[i];
    }return arr2;
  } else {
    return Array.from(arr);
  }
}

function showCovidGapsAndLetterTypes() {
  RDL.workGapReasons.forEach(function (reason) {
    reason.isHide = false;
  });
  RDL.moreTemplatesInfo.forEach(function (template) {
    template.isHide = false;
  });
}

function handleColorPickerSkins() {
  RDL.Skins = RDL.Skins.filter(function (item) {
    return item.skinCD != "EMP2" && item.skinCD != "EMP1" && item.skinCD != "PRO1" && item.skinCD != "MOD6" && item.skinCD != "CNT5";
  });
}

function handleFinalizePageEnhancements(skinCD) {
  var docStyles = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];

  if (skinCD) docStyles.forEach(function (style) {
    if (true) {
      var index = RDL.Skins.findIndex(function (skin) {
        return skin.skinCD == skinCD && skin.enhanceStyles && skin.enhanceStyles[style.styleTypeCD];
      });
      if (index >= 0) {
        style.value = RDL.Skins[index].enhanceStyles[style.styleTypeCD];
      }
    }
  });
}

function handleJobTitleEnhancement(jobInMindVal) {
  if (jobInMindVal == typeCd.onBoardingUserInput[window.RDL.Localization.lbl_yes.toLowerCase()]) {
    typeCd.onBoardingStepsV2.JobTitle.progressBarLevel = 1 / 5;
    typeCd.onBoardingStepsV2.Company.progressBarLevel = 2 / 5;
    typeCd.onBoardingStepsV2.Skills.progressBarLevel = 3 / 5;
    typeCd.onBoardingStepsV2.SoftSkills.progressBarLevel = 4 / 5;
  } else {
    if (typeCd.onBoardingStepsV2Grouping.group1.findIndex(function (elem) {
      return elem === typeCd.onBoardingStepsV2.JobInMind.index;
    }) == 0) {
      typeCd.onBoardingStepsV2.Skills.progressBarLevel = 1 / 3;
      typeCd.onBoardingStepsV2.SoftSkills.progressBarLevel = 2 / 3;
    }
  }
}

function handleResumeImport() {
  typeCd.onBoardingStepsV2Grouping.group1.splice(0, 0, typeCd.onBoardingStepsV2.ImportFromResumeReview.index);
  typeCd.onBoardingStepsV2Grouping.group0 = [typeCd.onBoardingStepsV2.ImportResumeScreen.index];
}

//Not required for BBF
function handleRegistrationModal() {
  typeCd.onBoardingStepsV2.Name.textBoxControl.push({
    maxLength: 35,
    mappedStateObjKey: typeCd.dataObjMappingKeys.email,
    placeholder: '',
    autoFocus: false,
    regEx: new RegExp(RDL.emailRegex),
    errorMessage: window.RDL.Localization.lbl_emailErrorMessage,
    showError: true,
    autoCompleteType: typeCd.autoCompleteType.email,
    emailAutoSuggestData: window.RDL.emailDomains,
    labelName: window.RDL.Localization.lbl_email,
    id: typeCd.customFieldsId.emailFrom,
    showPlainEmail: true,
    // className: 'bold-' + typeCd.dataObjMappingKeys.email,
    exactSearch: true,
    avoidTab: true
  });
  typeCd.onBoardingStepsV2.Name.cssClasses = { leftSectionInner: 'registration-modal-exp' };
  typeCd.onBoardingStepsV2.Name.saveValueProp.push(typeCd.dataObjMappingKeys.email);
}

function handleRegOnContact() {
  typeCd.onBoardingStepsV2.Name.headingText = window.RDL.Localization.lbl_start_with_header;
}

function fetchStepSequence(uploadResumeSpecificFlow, onboardingData, isLoggedIn) {
  if (RDL.groupSequence) {
    return RDL.groupSequence;
  } else {
    var seq = [[typeCd.onBoardingStepsV2.Name.index, typeCd.onBoardingStepsV2.OpenerOverview.index, typeCd.onBoardingStepsV2.JobTitle.index], [typeCd.onBoardingStepsV2.GapsTTC.index, typeCd.onBoardingStepsV2.CloserOverview.index, typeCd.onBoardingStepsV2.CloserTTC.index], [typeCd.onBoardingStepsV2.Company.index, typeCd.onBoardingStepsV2.WorkExperience.index, typeCd.onBoardingStepsV2.OpenerTTC.index, typeCd.onBoardingStepsV2.BodyOverview.index, typeCd.onBoardingStepsV2.PreviousJobTitle.index, typeCd.onBoardingStepsV2.Skills.index, typeCd.onBoardingStepsV2.BodyTTC.index, typeCd.onBoardingStepsV2.GapsOverview.index]];
    if (uploadResumeSpecificFlow) {
      seq[0] = [typeCd.onBoardingStepsV2.UploadReview.index, typeCd.onBoardingStepsV2.OpenerOverview.index, typeCd.onBoardingStepsV2.JobTitle.index];
      if ((!onboardingData.registrationOnContactStatus || onboardingData.registrationOnContactStatus == typeCd.registrationOnContactStatus.open) && !isLoggedIn) seq[0][1] = typeCd.onBoardingStepsV2.Name.index;
      if (window.RDL.features.showSignature) {
        seq[1].push(typeCd.onBoardingStepsV2.SignatureView.index);
      }
    }
    return seq;
  }
}

function handleUploadResume(isUploadResumeFlow, onboardingData, skipNameScreen, isCalledOnce, isPersonalizedV1Flow, isLoggedIn) {
  if (isUploadResumeFlow) {
    isCalledOnce && typeCd.onBoardingStepsV2.CollegeFieldDegree.textBoxControl.push({
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.DegreeAutoCompleteType,
      mappedStateObjKey: typeCd.dataObjMappingKeys.degree,
      placeholder: window.RDL.Localization.lbl_degreePlaceholder,
      labelName: window.RDL.Localization.lbl_degree,
      id: typeCd.customFieldsId.degree,
      exactSearch: true,
      avoidTab: true
    });

    var _fetchStepSequence = fetchStepSequence(true, onboardingData, isLoggedIn),
        _fetchStepSequence2 = _slicedToArray(_fetchStepSequence, 3),
        group1 = _fetchStepSequence2[0],
        group2 = _fetchStepSequence2[1],
        group3 = _fetchStepSequence2[2];

    typeCd.onBoardingStepsV2Grouping.group1 = group1;
    typeCd.onBoardingStepsV2Grouping.group2 = group2;
    typeCd.onBoardingStepsV2Grouping.group3 = group3;
  } else {
    var _fetchStepSequence3 = fetchStepSequence(),
        _fetchStepSequence4 = _slicedToArray(_fetchStepSequence3, 3),
        _group = _fetchStepSequence4[0],
        _group2 = _fetchStepSequence4[1],
        _group3 = _fetchStepSequence4[2];

    typeCd.onBoardingStepsV2Grouping.group1 = _group;
    typeCd.onBoardingStepsV2Grouping.group2 = _group2;
    typeCd.onBoardingStepsV2Grouping.group3 = _group3;
    if (skipNameScreen) typeCd.onBoardingStepsV2Grouping.group1.splice(typeCd.onBoardingStepsV2Grouping.group1.indexOf(typeCd.onBoardingStepsV2.Name.index), 1);
    if (isPersonalizedV1Flow) {
      //  skip steps shown in personalized popup.
      typeCd.onBoardingStepsV2Grouping.group1.splice(typeCd.onBoardingStepsV2Grouping.group1.indexOf(typeCd.onBoardingStepsV2.JobTitle.index), 1, typeCd.onBoardingStepsV2.OpenerTTC.index);
      typeCd.onBoardingStepsV2Grouping.group3.splice(typeCd.onBoardingStepsV2Grouping.group3.indexOf(typeCd.onBoardingStepsV2.Company.index), 1);
      typeCd.onBoardingStepsV2Grouping.group3.splice(typeCd.onBoardingStepsV2Grouping.group3.indexOf(typeCd.onBoardingStepsV2.WorkExperience.index), 1);
    }
  }
}

function updatePersonalizationV1Flow(isPersonalizedV1Flow) {
  var _fetchStepSequence5 = fetchStepSequence(),
      _fetchStepSequence6 = _slicedToArray(_fetchStepSequence5, 3),
      group1 = _fetchStepSequence6[0],
      group2 = _fetchStepSequence6[1],
      group3 = _fetchStepSequence6[2];

  typeCd.onBoardingStepsV2Grouping.group1 = group1;
  typeCd.onBoardingStepsV2Grouping.group2 = group2;
  typeCd.onBoardingStepsV2Grouping.group3 = group3;
  if (isPersonalizedV1Flow) {
    //  skip steps shown in personalized popup.
    typeCd.onBoardingStepsV2Grouping.group1.splice(typeCd.onBoardingStepsV2Grouping.group1.indexOf(typeCd.onBoardingStepsV2.JobTitle.index), 1, typeCd.onBoardingStepsV2.OpenerTTC.index);
    typeCd.onBoardingStepsV2Grouping.group3.splice(typeCd.onBoardingStepsV2Grouping.group3.indexOf(typeCd.onBoardingStepsV2.Company.index), 1);
    typeCd.onBoardingStepsV2Grouping.group3.splice(typeCd.onBoardingStepsV2Grouping.group3.indexOf(typeCd.onBoardingStepsV2.WorkExperience.index), 1);
  }
}

function handleBuilderBasedFlow(skipNameScreen) {
  if (window.RDL.features.isBuilderBasedFlow) {
    RDL.features.showReviewOnboarding = false;
    RDL.features.assignDefaultSkills = false;
    var signatureGroup = typeCd.onBoardingStepsV2Grouping.group12;
    typeCd.onBoardingStepsV2Grouping = {};

    var _fetchStepSequence7 = fetchStepSequence(),
        _fetchStepSequence8 = _slicedToArray(_fetchStepSequence7, 3),
        group1 = _fetchStepSequence8[0],
        group2 = _fetchStepSequence8[1],
        group3 = _fetchStepSequence8[2];

    typeCd.onBoardingStepsV2Grouping.group1 = group1;
    typeCd.onBoardingStepsV2Grouping.group2 = group2;
    typeCd.onBoardingStepsV2Grouping.group3 = group3;
    delete typeCd.onBoardingStepsV2.Name.btnPrimaryLabel;
    typeCd.onBoardingStepsV2.Name.saveValueProp = typeCd.onBoardingStepsV2.Name.saveValueProp.concat([typeCd.dataObjMappingKeys.email, typeCd.dataObjMappingKeys.phone, typeCd.dataObjMappingKeys.userCity, typeCd.dataObjMappingKeys.userState, typeCd.dataObjMappingKeys.userZip, typeCd.dataObjMappingKeys.userStreet]);
    if (skipNameScreen) typeCd.onBoardingStepsV2Grouping.group1.splice(typeCd.onBoardingStepsV2Grouping.group1.indexOf(typeCd.onBoardingStepsV2.Name.index), 1);

    typeCd.onBoardingStepsV2.Name.progressBarLevel = 0 * 20;
    // typeCd.onBoardingStepsV2.OpenerOverview.progressBarLevel = 20 + (0 * 20) / 5;
    typeCd.onBoardingStepsV2.JobTitle.progressBarLevel = 20 + 1 * 20 / 5;
    typeCd.onBoardingStepsV2.Company.progressBarLevel = 20 + 2 * 20 / 5;
    typeCd.onBoardingStepsV2.WorkExperience.progressBarLevel = 20 + 3 * 20 / 5;
    typeCd.onBoardingStepsV2.OpenerTTC.progressBarLevel = 20 + 4 * 20 / 5;

    // typeCd.onBoardingStepsV2.BodyOverview.progressBarLevel = 40 + (0 * 20) / 4;
    typeCd.onBoardingStepsV2.PreviousJobTitle.progressBarLevel = 40 + 1 * 20 / 4;
    typeCd.onBoardingStepsV2.Skills.progressBarLevel = 40 + 2 * 20 / 4;
    typeCd.onBoardingStepsV2.BodyTTC.progressBarLevel = 40 + 3 * 20 / 4;

    // typeCd.onBoardingStepsV2.GapsOverview.progressBarLevel = 60 + (0 * 20) / 3;
    typeCd.onBoardingStepsV2.WorkGaps.progressBarLevel = 60 + 1 * 20 / 3;
    typeCd.onBoardingStepsV2.GapsTTC.progressBarLevel = 60 + 2 * 20 / 3;
    // typeCd.onBoardingStepsV2.CloserOverview.progressBarLevel = 80 + (0 * 20) / 2;
    typeCd.onBoardingStepsV2.CloserTTC.progressBarLevel = 80 + 1 * 20 / 2;
    if (window.RDL.features.showSignature) {
      typeCd.onBoardingStepsV2Grouping.group4 = signatureGroup;
      typeCd.onBoardingStepsV2.CloserTTC.progressBarLevel = 80 + 1 * 20 / 3;
      typeCd.onBoardingStepsV2.SignatureView.progressBarLevel = 80 + 2 * 20 / 3;
    }

    typeCd.onBoardingStepsV2.Name.isLastOnboardingStep = false;
    typeCd.onBoardingStepsV2.Name.headingText = RDL.Localization.lbl_name_heading;
    typeCd.onBoardingStepsV2.Name.subHeadingText = RDL.Localization.lbl_name_subHeading;
    var fNameControl = typeCd.onBoardingStepsV2.Name.textBoxControl.find(function (x) {
      return x.id == typeCd.customFieldsId.fName;
    });
    fNameControl.fieldInteractedMessage = typeCd.eventPropsValues.clickOptions.firstNameEntered;
    var lNameControl = typeCd.onBoardingStepsV2.Name.textBoxControl.find(function (x) {
      return x.id == typeCd.customFieldsId.lName;
    });
    lNameControl.fieldInteractedMessage = typeCd.eventPropsValues.clickOptions.lastNameEntered;

    var isUsCountry = RDL.countryDetails.countryCode == typeCd.countryCode.US;
    typeCd.onBoardingStepsV2.Name.moreTextBoxControl = [[{
      maxLength: 35,
      mappedStateObjKey: typeCd.dataObjMappingKeys.email,
      placeholder: isUsCountry ? window.RDL.Localization.lbl_US_emailPlaceHolder : '',
      autoFocus: false,
      regEx: new RegExp(RDL.emailRegex),
      errorMessage: window.RDL.Localization.lbl_emailErrorMessage,
      showError: true,
      autoCompleteType: typeCd.autoCompleteType.email,
      emailAutoSuggestData: window.RDL.emailDomains,
      labelName: window.RDL.Localization.lbl_email_address,
      id: typeCd.customFieldsId.emailFrom,
      showPlainEmail: true,
      className: 'bold-' + typeCd.dataObjMappingKeys.email,
      exactSearch: true,
      avoidTab: true,
      autoCompleteAttrValue: "email"

    }, {
      maxLength: 35,
      mappedStateObjKey: typeCd.dataObjMappingKeys.phone,
      placeholder: isUsCountry ? window.RDL.Localization.lbl_US_phonePlaceHolder : window.RDL.Localization.lbl_phonePlaceHolder || "",
      autoFocus: false,
      regEx: typeCd.regexNumSplCharsPhn,
      errorMessage: window.RDL.Localization.lbl_phoneErrorMessage,
      showError: true,
      labelName: window.RDL.Localization.lbl_cellPhone,
      id: typeCd.customFieldsId.phone
    }, {
      maxLength: 35,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.CityAutoCompleteType,
      mappedStateObjKey: typeCd.dataObjMappingKeys.userCity,
      placeholder: isUsCountry ? window.RDL.Localization.lbl_US_cityPlaceholderText : window.RDL.Localization.lbl_cityPlaceHolder,
      autoFocus: false,
      showError: false,
      labelName: window.RDL.Localization.lbl_city,
      id: typeCd.customFieldsId.contactCity,
      className: 'bold-' + typeCd.dataObjMappingKeys.userCity,
      exactSearch: true,
      avoidTab: true,
      autoCompleteAttrValue: "street-address"
    }, {
      maxLength: 35,
      mappedStateObjKey: typeCd.dataObjMappingKeys.userState,
      placeholder: isUsCountry ? window.RDL.Localization.lbl_US_statePlaceholderText : window.RDL.Localization.lbl_statePlaceHolder,
      autoFocus: false,
      showError: false,
      labelName: window.RDL.Localization.lbl_cntc_state,
      id: typeCd.customFieldsId.state
    }, {
      maxLength: 35,
      mappedStateObjKey: typeCd.dataObjMappingKeys.userZip,
      placeholder: isUsCountry ? window.RDL.Localization.lbl_US_zipPlaceholderText : window.RDL.Localization.lbl_zipPlaceHolder,
      autoFocus: false,
      showError: false,
      labelName: window.RDL.Localization.lbl_zip_code,
      id: typeCd.customFieldsId.zip
    }]];
    if (isUsCountry) {
      fNameControl.placeholder = window.RDL.Localization.lbl_US_firstNamePlaceholderText;
      lNameControl.placeholder = window.RDL.Localization.lbl_US_lastNamePlaceholderText;
    }
    typeCd.onBoardingStepsV2.WorkExperience.funcSetStepPropertiesRunTime = function (onboardingData) {
      if (onboardingData) {
        var fjt = onboardingData.onboardingUserInput[typeCd.dataObjMappingKeys.jobTitle];
        if (fjt) {
          var heading = (0, _CommonUtils.isStringStartsWithVowel)(fjt) && RDL.Localization.lbl_relevantAnExp ? RDL.Localization.lbl_relevantAnExp : RDL.Localization.lbl_relevantExp;
          typeCd.onBoardingStepsV2.WorkExperience.headingText = heading.replace("{0}", fjt);
          typeCd.onBoardingStepsV2.WorkExperience.subHeadingText = RDL.Localization.lbl_customizeLetterWithExp;
        } else {
          typeCd.onBoardingStepsV2.WorkExperience.headingText = window.RDL.Localization.lbl_howLongWorking;
          typeCd.onBoardingStepsV2.WorkExperience.subHeadingText = window.RDL.Localization.lbl_specifyExperience;
        }
      }
    };

    typeCd.onBoardingStepsV2.PreviousJobTitle.textBoxControl.push({
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.CompanyAutoCompleteType,
      mappedStateObjKey: typeCd.dataObjMappingKeys.previousCompanyName,
      placeholder: window.RDL.Localization.lbl_desiredCompanyPlaceholder,
      id: typeCd.customFieldsId.previousCompany,
      labelName: window.RDL.Localization.lbl_employerName,
      exactSearch: true,
      avoidTab: true,
      autoCompleteAttrValue: "organization"
    });
    typeCd.onBoardingStepsV2.PreviousJobTitle.skipActionLinkText = RDL.Localization.lbl_skipForNow;
    typeCd.onBoardingStepsV2.PreviousJobTitle.saveValueProp.push(typeCd.dataObjMappingKeys.previousCompanyName);
    typeCd.onBoardingStepsV2.PreviousJobTitle.subHeadingText = RDL.Localization.lbl_can_use_older;
    typeCd.onBoardingStepsV2.PreviousJobTitle.headingText = RDL.Localization.lbl_mostRecentJob;
    typeCd.onBoardingStepsV2.PreviousJobTitle.eventProps.screenName = "last job title and employer name";
    window.RDL.defaultTemplateID = 51; //Blank letter
    RDL.hideTermsOfUseOnNameScreen = true;
    var arrSection = [_helper.TypeCodes.sectionTypeCd.Opener, _helper.TypeCodes.sectionTypeCd.Body, _helper.TypeCodes.sectionTypeCd.CallToAction];
    arrSection.map(function (section) {
      return window.RDL.ReplaceTTCSections_List.push(section);
    });
    RDL.isBuilderBasedFlowLocalized && enableBuilderLocalizedChanges();
    setLetterTypeForBBF();
    fetchOccupationalTTC();
    RDL.features.showTemplatesAndHIW && !isIE && (!RDL.experimentControl.showColorPicker || !window.RDL.showColorPicker) && preloadTemplateSkinsSVG();
    preloadOverviewScreenImages();
    reorderCovidGaps();
  } else {
    RDL.features.showTemplatesAndHIW = false;
  }
}

function handleSocialTemplate() {
  var numOfPeople = RDL.readLS(typeCd.ForageKeyNames.numOfPeople);
  if (!numOfPeople) RDL.createLS(typeCd.ForageKeyNames.numOfPeople, getRandomNumberOfPeople());
  typeCd.SocialProofContents = [{
    heading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_creative_heading,
    subHeading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_creative_subHeading,
    authorName: typeCd.experimentsObj.TemplatePageSocialProof.lbl_creative_authorName,
    authorImg: typeCd.experimentsObj.TemplatePageSocialProof.lbl_creative_authorImg
  }, {
    heading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_recommend_heading,
    subHeading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_recommend_subHeading,
    authorName: typeCd.experimentsObj.TemplatePageSocialProof.lbl_recommend_authorName,
    authorImg: typeCd.experimentsObj.TemplatePageSocialProof.lbl_recommend_authorImg
  }, {
    heading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_help_heading,
    subHeading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_help_subHeading,
    authorName: typeCd.experimentsObj.TemplatePageSocialProof.lbl_help_authorName,
    authorImg: typeCd.experimentsObj.TemplatePageSocialProof.lbl_help_authorImg
  }, {
    heading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_job_heading,
    subHeading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_job_subHeading,
    authorName: typeCd.experimentsObj.TemplatePageSocialProof.lbl_job_authorName,
    authorImg: typeCd.experimentsObj.TemplatePageSocialProof.lbl_job_authorImg
  }, {
    heading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_brilliant_heading,
    subHeading: typeCd.experimentsObj.TemplatePageSocialProof.lbl_brilliant_subHeading,
    authorMessage: typeCd.experimentsObj.TemplatePageSocialProof.lbl_brilliant_authorMessage,
    authorName: typeCd.experimentsObj.TemplatePageSocialProof.lbl_brilliant_authorName,
    authorImg: typeCd.experimentsObj.TemplatePageSocialProof.lbl_brilliant_authorImg

  }];

  typeCd.TemplateTypes = [{
    id: "linkPopular",
    templateTypeId: 0,
    text: window.RDL.Localization.lbl_choose_template_recommended
  }, {
    id: "linkProfessional",
    templateTypeId: 1,
    text: window.RDL.Localization.lbl_choose_template_unique
  }, {
    id: "linkUnique",
    templateTypeId: 2,
    text: typeCd.experimentsObj.TemplatePageSocialProof.lbl_traditional
  }, {
    id: "linkModern",
    templateTypeId: 3,
    text: window.RDL.Localization.lbl_choose_template_modern
  }, {
    id: "linkAll",
    templateTypeId: 4,
    text: RDL.Localization.lbl_choose_template_all
  }];
}

function getRandomNumber(max) {
  return Math.floor(Math.random() * max);
}
function getRandomNumberOfPeople() {
  var num = getRandomNumber(3);
  if (num == 0) return typeCd.experimentsObj.TemplatePageSocialProof.number_Of_People_Downloaded;else if (num == 1) return Number(typeCd.experimentsObj.TemplatePageSocialProof.number_Of_People_Downloaded) + 50;else return typeCd.experimentsObj.TemplatePageSocialProof.number_Of_People_Downloaded - 50;
}

function enableBuilderLocalizedChanges() {

  RDL.ttcPath = window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/" + window.RDL.PortalSettings.ConfigurePortalCd.toLowerCase() + "/scripts/occupationalContentTTC.js";
  window.RDL.defaultTemplateID = RDL.blankLetterType || 850;
  typeCd.letterTypes.blank = RDL.blankLetterType || 850;;
  typeCd.onBoardingStepsV2.Company.skipActionLinkText = RDL.Localization.lbl_skipForNow;
  typeCd.onBoardingStepsV2.JobTitle.isEnableCountryCulture = true;
  typeCd.onBoardingStepsV2.PreviousJobTitle.isEnableCountryCulture = true;
  typeCd.onBoardingStepsV2.JobTitle.saveValueProp.push(typeCd.dataObjMappingKeys.selectedJobGender);
  typeCd.onBoardingStepsV2.JobTitle.saveValueProp.push(typeCd.dataObjMappingKeys.occupationArr);
  typeCd.onBoardingStepsV2.OpenerOverview.imgPath = typeCd.onBoardingStepsV2.OpenerOverview.imgPath.replace("png", "svg");
  typeCd.onBoardingStepsV2.BodyOverview.imgPath = typeCd.onBoardingStepsV2.BodyOverview.imgPath.replace("png", "svg");
  typeCd.onBoardingStepsV2.CloserOverview.imgPath = typeCd.onBoardingStepsV2.CloserOverview.imgPath.replace("png", "svg");
  typeCd.onBoardingStepsV2.GapsOverview.imgPath = "";

  if (RDL.features.showSignature) {
    typeCd.onBoardingStepsV2.Name.progressBarLevel = 8;
    typeCd.onBoardingStepsV2.Company.progressBarLevel = 15;

    typeCd.onBoardingStepsV2.JobTitle.progressBarLevel = 22;
    typeCd.onBoardingStepsV2.SubjectTTC.progressBarLevel = 26;
    typeCd.onBoardingStepsV2.WorkExperience.progressBarLevel = 28;
    typeCd.onBoardingStepsV2.OpenerTTC.progressBarLevel = 30;
    typeCd.onBoardingStepsV2.PreviousJobTitle.progressBarLevel = 36;
    typeCd.onBoardingStepsV2.Skills.progressBarLevel = 42;
    typeCd.onBoardingStepsV2.BodyTTC.progressBarLevel = 47;
    typeCd.onBoardingStepsV2.CloserTTC.progressBarLevel = 62;
    typeCd.onBoardingStepsV2.SignatureView.progressBarLevel = 80;
  } else {
    typeCd.onBoardingStepsV2.Name.progressBarLevel = 9;
    typeCd.onBoardingStepsV2.Company.progressBarLevel = 17;
    typeCd.onBoardingStepsV2.JobTitle.progressBarLevel = 22;
    typeCd.onBoardingStepsV2.SubjectTTC.progressBarLevel = 28;
    typeCd.onBoardingStepsV2.WorkExperience.progressBarLevel = 32;
    typeCd.onBoardingStepsV2.OpenerTTC.progressBarLevel = 36;
    typeCd.onBoardingStepsV2.PreviousJobTitle.progressBarLevel = 44;
    typeCd.onBoardingStepsV2.Skills.progressBarLevel = 52;
    typeCd.onBoardingStepsV2.BodyTTC.progressBarLevel = 60;
    typeCd.onBoardingStepsV2.CloserTTC.progressBarLevel = 78;
  }

  if (RDL.joshuaTreeINTL) {
    if (RDL.features.showSignature) {
      typeCd.onBoardingStepsV2.OpenerOverview.progressBarLevel = 15;
      typeCd.onBoardingStepsV2.BodyOverview.progressBarLevel = 30;
      typeCd.onBoardingStepsV2.CloserOverview.progressBarLevel = 47;
    } else {
      typeCd.onBoardingStepsV2.OpenerOverview.progressBarLevel = 17;
      typeCd.onBoardingStepsV2.BodyOverview.progressBarLevel = 36;
      typeCd.onBoardingStepsV2.CloserOverview.progressBarLevel = 60;
    }
  }

  var jobTitleObj = typeCd.onBoardingStepsV2.JobTitle.textBoxControl[0];
  jobTitleObj.className = "bold-jobtitle";
  var previousJobTitleObj = typeCd.onBoardingStepsV2.PreviousJobTitle.textBoxControl[0];
  previousJobTitleObj.className = "bold-prevjob";
  typeCd.onBoardingStepsV2.SubjectTTC.popupTitle = window.RDL.Localization.lbl_EditSubject;

  typeCd.onBoardingStepsV2.Company.saveValueProp.push(typeCd.dataObjMappingKeys.state, typeCd.dataObjMappingKeys.recipientFName, typeCd.dataObjMappingKeys.recipientLName, typeCd.dataObjMappingKeys.city, typeCd.dataObjMappingKeys.zip, typeCd.dataObjMappingKeys.recipientStreet);

  typeCd.onBoardingStepsV2.Name.textBoxControl[0].autoFocus = true;
  typeCd.onBoardingStepsV2.Company.textBoxControl[0].autoFocus = true;
  typeCd.onBoardingStepsV2.SubjectTTC.subHeadingText = RDL.Localization.lbl_subHeadingSubjectText;
  typeCd.onBoardingStepsV2.OpenerTTC.subHeadingText = RDL.Localization.lbl_subHeadingOpenerText;
  typeCd.onBoardingStepsV2.BodyTTC.subHeadingText = RDL.Localization.lbl_subHeadingBodyText;

  typeCd.onBoardingStepsV2.Name.moreTextBoxControl = [[{
    maxLength: 35,
    mappedStateObjKey: typeCd.dataObjMappingKeys.email,
    placeholder: window.RDL.Localization.lbl_userEmailPlaceholder || '',
    autoFocus: false,
    regEx: new RegExp(RDL.emailRegex),
    errorMessage: window.RDL.Localization.lbl_emailErrorMessage,
    showError: true,
    autoCompleteType: typeCd.autoCompleteType.email,
    emailAutoSuggestData: window.RDL.emailDomains,
    labelName: window.RDL.Localization.lbl_email_address,
    id: typeCd.customFieldsId.emailFrom,
    showPlainEmail: true,
    className: 'bold-' + typeCd.dataObjMappingKeys.email,
    exactSearch: true,
    avoidTab: true,
    autoCompleteAttrValue: "email"
  }, {
    maxLength: 35,
    mappedStateObjKey: typeCd.dataObjMappingKeys.phone,
    placeholder: window.RDL.Localization.lbl_phonePlaceHolder || "",
    autoFocus: false,
    regEx: typeCd.phoneRegexPlusInclude,
    errorMessage: window.RDL.Localization.lbl_phoneErrorMessage,
    showError: true,
    labelName: window.RDL.Localization.lbl_cellPhone,
    id: typeCd.customFieldsId.phone
  }, {
    maxLength: 35,
    mappedStateObjKey: typeCd.dataObjMappingKeys.userStreet,
    placeholder: window.RDL.Localization.lbl_streetPlaceHolder,
    autoFocus: false,
    showError: false,
    labelName: window.RDL.Localization.lbl_cntc_street,
    id: typeCd.customFieldsId.state
  }, {
    maxLength: 35,
    mappedStateObjKey: typeCd.dataObjMappingKeys.userZip,
    placeholder: window.RDL.Localization.lbl_zipPlaceHolder,
    autoFocus: false,
    showError: false,
    labelName: window.RDL.Localization.lbl_zip_code,
    id: typeCd.customFieldsId.zip
  }, {
    maxLength: 35,
    autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.CityAutoCompleteType,
    mappedStateObjKey: typeCd.dataObjMappingKeys.userCity,
    placeholder: window.RDL.Localization.lbl_cityPlaceHolder,
    autoFocus: false,
    showError: false,
    labelName: window.RDL.Localization.lbl_city,
    id: typeCd.customFieldsId.contactCity,
    className: 'bold-' + typeCd.dataObjMappingKeys.userCity,
    exactSearch: true,
    avoidTab: true,
    autoCompleteAttrValue: "street-address"
  }]];

  typeCd.onBoardingStepsV2.Company.textBoxControl.push({
    maxLength: 35,
    mappedStateObjKey: typeCd.dataObjMappingKeys.recipientStreet,
    placeholder: window.RDL.Localization.lbl_streetPlaceHolder,
    autoFocus: false,
    showError: false,
    labelName: window.RDL.Localization.lbl_cntc_street,
    id: typeCd.customFieldsId.recipientStreet
  });

  typeCd.onBoardingStepsV2.Company.moreTextBoxControl = [[{
    maxLength: 35,
    mappedStateObjKey: typeCd.dataObjMappingKeys.recipientFName,
    placeholder: window.RDL.Localization.lbl_fNamePlaceholder,
    autoFocus: false,
    errorMessage: window.RDL.Localization.lbl_nameErrorMessage,
    showError: false,
    regEx: new RegExp(window.RDL.nameRegex),
    labelName: window.RDL.Localization.lbl_cmpn_fname,
    id: typeCd.customFieldsId.recipientFName
  }, {
    maxLength: 35,
    mappedStateObjKey: typeCd.dataObjMappingKeys.recipientLName,
    placeholder: window.RDL.Localization.lbl_lNamePlaceholder,
    autoFocus: false,
    errorMessage: window.RDL.Localization.lbl_nameErrorMessage,
    showError: false,
    regEx: new RegExp(window.RDL.nameRegex),
    labelName: window.RDL.Localization.lbl_cmpn_lname,
    id: typeCd.customFieldsId.recipientLName
  }, {
    maxLength: 35,
    mappedStateObjKey: typeCd.dataObjMappingKeys.zip,
    placeholder: window.RDL.Localization.lbl_zipPlaceHolder,
    autoFocus: false,
    showError: false,
    labelName: window.RDL.Localization.lbl_zip_code,
    id: typeCd.customFieldsId.recipientZip
  }, {
    maxLength: 35,
    autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.CityAutoCompleteType,
    mappedStateObjKey: typeCd.dataObjMappingKeys.city,
    placeholder: window.RDL.Localization.lbl_cityPlaceHolder,
    autoFocus: false,
    showError: false,
    labelName: window.RDL.Localization.lbl_city,
    id: typeCd.customFieldsId.recipientCity,
    className: 'bold-' + typeCd.dataObjMappingKeys.city,
    exactSearch: true,
    avoidTab: true,
    autoCompleteAttrValue: "street-address"
  }]];
}

function isInOnboardingStepArr(sectionCD, onboardingStepArr) {
  if (onboardingStepArr && onboardingStepArr.length > 0) {
    if (sectionCD == _helper.TypeCodes.sectionTypeCd.Opener) {
      return onboardingStepArr.indexOf(typeCd.onBoardingStepsV2.OpenerOverview.index) >= 0;
    } else if (sectionCD == _helper.TypeCodes.sectionTypeCd.Body || sectionCD == _helper.TypeCodes.sectionTypeCd.CallToAction) {
      return onboardingStepArr.indexOf(typeCd.onBoardingStepsV2.BodyOverview.index) >= 0;
    }
  }
}

function handleCEIntegrationExp(userID, documentObj, onboardingUserInput, onboardingStepArr) {
  if (RDL.features.isCEIntegration) {
    var objDocPref = documentObj.preferences.find(function (x) {
      return x.docPreferenceTypeCD == typeCd.userPreferenceKeys.jobTitle;
    });
    var JTInDocPref = objDocPref && objDocPref.value;
    var jbTitle = onboardingUserInput && onboardingUserInput[typeCd.dataObjMappingKeys.jobTitle] || JTInDocPref;
    //  get TTC examples for opener, body and closer sections
    [_helper.TypeCodes.sectionTypeCd.Opener, _helper.TypeCodes.sectionTypeCd.Body, _helper.TypeCodes.sectionTypeCd.CallToAction].forEach(function (sectionCD) {
      var docPref = documentObj.preferences.find(function (x) {
        return x.docPreferenceTypeCD == sectionCD;
      });
      var valueInDocPref = docPref && docPref.value;
      var isInOnboardingArr = isInOnboardingStepArr(sectionCD, onboardingStepArr);
      if (valueInDocPref || isInOnboardingArr) {
        var jobHierarchy = void 0;
        var jobTitle = sectionCD == _helper.TypeCodes.sectionTypeCd.Body ? jbTitle : '';
        if (onboardingUserInput) {
          jobHierarchy = (0, _CommonUtils.getJobHierarchyByExp)(onboardingUserInput[typeCd.dataObjMappingKeys.experience]);
        }
        (0, _CommonUtils.fetchSectionBasedContentEngineTTC)(userID, window.RDL.PortalSettings.ConfigureProductCd, sectionCD, jobTitle, undefined, jobHierarchy);
      }
    });
  } else {
    var isInOnboardingArr = isInOnboardingStepArr(_helper.TypeCodes.sectionTypeCd.Opener, onboardingStepArr);
    var jobHierarchy = void 0;
    if (onboardingUserInput) {
      jobHierarchy = (0, _CommonUtils.getJobHierarchyByExp)(onboardingUserInput[typeCd.dataObjMappingKeys.experience]);
    }
    isInOnboardingArr && (0, _CommonUtils.fetchSectionBasedContentEngineTTC)(userID, window.RDL.PortalSettings.ConfigureProductCd, _helper.TypeCodes.sectionTypeCd.Opener, undefined, undefined, jobHierarchy);
  }
}

function reorderCovidGaps() {
  var _RDL$workGapReasons;

  var covidGaps = RDL.workGapReasons.filter(function (gap) {
    return gap.reason.includes(typeCd.commonFields.covid);
  });
  var index = void 0;
  covidGaps.forEach(function (gap) {
    index = RDL.workGapReasons.findIndex(function (x) {
      return x.reason == gap.reason;
    });
    RDL.workGapReasons.splice(index, 1);
  });
  (_RDL$workGapReasons = RDL.workGapReasons).unshift.apply(_RDL$workGapReasons, _toConsumableArray(covidGaps));
}

function setLetterTypeForBBF() {
  //Updating letter type name
  var blankLetter = RDL.moreTemplatesInfo.find(function (x) {
    return x.TemplateId == typeCd.letterTypes.blank;
  });
  blankLetter.Name = "lbl_personalized";
  blankLetter.TemplateTypeLabel = "lbl_personalized";
  blankLetter.Description = "lbl_personalizedLetterDesc";
}

function setSectionsCharValFromTTC(lstSections, onboardingUserInput, user) {
  var section = void 0,
      step = void 0;
  Object.keys(typeCd.onBoardingStepsV2).forEach(function (key) {
    step = typeCd.onBoardingStepsV2[key];
    if (step.viewType == typeCd.viewTypes.TTCView && step.sectionType) {
      section = _helper.CommonHelper.getSectionByCD(lstSections, step.sectionType);
      section && section.paragraphs[0] && (section.paragraphs[0].docDatas[0].charValue = (typeof onboardingUserInput[step.saveValueProp[0]] == "string" ? onboardingUserInput[step.saveValueProp[0]] : onboardingUserInput[step.saveValueProp[0]] && onboardingUserInput[step.saveValueProp[0]].text) || "");
    }
  });
  //Adding static closure
  section = _helper.CommonHelper.getSectionByCD(lstSections, _helper.TypeCodes.sectionTypeCd.Closer);
  section.paragraphs[0].docDatas[0].charValue = RDL.Localization.lbl_closer_static_content;
  lstSections = (0, _CommonUtils.replaceNameInClosure)({ sections: lstSections }, user, RDL.defaultPlaceholderColor);
}

function preloadOverviewScreenImages() {
  var imageArray = new Array(typeCd.onBoardingStepsV2.OpenerOverview.imgPath, typeCd.onBoardingStepsV2.BodyOverview.imgPath, typeCd.onBoardingStepsV2.GapsOverview.imgPath, typeCd.onBoardingStepsV2.CloserOverview.imgPath);
  setTimeout(function () {
    (0, _CommonUtils.setPreloadableImageSrc)(imageArray);
  }, 2000);
}

function setImagePathFromArray(arrSkins) {
  var imageArray = [];
  arrSkins.map(function (skin) {
    var imagePath = window.RDL.blobBaseUrl + skin.blobUrl;
    imageArray.push(imagePath);
  });
  (0, _CommonUtils.setPreloadableImageSrc)(imageArray);
}

function preloadTemplateSkinsSVG() {
  var popularSkinsArray = RDL.Skins.filter(function (skin) {
    return skin.templateCategoryId == 0;
  });
  setImagePathFromArray(popularSkinsArray);
  setTimeout(function () {
    var nonPopularSkinsArray = RDL.Skins.filter(function (skin) {
      return skin.templateCategoryId != 0;
    });
    setImagePathFromArray(nonPopularSkinsArray);
  }, 2000);
}

function fetchOccupationalTTC() {
  var localForagePromise = new Promise(function (resolve) {
    resolve("");
  }); //Blank Promise
  if (localforage) {
    localForagePromise = localforage.getItem(typeCd.ForageKeyNames.occupationalTTC);
  }
  localForagePromise.then(function (result) {
    if (result) {
      RDL.occupationalTTC = result;
      if (RDL.features.isCEIntegration && RDL.contentEngineTTC) {
        RDL.occupationalTTC = Object.assign({}, RDL.occupationalTTC, RDL.contentEngineTTC);
      }
    } else {
      var ttcPath = RDL.ttcPath ? RDL.ttcPath : window.RDL.blobBaseUrl + window.RDL.PortalSettings.baseProductPath + "/common/scripts/occupationalContentTTC.js";
      callAjax(ttcPath, "GET", true, false, function (resp) {
        resp = resp.replaceAllOccurrences(window.RDL.defaultPlaceholderColor, window.RDL.placeholderColor);
        //change color to orange
        RDL.occupationalTTC = JSON.parse(resp);
        if (RDL.features.isCEIntegration && RDL.contentEngineTTC) {
          RDL.occupationalTTC = Object.assign({}, RDL.occupationalTTC, RDL.contentEngineTTC);
        }
        localforage.setItem(typeCd.ForageKeyNames.occupationalTTC, RDL.occupationalTTC);
      });
    }
  });
  RDL.workGapReasons && RDL.workGapReasons.length && RDL.workGapReasons.map(function (gap, i) {
    gap.id = i + 1;
    gap.type = RDL.Localization[gap.reason];
    gap.text = RDL.Localization[gap.paraContent].replaceAllOccurrences(window.RDL.defaultPlaceholderColor, window.RDL.placeholderColor); //change color to orange
  });
}

function handleCovid19Feature() {
  typeCd.onBoardingStepsV2.Company.recommendedCompanies = RDL.recommendedCompanies;
  var progressBarGroupingDivision = {
    firstGroup: 4,
    secondGroup: 3
  };
  typeCd.onBoardingStepsV2.JobTitle.progressBarLevel = 0 / progressBarGroupingDivision.firstGroup;
  typeCd.onBoardingStepsV2.Company.progressBarLevel = 1 / progressBarGroupingDivision.firstGroup;
  typeCd.onBoardingStepsV2.PreviousJobTitle.progressBarLevel = 4 / progressBarGroupingDivision.firstGroup;
  typeCd.onBoardingStepsV2.SoftSkills.progressBarLevel = 3 / progressBarGroupingDivision.firstGroup;
  typeCd.onBoardingStepsV2.Skills.progressBarLevel = 2 / progressBarGroupingDivision.firstGroup;
  typeCd.onBoardingStepsV2.Unemployed.progressBarLevel = 5 / progressBarGroupingDivision.secondGroup;
  typeCd.onBoardingStepsV2.Name.progressBarLevel = 6 / progressBarGroupingDivision.secondGroup;
  typeCd.onBoardingStepsV2Grouping.group2[4] = typeCd.onBoardingStepsV2.Unemployed.index;
  typeCd.onBoardingStepsV2Grouping.group2[3] = typeCd.onBoardingStepsV2.PreviousJobTitle.index;
  //localization text updation
  typeCd.onBoardingStepsV2.JobTitle.tipsText = window.RDL.Localization.lbl_covid19FutureJobTitleTip;
  var companyInput = typeCd.onBoardingStepsV2.Company.textBoxControl.find(function (obj) {
    return obj.id == typeCd.customFieldsId.company;
  });
  companyInput.labelName = window.RDL.Localization.lbl_employerName;
}

function handleCustomSkills() {
  var featureOnboardingBundleClass = "feature-custom-skills-wrapper ";
  typeCd.onBoardingStepsV2.Skills.isShowMaxOptionsSelectedMsg = false;
  typeCd.onBoardingStepsV2.Skills.headingText = RDL.Localization.lbl_show_youre_a_fit;
  typeCd.onBoardingStepsV2.Skills.subHeadingText = RDL.Localization.lbl_add_your_own;
  typeCd.onBoardingStepsV2.Skills.maxCustomSkills = 5;
  delete typeCd.onBoardingStepsV2.Skills.cssClasses.optionsList;
  typeCd.onBoardingStepsV2.Skills.isShowMoreLessEnabled = true;
  typeCd.onBoardingStepsV2.Skills.cssClasses.optionsClass = "skills-btn-block";
  delete typeCd.onBoardingStepsV2.Skills.MaxOptionsInARow;

  typeCd.onBoardingStepsV2.SoftSkillsCompetency.isShowMaxOptionsSelectedMsg = false;
  typeCd.onBoardingStepsV2.SoftSkillsCompetency.isShowMoreLessEnabled = true;
  typeCd.onBoardingStepsV2.SoftSkillsCompetency.cssClasses = { optionsClass: "skills-btn-block" };
  delete typeCd.onBoardingStepsV2.SoftSkillsCompetency.MaxOptionsInARow;

  typeCd.onBoardingStepsV2.SoftSkills.isShowMaxOptionsSelectedMsg = false;
  delete typeCd.onBoardingStepsV2.SoftSkills.cssClasses.optionsList;
  typeCd.onBoardingStepsV2.SoftSkills.isShowMoreLessEnabled = true;
  typeCd.onBoardingStepsV2.SoftSkills.cssClasses.optionsClass = "skills-btn-block";
  delete typeCd.onBoardingStepsV2.SoftSkills.MaxOptionsInARow;

  //setting classes to accomodate UI changes
  typeCd.onBoardingStepsV2.Skills.cssClasses.featureOnboardingClass = featureOnboardingBundleClass;
  typeCd.onBoardingStepsV2.SoftSkills.cssClasses.featureOnboardingClass = featureOnboardingBundleClass;
  typeCd.onBoardingStepsV2.SoftSkillsCompetency.cssClasses.featureOnboardingClass = featureOnboardingBundleClass;

  //Might be required for baselining for non-BBF
  //[typeCd.onBoardingStepsV2.Skills["index"], typeCd.onBoardingStepsV2.SoftSkills["index"], 
  //typeCd.onBoardingStepsV2.Skills["progressBarLevel"], typeCd.onBoardingStepsV2.SoftSkills["progressBarLevel"]] =
  // [typeCd.onBoardingStepsV2.SoftSkills["index"], typeCd.onBoardingStepsV2.Skills["index"], 
  //typeCd.onBoardingStepsV2.SoftSkills["progressBarLevel"], typeCd.onBoardingStepsV2.Skills["progressBarLevel"]];
}

function handleOnboardingBundleFeatures() {
  var featureOnboardingBundleClass = "feature-on-boarding-bundle ";
  var featurePreviewLetterClass = "feature-preview-letter ";
  if (window.RDL.features.useNumberForWords) {
    typeCd.onBoardingStepsV2.SoftSkills.headingText = RDL.Localization.lbl_selectStrengthsHeadingNum;
    typeCd.onBoardingStepsV2.SoftSkillsCompetency.headingText = RDL.Localization.lbl_selectStrengthsHeadingNum;
    typeCd.onBoardingStepsV2.WorkGaps.headingText = RDL.Localization.lbl_haveGapsNum;
    typeCd.onBoardingStepsV2.Skills.subHeadingText = RDL.Localization.lbl_topSkillsForJobTitleSubHeadingNum;
  }
  if (window.RDL.features.skillsStrengthsImprovements) {
    typeCd.onBoardingStepsV2.Skills.isShowMaxOptionsSelectedMsg = true;
    delete typeCd.onBoardingStepsV2.Skills.cssClasses.optionsList;
    typeCd.onBoardingStepsV2.Skills.isShowMoreLessEnabled = true;
    typeCd.onBoardingStepsV2.Skills.cssClasses.optionsClass = "skills-btn-block";
    delete typeCd.onBoardingStepsV2.Skills.MaxOptionsInARow;

    typeCd.onBoardingStepsV2.SoftSkillsCompetency.isShowMaxOptionsSelectedMsg = true;
    typeCd.onBoardingStepsV2.SoftSkillsCompetency.isShowMoreLessEnabled = true;
    typeCd.onBoardingStepsV2.SoftSkillsCompetency.cssClasses = { optionsClass: "skills-btn-block" };
    delete typeCd.onBoardingStepsV2.SoftSkillsCompetency.MaxOptionsInARow;

    typeCd.onBoardingStepsV2.SoftSkills.isShowMaxOptionsSelectedMsg = true;
    delete typeCd.onBoardingStepsV2.SoftSkills.cssClasses.optionsList;
    typeCd.onBoardingStepsV2.SoftSkills.isShowMoreLessEnabled = true;
    typeCd.onBoardingStepsV2.SoftSkills.cssClasses.optionsClass = "skills-btn-block";
    delete typeCd.onBoardingStepsV2.SoftSkills.MaxOptionsInARow;

    //setting classes to accomodate UI changes
    typeCd.onBoardingStepsV2.Skills.cssClasses.featureOnboardingClass = featureOnboardingBundleClass;
    typeCd.onBoardingStepsV2.SoftSkills.cssClasses.featureOnboardingClass = featureOnboardingBundleClass;
    typeCd.onBoardingStepsV2.SoftSkillsCompetency.cssClasses.featureOnboardingClass = featureOnboardingBundleClass;
  }
  if (window.RDL.features.studentFlowImprovements) {
    typeCd.onBoardingStepsV2.SchoolEnrolled.cssClasses = { featureOnboardingClass: featureOnboardingBundleClass };
    typeCd.onBoardingStepsV2.CurrentEducationLevel.cssClasses = { featureOnboardingClass: featureOnboardingBundleClass };
    typeCd.onBoardingStepsV2.CollegeGraduate.cssClasses = { featureOnboardingClass: featureOnboardingBundleClass };
    typeCd.onBoardingStepsV2.WorkGaps.cssClasses = { featureOnboardingClass: featureOnboardingBundleClass };
    typeCd.onBoardingStepsV2.WorkGapsReason.cssClasses.featureOnboardingClass = featureOnboardingBundleClass;
  }
  if (window.RDL.features.showToolTipsCopyImprovements) {
    typeCd.onBoardingStepsV2.JobTitle.skipActionLinkText = window.RDL.Localization.lbl_skipForNow;
    typeCd.onBoardingStepsV2.JobTitle.subHeadingText = window.RDL.Localization.lbl_notReadyForSpecificJob;
    typeCd.onBoardingStepsV2.Company.tipsText = window.RDL.Localization.lbl_readyToApply;
    typeCd.onBoardingStepsV2.Company.skipActionLinkText = window.RDL.Localization.lbl_skipForNow;
    typeCd.onBoardingStepsV2.Company.subHeadingText = window.RDL.Localization.lbl_employerInMind;
  }
  if (window.RDL.features.showThemeCopyImprovements) {
    typeCd.onBoardingStepsV2.KeyTheme.headingText = RDL.Localization.lbl_aboutYourself;
    typeCd.onBoardingStepsV2.KeyTheme.subHeadingText = RDL.Localization.lbl_weWillPersonalizeLetter;
    typeCd.onBoardingStepsV2.KeyTheme.tipsText = RDL.Localization.lbl_howCoworkerDescribeYou;
    typeCd.onBoardingStepsV2.KeyTheme.options = window.RDL.v2Templates.map(function (template) {
      template.description = '';
      if (template.templateName === 'lbl_templates_name_Doer') template.sortIndex = 3;
      if (template.templateName === 'lbl_templates_name_Analyzer') template.sortIndex = 1;
      if (template.templateName === 'lbl_templates_name_Creator') template.sortIndex = 2;
      return template;
    });
    typeCd.onBoardingStepsV2.KeyTheme.cssClasses = { featureOnboardingClass: featureOnboardingBundleClass };
  }
  if (window.RDL.features.showLetterPreview) {
    typeCd.onBoardingStepsV2.Name.cssClasses = { featureOnboardingClass: featurePreviewLetterClass };
  }
}

var handlePersonalizationV1 = exports.handlePersonalizationV1 = function handlePersonalizationV1(onboardingUserInput) {
  var templateTypeId = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;

  var userExp = onboardingUserInput[typeCd.dataObjMappingKeys.experience];
  typeCd.onBoardingStepsV2.PersonalizationName = {
    index: 41,
    viewType: typeCd.viewTypes.textInputView,
    leftHeadingText: RDL.Localization.lbl_personalization_name_popup_heading,
    subHeadingText: RDL.Localization.lbl_personalization_name_popup_desc,
    rightHeadingText: RDL.Localization.lbl_personalization_name_popup_right_heading,
    screenName: "PersonalizationName",
    textBoxControl: [{
      maxLength: 35,
      mappedStateObjKey: typeCd.dataObjMappingKeys.FirstName,
      placeholder: window.RDL.Localization.lbl_fNamePlaceholder,
      autoFocus: false,
      errorMessage: window.RDL.Localization.lbl_nameErrorMessage,
      showError: false,
      regEx: new RegExp("^[a-zA-Z0-9 `.,\\-']+$"),
      labelName: window.RDL.Localization.lbl_fName,
      id: typeCd.customFieldsId.fName
    }, {
      maxLength: 35,
      mappedStateObjKey: typeCd.dataObjMappingKeys.LastName,
      placeholder: window.RDL.Localization.lbl_lNamePlaceholder,
      autoFocus: false,
      errorMessage: window.RDL.Localization.lbl_nameErrorMessage,
      showError: false,
      regEx: new RegExp("^[a-zA-Z0-9 `.,\\-']+$"),
      labelName: window.RDL.Localization.lbl_lName,
      id: typeCd.customFieldsId.lName
    }],
    svgClass: _react2.default.createElement('svg', { 'class': 'eye-icon value-prop-default-color', xmlns: 'http://www.w3.org/2000/svg', width: '90', height: '71',
      viewBox: '0 0 90 71' }, _react2.default.createElement('g', null, _react2.default.createElement('g', null, _react2.default.createElement('g', null, _react2.default.createElement('path', { d: 'M25 71c13.807 0 25-11.193 25-25S38.807 21 25 21 0 32.193 0 46s11.193 25 25 25z' })), _react2.default.createElement('g', null, _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e', 'stroke-miterlimit': '50', 'stroke-width': '1.5',
      d: 'M80.63 32.746v0S69.332 \r 49.85 51.153 49.85c-18.18 0-31.702-17.104-31.702-17.104v0S31.937 15.68 50.117\r 15.68c18.179 0 30.514 17.066 30.514 17.066z' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none',
      stroke: '#2e2e2e', 'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M61.05 17.63a14.807 14.807 0 0 1 \r 3.93 10.065c0 8.208-6.655 14.86-14.86 14.86-8.208 0-14.86-6.652-14.86-14.86 0-3.882 1.49-7.419\r 3.929-10.065' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e', 'stroke-miterlimit': '50',
      'stroke-width': '1.5', d: 'M50.281 20.69c2.565 0 7.077 1.217 7.077 6.816 0 5.598-4.444 7.373-7.077 \r 7.373s-6.461-2.139-6.461-5.796' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e',
      'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M48.969 24.05a3.36 3.36 0 1 1-6.72 0 3.36\r 3.36 0 0 1 6.72 0z' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e', 'stroke-miterlimit': '50',
      'stroke-width': '1.5', d: 'M50.116 12.021V0' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e',
      'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M80.092 9.57L68.93 18.174' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e', 'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M31.277 \r 18.155L20.14 9.57' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e', 'stroke-miterlimit': '50',
      'stroke-width': '1.5', d: 'M66.544 2.55L60.39 13.837' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none',
      stroke: '#2e2e2e', 'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M23.853 24.174L11.03 20.02' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e', 'stroke-miterlimit': '50', 'stroke-width': '1.5',
      d: 'M89.365 20.33L76.48 24.386' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e',
      'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M40.086 13.751L34.09 2.43' })))))),
    saveValueProp: [typeCd.dataObjMappingKeys.FirstName, typeCd.dataObjMappingKeys.LastName],
    progressBarLevel: 1,
    eventProps: {
      screenName: 'enter your name',
      personalizationScreenName: "enter your name and contact details - modal"
    },
    btnPrimaryLabel: window.RDL.Localization.lbl_getYourLetter,
    hideTipsSection: true
  }, typeCd.onBoardingStepsV2.JobTitleAndCompany = {
    index: 42,
    viewType: typeCd.viewTypes.textInputView,
    leftHeadingText: window.RDL.Localization.lbl_tell_us_about_the_job,
    subHeadingText: window.RDL.Localization.lbl_help_us_suggest_best_content,
    rightHeadingText: window.RDL.Localization.lbl_job_i_want_is,
    screenName: "JobTitleAndCompany",
    userStageName: "",
    skipActionLinkText: window.RDL.Localization.lbl_dontHaveMind,
    tipsText: window.RDL.Localization.lbl_jobTitleInfo,
    textBoxControl: [{
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.JobTitleAutoCompleteType,
      mappedStateObjKey: typeCd.dataObjMappingKeys.jobTitle,
      placeholder: window.RDL.Localization.lbl_desiredPositionPlaceholder,
      id: typeCd.customFieldsId.jobTitle,
      labelName: window.RDL.Localization.lbl_desiredPosition,
      exactSearch: true,
      avoidTab: true
    }, {
      maxLength: 50,
      autoCompleteType: window.RDL.portalConfigData && window.RDL.portalConfigData.CompanyAutoCompleteType,
      mappedStateObjKey: typeCd.dataObjMappingKeys.companyName,
      placeholder: window.RDL.Localization.lbl_desiredCompanyPlaceholder,
      id: typeCd.customFieldsId.company,
      labelName: window.RDL.Localization.lbl_desiredCompany + '\n         <span class="faded-text">(' + RDL.Localization.lbl_optional + ')</span>',
      exactSearch: true,
      avoidTab: true
    }],
    svgClass: _react2.default.createElement('svg', { 'class': 'pin-icon value-prop-default-color', xmlns: 'http://www.w3.org/2000/svg',
      width: '44', height: '84', viewBox: '0 0 44 84',
      fill: '#fced5b' }, _react2.default.createElement('g', null, _react2.default.createElement('g', null, _react2.default.createElement('g', null, _react2.default.createElement('path', { d: 'M0 6.17h27.628v64.556H0z' })), _react2.default.createElement('g', null, _react2.default.createElement('g', null, _react2.default.createElement('g', null, _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e', 'stroke-linecap': 'round', 'stroke-miterlimit': '50',
      'stroke-width': '1.5', d: 'M40.562 9.093c0 2.969-2.924 5.566-7.255 6.935-2.084.66-4.497 1.04-7.066\r 1.04-2.57 0-4.982-.38-7.066-1.04-4.331-1.369-7.255-3.966-7.255-6.935 0-4.404 6.415-7.983 14.32-7.983\r 7.907 0 14.322 3.58 14.322 7.983z' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e',
      'stroke-linecap': 'round', 'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M34.248 31.705a16.733 16.733\r 0 0 1 4.82 3.59c.445.477.845.99 1.224 1.515 1.765 2.448 2.804 5.372 2.804 8.53 \r 0 .494-.033.981-.087 1.464-.017.16-.03.322-.053.48-3.03 3.415-9.373 5.766-16.717\r 5.766-7.338 0-13.68-2.35-16.71-5.765a12.741 12.741 0 0 1-.139-1.946c0-3.835 1.515-7.34\r 4.01-10.045a16.72 16.72 0 0 1 4.838-3.594' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e',
      'stroke-linecap': 'round', 'stroke-miterlimit': '50', 'stroke-width': '1.5',
      d: 'M26.247 75.605v0l1.716-22.555v0H24.53v0z' })), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#2e2e2e',
      'stroke-linecap': 'round', 'stroke-miterlimit': '50', 'stroke-width': '1.5',
      d: 'M34.421 34.568v0L33.31 16.03c-2.084.66-4.497 1.039-7.066 1.039-2.57\r 0-4.982-.38-7.066-1.039l-1.112 18.538v0l-.016.314c0 2.54 3.665 4.601 8.194 4.601\r 4.53 0 8.194-2.061 8.194-4.601z' })))))))),
    saveValueProp: [typeCd.dataObjMappingKeys.jobTitle, typeCd.dataObjMappingKeys.isJobSelectedFromList, typeCd.dataObjMappingKeys.companyName],
    progressBarLevel: 2,
    eventProps: {
      screenName: 'future job title',
      clickOption: "i don't have a job in mind",
      personalizationScreenName: "future job title and company name - modal"
    },
    isBackButtonHidden: true
  };
  typeCd.onBoardingStepsV2.WorkExpButton = {
    index: 43,
    viewType: typeCd.viewTypes.counterButtonView,
    screenName: "WorkExpButton",
    leftHeadingText: RDL.Localization.lbl_howLongWorking,
    subHeadingText: RDL.Localization.lbl_tailor_fit_experience,
    rightHeadingText: RDL.Localization.lbl_have_given_experience,
    saveValueProp: [typeCd.dataObjMappingKeys.experience],
    progressBarLevel: 3,
    svgClass: _react2.default.createElement('svg', { 'class': 'timer-icon value-prop-default-color', xmlns: 'http://www.w3.org/2000/svg', width: '161',
      height: '74', viewBox: '0 0 161 74' }, ' ', _react2.default.createElement('g', null, ' ', _react2.default.createElement('g', null, ' ', _react2.default.createElement('g', null, ' ', _react2.default.createElement('g', null, ' ', _react2.default.createElement('path', { d: 'M91 73.84v-36H0l32.066 36z' }), ' '), _react2.default.createElement('g', null, ' ', _react2.default.createElement('path', { fill: 'none', stroke: '#231F20',
      'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M113 26.34c0 12.978 10.522 23.5 23.5 23.5 \r 12.979 0 23.5-10.522 23.5-23.5s-10.521-23.5-23.5-23.5c-12.978 0-23.5 10.522-23.5 23.5z' }), ' '), _react2.default.createElement('g', null, ' ', _react2.default.createElement('path', { fill: 'none', stroke: '#231F20', 'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M137\r 12.84v14h13v0' }), ' '), ' ', _react2.default.createElement('g', { transform: 'rotate(-4 154 7)' }, ' ', _react2.default.createElement('path', { fill: 'none', stroke: '#2E2E2E',
      'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M152.24 8.815l3.023-3.155' }), ' '), _react2.default.createElement('g', { transform: 'rotate(-4 155.5 5.5)' }, ' ', _react2.default.createElement('path', { fill: 'none', stroke: '#231F20', 'stroke-miterlimit': '50',
      'stroke-width': '1.62', d: 'M150.78 1l8.975 9.01' }), ' '), ' ', _react2.default.createElement('g', null, ' ', _react2.default.createElement('path', { fill: 'none', stroke: '#231F20',
      'stroke-dasharray': '10.8 6.3', 'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M102.373 12.146H61' }), ' '), _react2.default.createElement('g', null, _react2.default.createElement('path', { fill: 'none', stroke: '#231F20', 'stroke-dasharray': '10.8 6.3', 'stroke-miterlimit': '50',
      'stroke-width': '1.5', d: 'M90 28.34H44' }), ' '), ' ', _react2.default.createElement('g', null, ' ', _react2.default.createElement('path', { fill: 'none', stroke: '#231F20',
      'stroke-dasharray': '10.8 6.3', 'stroke-miterlimit': '50', 'stroke-width': '1.5', d: 'M105 43.34H59' }), ' ')), ' '), ' '), ' '),
    eventProps: {
      personalizationScreenName: "years of experience - modal"
    }
  };
  switch (true) {
    case userExp <= 3:
      userExp = "0-3";
      break;
    case userExp == 4 || userExp == 5:
      userExp = "4-5";
      break;
    case userExp >= 6 && userExp <= 9:
      userExp = "6-10";
      break;
    case userExp >= 10:
      userExp = "10+";
      break;
    default:
      userExp = "6-10";
  }
  if (templateTypeId == 0) {
    RDL.Skins.map(function (skin) {
      var index = skin.exp && skin.exp[userExp] && skin.exp[userExp].index;
      if (index) {
        skin.templateCategoryId = 0;
        skin.sequenceIndex = index || undefined;
      }
    });
  }
  typeCd.TemplateTypes = [{
    id: "linkRecommended",
    templateTypeId: 0,
    text: window.RDL.Localization.lbl_choose_template_recommended
  }, {
    id: "linkAll",
    templateTypeId: 1,
    text: window.RDL.Localization.lbl_choose_template_all
  }];
  return RDL.Skins;
};

var handleSkillsEnhancementsV1 = exports.handleSkillsEnhancementsV1 = function handleSkillsEnhancementsV1() {
  var skillsIndex = typeCd.onBoardingStepsV2Grouping.group3.findIndex(function (index) {
    return index == typeCd.onBoardingStepsV2.Skills.index;
  });
  skillsIndex >= 0 && (typeCd.onBoardingStepsV2Grouping.group3[skillsIndex] = typeCd.onBoardingStepsV2.SkillsV2NewUI.index);
};

function isAnyElementExistsInArr(sourceArr, elemArr) {
  if (elemArr && elemArr.length && sourceArr && sourceArr.length) {
    for (var i = 0; i < elemArr.length; i++) {
      if (sourceArr.includes(elemArr[i])) {
        return true;
      }
    }
  }
}

//Constructor Function
function VerticalProgressBarNodes(isLoggedIn) {
  var _this = this;

  var onboardingStepArr = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];
  var visitedArr = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : [];

  this.progressBarNodes = [];
  this.activeNode = null;
  var counter = 1,
      node = void 0;
  Object.keys(typeCd.verticalProgressBarNodes).map(function (key) {
    node = Object.assign({}, typeCd.verticalProgressBarNodes[key]);
    if (!node.isGuestOnly || !isLoggedIn || RDL.experimentControl.isUploadResume) {
      node.index = counter++;
      node.isVisited = isAnyElementExistsInArr(visitedArr, node.initialSteps);
      _this.progressBarNodes.push(node);
      if (isAnyElementExistsInArr(onboardingStepArr, node.initialSteps)) _this.activeNode = node;
    }
  });
}

function handleSkipTemplate() {
  typeCd.TemplateTypes.push({
    id: "linkAll",
    templateTypeId: 4,
    text: RDL.Localization.lbl_choose_template_all
  });
}

/***/ }),
/* 66 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var reactIs = __webpack_require__(19);

/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
  childContextTypes: true,
  contextType: true,
  contextTypes: true,
  defaultProps: true,
  displayName: true,
  getDefaultProps: true,
  getDerivedStateFromError: true,
  getDerivedStateFromProps: true,
  mixins: true,
  propTypes: true,
  type: true
};
var KNOWN_STATICS = {
  name: true,
  length: true,
  prototype: true,
  caller: true,
  callee: true,
  arguments: true,
  arity: true
};
var FORWARD_REF_STATICS = {
  '$$typeof': true,
  render: true,
  defaultProps: true,
  displayName: true,
  propTypes: true
};
var MEMO_STATICS = {
  '$$typeof': true,
  compare: true,
  defaultProps: true,
  displayName: true,
  propTypes: true,
  type: true
};
var TYPE_STATICS = {};
TYPE_STATICS[reactIs.ForwardRef] = FORWARD_REF_STATICS;
TYPE_STATICS[reactIs.Memo] = MEMO_STATICS;

function getStatics(component) {
  // React v16.11 and below
  if (reactIs.isMemo(component)) {
    return MEMO_STATICS;
  } // React v16.12 and above


  return TYPE_STATICS[component['$$typeof']] || REACT_STATICS;
}

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = Object.prototype;
function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
  if (typeof sourceComponent !== 'string') {
    // don't hoist over string (html) components
    if (objectPrototype) {
      var inheritedComponent = getPrototypeOf(sourceComponent);

      if (inheritedComponent && inheritedComponent !== objectPrototype) {
        hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
      }
    }

    var keys = getOwnPropertyNames(sourceComponent);

    if (getOwnPropertySymbols) {
      keys = keys.concat(getOwnPropertySymbols(sourceComponent));
    }

    var targetStatics = getStatics(targetComponent);
    var sourceStatics = getStatics(sourceComponent);

    for (var i = 0; i < keys.length; ++i) {
      var key = keys[i];

      if (!KNOWN_STATICS[key] && !(blacklist && blacklist[key]) && !(sourceStatics && sourceStatics[key]) && !(targetStatics && targetStatics[key])) {
        var descriptor = getOwnPropertyDescriptor(sourceComponent, key);

        try {
          // Avoid failures from read-only properties
          defineProperty(targetComponent, key, descriptor);
        } catch (e) {}
      }
    }
  }

  return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),
/* 67 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _slicedToArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__arrayWithHoles_js__ = __webpack_require__(126);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__iterableToArrayLimit_js__ = __webpack_require__(127);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__unsupportedIterableToArray_js__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__nonIterableRest_js__ = __webpack_require__(128);




function _slicedToArray(arr, i) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__arrayWithHoles_js__["a" /* default */])(arr) || Object(__WEBPACK_IMPORTED_MODULE_1__iterableToArrayLimit_js__["a" /* default */])(arr, i) || Object(__WEBPACK_IMPORTED_MODULE_2__unsupportedIterableToArray_js__["a" /* default */])(arr, i) || Object(__WEBPACK_IMPORTED_MODULE_3__nonIterableRest_js__["a" /* default */])();
}

/***/ }),
/* 68 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _objectSpread;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__defineProperty_js__ = __webpack_require__(25);

function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? Object(arguments[i]) : {};
    var ownKeys = Object.keys(source);

    if (typeof Object.getOwnPropertySymbols === 'function') {
      ownKeys.push.apply(ownKeys, Object.getOwnPropertySymbols(source).filter(function (sym) {
        return Object.getOwnPropertyDescriptor(source, sym).enumerable;
      }));
    }

    ownKeys.forEach(function (key) {
      Object(__WEBPACK_IMPORTED_MODULE_0__defineProperty_js__["a" /* default */])(target, key, source[key]);
    });
  }

  return target;
}

/***/ }),
/* 69 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _classCallCheck;
function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

/***/ }),
/* 70 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _createClass;
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

/***/ }),
/* 71 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _possibleConstructorReturn;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__typeof_js__ = __webpack_require__(129);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__assertThisInitialized_js__ = __webpack_require__(23);


function _possibleConstructorReturn(self, call) {
  if (call && (Object(__WEBPACK_IMPORTED_MODULE_0__typeof_js__["a" /* default */])(call) === "object" || typeof call === "function")) {
    return call;
  } else if (call !== void 0) {
    throw new TypeError("Derived constructors may only return object or undefined");
  }

  return Object(__WEBPACK_IMPORTED_MODULE_1__assertThisInitialized_js__["a" /* default */])(self);
}

/***/ }),
/* 72 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _getPrototypeOf;
function _getPrototypeOf(o) {
  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {
    return o.__proto__ || Object.getPrototypeOf(o);
  };
  return _getPrototypeOf(o);
}

/***/ }),
/* 73 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _inherits;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__setPrototypeOf_js__ = __webpack_require__(47);

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function");
  }

  subClass.prototype = Object.create(superClass && superClass.prototype, {
    constructor: {
      value: subClass,
      writable: true,
      configurable: true
    }
  });
  Object.defineProperty(subClass, "prototype", {
    writable: false
  });
  if (superClass) Object(__WEBPACK_IMPORTED_MODULE_0__setPrototypeOf_js__["a" /* default */])(subClass, superClass);
}

/***/ }),
/* 74 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _toConsumableArray;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__arrayWithoutHoles_js__ = __webpack_require__(130);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__iterableToArray_js__ = __webpack_require__(131);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__unsupportedIterableToArray_js__ = __webpack_require__(52);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__nonIterableSpread_js__ = __webpack_require__(132);




function _toConsumableArray(arr) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__arrayWithoutHoles_js__["a" /* default */])(arr) || Object(__WEBPACK_IMPORTED_MODULE_1__iterableToArray_js__["a" /* default */])(arr) || Object(__WEBPACK_IMPORTED_MODULE_2__unsupportedIterableToArray_js__["a" /* default */])(arr) || Object(__WEBPACK_IMPORTED_MODULE_3__nonIterableSpread_js__["a" /* default */])();
}

/***/ }),
/* 75 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

var React = __webpack_require__(0);
var PropTypes = __webpack_require__(2);

var ALL_INITIALIZERS = [];
var READY_INITIALIZERS = [];

function isWebpackReady(getModuleIds) {
  if (( false ? "undefined" : _typeof(__webpack_require__.m)) !== "object") {
    return false;
  }

  return getModuleIds().every(function (moduleId) {
    return typeof moduleId !== "undefined" && typeof __webpack_require__.m[moduleId] !== "undefined";
  });
}

function load(loader) {
  var promise = loader();

  var state = {
    loading: true,
    loaded: null,
    error: null
  };

  state.promise = promise.then(function (loaded) {
    state.loading = false;
    state.loaded = loaded;
    return loaded;
  }).catch(function (err) {
    state.loading = false;
    state.error = err;
    throw err;
  });

  return state;
}

function loadMap(obj) {
  var state = {
    loading: false,
    loaded: {},
    error: null
  };

  var promises = [];

  try {
    Object.keys(obj).forEach(function (key) {
      var result = load(obj[key]);

      if (!result.loading) {
        state.loaded[key] = result.loaded;
        state.error = result.error;
      } else {
        state.loading = true;
      }

      promises.push(result.promise);

      result.promise.then(function (res) {
        state.loaded[key] = res;
      }).catch(function (err) {
        state.error = err;
      });
    });
  } catch (err) {
    state.error = err;
  }

  state.promise = Promise.all(promises).then(function (res) {
    state.loading = false;
    return res;
  }).catch(function (err) {
    state.loading = false;
    throw err;
  });

  return state;
}

function resolve(obj) {
  return obj && obj.__esModule ? obj.default : obj;
}

function render(loaded, props) {
  return React.createElement(resolve(loaded), props);
}

function createLoadableComponent(loadFn, options) {
  var _class, _temp;

  if (!options.loading) {
    throw new Error("react-loadable requires a `loading` component");
  }

  var opts = Object.assign({
    loader: null,
    loading: null,
    delay: 200,
    timeout: null,
    render: render,
    webpack: null,
    modules: null
  }, options);

  var res = null;

  function init() {
    if (!res) {
      res = loadFn(opts.loader);
    }
    return res.promise;
  }

  ALL_INITIALIZERS.push(init);

  if (typeof opts.webpack === "function") {
    READY_INITIALIZERS.push(function () {
      if (isWebpackReady(opts.webpack)) {
        return init();
      }
    });
  }

  return _temp = _class = function (_React$Component) {
    _inherits(LoadableComponent, _React$Component);

    function LoadableComponent(props) {
      _classCallCheck(this, LoadableComponent);

      var _this = _possibleConstructorReturn(this, _React$Component.call(this, props));

      _this.retry = function () {
        _this.setState({ error: null, loading: true, timedOut: false });
        res = loadFn(opts.loader);
        _this._loadModule();
      };

      init();

      _this.state = {
        error: res.error,
        pastDelay: false,
        timedOut: false,
        loading: res.loading,
        loaded: res.loaded
      };
      return _this;
    }

    LoadableComponent.preload = function preload() {
      return init();
    };

    LoadableComponent.prototype.componentWillMount = function componentWillMount() {
      this._mounted = true;
      this._loadModule();
    };

    LoadableComponent.prototype._loadModule = function _loadModule() {
      var _this2 = this;

      if (this.context.loadable && Array.isArray(opts.modules)) {
        opts.modules.forEach(function (moduleName) {
          _this2.context.loadable.report(moduleName);
        });
      }

      if (!res.loading) {
        return;
      }

      if (typeof opts.delay === "number") {
        if (opts.delay === 0) {
          this.setState({ pastDelay: true });
        } else {
          this._delay = setTimeout(function () {
            _this2.setState({ pastDelay: true });
          }, opts.delay);
        }
      }

      if (typeof opts.timeout === "number") {
        this._timeout = setTimeout(function () {
          _this2.setState({ timedOut: true });
        }, opts.timeout);
      }

      var update = function update() {
        if (!_this2._mounted) {
          return;
        }

        _this2.setState({
          error: res.error,
          loaded: res.loaded,
          loading: res.loading
        });

        _this2._clearTimeouts();
      };

      res.promise.then(function () {
        update();
      }).catch(function (err) {
        update();
      });
    };

    LoadableComponent.prototype.componentWillUnmount = function componentWillUnmount() {
      this._mounted = false;
      this._clearTimeouts();
    };

    LoadableComponent.prototype._clearTimeouts = function _clearTimeouts() {
      clearTimeout(this._delay);
      clearTimeout(this._timeout);
    };

    LoadableComponent.prototype.render = function render() {
      if (this.state.loading || this.state.error) {
        return React.createElement(opts.loading, {
          isLoading: this.state.loading,
          pastDelay: this.state.pastDelay,
          timedOut: this.state.timedOut,
          error: this.state.error,
          retry: this.retry
        });
      } else if (this.state.loaded) {
        return opts.render(this.state.loaded, this.props);
      } else {
        return null;
      }
    };

    return LoadableComponent;
  }(React.Component), _class.contextTypes = {
    loadable: PropTypes.shape({
      report: PropTypes.func.isRequired
    })
  }, _temp;
}

function Loadable(opts) {
  return createLoadableComponent(load, opts);
}

function LoadableMap(opts) {
  if (typeof opts.render !== "function") {
    throw new Error("LoadableMap requires a `render(loaded, props)` function");
  }

  return createLoadableComponent(loadMap, opts);
}

Loadable.Map = LoadableMap;

var Capture = function (_React$Component2) {
  _inherits(Capture, _React$Component2);

  function Capture() {
    _classCallCheck(this, Capture);

    return _possibleConstructorReturn(this, _React$Component2.apply(this, arguments));
  }

  Capture.prototype.getChildContext = function getChildContext() {
    return {
      loadable: {
        report: this.props.report
      }
    };
  };

  Capture.prototype.render = function render() {
    return React.Children.only(this.props.children);
  };

  return Capture;
}(React.Component);

Capture.propTypes = {
  report: PropTypes.func.isRequired
};
Capture.childContextTypes = {
  loadable: PropTypes.shape({
    report: PropTypes.func.isRequired
  }).isRequired
};


Loadable.Capture = Capture;

function flushInitializers(initializers) {
  var promises = [];

  while (initializers.length) {
    var init = initializers.pop();
    promises.push(init());
  }

  return Promise.all(promises).then(function () {
    if (initializers.length) {
      return flushInitializers(initializers);
    }
  });
}

Loadable.preloadAll = function () {
  return new Promise(function (resolve, reject) {
    flushInitializers(ALL_INITIALIZERS).then(resolve, reject);
  });
};

Loadable.preloadReady = function () {
  return new Promise(function (resolve, reject) {
    // We always will resolve, errors should be handled within loading UIs.
    flushInitializers(READY_INITIALIZERS).then(resolve, resolve);
  });
};

module.exports = Loadable;

/***/ }),
/* 76 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ReviewLoader;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ReviewLoader(props) {
  return _react2.default.createElement(
    "div",
    { className: props.importResume ? " import-loader" : "" },
    _react2.default.createElement(
      "div",
      { className: "save-loader" },
      props.importResume ? _react2.default.createElement(
        "svg",
        { xmlns: "http://www.w3.org/2000/svg",
          className: "importing-svg", width: "84", height: "84", viewBox: "0 0 84 84" },
        _react2.default.createElement(
          "g",
          null,
          _react2.default.createElement(
            "g",
            null,
            _react2.default.createElement(
              "g",
              null,
              _react2.default.createElement("path", { fill: "#a2d7ce", d: "M0 9h57v75H0z" })
            ),
            _react2.default.createElement(
              "g",
              null,
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "none", stroke: "#2e2e2e",
                  "stroke-miterlimit": "20", "stroke-width": "1.5", d: "M66.87 32.24v42.81H10v0V1v0h56.87v16.198" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement(
                  "g",
                  null,
                  _react2.default.createElement("path", { fill: "none", stroke: "#2e2e2e", "stroke-linecap": "square", "stroke-miterlimit": "20",
                    "stroke-width": "1.5", d: "M62.03 24.897h19.134" })
                ),
                _react2.default.createElement(
                  "g",
                  null,
                  _react2.default.createElement("path", { fill: "none", stroke: "#2e2e2e",
                    "stroke-miterlimit": "20", "stroke-width": "1.5", d: "M76.72 17.79v0l5.924 7.114v0l-5.924 5.929v0" })
                )
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "#2e2e2e", d: "M20.66 14.04h1.22v1.22h-1.22z" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "#2e2e2e",
                  d: "M20.66 19.97h1.22v1.22h-1.22z" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "#2e2e2e",
                  d: "M26.59 14.04h26.065v1.22H26.59z" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "#2e2e2e",
                  d: "M26.59 19.97h26.065v1.22H26.59z" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "#2e2e2e",
                  d: "M20.66 33.01h1.22v1.22h-1.22z" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "#2e2e2e",
                  d: "M26.59 33.01h26.065v1.22H26.59z" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "#2e2e2e",
                  d: "M20.66 38.94h1.22v1.22h-1.22z" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "#2e2e2e", d: "M26.59 38.94h26.065v1.22H26.59z" })
              )
            )
          )
        )
      ) : _react2.default.createElement(
        "svg",
        { className: "letter-writing-icon brand-feat-color-3", xmlns: "http://www.w3.org/2000/svg",
          width: "82", height: "84", viewBox: "0 0 82 84" },
        _react2.default.createElement(
          "g",
          null,
          _react2.default.createElement(
            "g",
            null,
            _react2.default.createElement(
              "g",
              null,
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { d: "M0 10h56v74H0z", className: "copy" })
              )
            ),
            _react2.default.createElement(
              "g",
              null,
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "none", stroke: "#2e2e2e", className: "writing-icon-path",
                  "stroke-miterlimit": "50", "stroke-width": "1.5", d: "M65.907 21.343v0V1v0H9.76v74.049h56.147v0-38.245 0" })
              ),
              _react2.default.createElement(
                "g",
                { transform: "rotate(46 60.5 34.5)" },
                _react2.default.createElement("path", { fill: "none", stroke: "#2e2e2e",
                  className: "writing-icon-path", "stroke-miterlimit": "50", "stroke-width": "1.5",
                  d: "M64.178 53.835v0l-5.275 8.387v0L53.6 53.835v0V11.06c0-.956.888-1.731\r 1.984-1.731h6.61c1.096 0 1.984.775 1.984 1.73z" })
              ),
              _react2.default.createElement(
                "g",
                { transform: "rotate(46 47 48)" },
                _react2.default.createElement("path", { fill: "none", stroke: "#2e2e2e", className: "writing-icon-path", "stroke-miterlimit": "50",
                  "stroke-width": "1.5", d: "M41.39 47.98h10.578" })
              ),
              _react2.default.createElement(
                "g",
                { transform: "rotate(46 72 23)" },
                _react2.default.createElement("path", { fill: "none", stroke: "#2e2e2e", className: "writing-icon-path", "stroke-miterlimit": "50",
                  "stroke-width": "1.5", d: "M66.62 22.75h10.578" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "none", stroke: "#2e2e2e", className: "writing-icon-path", "stroke-linejoin": "round",
                  "stroke-miterlimit": "50", "stroke-width": "1.5", d: "M18.21 66.507h22.784" })
              ),
              _react2.default.createElement(
                "g",
                null,
                _react2.default.createElement("path", { fill: "none",
                  stroke: "#2e2e2e", className: "writing-icon-path", "stroke-linejoin": "round", "stroke-miterlimit": "50",
                  "stroke-width": "1.5", d: "M18.21 60.807h17.902" })
              )
            )
          )
        )
      ),
      _react2.default.createElement(
        "span",
        { className: "loader-content" },
        " ",
        props.loaderLabel
      ),
      _react2.default.createElement(
        "span",
        { className: "loader" },
        _react2.default.createElement("span", { className: "loader-inner" })
      )
    )
  );
}

/***/ }),
/* 77 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var ProgressBar = function (_Component) {
  _inherits(ProgressBar, _Component);

  function ProgressBar(props, context) {
    _classCallCheck(this, ProgressBar);

    var _this = _possibleConstructorReturn(this, (ProgressBar.__proto__ || Object.getPrototypeOf(ProgressBar)).call(this, props, context));

    _this.state = {
      progressText: window.RDL.Localization.lbl_progressBarTextV2_0,
      progressBarWrapperClass: "",
      progressBarOverlayClass: "",
      progressBarValue: 0
    };
    return _this;
  }

  _createClass(ProgressBar, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this2 = this;

      var progressInterval = setInterval(function () {
        _this2.setState({ progressBarValue: _this2.state.progressBarValue >= 100 ? _this2.state.progressBarValue : ++_this2.state.progressBarValue });
      }, 40);
      setTimeout(function () {
        _this2.setState({ progressText: window.RDL.Localization.lbl_progressBarTextV2_1 });
      }, 1500);
      setTimeout(function () {
        _this2.setState({ progressText: window.RDL.Localization.lbl_progressBarTextV2_2 });
      }, 3000);

      setTimeout(function () {
        if (progressInterval) {
          clearInterval(progressInterval);
        }
        _this2.setState({
          progressBarWrapperClass: " d-none",
          progressBarOverlayClass: " bg-transparent"
        });
      }, 6000);

      if (!this.props.isLoggedIn && this.props.updateProgressAnimationClasses) {
        setTimeout(function () {
          _this2.props.updateProgressAnimationClasses({ sortableListClass: "hide-section show-name-contact" });
        }, 6500);
        setTimeout(function () {
          _this2.props.updateProgressAnimationClasses({ sortableListClass: "" });
        }, 7500);
      }
    }
  }, {
    key: "render",
    value: function render() {
      return _react2.default.createElement("section", { className: "progress-bar-overlay " + this.state.progressBarOverlayClass }, _react2.default.createElement("section", { className: "progress-bar-wrapper text-center " + this.state.progressBarWrapperClass }, !RDL.isJoshuaTree && _react2.default.createElement("img", { src: window.RDL.homeLogo, alt: "cover-letter-logo", className: "lc-logo-width" }), _react2.default.createElement("p", { className: "progress-text" }, RDL.joshuaTreeINTL && this.state.progressBarValue + "% ", this.props.progressBarText || this.state.progressText), RDL.isJoshuaTree ? _react2.default.createElement("div", { className: "progress-bar-line" }, _react2.default.createElement("div", { className: "progress-bar-line-fill" })) : _react2.default.createElement("div", { className: "spinner-circle" }, _react2.default.createElement("div", { className: "spinner-circle-gradient" }), _react2.default.createElement("div", { className: "spinner-circle-inner" }))));
    }
  }]);

  return ProgressBar;
}(_react.Component);

exports.default = ProgressBar;

/***/ }),
/* 78 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactDom = __webpack_require__(35);

var _reactRouterDom = __webpack_require__(39);

var _reactRedux = __webpack_require__(46);

var _helper = __webpack_require__(7);

var _configureStorePrivate = __webpack_require__(133);

var _configureStorePrivate2 = _interopRequireDefault(_configureStorePrivate);

var _configureStore = __webpack_require__(146);

var _configureStore2 = _interopRequireDefault(_configureStore);

var _routes = __webpack_require__(147);

var _routes2 = _interopRequireDefault(_routes);

var _initialState = __webpack_require__(11);

var initialState = _interopRequireWildcard(_initialState);

var _queueHandler = __webpack_require__(33);

var _queueHandler2 = _interopRequireDefault(_queueHandler);

var _componentlist = __webpack_require__(32);

__webpack_require__(149);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === 'undefined' ? 'undefined' : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === 'undefined' ? 'undefined' : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var StoreRoot = function (_React$Component) {
  _inherits(StoreRoot, _React$Component);

  function StoreRoot(props, context) {
    _classCallCheck(this, StoreRoot);

    var _this = _possibleConstructorReturn(this, (StoreRoot.__proto__ || Object.getPrototypeOf(StoreRoot)).call(this, props, context));

    var isBrowserStorageSupported = _helper.FieldHelper.isLocalStorageSupported();
    var storeConfigureFunc = isBrowserStorageSupported ? _configureStore2.default : _configureStorePrivate2.default;
    _this.state = { store: storeConfigureFunc(), configFunc: storeConfigureFunc,
      isState: false, isLocalStorageSupported: _helper.FieldHelper.isLocalStorageSupported() };
    _this.onRouteChange = _this.onRouteChange.bind(_this);
    _this.queueHandler = new _queueHandler2.default();
    return _this;
  }

  _createClass(StoreRoot, [{
    key: 'componentWillMount',
    value: function componentWillMount() {
      var _this2 = this;

      this.queueHandler.load('document_clb').then(function (resp) {
        if (!resp) {
          _this2.setState({ store: _this2.state.configFunc(initialState.default), isState: true });
        } else {
          _this2.setState({ store: _this2.state.configFunc(resp), isState: true });
        }
      });
    }
  }, {
    key: 'onRouteChange',
    value: function onRouteChange() {
      window.RDL.isRefresh = false;
      var routerComponent = this.refs["RouterComponent"];
      document.title = routerComponent.state.routes[0].title;
      document.documentElement.scrollTop = 0;
      var url = window.location.origin + location.pathname;
      //window.RDL.AsyncTrack();
      var component = null;
      var authCookieValue = window.RDL.readCookie(".AspNet.LCAuth");
      var doc_id = window.RDL.GetQueryString('doc_id');
      var defaultPathName = 'HowItWorks';
      for (var component in _componentlist.ComponentList) {
        if (_componentlist.ComponentList[component].Title == routerComponent.state.routes[0].title) {
          component = _componentlist.ComponentList[component];
          break;
        }
      }
      if (component.AuthenticationRequired && authCookieValue == null) {
        routerComponent.history.push(_componentlist.ComponentList[defaultPathName].Path + window.location.search);
        return;
      }
      if (doc_id != null) {
        if (authCookieValue == null) {
          routerComponent.history.push(_componentlist.ComponentList[defaultPathName].Path);
          return;
        }
      }
    }
  }, {
    key: 'render',
    value: function render() {
      if (this.state.isState) {
        return _react2.default.createElement(_reactRedux.Provider, { store: this.state.store }, _react2.default.createElement('div', null, _react2.default.createElement(_reactRouterDom.BrowserRouter, { onUpdate: this.onRouteChange, routes: _routes2.default, ref: 'RouterComponent' }, _routes2.default)));
      } else return null;
    }
  }]);

  return StoreRoot;
}(_react2.default.Component);

if (window.RDL.claimsLoaded && window.RDL.countryClaimsLoaded && (!RDL.experimentJsSpaURL || RDL.layerID && window.experiment)) {
  (0, _reactDom.render)(_react2.default.createElement(StoreRoot, null), document.getElementById('app'));
} else {
  var timer = 0;
  var claimsLoadedTimer = setInterval(function () {
    timer++;
    if (window.RDL.claimsLoaded && window.RDL.countryClaimsLoaded && (!RDL.experimentJsSpaURL || RDL.layerID && window.experiment || timer >= 30)) {
      clearInterval(claimsLoadedTimer);
      (0, _reactDom.render)(_react2.default.createElement(StoreRoot, null), document.getElementById('app'));
    }
  }, 100);
}

/***/ }),
/* 79 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.14.0
 * react.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var l=__webpack_require__(12),n="function"===typeof Symbol&&Symbol.for,p=n?Symbol.for("react.element"):60103,q=n?Symbol.for("react.portal"):60106,r=n?Symbol.for("react.fragment"):60107,t=n?Symbol.for("react.strict_mode"):60108,u=n?Symbol.for("react.profiler"):60114,v=n?Symbol.for("react.provider"):60109,w=n?Symbol.for("react.context"):60110,x=n?Symbol.for("react.forward_ref"):60112,y=n?Symbol.for("react.suspense"):60113,z=n?Symbol.for("react.memo"):60115,A=n?Symbol.for("react.lazy"):
60116,B="function"===typeof Symbol&&Symbol.iterator;function C(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}
var D={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},E={};function F(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}F.prototype.isReactComponent={};F.prototype.setState=function(a,b){if("object"!==typeof a&&"function"!==typeof a&&null!=a)throw Error(C(85));this.updater.enqueueSetState(this,a,b,"setState")};F.prototype.forceUpdate=function(a){this.updater.enqueueForceUpdate(this,a,"forceUpdate")};
function G(){}G.prototype=F.prototype;function H(a,b,c){this.props=a;this.context=b;this.refs=E;this.updater=c||D}var I=H.prototype=new G;I.constructor=H;l(I,F.prototype);I.isPureReactComponent=!0;var J={current:null},K=Object.prototype.hasOwnProperty,L={key:!0,ref:!0,__self:!0,__source:!0};
function M(a,b,c){var e,d={},g=null,k=null;if(null!=b)for(e in void 0!==b.ref&&(k=b.ref),void 0!==b.key&&(g=""+b.key),b)K.call(b,e)&&!L.hasOwnProperty(e)&&(d[e]=b[e]);var f=arguments.length-2;if(1===f)d.children=c;else if(1<f){for(var h=Array(f),m=0;m<f;m++)h[m]=arguments[m+2];d.children=h}if(a&&a.defaultProps)for(e in f=a.defaultProps,f)void 0===d[e]&&(d[e]=f[e]);return{$$typeof:p,type:a,key:g,ref:k,props:d,_owner:J.current}}
function N(a,b){return{$$typeof:p,type:a.type,key:b,ref:a.ref,props:a.props,_owner:a._owner}}function O(a){return"object"===typeof a&&null!==a&&a.$$typeof===p}function escape(a){var b={"=":"=0",":":"=2"};return"$"+(""+a).replace(/[=:]/g,function(a){return b[a]})}var P=/\/+/g,Q=[];function R(a,b,c,e){if(Q.length){var d=Q.pop();d.result=a;d.keyPrefix=b;d.func=c;d.context=e;d.count=0;return d}return{result:a,keyPrefix:b,func:c,context:e,count:0}}
function S(a){a.result=null;a.keyPrefix=null;a.func=null;a.context=null;a.count=0;10>Q.length&&Q.push(a)}
function T(a,b,c,e){var d=typeof a;if("undefined"===d||"boolean"===d)a=null;var g=!1;if(null===a)g=!0;else switch(d){case "string":case "number":g=!0;break;case "object":switch(a.$$typeof){case p:case q:g=!0}}if(g)return c(e,a,""===b?"."+U(a,0):b),1;g=0;b=""===b?".":b+":";if(Array.isArray(a))for(var k=0;k<a.length;k++){d=a[k];var f=b+U(d,k);g+=T(d,f,c,e)}else if(null===a||"object"!==typeof a?f=null:(f=B&&a[B]||a["@@iterator"],f="function"===typeof f?f:null),"function"===typeof f)for(a=f.call(a),k=
0;!(d=a.next()).done;)d=d.value,f=b+U(d,k++),g+=T(d,f,c,e);else if("object"===d)throw c=""+a,Error(C(31,"[object Object]"===c?"object with keys {"+Object.keys(a).join(", ")+"}":c,""));return g}function V(a,b,c){return null==a?0:T(a,"",b,c)}function U(a,b){return"object"===typeof a&&null!==a&&null!=a.key?escape(a.key):b.toString(36)}function W(a,b){a.func.call(a.context,b,a.count++)}
function aa(a,b,c){var e=a.result,d=a.keyPrefix;a=a.func.call(a.context,b,a.count++);Array.isArray(a)?X(a,e,c,function(a){return a}):null!=a&&(O(a)&&(a=N(a,d+(!a.key||b&&b.key===a.key?"":(""+a.key).replace(P,"$&/")+"/")+c)),e.push(a))}function X(a,b,c,e,d){var g="";null!=c&&(g=(""+c).replace(P,"$&/")+"/");b=R(b,g,e,d);V(a,aa,b);S(b)}var Y={current:null};function Z(){var a=Y.current;if(null===a)throw Error(C(321));return a}
var ba={ReactCurrentDispatcher:Y,ReactCurrentBatchConfig:{suspense:null},ReactCurrentOwner:J,IsSomeRendererActing:{current:!1},assign:l};exports.Children={map:function(a,b,c){if(null==a)return a;var e=[];X(a,e,null,b,c);return e},forEach:function(a,b,c){if(null==a)return a;b=R(null,null,b,c);V(a,W,b);S(b)},count:function(a){return V(a,function(){return null},null)},toArray:function(a){var b=[];X(a,b,null,function(a){return a});return b},only:function(a){if(!O(a))throw Error(C(143));return a}};
exports.Component=F;exports.Fragment=r;exports.Profiler=u;exports.PureComponent=H;exports.StrictMode=t;exports.Suspense=y;exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=ba;
exports.cloneElement=function(a,b,c){if(null===a||void 0===a)throw Error(C(267,a));var e=l({},a.props),d=a.key,g=a.ref,k=a._owner;if(null!=b){void 0!==b.ref&&(g=b.ref,k=J.current);void 0!==b.key&&(d=""+b.key);if(a.type&&a.type.defaultProps)var f=a.type.defaultProps;for(h in b)K.call(b,h)&&!L.hasOwnProperty(h)&&(e[h]=void 0===b[h]&&void 0!==f?f[h]:b[h])}var h=arguments.length-2;if(1===h)e.children=c;else if(1<h){f=Array(h);for(var m=0;m<h;m++)f[m]=arguments[m+2];e.children=f}return{$$typeof:p,type:a.type,
key:d,ref:g,props:e,_owner:k}};exports.createContext=function(a,b){void 0===b&&(b=null);a={$$typeof:w,_calculateChangedBits:b,_currentValue:a,_currentValue2:a,_threadCount:0,Provider:null,Consumer:null};a.Provider={$$typeof:v,_context:a};return a.Consumer=a};exports.createElement=M;exports.createFactory=function(a){var b=M.bind(null,a);b.type=a;return b};exports.createRef=function(){return{current:null}};exports.forwardRef=function(a){return{$$typeof:x,render:a}};exports.isValidElement=O;
exports.lazy=function(a){return{$$typeof:A,_ctor:a,_status:-1,_result:null}};exports.memo=function(a,b){return{$$typeof:z,type:a,compare:void 0===b?null:b}};exports.useCallback=function(a,b){return Z().useCallback(a,b)};exports.useContext=function(a,b){return Z().useContext(a,b)};exports.useDebugValue=function(){};exports.useEffect=function(a,b){return Z().useEffect(a,b)};exports.useImperativeHandle=function(a,b,c){return Z().useImperativeHandle(a,b,c)};
exports.useLayoutEffect=function(a,b){return Z().useLayoutEffect(a,b)};exports.useMemo=function(a,b){return Z().useMemo(a,b)};exports.useReducer=function(a,b,c){return Z().useReducer(a,b,c)};exports.useRef=function(a){return Z().useRef(a)};exports.useState=function(a){return Z().useState(a)};exports.version="16.14.0";


/***/ }),
/* 80 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.14.0
 * react.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var _assign = __webpack_require__(12);
var checkPropTypes = __webpack_require__(24);

var ReactVersion = '16.14.0';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

/**
 * Keeps track of the current dispatcher.
 */
var ReactCurrentDispatcher = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

/**
 * Keeps track of the current batch's configuration such as how long an update
 * should suspend for if it needs to.
 */
var ReactCurrentBatchConfig = {
  suspense: null
};

/**
 * Keeps track of the current owner.
 *
 * The current owner is the component who should own any components that are
 * currently being constructed.
 */
var ReactCurrentOwner = {
  /**
   * @internal
   * @type {ReactComponent}
   */
  current: null
};

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

var Resolved = 1;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame = {};
var currentlyValidatingElement = null;
function setCurrentlyValidatingElement(element) {
  {
    currentlyValidatingElement = element;
  }
}

{
  // Stack implementation injected by the current renderer.
  ReactDebugCurrentFrame.getCurrentStack = null;

  ReactDebugCurrentFrame.getStackAddendum = function () {
    var stack = ''; // Add an extra top frame while an element is being validated

    if (currentlyValidatingElement) {
      var name = getComponentName(currentlyValidatingElement.type);
      var owner = currentlyValidatingElement._owner;
      stack += describeComponentFrame(name, currentlyValidatingElement._source, owner && getComponentName(owner.type));
    } // Delegate to the injected renderer-specific implementation


    var impl = ReactDebugCurrentFrame.getCurrentStack;

    if (impl) {
      stack += impl() || '';
    }

    return stack;
  };
}

/**
 * Used by act() to track whether you're inside an act() scope.
 */
var IsSomeRendererActing = {
  current: false
};

var ReactSharedInternals = {
  ReactCurrentDispatcher: ReactCurrentDispatcher,
  ReactCurrentBatchConfig: ReactCurrentBatchConfig,
  ReactCurrentOwner: ReactCurrentOwner,
  IsSomeRendererActing: IsSomeRendererActing,
  // Used by renderers to avoid bundling object-assign twice in UMD bundles:
  assign: _assign
};

{
  _assign(ReactSharedInternals, {
    // These should not be included in production.
    ReactDebugCurrentFrame: ReactDebugCurrentFrame,
    // Shim for React DOM 16.0.0 which still destructured (but not used) this.
    // TODO: remove in React 17.0.
    ReactComponentTreeHook: {}
  });
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

var didWarnStateUpdateForUnmountedComponent = {};

function warnNoop(publicInstance, callerName) {
  {
    var _constructor = publicInstance.constructor;
    var componentName = _constructor && (_constructor.displayName || _constructor.name) || 'ReactClass';
    var warningKey = componentName + "." + callerName;

    if (didWarnStateUpdateForUnmountedComponent[warningKey]) {
      return;
    }

    error("Can't call %s on a component that is not yet mounted. " + 'This is a no-op, but it might indicate a bug in your application. ' + 'Instead, assign to `this.state` directly or define a `state = {};` ' + 'class property with the desired state in the %s component.', callerName, componentName);

    didWarnStateUpdateForUnmountedComponent[warningKey] = true;
  }
}
/**
 * This is the abstract API for an update queue.
 */


var ReactNoopUpdateQueue = {
  /**
   * Checks whether or not this composite component is mounted.
   * @param {ReactClass} publicInstance The instance we want to test.
   * @return {boolean} True if mounted, false otherwise.
   * @protected
   * @final
   */
  isMounted: function (publicInstance) {
    return false;
  },

  /**
   * Forces an update. This should only be invoked when it is known with
   * certainty that we are **not** in a DOM transaction.
   *
   * You may want to call this when you know that some deeper aspect of the
   * component's state has changed but `setState` was not called.
   *
   * This will not invoke `shouldComponentUpdate`, but it will invoke
   * `componentWillUpdate` and `componentDidUpdate`.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueForceUpdate: function (publicInstance, callback, callerName) {
    warnNoop(publicInstance, 'forceUpdate');
  },

  /**
   * Replaces all of the state. Always use this or `setState` to mutate state.
   * You should treat `this.state` as immutable.
   *
   * There is no guarantee that `this.state` will be immediately updated, so
   * accessing `this.state` after calling this method may return the old value.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} completeState Next state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} callerName name of the calling function in the public API.
   * @internal
   */
  enqueueReplaceState: function (publicInstance, completeState, callback, callerName) {
    warnNoop(publicInstance, 'replaceState');
  },

  /**
   * Sets a subset of the state. This only exists because _pendingState is
   * internal. This provides a merging strategy that is not available to deep
   * properties which is confusing. TODO: Expose pendingState or don't use it
   * during the merge.
   *
   * @param {ReactClass} publicInstance The instance that should rerender.
   * @param {object} partialState Next partial state to be merged with state.
   * @param {?function} callback Called after component is updated.
   * @param {?string} Name of the calling function in the public API.
   * @internal
   */
  enqueueSetState: function (publicInstance, partialState, callback, callerName) {
    warnNoop(publicInstance, 'setState');
  }
};

var emptyObject = {};

{
  Object.freeze(emptyObject);
}
/**
 * Base class helpers for the updating state of a component.
 */


function Component(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject; // We initialize the default updater but the real one gets injected by the
  // renderer.

  this.updater = updater || ReactNoopUpdateQueue;
}

Component.prototype.isReactComponent = {};
/**
 * Sets a subset of the state. Always use this to mutate
 * state. You should treat `this.state` as immutable.
 *
 * There is no guarantee that `this.state` will be immediately updated, so
 * accessing `this.state` after calling this method may return the old value.
 *
 * There is no guarantee that calls to `setState` will run synchronously,
 * as they may eventually be batched together.  You can provide an optional
 * callback that will be executed when the call to setState is actually
 * completed.
 *
 * When a function is provided to setState, it will be called at some point in
 * the future (not synchronously). It will be called with the up to date
 * component arguments (state, props, context). These values can be different
 * from this.* because your function may be called after receiveProps but before
 * shouldComponentUpdate, and this new state, props, and context will not yet be
 * assigned to this.
 *
 * @param {object|function} partialState Next partial state or function to
 *        produce next partial state to be merged with current state.
 * @param {?function} callback Called after state is updated.
 * @final
 * @protected
 */

Component.prototype.setState = function (partialState, callback) {
  if (!(typeof partialState === 'object' || typeof partialState === 'function' || partialState == null)) {
    {
      throw Error( "setState(...): takes an object of state variables to update or a function which returns an object of state variables." );
    }
  }

  this.updater.enqueueSetState(this, partialState, callback, 'setState');
};
/**
 * Forces an update. This should only be invoked when it is known with
 * certainty that we are **not** in a DOM transaction.
 *
 * You may want to call this when you know that some deeper aspect of the
 * component's state has changed but `setState` was not called.
 *
 * This will not invoke `shouldComponentUpdate`, but it will invoke
 * `componentWillUpdate` and `componentDidUpdate`.
 *
 * @param {?function} callback Called after update is complete.
 * @final
 * @protected
 */


Component.prototype.forceUpdate = function (callback) {
  this.updater.enqueueForceUpdate(this, callback, 'forceUpdate');
};
/**
 * Deprecated APIs. These APIs used to exist on classic React classes but since
 * we would like to deprecate them, we're not going to move them over to this
 * modern base class. Instead, we define a getter that warns if it's accessed.
 */


{
  var deprecatedAPIs = {
    isMounted: ['isMounted', 'Instead, make sure to clean up subscriptions and pending requests in ' + 'componentWillUnmount to prevent memory leaks.'],
    replaceState: ['replaceState', 'Refactor your code to use setState instead (see ' + 'https://github.com/facebook/react/issues/3236).']
  };

  var defineDeprecationWarning = function (methodName, info) {
    Object.defineProperty(Component.prototype, methodName, {
      get: function () {
        warn('%s(...) is deprecated in plain JavaScript React classes. %s', info[0], info[1]);

        return undefined;
      }
    });
  };

  for (var fnName in deprecatedAPIs) {
    if (deprecatedAPIs.hasOwnProperty(fnName)) {
      defineDeprecationWarning(fnName, deprecatedAPIs[fnName]);
    }
  }
}

function ComponentDummy() {}

ComponentDummy.prototype = Component.prototype;
/**
 * Convenience component with default shallow equality check for sCU.
 */

function PureComponent(props, context, updater) {
  this.props = props;
  this.context = context; // If a component has string refs, we will assign a different object later.

  this.refs = emptyObject;
  this.updater = updater || ReactNoopUpdateQueue;
}

var pureComponentPrototype = PureComponent.prototype = new ComponentDummy();
pureComponentPrototype.constructor = PureComponent; // Avoid an extra prototype jump for these methods.

_assign(pureComponentPrototype, Component.prototype);

pureComponentPrototype.isPureReactComponent = true;

// an immutable object with a single mutable value
function createRef() {
  var refObject = {
    current: null
  };

  {
    Object.seal(refObject);
  }

  return refObject;
}

var hasOwnProperty = Object.prototype.hasOwnProperty;
var RESERVED_PROPS = {
  key: true,
  ref: true,
  __self: true,
  __source: true
};
var specialPropKeyWarningShown, specialPropRefWarningShown, didWarnAboutStringRefs;

{
  didWarnAboutStringRefs = {};
}

function hasValidRef(config) {
  {
    if (hasOwnProperty.call(config, 'ref')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'ref').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.ref !== undefined;
}

function hasValidKey(config) {
  {
    if (hasOwnProperty.call(config, 'key')) {
      var getter = Object.getOwnPropertyDescriptor(config, 'key').get;

      if (getter && getter.isReactWarning) {
        return false;
      }
    }
  }

  return config.key !== undefined;
}

function defineKeyPropWarningGetter(props, displayName) {
  var warnAboutAccessingKey = function () {
    {
      if (!specialPropKeyWarningShown) {
        specialPropKeyWarningShown = true;

        error('%s: `key` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingKey.isReactWarning = true;
  Object.defineProperty(props, 'key', {
    get: warnAboutAccessingKey,
    configurable: true
  });
}

function defineRefPropWarningGetter(props, displayName) {
  var warnAboutAccessingRef = function () {
    {
      if (!specialPropRefWarningShown) {
        specialPropRefWarningShown = true;

        error('%s: `ref` is not a prop. Trying to access it will result ' + 'in `undefined` being returned. If you need to access the same ' + 'value within the child component, you should pass it as a different ' + 'prop. (https://fb.me/react-special-props)', displayName);
      }
    }
  };

  warnAboutAccessingRef.isReactWarning = true;
  Object.defineProperty(props, 'ref', {
    get: warnAboutAccessingRef,
    configurable: true
  });
}

function warnIfStringRefCannotBeAutoConverted(config) {
  {
    if (typeof config.ref === 'string' && ReactCurrentOwner.current && config.__self && ReactCurrentOwner.current.stateNode !== config.__self) {
      var componentName = getComponentName(ReactCurrentOwner.current.type);

      if (!didWarnAboutStringRefs[componentName]) {
        error('Component "%s" contains the string ref "%s". ' + 'Support for string refs will be removed in a future major release. ' + 'This case cannot be automatically converted to an arrow function. ' + 'We ask you to manually fix this case by using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref', getComponentName(ReactCurrentOwner.current.type), config.ref);

        didWarnAboutStringRefs[componentName] = true;
      }
    }
  }
}
/**
 * Factory method to create a new React element. This no longer adheres to
 * the class pattern, so do not use new to call it. Also, instanceof check
 * will not work. Instead test $$typeof field against Symbol.for('react.element') to check
 * if something is a React Element.
 *
 * @param {*} type
 * @param {*} props
 * @param {*} key
 * @param {string|object} ref
 * @param {*} owner
 * @param {*} self A *temporary* helper to detect places where `this` is
 * different from the `owner` when React.createElement is called, so that we
 * can warn. We want to get rid of owner and replace string `ref`s with arrow
 * functions, and as long as `this` and owner are the same, there will be no
 * change in behavior.
 * @param {*} source An annotation object (added by a transpiler or otherwise)
 * indicating filename, line number, and/or other information.
 * @internal
 */


var ReactElement = function (type, key, ref, self, source, owner, props) {
  var element = {
    // This tag allows us to uniquely identify this as a React Element
    $$typeof: REACT_ELEMENT_TYPE,
    // Built-in properties that belong on the element
    type: type,
    key: key,
    ref: ref,
    props: props,
    // Record the component responsible for creating this element.
    _owner: owner
  };

  {
    // The validation flag is currently mutative. We put it on
    // an external backing store so that we can freeze the whole object.
    // This can be replaced with a WeakMap once they are implemented in
    // commonly used development environments.
    element._store = {}; // To make comparing ReactElements easier for testing purposes, we make
    // the validation flag non-enumerable (where possible, which should
    // include every environment we run tests in), so the test framework
    // ignores it.

    Object.defineProperty(element._store, 'validated', {
      configurable: false,
      enumerable: false,
      writable: true,
      value: false
    }); // self and source are DEV only properties.

    Object.defineProperty(element, '_self', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: self
    }); // Two elements created in two different places should be considered
    // equal for testing purposes and therefore we hide it from enumeration.

    Object.defineProperty(element, '_source', {
      configurable: false,
      enumerable: false,
      writable: false,
      value: source
    });

    if (Object.freeze) {
      Object.freeze(element.props);
      Object.freeze(element);
    }
  }

  return element;
};
/**
 * Create and return a new ReactElement of the given type.
 * See https://reactjs.org/docs/react-api.html#createelement
 */

function createElement(type, config, children) {
  var propName; // Reserved names are extracted

  var props = {};
  var key = null;
  var ref = null;
  var self = null;
  var source = null;

  if (config != null) {
    if (hasValidRef(config)) {
      ref = config.ref;

      {
        warnIfStringRefCannotBeAutoConverted(config);
      }
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    }

    self = config.__self === undefined ? null : config.__self;
    source = config.__source === undefined ? null : config.__source; // Remaining properties are added to a new props object

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        props[propName] = config[propName];
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    {
      if (Object.freeze) {
        Object.freeze(childArray);
      }
    }

    props.children = childArray;
  } // Resolve default props


  if (type && type.defaultProps) {
    var defaultProps = type.defaultProps;

    for (propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }
  }

  {
    if (key || ref) {
      var displayName = typeof type === 'function' ? type.displayName || type.name || 'Unknown' : type;

      if (key) {
        defineKeyPropWarningGetter(props, displayName);
      }

      if (ref) {
        defineRefPropWarningGetter(props, displayName);
      }
    }
  }

  return ReactElement(type, key, ref, self, source, ReactCurrentOwner.current, props);
}
function cloneAndReplaceKey(oldElement, newKey) {
  var newElement = ReactElement(oldElement.type, newKey, oldElement.ref, oldElement._self, oldElement._source, oldElement._owner, oldElement.props);
  return newElement;
}
/**
 * Clone and return a new ReactElement using element as the starting point.
 * See https://reactjs.org/docs/react-api.html#cloneelement
 */

function cloneElement(element, config, children) {
  if (!!(element === null || element === undefined)) {
    {
      throw Error( "React.cloneElement(...): The argument must be a React element, but you passed " + element + "." );
    }
  }

  var propName; // Original props are copied

  var props = _assign({}, element.props); // Reserved names are extracted


  var key = element.key;
  var ref = element.ref; // Self is preserved since the owner is preserved.

  var self = element._self; // Source is preserved since cloneElement is unlikely to be targeted by a
  // transpiler, and the original source is probably a better indicator of the
  // true owner.

  var source = element._source; // Owner will be preserved, unless ref is overridden

  var owner = element._owner;

  if (config != null) {
    if (hasValidRef(config)) {
      // Silently steal the ref from the parent.
      ref = config.ref;
      owner = ReactCurrentOwner.current;
    }

    if (hasValidKey(config)) {
      key = '' + config.key;
    } // Remaining properties override existing props


    var defaultProps;

    if (element.type && element.type.defaultProps) {
      defaultProps = element.type.defaultProps;
    }

    for (propName in config) {
      if (hasOwnProperty.call(config, propName) && !RESERVED_PROPS.hasOwnProperty(propName)) {
        if (config[propName] === undefined && defaultProps !== undefined) {
          // Resolve default props
          props[propName] = defaultProps[propName];
        } else {
          props[propName] = config[propName];
        }
      }
    }
  } // Children can be more than one argument, and those are transferred onto
  // the newly allocated props object.


  var childrenLength = arguments.length - 2;

  if (childrenLength === 1) {
    props.children = children;
  } else if (childrenLength > 1) {
    var childArray = Array(childrenLength);

    for (var i = 0; i < childrenLength; i++) {
      childArray[i] = arguments[i + 2];
    }

    props.children = childArray;
  }

  return ReactElement(element.type, key, ref, self, source, owner, props);
}
/**
 * Verifies the object is a ReactElement.
 * See https://reactjs.org/docs/react-api.html#isvalidelement
 * @param {?object} object
 * @return {boolean} True if `object` is a ReactElement.
 * @final
 */

function isValidElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}

var SEPARATOR = '.';
var SUBSEPARATOR = ':';
/**
 * Escape and wrap key so it is safe to use as a reactid
 *
 * @param {string} key to be escaped.
 * @return {string} the escaped key.
 */

function escape(key) {
  var escapeRegex = /[=:]/g;
  var escaperLookup = {
    '=': '=0',
    ':': '=2'
  };
  var escapedString = ('' + key).replace(escapeRegex, function (match) {
    return escaperLookup[match];
  });
  return '$' + escapedString;
}
/**
 * TODO: Test that a single child and an array with one item have the same key
 * pattern.
 */


var didWarnAboutMaps = false;
var userProvidedKeyEscapeRegex = /\/+/g;

function escapeUserProvidedKey(text) {
  return ('' + text).replace(userProvidedKeyEscapeRegex, '$&/');
}

var POOL_SIZE = 10;
var traverseContextPool = [];

function getPooledTraverseContext(mapResult, keyPrefix, mapFunction, mapContext) {
  if (traverseContextPool.length) {
    var traverseContext = traverseContextPool.pop();
    traverseContext.result = mapResult;
    traverseContext.keyPrefix = keyPrefix;
    traverseContext.func = mapFunction;
    traverseContext.context = mapContext;
    traverseContext.count = 0;
    return traverseContext;
  } else {
    return {
      result: mapResult,
      keyPrefix: keyPrefix,
      func: mapFunction,
      context: mapContext,
      count: 0
    };
  }
}

function releaseTraverseContext(traverseContext) {
  traverseContext.result = null;
  traverseContext.keyPrefix = null;
  traverseContext.func = null;
  traverseContext.context = null;
  traverseContext.count = 0;

  if (traverseContextPool.length < POOL_SIZE) {
    traverseContextPool.push(traverseContext);
  }
}
/**
 * @param {?*} children Children tree container.
 * @param {!string} nameSoFar Name of the key path so far.
 * @param {!function} callback Callback to invoke with each child found.
 * @param {?*} traverseContext Used to pass information throughout the traversal
 * process.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildrenImpl(children, nameSoFar, callback, traverseContext) {
  var type = typeof children;

  if (type === 'undefined' || type === 'boolean') {
    // All of the above are perceived as null.
    children = null;
  }

  var invokeCallback = false;

  if (children === null) {
    invokeCallback = true;
  } else {
    switch (type) {
      case 'string':
      case 'number':
        invokeCallback = true;
        break;

      case 'object':
        switch (children.$$typeof) {
          case REACT_ELEMENT_TYPE:
          case REACT_PORTAL_TYPE:
            invokeCallback = true;
        }

    }
  }

  if (invokeCallback) {
    callback(traverseContext, children, // If it's the only child, treat the name as if it was wrapped in an array
    // so that it's consistent if the number of children grows.
    nameSoFar === '' ? SEPARATOR + getComponentKey(children, 0) : nameSoFar);
    return 1;
  }

  var child;
  var nextName;
  var subtreeCount = 0; // Count of children found in the current subtree.

  var nextNamePrefix = nameSoFar === '' ? SEPARATOR : nameSoFar + SUBSEPARATOR;

  if (Array.isArray(children)) {
    for (var i = 0; i < children.length; i++) {
      child = children[i];
      nextName = nextNamePrefix + getComponentKey(child, i);
      subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
    }
  } else {
    var iteratorFn = getIteratorFn(children);

    if (typeof iteratorFn === 'function') {

      {
        // Warn about using Maps as children
        if (iteratorFn === children.entries) {
          if (!didWarnAboutMaps) {
            warn('Using Maps as children is deprecated and will be removed in ' + 'a future major release. Consider converting children to ' + 'an array of keyed ReactElements instead.');
          }

          didWarnAboutMaps = true;
        }
      }

      var iterator = iteratorFn.call(children);
      var step;
      var ii = 0;

      while (!(step = iterator.next()).done) {
        child = step.value;
        nextName = nextNamePrefix + getComponentKey(child, ii++);
        subtreeCount += traverseAllChildrenImpl(child, nextName, callback, traverseContext);
      }
    } else if (type === 'object') {
      var addendum = '';

      {
        addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + ReactDebugCurrentFrame.getStackAddendum();
      }

      var childrenString = '' + children;

      {
        {
          throw Error( "Objects are not valid as a React child (found: " + (childrenString === '[object Object]' ? 'object with keys {' + Object.keys(children).join(', ') + '}' : childrenString) + ")." + addendum );
        }
      }
    }
  }

  return subtreeCount;
}
/**
 * Traverses children that are typically specified as `props.children`, but
 * might also be specified through attributes:
 *
 * - `traverseAllChildren(this.props.children, ...)`
 * - `traverseAllChildren(this.props.leftPanelChildren, ...)`
 *
 * The `traverseContext` is an optional argument that is passed through the
 * entire traversal. It can be used to store accumulations or anything else that
 * the callback might find relevant.
 *
 * @param {?*} children Children tree object.
 * @param {!function} callback To invoke upon traversing each child.
 * @param {?*} traverseContext Context for traversal.
 * @return {!number} The number of children in this subtree.
 */


function traverseAllChildren(children, callback, traverseContext) {
  if (children == null) {
    return 0;
  }

  return traverseAllChildrenImpl(children, '', callback, traverseContext);
}
/**
 * Generate a key string that identifies a component within a set.
 *
 * @param {*} component A component that could contain a manual key.
 * @param {number} index Index that is used if a manual key is not provided.
 * @return {string}
 */


function getComponentKey(component, index) {
  // Do some typechecking here since we call this blindly. We want to ensure
  // that we don't block potential future ES APIs.
  if (typeof component === 'object' && component !== null && component.key != null) {
    // Explicit key
    return escape(component.key);
  } // Implicit key determined by the index in the set


  return index.toString(36);
}

function forEachSingleChild(bookKeeping, child, name) {
  var func = bookKeeping.func,
      context = bookKeeping.context;
  func.call(context, child, bookKeeping.count++);
}
/**
 * Iterates through children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenforeach
 *
 * The provided forEachFunc(child, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} forEachFunc
 * @param {*} forEachContext Context for forEachContext.
 */


function forEachChildren(children, forEachFunc, forEachContext) {
  if (children == null) {
    return children;
  }

  var traverseContext = getPooledTraverseContext(null, null, forEachFunc, forEachContext);
  traverseAllChildren(children, forEachSingleChild, traverseContext);
  releaseTraverseContext(traverseContext);
}

function mapSingleChildIntoContext(bookKeeping, child, childKey) {
  var result = bookKeeping.result,
      keyPrefix = bookKeeping.keyPrefix,
      func = bookKeeping.func,
      context = bookKeeping.context;
  var mappedChild = func.call(context, child, bookKeeping.count++);

  if (Array.isArray(mappedChild)) {
    mapIntoWithKeyPrefixInternal(mappedChild, result, childKey, function (c) {
      return c;
    });
  } else if (mappedChild != null) {
    if (isValidElement(mappedChild)) {
      mappedChild = cloneAndReplaceKey(mappedChild, // Keep both the (mapped) and old keys if they differ, just as
      // traverseAllChildren used to do for objects as children
      keyPrefix + (mappedChild.key && (!child || child.key !== mappedChild.key) ? escapeUserProvidedKey(mappedChild.key) + '/' : '') + childKey);
    }

    result.push(mappedChild);
  }
}

function mapIntoWithKeyPrefixInternal(children, array, prefix, func, context) {
  var escapedPrefix = '';

  if (prefix != null) {
    escapedPrefix = escapeUserProvidedKey(prefix) + '/';
  }

  var traverseContext = getPooledTraverseContext(array, escapedPrefix, func, context);
  traverseAllChildren(children, mapSingleChildIntoContext, traverseContext);
  releaseTraverseContext(traverseContext);
}
/**
 * Maps children that are typically specified as `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenmap
 *
 * The provided mapFunction(child, key, index) will be called for each
 * leaf child.
 *
 * @param {?*} children Children tree container.
 * @param {function(*, int)} func The map function.
 * @param {*} context Context for mapFunction.
 * @return {object} Object containing the ordered map of results.
 */


function mapChildren(children, func, context) {
  if (children == null) {
    return children;
  }

  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, func, context);
  return result;
}
/**
 * Count the number of children that are typically specified as
 * `props.children`.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrencount
 *
 * @param {?*} children Children tree container.
 * @return {number} The number of children.
 */


function countChildren(children) {
  return traverseAllChildren(children, function () {
    return null;
  }, null);
}
/**
 * Flatten a children object (typically specified as `props.children`) and
 * return an array with appropriately re-keyed children.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrentoarray
 */


function toArray(children) {
  var result = [];
  mapIntoWithKeyPrefixInternal(children, result, null, function (child) {
    return child;
  });
  return result;
}
/**
 * Returns the first child in a collection of children and verifies that there
 * is only one child in the collection.
 *
 * See https://reactjs.org/docs/react-api.html#reactchildrenonly
 *
 * The current implementation of this function assumes that a single child gets
 * passed without a wrapper, but the purpose of this helper function is to
 * abstract away the particular structure of children.
 *
 * @param {?object} children Child collection structure.
 * @return {ReactElement} The first and only `ReactElement` contained in the
 * structure.
 */


function onlyChild(children) {
  if (!isValidElement(children)) {
    {
      throw Error( "React.Children.only expected to receive a single React element child." );
    }
  }

  return children;
}

function createContext(defaultValue, calculateChangedBits) {
  if (calculateChangedBits === undefined) {
    calculateChangedBits = null;
  } else {
    {
      if (calculateChangedBits !== null && typeof calculateChangedBits !== 'function') {
        error('createContext: Expected the optional second argument to be a ' + 'function. Instead received: %s', calculateChangedBits);
      }
    }
  }

  var context = {
    $$typeof: REACT_CONTEXT_TYPE,
    _calculateChangedBits: calculateChangedBits,
    // As a workaround to support multiple concurrent renderers, we categorize
    // some renderers as primary and others as secondary. We only expect
    // there to be two concurrent renderers at most: React Native (primary) and
    // Fabric (secondary); React DOM (primary) and React ART (secondary).
    // Secondary renderers store their context values on separate fields.
    _currentValue: defaultValue,
    _currentValue2: defaultValue,
    // Used to track how many concurrent renderers this context currently
    // supports within in a single renderer. Such as parallel server rendering.
    _threadCount: 0,
    // These are circular
    Provider: null,
    Consumer: null
  };
  context.Provider = {
    $$typeof: REACT_PROVIDER_TYPE,
    _context: context
  };
  var hasWarnedAboutUsingNestedContextConsumers = false;
  var hasWarnedAboutUsingConsumerProvider = false;

  {
    // A separate object, but proxies back to the original context object for
    // backwards compatibility. It has a different $$typeof, so we can properly
    // warn for the incorrect usage of Context as a Consumer.
    var Consumer = {
      $$typeof: REACT_CONTEXT_TYPE,
      _context: context,
      _calculateChangedBits: context._calculateChangedBits
    }; // $FlowFixMe: Flow complains about not setting a value, which is intentional here

    Object.defineProperties(Consumer, {
      Provider: {
        get: function () {
          if (!hasWarnedAboutUsingConsumerProvider) {
            hasWarnedAboutUsingConsumerProvider = true;

            error('Rendering <Context.Consumer.Provider> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Provider> instead?');
          }

          return context.Provider;
        },
        set: function (_Provider) {
          context.Provider = _Provider;
        }
      },
      _currentValue: {
        get: function () {
          return context._currentValue;
        },
        set: function (_currentValue) {
          context._currentValue = _currentValue;
        }
      },
      _currentValue2: {
        get: function () {
          return context._currentValue2;
        },
        set: function (_currentValue2) {
          context._currentValue2 = _currentValue2;
        }
      },
      _threadCount: {
        get: function () {
          return context._threadCount;
        },
        set: function (_threadCount) {
          context._threadCount = _threadCount;
        }
      },
      Consumer: {
        get: function () {
          if (!hasWarnedAboutUsingNestedContextConsumers) {
            hasWarnedAboutUsingNestedContextConsumers = true;

            error('Rendering <Context.Consumer.Consumer> is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
          }

          return context.Consumer;
        }
      }
    }); // $FlowFixMe: Flow complains about missing properties because it doesn't understand defineProperty

    context.Consumer = Consumer;
  }

  {
    context._currentRenderer = null;
    context._currentRenderer2 = null;
  }

  return context;
}

function lazy(ctor) {
  var lazyType = {
    $$typeof: REACT_LAZY_TYPE,
    _ctor: ctor,
    // React uses these fields to store the result.
    _status: -1,
    _result: null
  };

  {
    // In production, this would just set it on the object.
    var defaultProps;
    var propTypes;
    Object.defineProperties(lazyType, {
      defaultProps: {
        configurable: true,
        get: function () {
          return defaultProps;
        },
        set: function (newDefaultProps) {
          error('React.lazy(...): It is not supported to assign `defaultProps` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          defaultProps = newDefaultProps; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'defaultProps', {
            enumerable: true
          });
        }
      },
      propTypes: {
        configurable: true,
        get: function () {
          return propTypes;
        },
        set: function (newPropTypes) {
          error('React.lazy(...): It is not supported to assign `propTypes` to ' + 'a lazy component import. Either specify them where the component ' + 'is defined, or create a wrapping component around it.');

          propTypes = newPropTypes; // Match production behavior more closely:

          Object.defineProperty(lazyType, 'propTypes', {
            enumerable: true
          });
        }
      }
    });
  }

  return lazyType;
}

function forwardRef(render) {
  {
    if (render != null && render.$$typeof === REACT_MEMO_TYPE) {
      error('forwardRef requires a render function but received a `memo` ' + 'component. Instead of forwardRef(memo(...)), use ' + 'memo(forwardRef(...)).');
    } else if (typeof render !== 'function') {
      error('forwardRef requires a render function but was given %s.', render === null ? 'null' : typeof render);
    } else {
      if (render.length !== 0 && render.length !== 2) {
        error('forwardRef render functions accept exactly two parameters: props and ref. %s', render.length === 1 ? 'Did you forget to use the ref parameter?' : 'Any additional parameter will be undefined.');
      }
    }

    if (render != null) {
      if (render.defaultProps != null || render.propTypes != null) {
        error('forwardRef render functions do not support propTypes or defaultProps. ' + 'Did you accidentally pass a React component?');
      }
    }
  }

  return {
    $$typeof: REACT_FORWARD_REF_TYPE,
    render: render
  };
}

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function memo(type, compare) {
  {
    if (!isValidElementType(type)) {
      error('memo: The first argument must be a component. Instead ' + 'received: %s', type === null ? 'null' : typeof type);
    }
  }

  return {
    $$typeof: REACT_MEMO_TYPE,
    type: type,
    compare: compare === undefined ? null : compare
  };
}

function resolveDispatcher() {
  var dispatcher = ReactCurrentDispatcher.current;

  if (!(dispatcher !== null)) {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }

  return dispatcher;
}

function useContext(Context, unstable_observedBits) {
  var dispatcher = resolveDispatcher();

  {
    if (unstable_observedBits !== undefined) {
      error('useContext() second argument is reserved for future ' + 'use in React. Passing it is not supported. ' + 'You passed: %s.%s', unstable_observedBits, typeof unstable_observedBits === 'number' && Array.isArray(arguments[2]) ? '\n\nDid you call array.map(useContext)? ' + 'Calling Hooks inside a loop is not supported. ' + 'Learn more at https://fb.me/rules-of-hooks' : '');
    } // TODO: add a more generic warning for invalid values.


    if (Context._context !== undefined) {
      var realContext = Context._context; // Don't deduplicate because this legitimately causes bugs
      // and nobody should be using this in existing code.

      if (realContext.Consumer === Context) {
        error('Calling useContext(Context.Consumer) is not supported, may cause bugs, and will be ' + 'removed in a future major release. Did you mean to call useContext(Context) instead?');
      } else if (realContext.Provider === Context) {
        error('Calling useContext(Context.Provider) is not supported. ' + 'Did you mean to call useContext(Context) instead?');
      }
    }
  }

  return dispatcher.useContext(Context, unstable_observedBits);
}
function useState(initialState) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useState(initialState);
}
function useReducer(reducer, initialArg, init) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useReducer(reducer, initialArg, init);
}
function useRef(initialValue) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useRef(initialValue);
}
function useEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useEffect(create, deps);
}
function useLayoutEffect(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useLayoutEffect(create, deps);
}
function useCallback(callback, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useCallback(callback, deps);
}
function useMemo(create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useMemo(create, deps);
}
function useImperativeHandle(ref, create, deps) {
  var dispatcher = resolveDispatcher();
  return dispatcher.useImperativeHandle(ref, create, deps);
}
function useDebugValue(value, formatterFn) {
  {
    var dispatcher = resolveDispatcher();
    return dispatcher.useDebugValue(value, formatterFn);
  }
}

var propTypesMisspellWarningShown;

{
  propTypesMisspellWarningShown = false;
}

function getDeclarationErrorAddendum() {
  if (ReactCurrentOwner.current) {
    var name = getComponentName(ReactCurrentOwner.current.type);

    if (name) {
      return '\n\nCheck the render method of `' + name + '`.';
    }
  }

  return '';
}

function getSourceInfoErrorAddendum(source) {
  if (source !== undefined) {
    var fileName = source.fileName.replace(/^.*[\\\/]/, '');
    var lineNumber = source.lineNumber;
    return '\n\nCheck your code at ' + fileName + ':' + lineNumber + '.';
  }

  return '';
}

function getSourceInfoErrorAddendumForProps(elementProps) {
  if (elementProps !== null && elementProps !== undefined) {
    return getSourceInfoErrorAddendum(elementProps.__source);
  }

  return '';
}
/**
 * Warn if there's no key explicitly set on dynamic arrays of children or
 * object keys are not valid. This allows us to keep track of children between
 * updates.
 */


var ownerHasKeyUseWarning = {};

function getCurrentComponentErrorInfo(parentType) {
  var info = getDeclarationErrorAddendum();

  if (!info) {
    var parentName = typeof parentType === 'string' ? parentType : parentType.displayName || parentType.name;

    if (parentName) {
      info = "\n\nCheck the top-level render call using <" + parentName + ">.";
    }
  }

  return info;
}
/**
 * Warn if the element doesn't have an explicit key assigned to it.
 * This element is in an array. The array could grow and shrink or be
 * reordered. All children that haven't already been validated are required to
 * have a "key" property assigned to it. Error statuses are cached so a warning
 * will only be shown once.
 *
 * @internal
 * @param {ReactElement} element Element that requires a key.
 * @param {*} parentType element's parent's type.
 */


function validateExplicitKey(element, parentType) {
  if (!element._store || element._store.validated || element.key != null) {
    return;
  }

  element._store.validated = true;
  var currentComponentErrorInfo = getCurrentComponentErrorInfo(parentType);

  if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
    return;
  }

  ownerHasKeyUseWarning[currentComponentErrorInfo] = true; // Usually the current owner is the offender, but if it accepts children as a
  // property, it may be the creator of the child that's responsible for
  // assigning it a key.

  var childOwner = '';

  if (element && element._owner && element._owner !== ReactCurrentOwner.current) {
    // Give the component that originally created this child.
    childOwner = " It was passed a child from " + getComponentName(element._owner.type) + ".";
  }

  setCurrentlyValidatingElement(element);

  {
    error('Each child in a list should have a unique "key" prop.' + '%s%s See https://fb.me/react-warning-keys for more information.', currentComponentErrorInfo, childOwner);
  }

  setCurrentlyValidatingElement(null);
}
/**
 * Ensure that every element either is passed in a static location, in an
 * array with an explicit keys property defined, or in an object literal
 * with valid key property.
 *
 * @internal
 * @param {ReactNode} node Statically passed child of any type.
 * @param {*} parentType node's parent's type.
 */


function validateChildKeys(node, parentType) {
  if (typeof node !== 'object') {
    return;
  }

  if (Array.isArray(node)) {
    for (var i = 0; i < node.length; i++) {
      var child = node[i];

      if (isValidElement(child)) {
        validateExplicitKey(child, parentType);
      }
    }
  } else if (isValidElement(node)) {
    // This element was passed in a valid location.
    if (node._store) {
      node._store.validated = true;
    }
  } else if (node) {
    var iteratorFn = getIteratorFn(node);

    if (typeof iteratorFn === 'function') {
      // Entry iterators used to provide implicit keys,
      // but now we print a separate warning for them later.
      if (iteratorFn !== node.entries) {
        var iterator = iteratorFn.call(node);
        var step;

        while (!(step = iterator.next()).done) {
          if (isValidElement(step.value)) {
            validateExplicitKey(step.value, parentType);
          }
        }
      }
    }
  }
}
/**
 * Given an element, validate that its props follow the propTypes definition,
 * provided by the type.
 *
 * @param {ReactElement} element
 */


function validatePropTypes(element) {
  {
    var type = element.type;

    if (type === null || type === undefined || typeof type === 'string') {
      return;
    }

    var name = getComponentName(type);
    var propTypes;

    if (typeof type === 'function') {
      propTypes = type.propTypes;
    } else if (typeof type === 'object' && (type.$$typeof === REACT_FORWARD_REF_TYPE || // Note: Memo only checks outer props here.
    // Inner props are checked in the reconciler.
    type.$$typeof === REACT_MEMO_TYPE)) {
      propTypes = type.propTypes;
    } else {
      return;
    }

    if (propTypes) {
      setCurrentlyValidatingElement(element);
      checkPropTypes(propTypes, element.props, 'prop', name, ReactDebugCurrentFrame.getStackAddendum);
      setCurrentlyValidatingElement(null);
    } else if (type.PropTypes !== undefined && !propTypesMisspellWarningShown) {
      propTypesMisspellWarningShown = true;

      error('Component %s declared `PropTypes` instead of `propTypes`. Did you misspell the property assignment?', name || 'Unknown');
    }

    if (typeof type.getDefaultProps === 'function' && !type.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps is only used on classic React.createClass ' + 'definitions. Use a static property named `defaultProps` instead.');
    }
  }
}
/**
 * Given a fragment, validate that it can only be provided with fragment props
 * @param {ReactElement} fragment
 */


function validateFragmentProps(fragment) {
  {
    setCurrentlyValidatingElement(fragment);
    var keys = Object.keys(fragment.props);

    for (var i = 0; i < keys.length; i++) {
      var key = keys[i];

      if (key !== 'children' && key !== 'key') {
        error('Invalid prop `%s` supplied to `React.Fragment`. ' + 'React.Fragment can only have `key` and `children` props.', key);

        break;
      }
    }

    if (fragment.ref !== null) {
      error('Invalid attribute `ref` supplied to `React.Fragment`.');
    }

    setCurrentlyValidatingElement(null);
  }
}
function createElementWithValidation(type, props, children) {
  var validType = isValidElementType(type); // We warn in this case but don't throw. We expect the element creation to
  // succeed and there will likely be errors in render.

  if (!validType) {
    var info = '';

    if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
      info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and named imports.";
    }

    var sourceInfo = getSourceInfoErrorAddendumForProps(props);

    if (sourceInfo) {
      info += sourceInfo;
    } else {
      info += getDeclarationErrorAddendum();
    }

    var typeString;

    if (type === null) {
      typeString = 'null';
    } else if (Array.isArray(type)) {
      typeString = 'array';
    } else if (type !== undefined && type.$$typeof === REACT_ELEMENT_TYPE) {
      typeString = "<" + (getComponentName(type.type) || 'Unknown') + " />";
      info = ' Did you accidentally export a JSX literal instead of a component?';
    } else {
      typeString = typeof type;
    }

    {
      error('React.createElement: type is invalid -- expected a string (for ' + 'built-in components) or a class/function (for composite ' + 'components) but got: %s.%s', typeString, info);
    }
  }

  var element = createElement.apply(this, arguments); // The result can be nullish if a mock or a custom function is used.
  // TODO: Drop this when these are no longer allowed as the type argument.

  if (element == null) {
    return element;
  } // Skip key warning if the type isn't valid since our key validation logic
  // doesn't expect a non-string/function type and can throw confusing errors.
  // We don't want exception behavior to differ between dev and prod.
  // (Rendering will throw with a helpful message and as soon as the type is
  // fixed, the key warnings will appear.)


  if (validType) {
    for (var i = 2; i < arguments.length; i++) {
      validateChildKeys(arguments[i], type);
    }
  }

  if (type === REACT_FRAGMENT_TYPE) {
    validateFragmentProps(element);
  } else {
    validatePropTypes(element);
  }

  return element;
}
var didWarnAboutDeprecatedCreateFactory = false;
function createFactoryWithValidation(type) {
  var validatedFactory = createElementWithValidation.bind(null, type);
  validatedFactory.type = type;

  {
    if (!didWarnAboutDeprecatedCreateFactory) {
      didWarnAboutDeprecatedCreateFactory = true;

      warn('React.createFactory() is deprecated and will be removed in ' + 'a future major release. Consider using JSX ' + 'or use React.createElement() directly instead.');
    } // Legacy hook: remove it


    Object.defineProperty(validatedFactory, 'type', {
      enumerable: false,
      get: function () {
        warn('Factory.type is deprecated. Access the class directly ' + 'before passing it to createFactory.');

        Object.defineProperty(this, 'type', {
          value: type
        });
        return type;
      }
    });
  }

  return validatedFactory;
}
function cloneElementWithValidation(element, props, children) {
  var newElement = cloneElement.apply(this, arguments);

  for (var i = 2; i < arguments.length; i++) {
    validateChildKeys(arguments[i], newElement.type);
  }

  validatePropTypes(newElement);
  return newElement;
}

{

  try {
    var frozenObject = Object.freeze({});
    var testMap = new Map([[frozenObject, null]]);
    var testSet = new Set([frozenObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
  }
}

var createElement$1 =  createElementWithValidation ;
var cloneElement$1 =  cloneElementWithValidation ;
var createFactory =  createFactoryWithValidation ;
var Children = {
  map: mapChildren,
  forEach: forEachChildren,
  count: countChildren,
  toArray: toArray,
  only: onlyChild
};

exports.Children = Children;
exports.Component = Component;
exports.Fragment = REACT_FRAGMENT_TYPE;
exports.Profiler = REACT_PROFILER_TYPE;
exports.PureComponent = PureComponent;
exports.StrictMode = REACT_STRICT_MODE_TYPE;
exports.Suspense = REACT_SUSPENSE_TYPE;
exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = ReactSharedInternals;
exports.cloneElement = cloneElement$1;
exports.createContext = createContext;
exports.createElement = createElement$1;
exports.createFactory = createFactory;
exports.createRef = createRef;
exports.forwardRef = forwardRef;
exports.isValidElement = isValidElement;
exports.lazy = lazy;
exports.memo = memo;
exports.useCallback = useCallback;
exports.useContext = useContext;
exports.useDebugValue = useDebugValue;
exports.useEffect = useEffect;
exports.useImperativeHandle = useImperativeHandle;
exports.useLayoutEffect = useLayoutEffect;
exports.useMemo = useMemo;
exports.useReducer = useReducer;
exports.useRef = useRef;
exports.useState = useState;
exports.version = ReactVersion;
  })();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 81 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.14.0
 * react-dom.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

/*
 Modernizr 3.0.0pre (Custom Build) | MIT
*/
var aa=__webpack_require__(0),n=__webpack_require__(12),r=__webpack_require__(38);function u(a){for(var b="https://reactjs.org/docs/error-decoder.html?invariant="+a,c=1;c<arguments.length;c++)b+="&args[]="+encodeURIComponent(arguments[c]);return"Minified React error #"+a+"; visit "+b+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!aa)throw Error(u(227));
function ba(a,b,c,d,e,f,g,h,k){var l=Array.prototype.slice.call(arguments,3);try{b.apply(c,l)}catch(m){this.onError(m)}}var da=!1,ea=null,fa=!1,ha=null,ia={onError:function(a){da=!0;ea=a}};function ja(a,b,c,d,e,f,g,h,k){da=!1;ea=null;ba.apply(ia,arguments)}function ka(a,b,c,d,e,f,g,h,k){ja.apply(this,arguments);if(da){if(da){var l=ea;da=!1;ea=null}else throw Error(u(198));fa||(fa=!0,ha=l)}}var la=null,ma=null,na=null;
function oa(a,b,c){var d=a.type||"unknown-event";a.currentTarget=na(c);ka(d,b,void 0,a);a.currentTarget=null}var pa=null,qa={};
function ra(){if(pa)for(var a in qa){var b=qa[a],c=pa.indexOf(a);if(!(-1<c))throw Error(u(96,a));if(!sa[c]){if(!b.extractEvents)throw Error(u(97,a));sa[c]=b;c=b.eventTypes;for(var d in c){var e=void 0;var f=c[d],g=b,h=d;if(ta.hasOwnProperty(h))throw Error(u(99,h));ta[h]=f;var k=f.phasedRegistrationNames;if(k){for(e in k)k.hasOwnProperty(e)&&ua(k[e],g,h);e=!0}else f.registrationName?(ua(f.registrationName,g,h),e=!0):e=!1;if(!e)throw Error(u(98,d,a));}}}}
function ua(a,b,c){if(va[a])throw Error(u(100,a));va[a]=b;wa[a]=b.eventTypes[c].dependencies}var sa=[],ta={},va={},wa={};function xa(a){var b=!1,c;for(c in a)if(a.hasOwnProperty(c)){var d=a[c];if(!qa.hasOwnProperty(c)||qa[c]!==d){if(qa[c])throw Error(u(102,c));qa[c]=d;b=!0}}b&&ra()}var ya=!("undefined"===typeof window||"undefined"===typeof window.document||"undefined"===typeof window.document.createElement),za=null,Aa=null,Ba=null;
function Ca(a){if(a=ma(a)){if("function"!==typeof za)throw Error(u(280));var b=a.stateNode;b&&(b=la(b),za(a.stateNode,a.type,b))}}function Da(a){Aa?Ba?Ba.push(a):Ba=[a]:Aa=a}function Ea(){if(Aa){var a=Aa,b=Ba;Ba=Aa=null;Ca(a);if(b)for(a=0;a<b.length;a++)Ca(b[a])}}function Fa(a,b){return a(b)}function Ga(a,b,c,d,e){return a(b,c,d,e)}function Ha(){}var Ia=Fa,Ja=!1,Ka=!1;function La(){if(null!==Aa||null!==Ba)Ha(),Ea()}
function Ma(a,b,c){if(Ka)return a(b,c);Ka=!0;try{return Ia(a,b,c)}finally{Ka=!1,La()}}var Na=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,Oa=Object.prototype.hasOwnProperty,Pa={},Qa={};
function Ra(a){if(Oa.call(Qa,a))return!0;if(Oa.call(Pa,a))return!1;if(Na.test(a))return Qa[a]=!0;Pa[a]=!0;return!1}function Sa(a,b,c,d){if(null!==c&&0===c.type)return!1;switch(typeof b){case "function":case "symbol":return!0;case "boolean":if(d)return!1;if(null!==c)return!c.acceptsBooleans;a=a.toLowerCase().slice(0,5);return"data-"!==a&&"aria-"!==a;default:return!1}}
function Ta(a,b,c,d){if(null===b||"undefined"===typeof b||Sa(a,b,c,d))return!0;if(d)return!1;if(null!==c)switch(c.type){case 3:return!b;case 4:return!1===b;case 5:return isNaN(b);case 6:return isNaN(b)||1>b}return!1}function v(a,b,c,d,e,f){this.acceptsBooleans=2===b||3===b||4===b;this.attributeName=d;this.attributeNamespace=e;this.mustUseProperty=c;this.propertyName=a;this.type=b;this.sanitizeURL=f}var C={};
"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach(function(a){C[a]=new v(a,0,!1,a,null,!1)});[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach(function(a){var b=a[0];C[b]=new v(b,1,!1,a[1],null,!1)});["contentEditable","draggable","spellCheck","value"].forEach(function(a){C[a]=new v(a,2,!1,a.toLowerCase(),null,!1)});
["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach(function(a){C[a]=new v(a,2,!1,a,null,!1)});"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach(function(a){C[a]=new v(a,3,!1,a.toLowerCase(),null,!1)});
["checked","multiple","muted","selected"].forEach(function(a){C[a]=new v(a,3,!0,a,null,!1)});["capture","download"].forEach(function(a){C[a]=new v(a,4,!1,a,null,!1)});["cols","rows","size","span"].forEach(function(a){C[a]=new v(a,6,!1,a,null,!1)});["rowSpan","start"].forEach(function(a){C[a]=new v(a,5,!1,a.toLowerCase(),null,!1)});var Ua=/[\-:]([a-z])/g;function Va(a){return a[1].toUpperCase()}
"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach(function(a){var b=a.replace(Ua,
Va);C[b]=new v(b,1,!1,a,null,!1)});"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/1999/xlink",!1)});["xml:base","xml:lang","xml:space"].forEach(function(a){var b=a.replace(Ua,Va);C[b]=new v(b,1,!1,a,"http://www.w3.org/XML/1998/namespace",!1)});["tabIndex","crossOrigin"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!1)});
C.xlinkHref=new v("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0);["src","href","action","formAction"].forEach(function(a){C[a]=new v(a,1,!1,a.toLowerCase(),null,!0)});var Wa=aa.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;Wa.hasOwnProperty("ReactCurrentDispatcher")||(Wa.ReactCurrentDispatcher={current:null});Wa.hasOwnProperty("ReactCurrentBatchConfig")||(Wa.ReactCurrentBatchConfig={suspense:null});
function Xa(a,b,c,d){var e=C.hasOwnProperty(b)?C[b]:null;var f=null!==e?0===e.type:d?!1:!(2<b.length)||"o"!==b[0]&&"O"!==b[0]||"n"!==b[1]&&"N"!==b[1]?!1:!0;f||(Ta(b,c,e,d)&&(c=null),d||null===e?Ra(b)&&(null===c?a.removeAttribute(b):a.setAttribute(b,""+c)):e.mustUseProperty?a[e.propertyName]=null===c?3===e.type?!1:"":c:(b=e.attributeName,d=e.attributeNamespace,null===c?a.removeAttribute(b):(e=e.type,c=3===e||4===e&&!0===c?"":""+c,d?a.setAttributeNS(d,b,c):a.setAttribute(b,c))))}
var Ya=/^(.*)[\\\/]/,E="function"===typeof Symbol&&Symbol.for,Za=E?Symbol.for("react.element"):60103,$a=E?Symbol.for("react.portal"):60106,ab=E?Symbol.for("react.fragment"):60107,bb=E?Symbol.for("react.strict_mode"):60108,cb=E?Symbol.for("react.profiler"):60114,db=E?Symbol.for("react.provider"):60109,eb=E?Symbol.for("react.context"):60110,fb=E?Symbol.for("react.concurrent_mode"):60111,gb=E?Symbol.for("react.forward_ref"):60112,hb=E?Symbol.for("react.suspense"):60113,ib=E?Symbol.for("react.suspense_list"):
60120,jb=E?Symbol.for("react.memo"):60115,kb=E?Symbol.for("react.lazy"):60116,lb=E?Symbol.for("react.block"):60121,mb="function"===typeof Symbol&&Symbol.iterator;function nb(a){if(null===a||"object"!==typeof a)return null;a=mb&&a[mb]||a["@@iterator"];return"function"===typeof a?a:null}function ob(a){if(-1===a._status){a._status=0;var b=a._ctor;b=b();a._result=b;b.then(function(b){0===a._status&&(b=b.default,a._status=1,a._result=b)},function(b){0===a._status&&(a._status=2,a._result=b)})}}
function pb(a){if(null==a)return null;if("function"===typeof a)return a.displayName||a.name||null;if("string"===typeof a)return a;switch(a){case ab:return"Fragment";case $a:return"Portal";case cb:return"Profiler";case bb:return"StrictMode";case hb:return"Suspense";case ib:return"SuspenseList"}if("object"===typeof a)switch(a.$$typeof){case eb:return"Context.Consumer";case db:return"Context.Provider";case gb:var b=a.render;b=b.displayName||b.name||"";return a.displayName||(""!==b?"ForwardRef("+b+")":
"ForwardRef");case jb:return pb(a.type);case lb:return pb(a.render);case kb:if(a=1===a._status?a._result:null)return pb(a)}return null}function qb(a){var b="";do{a:switch(a.tag){case 3:case 4:case 6:case 7:case 10:case 9:var c="";break a;default:var d=a._debugOwner,e=a._debugSource,f=pb(a.type);c=null;d&&(c=pb(d.type));d=f;f="";e?f=" (at "+e.fileName.replace(Ya,"")+":"+e.lineNumber+")":c&&(f=" (created by "+c+")");c="\n    in "+(d||"Unknown")+f}b+=c;a=a.return}while(a);return b}
function rb(a){switch(typeof a){case "boolean":case "number":case "object":case "string":case "undefined":return a;default:return""}}function sb(a){var b=a.type;return(a=a.nodeName)&&"input"===a.toLowerCase()&&("checkbox"===b||"radio"===b)}
function tb(a){var b=sb(a)?"checked":"value",c=Object.getOwnPropertyDescriptor(a.constructor.prototype,b),d=""+a[b];if(!a.hasOwnProperty(b)&&"undefined"!==typeof c&&"function"===typeof c.get&&"function"===typeof c.set){var e=c.get,f=c.set;Object.defineProperty(a,b,{configurable:!0,get:function(){return e.call(this)},set:function(a){d=""+a;f.call(this,a)}});Object.defineProperty(a,b,{enumerable:c.enumerable});return{getValue:function(){return d},setValue:function(a){d=""+a},stopTracking:function(){a._valueTracker=
null;delete a[b]}}}}function xb(a){a._valueTracker||(a._valueTracker=tb(a))}function yb(a){if(!a)return!1;var b=a._valueTracker;if(!b)return!0;var c=b.getValue();var d="";a&&(d=sb(a)?a.checked?"true":"false":a.value);a=d;return a!==c?(b.setValue(a),!0):!1}function zb(a,b){var c=b.checked;return n({},b,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=c?c:a._wrapperState.initialChecked})}
function Ab(a,b){var c=null==b.defaultValue?"":b.defaultValue,d=null!=b.checked?b.checked:b.defaultChecked;c=rb(null!=b.value?b.value:c);a._wrapperState={initialChecked:d,initialValue:c,controlled:"checkbox"===b.type||"radio"===b.type?null!=b.checked:null!=b.value}}function Bb(a,b){b=b.checked;null!=b&&Xa(a,"checked",b,!1)}
function Cb(a,b){Bb(a,b);var c=rb(b.value),d=b.type;if(null!=c)if("number"===d){if(0===c&&""===a.value||a.value!=c)a.value=""+c}else a.value!==""+c&&(a.value=""+c);else if("submit"===d||"reset"===d){a.removeAttribute("value");return}b.hasOwnProperty("value")?Db(a,b.type,c):b.hasOwnProperty("defaultValue")&&Db(a,b.type,rb(b.defaultValue));null==b.checked&&null!=b.defaultChecked&&(a.defaultChecked=!!b.defaultChecked)}
function Eb(a,b,c){if(b.hasOwnProperty("value")||b.hasOwnProperty("defaultValue")){var d=b.type;if(!("submit"!==d&&"reset"!==d||void 0!==b.value&&null!==b.value))return;b=""+a._wrapperState.initialValue;c||b===a.value||(a.value=b);a.defaultValue=b}c=a.name;""!==c&&(a.name="");a.defaultChecked=!!a._wrapperState.initialChecked;""!==c&&(a.name=c)}
function Db(a,b,c){if("number"!==b||a.ownerDocument.activeElement!==a)null==c?a.defaultValue=""+a._wrapperState.initialValue:a.defaultValue!==""+c&&(a.defaultValue=""+c)}function Fb(a){var b="";aa.Children.forEach(a,function(a){null!=a&&(b+=a)});return b}function Gb(a,b){a=n({children:void 0},b);if(b=Fb(b.children))a.children=b;return a}
function Hb(a,b,c,d){a=a.options;if(b){b={};for(var e=0;e<c.length;e++)b["$"+c[e]]=!0;for(c=0;c<a.length;c++)e=b.hasOwnProperty("$"+a[c].value),a[c].selected!==e&&(a[c].selected=e),e&&d&&(a[c].defaultSelected=!0)}else{c=""+rb(c);b=null;for(e=0;e<a.length;e++){if(a[e].value===c){a[e].selected=!0;d&&(a[e].defaultSelected=!0);return}null!==b||a[e].disabled||(b=a[e])}null!==b&&(b.selected=!0)}}
function Ib(a,b){if(null!=b.dangerouslySetInnerHTML)throw Error(u(91));return n({},b,{value:void 0,defaultValue:void 0,children:""+a._wrapperState.initialValue})}function Jb(a,b){var c=b.value;if(null==c){c=b.children;b=b.defaultValue;if(null!=c){if(null!=b)throw Error(u(92));if(Array.isArray(c)){if(!(1>=c.length))throw Error(u(93));c=c[0]}b=c}null==b&&(b="");c=b}a._wrapperState={initialValue:rb(c)}}
function Kb(a,b){var c=rb(b.value),d=rb(b.defaultValue);null!=c&&(c=""+c,c!==a.value&&(a.value=c),null==b.defaultValue&&a.defaultValue!==c&&(a.defaultValue=c));null!=d&&(a.defaultValue=""+d)}function Lb(a){var b=a.textContent;b===a._wrapperState.initialValue&&""!==b&&null!==b&&(a.value=b)}var Mb={html:"http://www.w3.org/1999/xhtml",mathml:"http://www.w3.org/1998/Math/MathML",svg:"http://www.w3.org/2000/svg"};
function Nb(a){switch(a){case "svg":return"http://www.w3.org/2000/svg";case "math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function Ob(a,b){return null==a||"http://www.w3.org/1999/xhtml"===a?Nb(b):"http://www.w3.org/2000/svg"===a&&"foreignObject"===b?"http://www.w3.org/1999/xhtml":a}
var Pb,Qb=function(a){return"undefined"!==typeof MSApp&&MSApp.execUnsafeLocalFunction?function(b,c,d,e){MSApp.execUnsafeLocalFunction(function(){return a(b,c,d,e)})}:a}(function(a,b){if(a.namespaceURI!==Mb.svg||"innerHTML"in a)a.innerHTML=b;else{Pb=Pb||document.createElement("div");Pb.innerHTML="<svg>"+b.valueOf().toString()+"</svg>";for(b=Pb.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;b.firstChild;)a.appendChild(b.firstChild)}});
function Rb(a,b){if(b){var c=a.firstChild;if(c&&c===a.lastChild&&3===c.nodeType){c.nodeValue=b;return}}a.textContent=b}function Sb(a,b){var c={};c[a.toLowerCase()]=b.toLowerCase();c["Webkit"+a]="webkit"+b;c["Moz"+a]="moz"+b;return c}var Tb={animationend:Sb("Animation","AnimationEnd"),animationiteration:Sb("Animation","AnimationIteration"),animationstart:Sb("Animation","AnimationStart"),transitionend:Sb("Transition","TransitionEnd")},Ub={},Vb={};
ya&&(Vb=document.createElement("div").style,"AnimationEvent"in window||(delete Tb.animationend.animation,delete Tb.animationiteration.animation,delete Tb.animationstart.animation),"TransitionEvent"in window||delete Tb.transitionend.transition);function Wb(a){if(Ub[a])return Ub[a];if(!Tb[a])return a;var b=Tb[a],c;for(c in b)if(b.hasOwnProperty(c)&&c in Vb)return Ub[a]=b[c];return a}
var Xb=Wb("animationend"),Yb=Wb("animationiteration"),Zb=Wb("animationstart"),$b=Wb("transitionend"),ac="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),bc=new ("function"===typeof WeakMap?WeakMap:Map);function cc(a){var b=bc.get(a);void 0===b&&(b=new Map,bc.set(a,b));return b}
function dc(a){var b=a,c=a;if(a.alternate)for(;b.return;)b=b.return;else{a=b;do b=a,0!==(b.effectTag&1026)&&(c=b.return),a=b.return;while(a)}return 3===b.tag?c:null}function ec(a){if(13===a.tag){var b=a.memoizedState;null===b&&(a=a.alternate,null!==a&&(b=a.memoizedState));if(null!==b)return b.dehydrated}return null}function fc(a){if(dc(a)!==a)throw Error(u(188));}
function gc(a){var b=a.alternate;if(!b){b=dc(a);if(null===b)throw Error(u(188));return b!==a?null:a}for(var c=a,d=b;;){var e=c.return;if(null===e)break;var f=e.alternate;if(null===f){d=e.return;if(null!==d){c=d;continue}break}if(e.child===f.child){for(f=e.child;f;){if(f===c)return fc(e),a;if(f===d)return fc(e),b;f=f.sibling}throw Error(u(188));}if(c.return!==d.return)c=e,d=f;else{for(var g=!1,h=e.child;h;){if(h===c){g=!0;c=e;d=f;break}if(h===d){g=!0;d=e;c=f;break}h=h.sibling}if(!g){for(h=f.child;h;){if(h===
c){g=!0;c=f;d=e;break}if(h===d){g=!0;d=f;c=e;break}h=h.sibling}if(!g)throw Error(u(189));}}if(c.alternate!==d)throw Error(u(190));}if(3!==c.tag)throw Error(u(188));return c.stateNode.current===c?a:b}function hc(a){a=gc(a);if(!a)return null;for(var b=a;;){if(5===b.tag||6===b.tag)return b;if(b.child)b.child.return=b,b=b.child;else{if(b===a)break;for(;!b.sibling;){if(!b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}}return null}
function ic(a,b){if(null==b)throw Error(u(30));if(null==a)return b;if(Array.isArray(a)){if(Array.isArray(b))return a.push.apply(a,b),a;a.push(b);return a}return Array.isArray(b)?[a].concat(b):[a,b]}function jc(a,b,c){Array.isArray(a)?a.forEach(b,c):a&&b.call(c,a)}var kc=null;
function lc(a){if(a){var b=a._dispatchListeners,c=a._dispatchInstances;if(Array.isArray(b))for(var d=0;d<b.length&&!a.isPropagationStopped();d++)oa(a,b[d],c[d]);else b&&oa(a,b,c);a._dispatchListeners=null;a._dispatchInstances=null;a.isPersistent()||a.constructor.release(a)}}function mc(a){null!==a&&(kc=ic(kc,a));a=kc;kc=null;if(a){jc(a,lc);if(kc)throw Error(u(95));if(fa)throw a=ha,fa=!1,ha=null,a;}}
function nc(a){a=a.target||a.srcElement||window;a.correspondingUseElement&&(a=a.correspondingUseElement);return 3===a.nodeType?a.parentNode:a}function oc(a){if(!ya)return!1;a="on"+a;var b=a in document;b||(b=document.createElement("div"),b.setAttribute(a,"return;"),b="function"===typeof b[a]);return b}var pc=[];function qc(a){a.topLevelType=null;a.nativeEvent=null;a.targetInst=null;a.ancestors.length=0;10>pc.length&&pc.push(a)}
function rc(a,b,c,d){if(pc.length){var e=pc.pop();e.topLevelType=a;e.eventSystemFlags=d;e.nativeEvent=b;e.targetInst=c;return e}return{topLevelType:a,eventSystemFlags:d,nativeEvent:b,targetInst:c,ancestors:[]}}
function sc(a){var b=a.targetInst,c=b;do{if(!c){a.ancestors.push(c);break}var d=c;if(3===d.tag)d=d.stateNode.containerInfo;else{for(;d.return;)d=d.return;d=3!==d.tag?null:d.stateNode.containerInfo}if(!d)break;b=c.tag;5!==b&&6!==b||a.ancestors.push(c);c=tc(d)}while(c);for(c=0;c<a.ancestors.length;c++){b=a.ancestors[c];var e=nc(a.nativeEvent);d=a.topLevelType;var f=a.nativeEvent,g=a.eventSystemFlags;0===c&&(g|=64);for(var h=null,k=0;k<sa.length;k++){var l=sa[k];l&&(l=l.extractEvents(d,b,f,e,g))&&(h=
ic(h,l))}mc(h)}}function uc(a,b,c){if(!c.has(a)){switch(a){case "scroll":vc(b,"scroll",!0);break;case "focus":case "blur":vc(b,"focus",!0);vc(b,"blur",!0);c.set("blur",null);c.set("focus",null);break;case "cancel":case "close":oc(a)&&vc(b,a,!0);break;case "invalid":case "submit":case "reset":break;default:-1===ac.indexOf(a)&&F(a,b)}c.set(a,null)}}
var wc,xc,yc,zc=!1,Ac=[],Bc=null,Cc=null,Dc=null,Ec=new Map,Fc=new Map,Gc=[],Hc="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput close cancel copy cut paste click change contextmenu reset submit".split(" "),Ic="focus blur dragenter dragleave mouseover mouseout pointerover pointerout gotpointercapture lostpointercapture".split(" ");
function Jc(a,b){var c=cc(b);Hc.forEach(function(a){uc(a,b,c)});Ic.forEach(function(a){uc(a,b,c)})}function Kc(a,b,c,d,e){return{blockedOn:a,topLevelType:b,eventSystemFlags:c|32,nativeEvent:e,container:d}}
function Lc(a,b){switch(a){case "focus":case "blur":Bc=null;break;case "dragenter":case "dragleave":Cc=null;break;case "mouseover":case "mouseout":Dc=null;break;case "pointerover":case "pointerout":Ec.delete(b.pointerId);break;case "gotpointercapture":case "lostpointercapture":Fc.delete(b.pointerId)}}function Mc(a,b,c,d,e,f){if(null===a||a.nativeEvent!==f)return a=Kc(b,c,d,e,f),null!==b&&(b=Nc(b),null!==b&&xc(b)),a;a.eventSystemFlags|=d;return a}
function Oc(a,b,c,d,e){switch(b){case "focus":return Bc=Mc(Bc,a,b,c,d,e),!0;case "dragenter":return Cc=Mc(Cc,a,b,c,d,e),!0;case "mouseover":return Dc=Mc(Dc,a,b,c,d,e),!0;case "pointerover":var f=e.pointerId;Ec.set(f,Mc(Ec.get(f)||null,a,b,c,d,e));return!0;case "gotpointercapture":return f=e.pointerId,Fc.set(f,Mc(Fc.get(f)||null,a,b,c,d,e)),!0}return!1}
function Pc(a){var b=tc(a.target);if(null!==b){var c=dc(b);if(null!==c)if(b=c.tag,13===b){if(b=ec(c),null!==b){a.blockedOn=b;r.unstable_runWithPriority(a.priority,function(){yc(c)});return}}else if(3===b&&c.stateNode.hydrate){a.blockedOn=3===c.tag?c.stateNode.containerInfo:null;return}}a.blockedOn=null}function Qc(a){if(null!==a.blockedOn)return!1;var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);if(null!==b){var c=Nc(b);null!==c&&xc(c);a.blockedOn=b;return!1}return!0}
function Sc(a,b,c){Qc(a)&&c.delete(b)}function Tc(){for(zc=!1;0<Ac.length;){var a=Ac[0];if(null!==a.blockedOn){a=Nc(a.blockedOn);null!==a&&wc(a);break}var b=Rc(a.topLevelType,a.eventSystemFlags,a.container,a.nativeEvent);null!==b?a.blockedOn=b:Ac.shift()}null!==Bc&&Qc(Bc)&&(Bc=null);null!==Cc&&Qc(Cc)&&(Cc=null);null!==Dc&&Qc(Dc)&&(Dc=null);Ec.forEach(Sc);Fc.forEach(Sc)}function Uc(a,b){a.blockedOn===b&&(a.blockedOn=null,zc||(zc=!0,r.unstable_scheduleCallback(r.unstable_NormalPriority,Tc)))}
function Vc(a){function b(b){return Uc(b,a)}if(0<Ac.length){Uc(Ac[0],a);for(var c=1;c<Ac.length;c++){var d=Ac[c];d.blockedOn===a&&(d.blockedOn=null)}}null!==Bc&&Uc(Bc,a);null!==Cc&&Uc(Cc,a);null!==Dc&&Uc(Dc,a);Ec.forEach(b);Fc.forEach(b);for(c=0;c<Gc.length;c++)d=Gc[c],d.blockedOn===a&&(d.blockedOn=null);for(;0<Gc.length&&(c=Gc[0],null===c.blockedOn);)Pc(c),null===c.blockedOn&&Gc.shift()}
var Wc={},Yc=new Map,Zc=new Map,$c=["abort","abort",Xb,"animationEnd",Yb,"animationIteration",Zb,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking",
"seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",$b,"transitionEnd","waiting","waiting"];function ad(a,b){for(var c=0;c<a.length;c+=2){var d=a[c],e=a[c+1],f="on"+(e[0].toUpperCase()+e.slice(1));f={phasedRegistrationNames:{bubbled:f,captured:f+"Capture"},dependencies:[d],eventPriority:b};Zc.set(d,b);Yc.set(d,f);Wc[e]=f}}
ad("blur blur cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focus focus input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0);
ad("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1);ad($c,2);for(var bd="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),cd=0;cd<bd.length;cd++)Zc.set(bd[cd],0);
var dd=r.unstable_UserBlockingPriority,ed=r.unstable_runWithPriority,fd=!0;function F(a,b){vc(b,a,!1)}function vc(a,b,c){var d=Zc.get(b);switch(void 0===d?2:d){case 0:d=gd.bind(null,b,1,a);break;case 1:d=hd.bind(null,b,1,a);break;default:d=id.bind(null,b,1,a)}c?a.addEventListener(b,d,!0):a.addEventListener(b,d,!1)}function gd(a,b,c,d){Ja||Ha();var e=id,f=Ja;Ja=!0;try{Ga(e,a,b,c,d)}finally{(Ja=f)||La()}}function hd(a,b,c,d){ed(dd,id.bind(null,a,b,c,d))}
function id(a,b,c,d){if(fd)if(0<Ac.length&&-1<Hc.indexOf(a))a=Kc(null,a,b,c,d),Ac.push(a);else{var e=Rc(a,b,c,d);if(null===e)Lc(a,d);else if(-1<Hc.indexOf(a))a=Kc(e,a,b,c,d),Ac.push(a);else if(!Oc(e,a,b,c,d)){Lc(a,d);a=rc(a,d,null,b);try{Ma(sc,a)}finally{qc(a)}}}}
function Rc(a,b,c,d){c=nc(d);c=tc(c);if(null!==c){var e=dc(c);if(null===e)c=null;else{var f=e.tag;if(13===f){c=ec(e);if(null!==c)return c;c=null}else if(3===f){if(e.stateNode.hydrate)return 3===e.tag?e.stateNode.containerInfo:null;c=null}else e!==c&&(c=null)}}a=rc(a,d,c,b);try{Ma(sc,a)}finally{qc(a)}return null}
var jd={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,
floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},kd=["Webkit","ms","Moz","O"];Object.keys(jd).forEach(function(a){kd.forEach(function(b){b=b+a.charAt(0).toUpperCase()+a.substring(1);jd[b]=jd[a]})});function ld(a,b,c){return null==b||"boolean"===typeof b||""===b?"":c||"number"!==typeof b||0===b||jd.hasOwnProperty(a)&&jd[a]?(""+b).trim():b+"px"}
function md(a,b){a=a.style;for(var c in b)if(b.hasOwnProperty(c)){var d=0===c.indexOf("--"),e=ld(c,b[c],d);"float"===c&&(c="cssFloat");d?a.setProperty(c,e):a[c]=e}}var nd=n({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});
function od(a,b){if(b){if(nd[a]&&(null!=b.children||null!=b.dangerouslySetInnerHTML))throw Error(u(137,a,""));if(null!=b.dangerouslySetInnerHTML){if(null!=b.children)throw Error(u(60));if(!("object"===typeof b.dangerouslySetInnerHTML&&"__html"in b.dangerouslySetInnerHTML))throw Error(u(61));}if(null!=b.style&&"object"!==typeof b.style)throw Error(u(62,""));}}
function pd(a,b){if(-1===a.indexOf("-"))return"string"===typeof b.is;switch(a){case "annotation-xml":case "color-profile":case "font-face":case "font-face-src":case "font-face-uri":case "font-face-format":case "font-face-name":case "missing-glyph":return!1;default:return!0}}var qd=Mb.html;function rd(a,b){a=9===a.nodeType||11===a.nodeType?a:a.ownerDocument;var c=cc(a);b=wa[b];for(var d=0;d<b.length;d++)uc(b[d],a,c)}function sd(){}
function td(a){a=a||("undefined"!==typeof document?document:void 0);if("undefined"===typeof a)return null;try{return a.activeElement||a.body}catch(b){return a.body}}function ud(a){for(;a&&a.firstChild;)a=a.firstChild;return a}function vd(a,b){var c=ud(a);a=0;for(var d;c;){if(3===c.nodeType){d=a+c.textContent.length;if(a<=b&&d>=b)return{node:c,offset:b-a};a=d}a:{for(;c;){if(c.nextSibling){c=c.nextSibling;break a}c=c.parentNode}c=void 0}c=ud(c)}}
function wd(a,b){return a&&b?a===b?!0:a&&3===a.nodeType?!1:b&&3===b.nodeType?wd(a,b.parentNode):"contains"in a?a.contains(b):a.compareDocumentPosition?!!(a.compareDocumentPosition(b)&16):!1:!1}function xd(){for(var a=window,b=td();b instanceof a.HTMLIFrameElement;){try{var c="string"===typeof b.contentWindow.location.href}catch(d){c=!1}if(c)a=b.contentWindow;else break;b=td(a.document)}return b}
function yd(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return b&&("input"===b&&("text"===a.type||"search"===a.type||"tel"===a.type||"url"===a.type||"password"===a.type)||"textarea"===b||"true"===a.contentEditable)}var zd="$",Ad="/$",Bd="$?",Cd="$!",Dd=null,Ed=null;function Fd(a,b){switch(a){case "button":case "input":case "select":case "textarea":return!!b.autoFocus}return!1}
function Gd(a,b){return"textarea"===a||"option"===a||"noscript"===a||"string"===typeof b.children||"number"===typeof b.children||"object"===typeof b.dangerouslySetInnerHTML&&null!==b.dangerouslySetInnerHTML&&null!=b.dangerouslySetInnerHTML.__html}var Hd="function"===typeof setTimeout?setTimeout:void 0,Id="function"===typeof clearTimeout?clearTimeout:void 0;function Jd(a){for(;null!=a;a=a.nextSibling){var b=a.nodeType;if(1===b||3===b)break}return a}
function Kd(a){a=a.previousSibling;for(var b=0;a;){if(8===a.nodeType){var c=a.data;if(c===zd||c===Cd||c===Bd){if(0===b)return a;b--}else c===Ad&&b++}a=a.previousSibling}return null}var Ld=Math.random().toString(36).slice(2),Md="__reactInternalInstance$"+Ld,Nd="__reactEventHandlers$"+Ld,Od="__reactContainere$"+Ld;
function tc(a){var b=a[Md];if(b)return b;for(var c=a.parentNode;c;){if(b=c[Od]||c[Md]){c=b.alternate;if(null!==b.child||null!==c&&null!==c.child)for(a=Kd(a);null!==a;){if(c=a[Md])return c;a=Kd(a)}return b}a=c;c=a.parentNode}return null}function Nc(a){a=a[Md]||a[Od];return!a||5!==a.tag&&6!==a.tag&&13!==a.tag&&3!==a.tag?null:a}function Pd(a){if(5===a.tag||6===a.tag)return a.stateNode;throw Error(u(33));}function Qd(a){return a[Nd]||null}
function Rd(a){do a=a.return;while(a&&5!==a.tag);return a?a:null}
function Sd(a,b){var c=a.stateNode;if(!c)return null;var d=la(c);if(!d)return null;c=d[b];a:switch(b){case "onClick":case "onClickCapture":case "onDoubleClick":case "onDoubleClickCapture":case "onMouseDown":case "onMouseDownCapture":case "onMouseMove":case "onMouseMoveCapture":case "onMouseUp":case "onMouseUpCapture":case "onMouseEnter":(d=!d.disabled)||(a=a.type,d=!("button"===a||"input"===a||"select"===a||"textarea"===a));a=!d;break a;default:a=!1}if(a)return null;if(c&&"function"!==typeof c)throw Error(u(231,
b,typeof c));return c}function Td(a,b,c){if(b=Sd(a,c.dispatchConfig.phasedRegistrationNames[b]))c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a)}function Ud(a){if(a&&a.dispatchConfig.phasedRegistrationNames){for(var b=a._targetInst,c=[];b;)c.push(b),b=Rd(b);for(b=c.length;0<b--;)Td(c[b],"captured",a);for(b=0;b<c.length;b++)Td(c[b],"bubbled",a)}}
function Vd(a,b,c){a&&c&&c.dispatchConfig.registrationName&&(b=Sd(a,c.dispatchConfig.registrationName))&&(c._dispatchListeners=ic(c._dispatchListeners,b),c._dispatchInstances=ic(c._dispatchInstances,a))}function Wd(a){a&&a.dispatchConfig.registrationName&&Vd(a._targetInst,null,a)}function Xd(a){jc(a,Ud)}var Yd=null,Zd=null,$d=null;
function ae(){if($d)return $d;var a,b=Zd,c=b.length,d,e="value"in Yd?Yd.value:Yd.textContent,f=e.length;for(a=0;a<c&&b[a]===e[a];a++);var g=c-a;for(d=1;d<=g&&b[c-d]===e[f-d];d++);return $d=e.slice(a,1<d?1-d:void 0)}function be(){return!0}function ce(){return!1}
function G(a,b,c,d){this.dispatchConfig=a;this._targetInst=b;this.nativeEvent=c;a=this.constructor.Interface;for(var e in a)a.hasOwnProperty(e)&&((b=a[e])?this[e]=b(c):"target"===e?this.target=d:this[e]=c[e]);this.isDefaultPrevented=(null!=c.defaultPrevented?c.defaultPrevented:!1===c.returnValue)?be:ce;this.isPropagationStopped=ce;return this}
n(G.prototype,{preventDefault:function(){this.defaultPrevented=!0;var a=this.nativeEvent;a&&(a.preventDefault?a.preventDefault():"unknown"!==typeof a.returnValue&&(a.returnValue=!1),this.isDefaultPrevented=be)},stopPropagation:function(){var a=this.nativeEvent;a&&(a.stopPropagation?a.stopPropagation():"unknown"!==typeof a.cancelBubble&&(a.cancelBubble=!0),this.isPropagationStopped=be)},persist:function(){this.isPersistent=be},isPersistent:ce,destructor:function(){var a=this.constructor.Interface,
b;for(b in a)this[b]=null;this.nativeEvent=this._targetInst=this.dispatchConfig=null;this.isPropagationStopped=this.isDefaultPrevented=ce;this._dispatchInstances=this._dispatchListeners=null}});G.Interface={type:null,target:null,currentTarget:function(){return null},eventPhase:null,bubbles:null,cancelable:null,timeStamp:function(a){return a.timeStamp||Date.now()},defaultPrevented:null,isTrusted:null};
G.extend=function(a){function b(){}function c(){return d.apply(this,arguments)}var d=this;b.prototype=d.prototype;var e=new b;n(e,c.prototype);c.prototype=e;c.prototype.constructor=c;c.Interface=n({},d.Interface,a);c.extend=d.extend;de(c);return c};de(G);function ee(a,b,c,d){if(this.eventPool.length){var e=this.eventPool.pop();this.call(e,a,b,c,d);return e}return new this(a,b,c,d)}
function fe(a){if(!(a instanceof this))throw Error(u(279));a.destructor();10>this.eventPool.length&&this.eventPool.push(a)}function de(a){a.eventPool=[];a.getPooled=ee;a.release=fe}var ge=G.extend({data:null}),he=G.extend({data:null}),ie=[9,13,27,32],je=ya&&"CompositionEvent"in window,ke=null;ya&&"documentMode"in document&&(ke=document.documentMode);
var le=ya&&"TextEvent"in window&&!ke,me=ya&&(!je||ke&&8<ke&&11>=ke),ne=String.fromCharCode(32),oe={beforeInput:{phasedRegistrationNames:{bubbled:"onBeforeInput",captured:"onBeforeInputCapture"},dependencies:["compositionend","keypress","textInput","paste"]},compositionEnd:{phasedRegistrationNames:{bubbled:"onCompositionEnd",captured:"onCompositionEndCapture"},dependencies:"blur compositionend keydown keypress keyup mousedown".split(" ")},compositionStart:{phasedRegistrationNames:{bubbled:"onCompositionStart",
captured:"onCompositionStartCapture"},dependencies:"blur compositionstart keydown keypress keyup mousedown".split(" ")},compositionUpdate:{phasedRegistrationNames:{bubbled:"onCompositionUpdate",captured:"onCompositionUpdateCapture"},dependencies:"blur compositionupdate keydown keypress keyup mousedown".split(" ")}},pe=!1;
function qe(a,b){switch(a){case "keyup":return-1!==ie.indexOf(b.keyCode);case "keydown":return 229!==b.keyCode;case "keypress":case "mousedown":case "blur":return!0;default:return!1}}function re(a){a=a.detail;return"object"===typeof a&&"data"in a?a.data:null}var se=!1;function te(a,b){switch(a){case "compositionend":return re(b);case "keypress":if(32!==b.which)return null;pe=!0;return ne;case "textInput":return a=b.data,a===ne&&pe?null:a;default:return null}}
function ue(a,b){if(se)return"compositionend"===a||!je&&qe(a,b)?(a=ae(),$d=Zd=Yd=null,se=!1,a):null;switch(a){case "paste":return null;case "keypress":if(!(b.ctrlKey||b.altKey||b.metaKey)||b.ctrlKey&&b.altKey){if(b.char&&1<b.char.length)return b.char;if(b.which)return String.fromCharCode(b.which)}return null;case "compositionend":return me&&"ko"!==b.locale?null:b.data;default:return null}}
var ve={eventTypes:oe,extractEvents:function(a,b,c,d){var e;if(je)b:{switch(a){case "compositionstart":var f=oe.compositionStart;break b;case "compositionend":f=oe.compositionEnd;break b;case "compositionupdate":f=oe.compositionUpdate;break b}f=void 0}else se?qe(a,c)&&(f=oe.compositionEnd):"keydown"===a&&229===c.keyCode&&(f=oe.compositionStart);f?(me&&"ko"!==c.locale&&(se||f!==oe.compositionStart?f===oe.compositionEnd&&se&&(e=ae()):(Yd=d,Zd="value"in Yd?Yd.value:Yd.textContent,se=!0)),f=ge.getPooled(f,
b,c,d),e?f.data=e:(e=re(c),null!==e&&(f.data=e)),Xd(f),e=f):e=null;(a=le?te(a,c):ue(a,c))?(b=he.getPooled(oe.beforeInput,b,c,d),b.data=a,Xd(b)):b=null;return null===e?b:null===b?e:[e,b]}},we={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function xe(a){var b=a&&a.nodeName&&a.nodeName.toLowerCase();return"input"===b?!!we[a.type]:"textarea"===b?!0:!1}
var ye={change:{phasedRegistrationNames:{bubbled:"onChange",captured:"onChangeCapture"},dependencies:"blur change click focus input keydown keyup selectionchange".split(" ")}};function ze(a,b,c){a=G.getPooled(ye.change,a,b,c);a.type="change";Da(c);Xd(a);return a}var Ae=null,Be=null;function Ce(a){mc(a)}function De(a){var b=Pd(a);if(yb(b))return a}function Ee(a,b){if("change"===a)return b}var Fe=!1;ya&&(Fe=oc("input")&&(!document.documentMode||9<document.documentMode));
function Ge(){Ae&&(Ae.detachEvent("onpropertychange",He),Be=Ae=null)}function He(a){if("value"===a.propertyName&&De(Be))if(a=ze(Be,a,nc(a)),Ja)mc(a);else{Ja=!0;try{Fa(Ce,a)}finally{Ja=!1,La()}}}function Ie(a,b,c){"focus"===a?(Ge(),Ae=b,Be=c,Ae.attachEvent("onpropertychange",He)):"blur"===a&&Ge()}function Je(a){if("selectionchange"===a||"keyup"===a||"keydown"===a)return De(Be)}function Ke(a,b){if("click"===a)return De(b)}function Le(a,b){if("input"===a||"change"===a)return De(b)}
var Me={eventTypes:ye,_isInputEventSupported:Fe,extractEvents:function(a,b,c,d){var e=b?Pd(b):window,f=e.nodeName&&e.nodeName.toLowerCase();if("select"===f||"input"===f&&"file"===e.type)var g=Ee;else if(xe(e))if(Fe)g=Le;else{g=Je;var h=Ie}else(f=e.nodeName)&&"input"===f.toLowerCase()&&("checkbox"===e.type||"radio"===e.type)&&(g=Ke);if(g&&(g=g(a,b)))return ze(g,c,d);h&&h(a,e,b);"blur"===a&&(a=e._wrapperState)&&a.controlled&&"number"===e.type&&Db(e,"number",e.value)}},Ne=G.extend({view:null,detail:null}),
Oe={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function Pe(a){var b=this.nativeEvent;return b.getModifierState?b.getModifierState(a):(a=Oe[a])?!!b[a]:!1}function Qe(){return Pe}
var Re=0,Se=0,Te=!1,Ue=!1,Ve=Ne.extend({screenX:null,screenY:null,clientX:null,clientY:null,pageX:null,pageY:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,getModifierState:Qe,button:null,buttons:null,relatedTarget:function(a){return a.relatedTarget||(a.fromElement===a.srcElement?a.toElement:a.fromElement)},movementX:function(a){if("movementX"in a)return a.movementX;var b=Re;Re=a.screenX;return Te?"mousemove"===a.type?a.screenX-b:0:(Te=!0,0)},movementY:function(a){if("movementY"in a)return a.movementY;
var b=Se;Se=a.screenY;return Ue?"mousemove"===a.type?a.screenY-b:0:(Ue=!0,0)}}),We=Ve.extend({pointerId:null,width:null,height:null,pressure:null,tangentialPressure:null,tiltX:null,tiltY:null,twist:null,pointerType:null,isPrimary:null}),Xe={mouseEnter:{registrationName:"onMouseEnter",dependencies:["mouseout","mouseover"]},mouseLeave:{registrationName:"onMouseLeave",dependencies:["mouseout","mouseover"]},pointerEnter:{registrationName:"onPointerEnter",dependencies:["pointerout","pointerover"]},pointerLeave:{registrationName:"onPointerLeave",
dependencies:["pointerout","pointerover"]}},Ye={eventTypes:Xe,extractEvents:function(a,b,c,d,e){var f="mouseover"===a||"pointerover"===a,g="mouseout"===a||"pointerout"===a;if(f&&0===(e&32)&&(c.relatedTarget||c.fromElement)||!g&&!f)return null;f=d.window===d?d:(f=d.ownerDocument)?f.defaultView||f.parentWindow:window;if(g){if(g=b,b=(b=c.relatedTarget||c.toElement)?tc(b):null,null!==b){var h=dc(b);if(b!==h||5!==b.tag&&6!==b.tag)b=null}}else g=null;if(g===b)return null;if("mouseout"===a||"mouseover"===
a){var k=Ve;var l=Xe.mouseLeave;var m=Xe.mouseEnter;var p="mouse"}else if("pointerout"===a||"pointerover"===a)k=We,l=Xe.pointerLeave,m=Xe.pointerEnter,p="pointer";a=null==g?f:Pd(g);f=null==b?f:Pd(b);l=k.getPooled(l,g,c,d);l.type=p+"leave";l.target=a;l.relatedTarget=f;c=k.getPooled(m,b,c,d);c.type=p+"enter";c.target=f;c.relatedTarget=a;d=g;p=b;if(d&&p)a:{k=d;m=p;g=0;for(a=k;a;a=Rd(a))g++;a=0;for(b=m;b;b=Rd(b))a++;for(;0<g-a;)k=Rd(k),g--;for(;0<a-g;)m=Rd(m),a--;for(;g--;){if(k===m||k===m.alternate)break a;
k=Rd(k);m=Rd(m)}k=null}else k=null;m=k;for(k=[];d&&d!==m;){g=d.alternate;if(null!==g&&g===m)break;k.push(d);d=Rd(d)}for(d=[];p&&p!==m;){g=p.alternate;if(null!==g&&g===m)break;d.push(p);p=Rd(p)}for(p=0;p<k.length;p++)Vd(k[p],"bubbled",l);for(p=d.length;0<p--;)Vd(d[p],"captured",c);return 0===(e&64)?[l]:[l,c]}};function Ze(a,b){return a===b&&(0!==a||1/a===1/b)||a!==a&&b!==b}var $e="function"===typeof Object.is?Object.is:Ze,af=Object.prototype.hasOwnProperty;
function bf(a,b){if($e(a,b))return!0;if("object"!==typeof a||null===a||"object"!==typeof b||null===b)return!1;var c=Object.keys(a),d=Object.keys(b);if(c.length!==d.length)return!1;for(d=0;d<c.length;d++)if(!af.call(b,c[d])||!$e(a[c[d]],b[c[d]]))return!1;return!0}
var cf=ya&&"documentMode"in document&&11>=document.documentMode,df={select:{phasedRegistrationNames:{bubbled:"onSelect",captured:"onSelectCapture"},dependencies:"blur contextmenu dragend focus keydown keyup mousedown mouseup selectionchange".split(" ")}},ef=null,ff=null,gf=null,hf=!1;
function jf(a,b){var c=b.window===b?b.document:9===b.nodeType?b:b.ownerDocument;if(hf||null==ef||ef!==td(c))return null;c=ef;"selectionStart"in c&&yd(c)?c={start:c.selectionStart,end:c.selectionEnd}:(c=(c.ownerDocument&&c.ownerDocument.defaultView||window).getSelection(),c={anchorNode:c.anchorNode,anchorOffset:c.anchorOffset,focusNode:c.focusNode,focusOffset:c.focusOffset});return gf&&bf(gf,c)?null:(gf=c,a=G.getPooled(df.select,ff,a,b),a.type="select",a.target=ef,Xd(a),a)}
var kf={eventTypes:df,extractEvents:function(a,b,c,d,e,f){e=f||(d.window===d?d.document:9===d.nodeType?d:d.ownerDocument);if(!(f=!e)){a:{e=cc(e);f=wa.onSelect;for(var g=0;g<f.length;g++)if(!e.has(f[g])){e=!1;break a}e=!0}f=!e}if(f)return null;e=b?Pd(b):window;switch(a){case "focus":if(xe(e)||"true"===e.contentEditable)ef=e,ff=b,gf=null;break;case "blur":gf=ff=ef=null;break;case "mousedown":hf=!0;break;case "contextmenu":case "mouseup":case "dragend":return hf=!1,jf(c,d);case "selectionchange":if(cf)break;
case "keydown":case "keyup":return jf(c,d)}return null}},lf=G.extend({animationName:null,elapsedTime:null,pseudoElement:null}),mf=G.extend({clipboardData:function(a){return"clipboardData"in a?a.clipboardData:window.clipboardData}}),nf=Ne.extend({relatedTarget:null});function of(a){var b=a.keyCode;"charCode"in a?(a=a.charCode,0===a&&13===b&&(a=13)):a=b;10===a&&(a=13);return 32<=a||13===a?a:0}
var pf={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},qf={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",
116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},rf=Ne.extend({key:function(a){if(a.key){var b=pf[a.key]||a.key;if("Unidentified"!==b)return b}return"keypress"===a.type?(a=of(a),13===a?"Enter":String.fromCharCode(a)):"keydown"===a.type||"keyup"===a.type?qf[a.keyCode]||"Unidentified":""},location:null,ctrlKey:null,shiftKey:null,altKey:null,metaKey:null,repeat:null,locale:null,getModifierState:Qe,charCode:function(a){return"keypress"===
a.type?of(a):0},keyCode:function(a){return"keydown"===a.type||"keyup"===a.type?a.keyCode:0},which:function(a){return"keypress"===a.type?of(a):"keydown"===a.type||"keyup"===a.type?a.keyCode:0}}),sf=Ve.extend({dataTransfer:null}),tf=Ne.extend({touches:null,targetTouches:null,changedTouches:null,altKey:null,metaKey:null,ctrlKey:null,shiftKey:null,getModifierState:Qe}),uf=G.extend({propertyName:null,elapsedTime:null,pseudoElement:null}),vf=Ve.extend({deltaX:function(a){return"deltaX"in a?a.deltaX:"wheelDeltaX"in
a?-a.wheelDeltaX:0},deltaY:function(a){return"deltaY"in a?a.deltaY:"wheelDeltaY"in a?-a.wheelDeltaY:"wheelDelta"in a?-a.wheelDelta:0},deltaZ:null,deltaMode:null}),wf={eventTypes:Wc,extractEvents:function(a,b,c,d){var e=Yc.get(a);if(!e)return null;switch(a){case "keypress":if(0===of(c))return null;case "keydown":case "keyup":a=rf;break;case "blur":case "focus":a=nf;break;case "click":if(2===c.button)return null;case "auxclick":case "dblclick":case "mousedown":case "mousemove":case "mouseup":case "mouseout":case "mouseover":case "contextmenu":a=
Ve;break;case "drag":case "dragend":case "dragenter":case "dragexit":case "dragleave":case "dragover":case "dragstart":case "drop":a=sf;break;case "touchcancel":case "touchend":case "touchmove":case "touchstart":a=tf;break;case Xb:case Yb:case Zb:a=lf;break;case $b:a=uf;break;case "scroll":a=Ne;break;case "wheel":a=vf;break;case "copy":case "cut":case "paste":a=mf;break;case "gotpointercapture":case "lostpointercapture":case "pointercancel":case "pointerdown":case "pointermove":case "pointerout":case "pointerover":case "pointerup":a=
We;break;default:a=G}b=a.getPooled(e,b,c,d);Xd(b);return b}};if(pa)throw Error(u(101));pa=Array.prototype.slice.call("ResponderEventPlugin SimpleEventPlugin EnterLeaveEventPlugin ChangeEventPlugin SelectEventPlugin BeforeInputEventPlugin".split(" "));ra();var xf=Nc;la=Qd;ma=xf;na=Pd;xa({SimpleEventPlugin:wf,EnterLeaveEventPlugin:Ye,ChangeEventPlugin:Me,SelectEventPlugin:kf,BeforeInputEventPlugin:ve});var yf=[],zf=-1;function H(a){0>zf||(a.current=yf[zf],yf[zf]=null,zf--)}
function I(a,b){zf++;yf[zf]=a.current;a.current=b}var Af={},J={current:Af},K={current:!1},Bf=Af;function Cf(a,b){var c=a.type.contextTypes;if(!c)return Af;var d=a.stateNode;if(d&&d.__reactInternalMemoizedUnmaskedChildContext===b)return d.__reactInternalMemoizedMaskedChildContext;var e={},f;for(f in c)e[f]=b[f];d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=b,a.__reactInternalMemoizedMaskedChildContext=e);return e}function L(a){a=a.childContextTypes;return null!==a&&void 0!==a}
function Df(){H(K);H(J)}function Ef(a,b,c){if(J.current!==Af)throw Error(u(168));I(J,b);I(K,c)}function Ff(a,b,c){var d=a.stateNode;a=b.childContextTypes;if("function"!==typeof d.getChildContext)return c;d=d.getChildContext();for(var e in d)if(!(e in a))throw Error(u(108,pb(b)||"Unknown",e));return n({},c,{},d)}function Gf(a){a=(a=a.stateNode)&&a.__reactInternalMemoizedMergedChildContext||Af;Bf=J.current;I(J,a);I(K,K.current);return!0}
function Hf(a,b,c){var d=a.stateNode;if(!d)throw Error(u(169));c?(a=Ff(a,b,Bf),d.__reactInternalMemoizedMergedChildContext=a,H(K),H(J),I(J,a)):H(K);I(K,c)}
var If=r.unstable_runWithPriority,Jf=r.unstable_scheduleCallback,Kf=r.unstable_cancelCallback,Lf=r.unstable_requestPaint,Mf=r.unstable_now,Nf=r.unstable_getCurrentPriorityLevel,Of=r.unstable_ImmediatePriority,Pf=r.unstable_UserBlockingPriority,Qf=r.unstable_NormalPriority,Rf=r.unstable_LowPriority,Sf=r.unstable_IdlePriority,Tf={},Uf=r.unstable_shouldYield,Vf=void 0!==Lf?Lf:function(){},Wf=null,Xf=null,Yf=!1,Zf=Mf(),$f=1E4>Zf?Mf:function(){return Mf()-Zf};
function ag(){switch(Nf()){case Of:return 99;case Pf:return 98;case Qf:return 97;case Rf:return 96;case Sf:return 95;default:throw Error(u(332));}}function bg(a){switch(a){case 99:return Of;case 98:return Pf;case 97:return Qf;case 96:return Rf;case 95:return Sf;default:throw Error(u(332));}}function cg(a,b){a=bg(a);return If(a,b)}function dg(a,b,c){a=bg(a);return Jf(a,b,c)}function eg(a){null===Wf?(Wf=[a],Xf=Jf(Of,fg)):Wf.push(a);return Tf}function gg(){if(null!==Xf){var a=Xf;Xf=null;Kf(a)}fg()}
function fg(){if(!Yf&&null!==Wf){Yf=!0;var a=0;try{var b=Wf;cg(99,function(){for(;a<b.length;a++){var c=b[a];do c=c(!0);while(null!==c)}});Wf=null}catch(c){throw null!==Wf&&(Wf=Wf.slice(a+1)),Jf(Of,gg),c;}finally{Yf=!1}}}function hg(a,b,c){c/=10;return 1073741821-(((1073741821-a+b/10)/c|0)+1)*c}function ig(a,b){if(a&&a.defaultProps){b=n({},b);a=a.defaultProps;for(var c in a)void 0===b[c]&&(b[c]=a[c])}return b}var jg={current:null},kg=null,lg=null,mg=null;function ng(){mg=lg=kg=null}
function og(a){var b=jg.current;H(jg);a.type._context._currentValue=b}function pg(a,b){for(;null!==a;){var c=a.alternate;if(a.childExpirationTime<b)a.childExpirationTime=b,null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);else if(null!==c&&c.childExpirationTime<b)c.childExpirationTime=b;else break;a=a.return}}function qg(a,b){kg=a;mg=lg=null;a=a.dependencies;null!==a&&null!==a.firstContext&&(a.expirationTime>=b&&(rg=!0),a.firstContext=null)}
function sg(a,b){if(mg!==a&&!1!==b&&0!==b){if("number"!==typeof b||1073741823===b)mg=a,b=1073741823;b={context:a,observedBits:b,next:null};if(null===lg){if(null===kg)throw Error(u(308));lg=b;kg.dependencies={expirationTime:0,firstContext:b,responders:null}}else lg=lg.next=b}return a._currentValue}var tg=!1;function ug(a){a.updateQueue={baseState:a.memoizedState,baseQueue:null,shared:{pending:null},effects:null}}
function vg(a,b){a=a.updateQueue;b.updateQueue===a&&(b.updateQueue={baseState:a.baseState,baseQueue:a.baseQueue,shared:a.shared,effects:a.effects})}function wg(a,b){a={expirationTime:a,suspenseConfig:b,tag:0,payload:null,callback:null,next:null};return a.next=a}function xg(a,b){a=a.updateQueue;if(null!==a){a=a.shared;var c=a.pending;null===c?b.next=b:(b.next=c.next,c.next=b);a.pending=b}}
function yg(a,b){var c=a.alternate;null!==c&&vg(c,a);a=a.updateQueue;c=a.baseQueue;null===c?(a.baseQueue=b.next=b,b.next=b):(b.next=c.next,c.next=b)}
function zg(a,b,c,d){var e=a.updateQueue;tg=!1;var f=e.baseQueue,g=e.shared.pending;if(null!==g){if(null!==f){var h=f.next;f.next=g.next;g.next=h}f=g;e.shared.pending=null;h=a.alternate;null!==h&&(h=h.updateQueue,null!==h&&(h.baseQueue=g))}if(null!==f){h=f.next;var k=e.baseState,l=0,m=null,p=null,x=null;if(null!==h){var z=h;do{g=z.expirationTime;if(g<d){var ca={expirationTime:z.expirationTime,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null};null===x?(p=x=
ca,m=k):x=x.next=ca;g>l&&(l=g)}else{null!==x&&(x=x.next={expirationTime:1073741823,suspenseConfig:z.suspenseConfig,tag:z.tag,payload:z.payload,callback:z.callback,next:null});Ag(g,z.suspenseConfig);a:{var D=a,t=z;g=b;ca=c;switch(t.tag){case 1:D=t.payload;if("function"===typeof D){k=D.call(ca,k,g);break a}k=D;break a;case 3:D.effectTag=D.effectTag&-4097|64;case 0:D=t.payload;g="function"===typeof D?D.call(ca,k,g):D;if(null===g||void 0===g)break a;k=n({},k,g);break a;case 2:tg=!0}}null!==z.callback&&
(a.effectTag|=32,g=e.effects,null===g?e.effects=[z]:g.push(z))}z=z.next;if(null===z||z===h)if(g=e.shared.pending,null===g)break;else z=f.next=g.next,g.next=h,e.baseQueue=f=g,e.shared.pending=null}while(1)}null===x?m=k:x.next=p;e.baseState=m;e.baseQueue=x;Bg(l);a.expirationTime=l;a.memoizedState=k}}
function Cg(a,b,c){a=b.effects;b.effects=null;if(null!==a)for(b=0;b<a.length;b++){var d=a[b],e=d.callback;if(null!==e){d.callback=null;d=e;e=c;if("function"!==typeof d)throw Error(u(191,d));d.call(e)}}}var Dg=Wa.ReactCurrentBatchConfig,Eg=(new aa.Component).refs;function Fg(a,b,c,d){b=a.memoizedState;c=c(d,b);c=null===c||void 0===c?b:n({},b,c);a.memoizedState=c;0===a.expirationTime&&(a.updateQueue.baseState=c)}
var Jg={isMounted:function(a){return(a=a._reactInternalFiber)?dc(a)===a:!1},enqueueSetState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueReplaceState:function(a,b,c){a=a._reactInternalFiber;var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e=wg(d,e);e.tag=1;e.payload=b;void 0!==c&&null!==c&&(e.callback=c);xg(a,e);Ig(a,d)},enqueueForceUpdate:function(a,b){a=a._reactInternalFiber;var c=Gg(),d=Dg.suspense;
c=Hg(c,a,d);d=wg(c,d);d.tag=2;void 0!==b&&null!==b&&(d.callback=b);xg(a,d);Ig(a,c)}};function Kg(a,b,c,d,e,f,g){a=a.stateNode;return"function"===typeof a.shouldComponentUpdate?a.shouldComponentUpdate(d,f,g):b.prototype&&b.prototype.isPureReactComponent?!bf(c,d)||!bf(e,f):!0}
function Lg(a,b,c){var d=!1,e=Af;var f=b.contextType;"object"===typeof f&&null!==f?f=sg(f):(e=L(b)?Bf:J.current,d=b.contextTypes,f=(d=null!==d&&void 0!==d)?Cf(a,e):Af);b=new b(c,f);a.memoizedState=null!==b.state&&void 0!==b.state?b.state:null;b.updater=Jg;a.stateNode=b;b._reactInternalFiber=a;d&&(a=a.stateNode,a.__reactInternalMemoizedUnmaskedChildContext=e,a.__reactInternalMemoizedMaskedChildContext=f);return b}
function Mg(a,b,c,d){a=b.state;"function"===typeof b.componentWillReceiveProps&&b.componentWillReceiveProps(c,d);"function"===typeof b.UNSAFE_componentWillReceiveProps&&b.UNSAFE_componentWillReceiveProps(c,d);b.state!==a&&Jg.enqueueReplaceState(b,b.state,null)}
function Ng(a,b,c,d){var e=a.stateNode;e.props=c;e.state=a.memoizedState;e.refs=Eg;ug(a);var f=b.contextType;"object"===typeof f&&null!==f?e.context=sg(f):(f=L(b)?Bf:J.current,e.context=Cf(a,f));zg(a,c,e,d);e.state=a.memoizedState;f=b.getDerivedStateFromProps;"function"===typeof f&&(Fg(a,b,f,c),e.state=a.memoizedState);"function"===typeof b.getDerivedStateFromProps||"function"===typeof e.getSnapshotBeforeUpdate||"function"!==typeof e.UNSAFE_componentWillMount&&"function"!==typeof e.componentWillMount||
(b=e.state,"function"===typeof e.componentWillMount&&e.componentWillMount(),"function"===typeof e.UNSAFE_componentWillMount&&e.UNSAFE_componentWillMount(),b!==e.state&&Jg.enqueueReplaceState(e,e.state,null),zg(a,c,e,d),e.state=a.memoizedState);"function"===typeof e.componentDidMount&&(a.effectTag|=4)}var Og=Array.isArray;
function Pg(a,b,c){a=c.ref;if(null!==a&&"function"!==typeof a&&"object"!==typeof a){if(c._owner){c=c._owner;if(c){if(1!==c.tag)throw Error(u(309));var d=c.stateNode}if(!d)throw Error(u(147,a));var e=""+a;if(null!==b&&null!==b.ref&&"function"===typeof b.ref&&b.ref._stringRef===e)return b.ref;b=function(a){var b=d.refs;b===Eg&&(b=d.refs={});null===a?delete b[e]:b[e]=a};b._stringRef=e;return b}if("string"!==typeof a)throw Error(u(284));if(!c._owner)throw Error(u(290,a));}return a}
function Qg(a,b){if("textarea"!==a.type)throw Error(u(31,"[object Object]"===Object.prototype.toString.call(b)?"object with keys {"+Object.keys(b).join(", ")+"}":b,""));}
function Rg(a){function b(b,c){if(a){var d=b.lastEffect;null!==d?(d.nextEffect=c,b.lastEffect=c):b.firstEffect=b.lastEffect=c;c.nextEffect=null;c.effectTag=8}}function c(c,d){if(!a)return null;for(;null!==d;)b(c,d),d=d.sibling;return null}function d(a,b){for(a=new Map;null!==b;)null!==b.key?a.set(b.key,b):a.set(b.index,b),b=b.sibling;return a}function e(a,b){a=Sg(a,b);a.index=0;a.sibling=null;return a}function f(b,c,d){b.index=d;if(!a)return c;d=b.alternate;if(null!==d)return d=d.index,d<c?(b.effectTag=
2,c):d;b.effectTag=2;return c}function g(b){a&&null===b.alternate&&(b.effectTag=2);return b}function h(a,b,c,d){if(null===b||6!==b.tag)return b=Tg(c,a.mode,d),b.return=a,b;b=e(b,c);b.return=a;return b}function k(a,b,c,d){if(null!==b&&b.elementType===c.type)return d=e(b,c.props),d.ref=Pg(a,b,c),d.return=a,d;d=Ug(c.type,c.key,c.props,null,a.mode,d);d.ref=Pg(a,b,c);d.return=a;return d}function l(a,b,c,d){if(null===b||4!==b.tag||b.stateNode.containerInfo!==c.containerInfo||b.stateNode.implementation!==
c.implementation)return b=Vg(c,a.mode,d),b.return=a,b;b=e(b,c.children||[]);b.return=a;return b}function m(a,b,c,d,f){if(null===b||7!==b.tag)return b=Wg(c,a.mode,d,f),b.return=a,b;b=e(b,c);b.return=a;return b}function p(a,b,c){if("string"===typeof b||"number"===typeof b)return b=Tg(""+b,a.mode,c),b.return=a,b;if("object"===typeof b&&null!==b){switch(b.$$typeof){case Za:return c=Ug(b.type,b.key,b.props,null,a.mode,c),c.ref=Pg(a,null,b),c.return=a,c;case $a:return b=Vg(b,a.mode,c),b.return=a,b}if(Og(b)||
nb(b))return b=Wg(b,a.mode,c,null),b.return=a,b;Qg(a,b)}return null}function x(a,b,c,d){var e=null!==b?b.key:null;if("string"===typeof c||"number"===typeof c)return null!==e?null:h(a,b,""+c,d);if("object"===typeof c&&null!==c){switch(c.$$typeof){case Za:return c.key===e?c.type===ab?m(a,b,c.props.children,d,e):k(a,b,c,d):null;case $a:return c.key===e?l(a,b,c,d):null}if(Og(c)||nb(c))return null!==e?null:m(a,b,c,d,null);Qg(a,c)}return null}function z(a,b,c,d,e){if("string"===typeof d||"number"===typeof d)return a=
a.get(c)||null,h(b,a,""+d,e);if("object"===typeof d&&null!==d){switch(d.$$typeof){case Za:return a=a.get(null===d.key?c:d.key)||null,d.type===ab?m(b,a,d.props.children,e,d.key):k(b,a,d,e);case $a:return a=a.get(null===d.key?c:d.key)||null,l(b,a,d,e)}if(Og(d)||nb(d))return a=a.get(c)||null,m(b,a,d,e,null);Qg(b,d)}return null}function ca(e,g,h,k){for(var l=null,t=null,m=g,y=g=0,A=null;null!==m&&y<h.length;y++){m.index>y?(A=m,m=null):A=m.sibling;var q=x(e,m,h[y],k);if(null===q){null===m&&(m=A);break}a&&
m&&null===q.alternate&&b(e,m);g=f(q,g,y);null===t?l=q:t.sibling=q;t=q;m=A}if(y===h.length)return c(e,m),l;if(null===m){for(;y<h.length;y++)m=p(e,h[y],k),null!==m&&(g=f(m,g,y),null===t?l=m:t.sibling=m,t=m);return l}for(m=d(e,m);y<h.length;y++)A=z(m,e,y,h[y],k),null!==A&&(a&&null!==A.alternate&&m.delete(null===A.key?y:A.key),g=f(A,g,y),null===t?l=A:t.sibling=A,t=A);a&&m.forEach(function(a){return b(e,a)});return l}function D(e,g,h,l){var k=nb(h);if("function"!==typeof k)throw Error(u(150));h=k.call(h);
if(null==h)throw Error(u(151));for(var m=k=null,t=g,y=g=0,A=null,q=h.next();null!==t&&!q.done;y++,q=h.next()){t.index>y?(A=t,t=null):A=t.sibling;var D=x(e,t,q.value,l);if(null===D){null===t&&(t=A);break}a&&t&&null===D.alternate&&b(e,t);g=f(D,g,y);null===m?k=D:m.sibling=D;m=D;t=A}if(q.done)return c(e,t),k;if(null===t){for(;!q.done;y++,q=h.next())q=p(e,q.value,l),null!==q&&(g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);return k}for(t=d(e,t);!q.done;y++,q=h.next())q=z(t,e,y,q.value,l),null!==q&&(a&&null!==
q.alternate&&t.delete(null===q.key?y:q.key),g=f(q,g,y),null===m?k=q:m.sibling=q,m=q);a&&t.forEach(function(a){return b(e,a)});return k}return function(a,d,f,h){var k="object"===typeof f&&null!==f&&f.type===ab&&null===f.key;k&&(f=f.props.children);var l="object"===typeof f&&null!==f;if(l)switch(f.$$typeof){case Za:a:{l=f.key;for(k=d;null!==k;){if(k.key===l){switch(k.tag){case 7:if(f.type===ab){c(a,k.sibling);d=e(k,f.props.children);d.return=a;a=d;break a}break;default:if(k.elementType===f.type){c(a,
k.sibling);d=e(k,f.props);d.ref=Pg(a,k,f);d.return=a;a=d;break a}}c(a,k);break}else b(a,k);k=k.sibling}f.type===ab?(d=Wg(f.props.children,a.mode,h,f.key),d.return=a,a=d):(h=Ug(f.type,f.key,f.props,null,a.mode,h),h.ref=Pg(a,d,f),h.return=a,a=h)}return g(a);case $a:a:{for(k=f.key;null!==d;){if(d.key===k)if(4===d.tag&&d.stateNode.containerInfo===f.containerInfo&&d.stateNode.implementation===f.implementation){c(a,d.sibling);d=e(d,f.children||[]);d.return=a;a=d;break a}else{c(a,d);break}else b(a,d);d=
d.sibling}d=Vg(f,a.mode,h);d.return=a;a=d}return g(a)}if("string"===typeof f||"number"===typeof f)return f=""+f,null!==d&&6===d.tag?(c(a,d.sibling),d=e(d,f),d.return=a,a=d):(c(a,d),d=Tg(f,a.mode,h),d.return=a,a=d),g(a);if(Og(f))return ca(a,d,f,h);if(nb(f))return D(a,d,f,h);l&&Qg(a,f);if("undefined"===typeof f&&!k)switch(a.tag){case 1:case 0:throw a=a.type,Error(u(152,a.displayName||a.name||"Component"));}return c(a,d)}}var Xg=Rg(!0),Yg=Rg(!1),Zg={},$g={current:Zg},ah={current:Zg},bh={current:Zg};
function ch(a){if(a===Zg)throw Error(u(174));return a}function dh(a,b){I(bh,b);I(ah,a);I($g,Zg);a=b.nodeType;switch(a){case 9:case 11:b=(b=b.documentElement)?b.namespaceURI:Ob(null,"");break;default:a=8===a?b.parentNode:b,b=a.namespaceURI||null,a=a.tagName,b=Ob(b,a)}H($g);I($g,b)}function eh(){H($g);H(ah);H(bh)}function fh(a){ch(bh.current);var b=ch($g.current);var c=Ob(b,a.type);b!==c&&(I(ah,a),I($g,c))}function gh(a){ah.current===a&&(H($g),H(ah))}var M={current:0};
function hh(a){for(var b=a;null!==b;){if(13===b.tag){var c=b.memoizedState;if(null!==c&&(c=c.dehydrated,null===c||c.data===Bd||c.data===Cd))return b}else if(19===b.tag&&void 0!==b.memoizedProps.revealOrder){if(0!==(b.effectTag&64))return b}else if(null!==b.child){b.child.return=b;b=b.child;continue}if(b===a)break;for(;null===b.sibling;){if(null===b.return||b.return===a)return null;b=b.return}b.sibling.return=b.return;b=b.sibling}return null}function ih(a,b){return{responder:a,props:b}}
var jh=Wa.ReactCurrentDispatcher,kh=Wa.ReactCurrentBatchConfig,lh=0,N=null,O=null,P=null,mh=!1;function Q(){throw Error(u(321));}function nh(a,b){if(null===b)return!1;for(var c=0;c<b.length&&c<a.length;c++)if(!$e(a[c],b[c]))return!1;return!0}
function oh(a,b,c,d,e,f){lh=f;N=b;b.memoizedState=null;b.updateQueue=null;b.expirationTime=0;jh.current=null===a||null===a.memoizedState?ph:qh;a=c(d,e);if(b.expirationTime===lh){f=0;do{b.expirationTime=0;if(!(25>f))throw Error(u(301));f+=1;P=O=null;b.updateQueue=null;jh.current=rh;a=c(d,e)}while(b.expirationTime===lh)}jh.current=sh;b=null!==O&&null!==O.next;lh=0;P=O=N=null;mh=!1;if(b)throw Error(u(300));return a}
function th(){var a={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};null===P?N.memoizedState=P=a:P=P.next=a;return P}function uh(){if(null===O){var a=N.alternate;a=null!==a?a.memoizedState:null}else a=O.next;var b=null===P?N.memoizedState:P.next;if(null!==b)P=b,O=a;else{if(null===a)throw Error(u(310));O=a;a={memoizedState:O.memoizedState,baseState:O.baseState,baseQueue:O.baseQueue,queue:O.queue,next:null};null===P?N.memoizedState=P=a:P=P.next=a}return P}
function vh(a,b){return"function"===typeof b?b(a):b}
function wh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=O,e=d.baseQueue,f=c.pending;if(null!==f){if(null!==e){var g=e.next;e.next=f.next;f.next=g}d.baseQueue=e=f;c.pending=null}if(null!==e){e=e.next;d=d.baseState;var h=g=f=null,k=e;do{var l=k.expirationTime;if(l<lh){var m={expirationTime:k.expirationTime,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null};null===h?(g=h=m,f=d):h=h.next=m;l>N.expirationTime&&
(N.expirationTime=l,Bg(l))}else null!==h&&(h=h.next={expirationTime:1073741823,suspenseConfig:k.suspenseConfig,action:k.action,eagerReducer:k.eagerReducer,eagerState:k.eagerState,next:null}),Ag(l,k.suspenseConfig),d=k.eagerReducer===a?k.eagerState:a(d,k.action);k=k.next}while(null!==k&&k!==e);null===h?f=d:h.next=g;$e(d,b.memoizedState)||(rg=!0);b.memoizedState=d;b.baseState=f;b.baseQueue=h;c.lastRenderedState=d}return[b.memoizedState,c.dispatch]}
function xh(a){var b=uh(),c=b.queue;if(null===c)throw Error(u(311));c.lastRenderedReducer=a;var d=c.dispatch,e=c.pending,f=b.memoizedState;if(null!==e){c.pending=null;var g=e=e.next;do f=a(f,g.action),g=g.next;while(g!==e);$e(f,b.memoizedState)||(rg=!0);b.memoizedState=f;null===b.baseQueue&&(b.baseState=f);c.lastRenderedState=f}return[f,d]}
function yh(a){var b=th();"function"===typeof a&&(a=a());b.memoizedState=b.baseState=a;a=b.queue={pending:null,dispatch:null,lastRenderedReducer:vh,lastRenderedState:a};a=a.dispatch=zh.bind(null,N,a);return[b.memoizedState,a]}function Ah(a,b,c,d){a={tag:a,create:b,destroy:c,deps:d,next:null};b=N.updateQueue;null===b?(b={lastEffect:null},N.updateQueue=b,b.lastEffect=a.next=a):(c=b.lastEffect,null===c?b.lastEffect=a.next=a:(d=c.next,c.next=a,a.next=d,b.lastEffect=a));return a}
function Bh(){return uh().memoizedState}function Ch(a,b,c,d){var e=th();N.effectTag|=a;e.memoizedState=Ah(1|b,c,void 0,void 0===d?null:d)}function Dh(a,b,c,d){var e=uh();d=void 0===d?null:d;var f=void 0;if(null!==O){var g=O.memoizedState;f=g.destroy;if(null!==d&&nh(d,g.deps)){Ah(b,c,f,d);return}}N.effectTag|=a;e.memoizedState=Ah(1|b,c,f,d)}function Eh(a,b){return Ch(516,4,a,b)}function Fh(a,b){return Dh(516,4,a,b)}function Gh(a,b){return Dh(4,2,a,b)}
function Hh(a,b){if("function"===typeof b)return a=a(),b(a),function(){b(null)};if(null!==b&&void 0!==b)return a=a(),b.current=a,function(){b.current=null}}function Ih(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Dh(4,2,Hh.bind(null,b,a),c)}function Jh(){}function Kh(a,b){th().memoizedState=[a,void 0===b?null:b];return a}function Lh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];c.memoizedState=[a,b];return a}
function Mh(a,b){var c=uh();b=void 0===b?null:b;var d=c.memoizedState;if(null!==d&&null!==b&&nh(b,d[1]))return d[0];a=a();c.memoizedState=[a,b];return a}function Nh(a,b,c){var d=ag();cg(98>d?98:d,function(){a(!0)});cg(97<d?97:d,function(){var d=kh.suspense;kh.suspense=void 0===b?null:b;try{a(!1),c()}finally{kh.suspense=d}})}
function zh(a,b,c){var d=Gg(),e=Dg.suspense;d=Hg(d,a,e);e={expirationTime:d,suspenseConfig:e,action:c,eagerReducer:null,eagerState:null,next:null};var f=b.pending;null===f?e.next=e:(e.next=f.next,f.next=e);b.pending=e;f=a.alternate;if(a===N||null!==f&&f===N)mh=!0,e.expirationTime=lh,N.expirationTime=lh;else{if(0===a.expirationTime&&(null===f||0===f.expirationTime)&&(f=b.lastRenderedReducer,null!==f))try{var g=b.lastRenderedState,h=f(g,c);e.eagerReducer=f;e.eagerState=h;if($e(h,g))return}catch(k){}finally{}Ig(a,
d)}}
var sh={readContext:sg,useCallback:Q,useContext:Q,useEffect:Q,useImperativeHandle:Q,useLayoutEffect:Q,useMemo:Q,useReducer:Q,useRef:Q,useState:Q,useDebugValue:Q,useResponder:Q,useDeferredValue:Q,useTransition:Q},ph={readContext:sg,useCallback:Kh,useContext:sg,useEffect:Eh,useImperativeHandle:function(a,b,c){c=null!==c&&void 0!==c?c.concat([a]):null;return Ch(4,2,Hh.bind(null,b,a),c)},useLayoutEffect:function(a,b){return Ch(4,2,a,b)},useMemo:function(a,b){var c=th();b=void 0===b?null:b;a=a();c.memoizedState=[a,
b];return a},useReducer:function(a,b,c){var d=th();b=void 0!==c?c(b):b;d.memoizedState=d.baseState=b;a=d.queue={pending:null,dispatch:null,lastRenderedReducer:a,lastRenderedState:b};a=a.dispatch=zh.bind(null,N,a);return[d.memoizedState,a]},useRef:function(a){var b=th();a={current:a};return b.memoizedState=a},useState:yh,useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=yh(a),d=c[0],e=c[1];Eh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=
c}},[a,b]);return d},useTransition:function(a){var b=yh(!1),c=b[0];b=b[1];return[Kh(Nh.bind(null,b,a),[b,a]),c]}},qh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:wh,useRef:Bh,useState:function(){return wh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=wh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=
wh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,b,a),[b,a]),c]}},rh={readContext:sg,useCallback:Lh,useContext:sg,useEffect:Fh,useImperativeHandle:Ih,useLayoutEffect:Gh,useMemo:Mh,useReducer:xh,useRef:Bh,useState:function(){return xh(vh)},useDebugValue:Jh,useResponder:ih,useDeferredValue:function(a,b){var c=xh(vh),d=c[0],e=c[1];Fh(function(){var c=kh.suspense;kh.suspense=void 0===b?null:b;try{e(a)}finally{kh.suspense=c}},[a,b]);return d},useTransition:function(a){var b=xh(vh),c=b[0];b=b[1];return[Lh(Nh.bind(null,
b,a),[b,a]),c]}},Oh=null,Ph=null,Qh=!1;function Rh(a,b){var c=Sh(5,null,null,0);c.elementType="DELETED";c.type="DELETED";c.stateNode=b;c.return=a;c.effectTag=8;null!==a.lastEffect?(a.lastEffect.nextEffect=c,a.lastEffect=c):a.firstEffect=a.lastEffect=c}
function Th(a,b){switch(a.tag){case 5:var c=a.type;b=1!==b.nodeType||c.toLowerCase()!==b.nodeName.toLowerCase()?null:b;return null!==b?(a.stateNode=b,!0):!1;case 6:return b=""===a.pendingProps||3!==b.nodeType?null:b,null!==b?(a.stateNode=b,!0):!1;case 13:return!1;default:return!1}}
function Uh(a){if(Qh){var b=Ph;if(b){var c=b;if(!Th(a,b)){b=Jd(c.nextSibling);if(!b||!Th(a,b)){a.effectTag=a.effectTag&-1025|2;Qh=!1;Oh=a;return}Rh(Oh,c)}Oh=a;Ph=Jd(b.firstChild)}else a.effectTag=a.effectTag&-1025|2,Qh=!1,Oh=a}}function Vh(a){for(a=a.return;null!==a&&5!==a.tag&&3!==a.tag&&13!==a.tag;)a=a.return;Oh=a}
function Wh(a){if(a!==Oh)return!1;if(!Qh)return Vh(a),Qh=!0,!1;var b=a.type;if(5!==a.tag||"head"!==b&&"body"!==b&&!Gd(b,a.memoizedProps))for(b=Ph;b;)Rh(a,b),b=Jd(b.nextSibling);Vh(a);if(13===a.tag){a=a.memoizedState;a=null!==a?a.dehydrated:null;if(!a)throw Error(u(317));a:{a=a.nextSibling;for(b=0;a;){if(8===a.nodeType){var c=a.data;if(c===Ad){if(0===b){Ph=Jd(a.nextSibling);break a}b--}else c!==zd&&c!==Cd&&c!==Bd||b++}a=a.nextSibling}Ph=null}}else Ph=Oh?Jd(a.stateNode.nextSibling):null;return!0}
function Xh(){Ph=Oh=null;Qh=!1}var Yh=Wa.ReactCurrentOwner,rg=!1;function R(a,b,c,d){b.child=null===a?Yg(b,null,c,d):Xg(b,a.child,c,d)}function Zh(a,b,c,d,e){c=c.render;var f=b.ref;qg(b,e);d=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,d,e);return b.child}
function ai(a,b,c,d,e,f){if(null===a){var g=c.type;if("function"===typeof g&&!bi(g)&&void 0===g.defaultProps&&null===c.compare&&void 0===c.defaultProps)return b.tag=15,b.type=g,ci(a,b,g,d,e,f);a=Ug(c.type,null,d,null,b.mode,f);a.ref=b.ref;a.return=b;return b.child=a}g=a.child;if(e<f&&(e=g.memoizedProps,c=c.compare,c=null!==c?c:bf,c(e,d)&&a.ref===b.ref))return $h(a,b,f);b.effectTag|=1;a=Sg(g,d);a.ref=b.ref;a.return=b;return b.child=a}
function ci(a,b,c,d,e,f){return null!==a&&bf(a.memoizedProps,d)&&a.ref===b.ref&&(rg=!1,e<f)?(b.expirationTime=a.expirationTime,$h(a,b,f)):di(a,b,c,d,f)}function ei(a,b){var c=b.ref;if(null===a&&null!==c||null!==a&&a.ref!==c)b.effectTag|=128}function di(a,b,c,d,e){var f=L(c)?Bf:J.current;f=Cf(b,f);qg(b,e);c=oh(a,b,c,d,f,e);if(null!==a&&!rg)return b.updateQueue=a.updateQueue,b.effectTag&=-517,a.expirationTime<=e&&(a.expirationTime=0),$h(a,b,e);b.effectTag|=1;R(a,b,c,e);return b.child}
function fi(a,b,c,d,e){if(L(c)){var f=!0;Gf(b)}else f=!1;qg(b,e);if(null===b.stateNode)null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),Lg(b,c,d),Ng(b,c,d,e),d=!0;else if(null===a){var g=b.stateNode,h=b.memoizedProps;g.props=h;var k=g.context,l=c.contextType;"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l));var m=c.getDerivedStateFromProps,p="function"===typeof m||"function"===typeof g.getSnapshotBeforeUpdate;p||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&
"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l);tg=!1;var x=b.memoizedState;g.state=x;zg(b,d,g,e);k=b.memoizedState;h!==d||x!==k||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),k=b.memoizedState),(h=tg||Kg(b,c,h,d,x,k,l))?(p||"function"!==typeof g.UNSAFE_componentWillMount&&"function"!==typeof g.componentWillMount||("function"===typeof g.componentWillMount&&g.componentWillMount(),"function"===typeof g.UNSAFE_componentWillMount&&g.UNSAFE_componentWillMount()),"function"===
typeof g.componentDidMount&&(b.effectTag|=4)):("function"===typeof g.componentDidMount&&(b.effectTag|=4),b.memoizedProps=d,b.memoizedState=k),g.props=d,g.state=k,g.context=l,d=h):("function"===typeof g.componentDidMount&&(b.effectTag|=4),d=!1)}else g=b.stateNode,vg(a,b),h=b.memoizedProps,g.props=b.type===b.elementType?h:ig(b.type,h),k=g.context,l=c.contextType,"object"===typeof l&&null!==l?l=sg(l):(l=L(c)?Bf:J.current,l=Cf(b,l)),m=c.getDerivedStateFromProps,(p="function"===typeof m||"function"===
typeof g.getSnapshotBeforeUpdate)||"function"!==typeof g.UNSAFE_componentWillReceiveProps&&"function"!==typeof g.componentWillReceiveProps||(h!==d||k!==l)&&Mg(b,g,d,l),tg=!1,k=b.memoizedState,g.state=k,zg(b,d,g,e),x=b.memoizedState,h!==d||k!==x||K.current||tg?("function"===typeof m&&(Fg(b,c,m,d),x=b.memoizedState),(m=tg||Kg(b,c,h,d,k,x,l))?(p||"function"!==typeof g.UNSAFE_componentWillUpdate&&"function"!==typeof g.componentWillUpdate||("function"===typeof g.componentWillUpdate&&g.componentWillUpdate(d,
x,l),"function"===typeof g.UNSAFE_componentWillUpdate&&g.UNSAFE_componentWillUpdate(d,x,l)),"function"===typeof g.componentDidUpdate&&(b.effectTag|=4),"function"===typeof g.getSnapshotBeforeUpdate&&(b.effectTag|=256)):("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),b.memoizedProps=d,b.memoizedState=x),g.props=d,g.state=x,g.context=l,d=m):
("function"!==typeof g.componentDidUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=4),"function"!==typeof g.getSnapshotBeforeUpdate||h===a.memoizedProps&&k===a.memoizedState||(b.effectTag|=256),d=!1);return gi(a,b,c,d,f,e)}
function gi(a,b,c,d,e,f){ei(a,b);var g=0!==(b.effectTag&64);if(!d&&!g)return e&&Hf(b,c,!1),$h(a,b,f);d=b.stateNode;Yh.current=b;var h=g&&"function"!==typeof c.getDerivedStateFromError?null:d.render();b.effectTag|=1;null!==a&&g?(b.child=Xg(b,a.child,null,f),b.child=Xg(b,null,h,f)):R(a,b,h,f);b.memoizedState=d.state;e&&Hf(b,c,!0);return b.child}function hi(a){var b=a.stateNode;b.pendingContext?Ef(a,b.pendingContext,b.pendingContext!==b.context):b.context&&Ef(a,b.context,!1);dh(a,b.containerInfo)}
var ii={dehydrated:null,retryTime:0};
function ji(a,b,c){var d=b.mode,e=b.pendingProps,f=M.current,g=!1,h;(h=0!==(b.effectTag&64))||(h=0!==(f&2)&&(null===a||null!==a.memoizedState));h?(g=!0,b.effectTag&=-65):null!==a&&null===a.memoizedState||void 0===e.fallback||!0===e.unstable_avoidThisFallback||(f|=1);I(M,f&1);if(null===a){void 0!==e.fallback&&Uh(b);if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=
b;e.sibling=c;b.memoizedState=ii;b.child=e;return c}d=e.children;b.memoizedState=null;return b.child=Yg(b,null,d,c)}if(null!==a.memoizedState){a=a.child;d=a.sibling;if(g){e=e.fallback;c=Sg(a,a.pendingProps);c.return=b;if(0===(b.mode&2)&&(g=null!==b.memoizedState?b.child.child:b.child,g!==a.child))for(c.child=g;null!==g;)g.return=c,g=g.sibling;d=Sg(d,e);d.return=b;c.sibling=d;c.childExpirationTime=0;b.memoizedState=ii;b.child=c;return d}c=Xg(b,a.child,e.children,c);b.memoizedState=null;return b.child=
c}a=a.child;if(g){g=e.fallback;e=Wg(null,d,0,null);e.return=b;e.child=a;null!==a&&(a.return=e);if(0===(b.mode&2))for(a=null!==b.memoizedState?b.child.child:b.child,e.child=a;null!==a;)a.return=e,a=a.sibling;c=Wg(g,d,c,null);c.return=b;e.sibling=c;c.effectTag|=2;e.childExpirationTime=0;b.memoizedState=ii;b.child=e;return c}b.memoizedState=null;return b.child=Xg(b,a,e.children,c)}
function ki(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);pg(a.return,b)}function li(a,b,c,d,e,f){var g=a.memoizedState;null===g?a.memoizedState={isBackwards:b,rendering:null,renderingStartTime:0,last:d,tail:c,tailExpiration:0,tailMode:e,lastEffect:f}:(g.isBackwards=b,g.rendering=null,g.renderingStartTime=0,g.last=d,g.tail=c,g.tailExpiration=0,g.tailMode=e,g.lastEffect=f)}
function mi(a,b,c){var d=b.pendingProps,e=d.revealOrder,f=d.tail;R(a,b,d.children,c);d=M.current;if(0!==(d&2))d=d&1|2,b.effectTag|=64;else{if(null!==a&&0!==(a.effectTag&64))a:for(a=b.child;null!==a;){if(13===a.tag)null!==a.memoizedState&&ki(a,c);else if(19===a.tag)ki(a,c);else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===b)break a;for(;null===a.sibling;){if(null===a.return||a.return===b)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}d&=1}I(M,d);if(0===(b.mode&2))b.memoizedState=
null;else switch(e){case "forwards":c=b.child;for(e=null;null!==c;)a=c.alternate,null!==a&&null===hh(a)&&(e=c),c=c.sibling;c=e;null===c?(e=b.child,b.child=null):(e=c.sibling,c.sibling=null);li(b,!1,e,c,f,b.lastEffect);break;case "backwards":c=null;e=b.child;for(b.child=null;null!==e;){a=e.alternate;if(null!==a&&null===hh(a)){b.child=e;break}a=e.sibling;e.sibling=c;c=e;e=a}li(b,!0,c,null,f,b.lastEffect);break;case "together":li(b,!1,null,null,void 0,b.lastEffect);break;default:b.memoizedState=null}return b.child}
function $h(a,b,c){null!==a&&(b.dependencies=a.dependencies);var d=b.expirationTime;0!==d&&Bg(d);if(b.childExpirationTime<c)return null;if(null!==a&&b.child!==a.child)throw Error(u(153));if(null!==b.child){a=b.child;c=Sg(a,a.pendingProps);b.child=c;for(c.return=b;null!==a.sibling;)a=a.sibling,c=c.sibling=Sg(a,a.pendingProps),c.return=b;c.sibling=null}return b.child}var ni,oi,pi,qi;
ni=function(a,b){for(var c=b.child;null!==c;){if(5===c.tag||6===c.tag)a.appendChild(c.stateNode);else if(4!==c.tag&&null!==c.child){c.child.return=c;c=c.child;continue}if(c===b)break;for(;null===c.sibling;){if(null===c.return||c.return===b)return;c=c.return}c.sibling.return=c.return;c=c.sibling}};oi=function(){};
pi=function(a,b,c,d,e){var f=a.memoizedProps;if(f!==d){var g=b.stateNode;ch($g.current);a=null;switch(c){case "input":f=zb(g,f);d=zb(g,d);a=[];break;case "option":f=Gb(g,f);d=Gb(g,d);a=[];break;case "select":f=n({},f,{value:void 0});d=n({},d,{value:void 0});a=[];break;case "textarea":f=Ib(g,f);d=Ib(g,d);a=[];break;default:"function"!==typeof f.onClick&&"function"===typeof d.onClick&&(g.onclick=sd)}od(c,d);var h,k;c=null;for(h in f)if(!d.hasOwnProperty(h)&&f.hasOwnProperty(h)&&null!=f[h])if("style"===
h)for(k in g=f[h],g)g.hasOwnProperty(k)&&(c||(c={}),c[k]="");else"dangerouslySetInnerHTML"!==h&&"children"!==h&&"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&"autoFocus"!==h&&(va.hasOwnProperty(h)?a||(a=[]):(a=a||[]).push(h,null));for(h in d){var l=d[h];g=null!=f?f[h]:void 0;if(d.hasOwnProperty(h)&&l!==g&&(null!=l||null!=g))if("style"===h)if(g){for(k in g)!g.hasOwnProperty(k)||l&&l.hasOwnProperty(k)||(c||(c={}),c[k]="");for(k in l)l.hasOwnProperty(k)&&g[k]!==l[k]&&(c||(c={}),
c[k]=l[k])}else c||(a||(a=[]),a.push(h,c)),c=l;else"dangerouslySetInnerHTML"===h?(l=l?l.__html:void 0,g=g?g.__html:void 0,null!=l&&g!==l&&(a=a||[]).push(h,l)):"children"===h?g===l||"string"!==typeof l&&"number"!==typeof l||(a=a||[]).push(h,""+l):"suppressContentEditableWarning"!==h&&"suppressHydrationWarning"!==h&&(va.hasOwnProperty(h)?(null!=l&&rd(e,h),a||g===l||(a=[])):(a=a||[]).push(h,l))}c&&(a=a||[]).push("style",c);e=a;if(b.updateQueue=e)b.effectTag|=4}};
qi=function(a,b,c,d){c!==d&&(b.effectTag|=4)};function ri(a,b){switch(a.tailMode){case "hidden":b=a.tail;for(var c=null;null!==b;)null!==b.alternate&&(c=b),b=b.sibling;null===c?a.tail=null:c.sibling=null;break;case "collapsed":c=a.tail;for(var d=null;null!==c;)null!==c.alternate&&(d=c),c=c.sibling;null===d?b||null===a.tail?a.tail=null:a.tail.sibling=null:d.sibling=null}}
function si(a,b,c){var d=b.pendingProps;switch(b.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:return L(b.type)&&Df(),null;case 3:return eh(),H(K),H(J),c=b.stateNode,c.pendingContext&&(c.context=c.pendingContext,c.pendingContext=null),null!==a&&null!==a.child||!Wh(b)||(b.effectTag|=4),oi(b),null;case 5:gh(b);c=ch(bh.current);var e=b.type;if(null!==a&&null!=b.stateNode)pi(a,b,e,d,c),a.ref!==b.ref&&(b.effectTag|=128);else{if(!d){if(null===b.stateNode)throw Error(u(166));
return null}a=ch($g.current);if(Wh(b)){d=b.stateNode;e=b.type;var f=b.memoizedProps;d[Md]=b;d[Nd]=f;switch(e){case "iframe":case "object":case "embed":F("load",d);break;case "video":case "audio":for(a=0;a<ac.length;a++)F(ac[a],d);break;case "source":F("error",d);break;case "img":case "image":case "link":F("error",d);F("load",d);break;case "form":F("reset",d);F("submit",d);break;case "details":F("toggle",d);break;case "input":Ab(d,f);F("invalid",d);rd(c,"onChange");break;case "select":d._wrapperState=
{wasMultiple:!!f.multiple};F("invalid",d);rd(c,"onChange");break;case "textarea":Jb(d,f),F("invalid",d),rd(c,"onChange")}od(e,f);a=null;for(var g in f)if(f.hasOwnProperty(g)){var h=f[g];"children"===g?"string"===typeof h?d.textContent!==h&&(a=["children",h]):"number"===typeof h&&d.textContent!==""+h&&(a=["children",""+h]):va.hasOwnProperty(g)&&null!=h&&rd(c,g)}switch(e){case "input":xb(d);Eb(d,f,!0);break;case "textarea":xb(d);Lb(d);break;case "select":case "option":break;default:"function"===typeof f.onClick&&
(d.onclick=sd)}c=a;b.updateQueue=c;null!==c&&(b.effectTag|=4)}else{g=9===c.nodeType?c:c.ownerDocument;a===qd&&(a=Nb(e));a===qd?"script"===e?(a=g.createElement("div"),a.innerHTML="<script>\x3c/script>",a=a.removeChild(a.firstChild)):"string"===typeof d.is?a=g.createElement(e,{is:d.is}):(a=g.createElement(e),"select"===e&&(g=a,d.multiple?g.multiple=!0:d.size&&(g.size=d.size))):a=g.createElementNS(a,e);a[Md]=b;a[Nd]=d;ni(a,b,!1,!1);b.stateNode=a;g=pd(e,d);switch(e){case "iframe":case "object":case "embed":F("load",
a);h=d;break;case "video":case "audio":for(h=0;h<ac.length;h++)F(ac[h],a);h=d;break;case "source":F("error",a);h=d;break;case "img":case "image":case "link":F("error",a);F("load",a);h=d;break;case "form":F("reset",a);F("submit",a);h=d;break;case "details":F("toggle",a);h=d;break;case "input":Ab(a,d);h=zb(a,d);F("invalid",a);rd(c,"onChange");break;case "option":h=Gb(a,d);break;case "select":a._wrapperState={wasMultiple:!!d.multiple};h=n({},d,{value:void 0});F("invalid",a);rd(c,"onChange");break;case "textarea":Jb(a,
d);h=Ib(a,d);F("invalid",a);rd(c,"onChange");break;default:h=d}od(e,h);var k=h;for(f in k)if(k.hasOwnProperty(f)){var l=k[f];"style"===f?md(a,l):"dangerouslySetInnerHTML"===f?(l=l?l.__html:void 0,null!=l&&Qb(a,l)):"children"===f?"string"===typeof l?("textarea"!==e||""!==l)&&Rb(a,l):"number"===typeof l&&Rb(a,""+l):"suppressContentEditableWarning"!==f&&"suppressHydrationWarning"!==f&&"autoFocus"!==f&&(va.hasOwnProperty(f)?null!=l&&rd(c,f):null!=l&&Xa(a,f,l,g))}switch(e){case "input":xb(a);Eb(a,d,!1);
break;case "textarea":xb(a);Lb(a);break;case "option":null!=d.value&&a.setAttribute("value",""+rb(d.value));break;case "select":a.multiple=!!d.multiple;c=d.value;null!=c?Hb(a,!!d.multiple,c,!1):null!=d.defaultValue&&Hb(a,!!d.multiple,d.defaultValue,!0);break;default:"function"===typeof h.onClick&&(a.onclick=sd)}Fd(e,d)&&(b.effectTag|=4)}null!==b.ref&&(b.effectTag|=128)}return null;case 6:if(a&&null!=b.stateNode)qi(a,b,a.memoizedProps,d);else{if("string"!==typeof d&&null===b.stateNode)throw Error(u(166));
c=ch(bh.current);ch($g.current);Wh(b)?(c=b.stateNode,d=b.memoizedProps,c[Md]=b,c.nodeValue!==d&&(b.effectTag|=4)):(c=(9===c.nodeType?c:c.ownerDocument).createTextNode(d),c[Md]=b,b.stateNode=c)}return null;case 13:H(M);d=b.memoizedState;if(0!==(b.effectTag&64))return b.expirationTime=c,b;c=null!==d;d=!1;null===a?void 0!==b.memoizedProps.fallback&&Wh(b):(e=a.memoizedState,d=null!==e,c||null===e||(e=a.child.sibling,null!==e&&(f=b.firstEffect,null!==f?(b.firstEffect=e,e.nextEffect=f):(b.firstEffect=b.lastEffect=
e,e.nextEffect=null),e.effectTag=8)));if(c&&!d&&0!==(b.mode&2))if(null===a&&!0!==b.memoizedProps.unstable_avoidThisFallback||0!==(M.current&1))S===ti&&(S=ui);else{if(S===ti||S===ui)S=vi;0!==wi&&null!==T&&(xi(T,U),yi(T,wi))}if(c||d)b.effectTag|=4;return null;case 4:return eh(),oi(b),null;case 10:return og(b),null;case 17:return L(b.type)&&Df(),null;case 19:H(M);d=b.memoizedState;if(null===d)return null;e=0!==(b.effectTag&64);f=d.rendering;if(null===f)if(e)ri(d,!1);else{if(S!==ti||null!==a&&0!==(a.effectTag&
64))for(f=b.child;null!==f;){a=hh(f);if(null!==a){b.effectTag|=64;ri(d,!1);e=a.updateQueue;null!==e&&(b.updateQueue=e,b.effectTag|=4);null===d.lastEffect&&(b.firstEffect=null);b.lastEffect=d.lastEffect;for(d=b.child;null!==d;)e=d,f=c,e.effectTag&=2,e.nextEffect=null,e.firstEffect=null,e.lastEffect=null,a=e.alternate,null===a?(e.childExpirationTime=0,e.expirationTime=f,e.child=null,e.memoizedProps=null,e.memoizedState=null,e.updateQueue=null,e.dependencies=null):(e.childExpirationTime=a.childExpirationTime,
e.expirationTime=a.expirationTime,e.child=a.child,e.memoizedProps=a.memoizedProps,e.memoizedState=a.memoizedState,e.updateQueue=a.updateQueue,f=a.dependencies,e.dependencies=null===f?null:{expirationTime:f.expirationTime,firstContext:f.firstContext,responders:f.responders}),d=d.sibling;I(M,M.current&1|2);return b.child}f=f.sibling}}else{if(!e)if(a=hh(f),null!==a){if(b.effectTag|=64,e=!0,c=a.updateQueue,null!==c&&(b.updateQueue=c,b.effectTag|=4),ri(d,!0),null===d.tail&&"hidden"===d.tailMode&&!f.alternate)return b=
b.lastEffect=d.lastEffect,null!==b&&(b.nextEffect=null),null}else 2*$f()-d.renderingStartTime>d.tailExpiration&&1<c&&(b.effectTag|=64,e=!0,ri(d,!1),b.expirationTime=b.childExpirationTime=c-1);d.isBackwards?(f.sibling=b.child,b.child=f):(c=d.last,null!==c?c.sibling=f:b.child=f,d.last=f)}return null!==d.tail?(0===d.tailExpiration&&(d.tailExpiration=$f()+500),c=d.tail,d.rendering=c,d.tail=c.sibling,d.lastEffect=b.lastEffect,d.renderingStartTime=$f(),c.sibling=null,b=M.current,I(M,e?b&1|2:b&1),c):null}throw Error(u(156,
b.tag));}function zi(a){switch(a.tag){case 1:L(a.type)&&Df();var b=a.effectTag;return b&4096?(a.effectTag=b&-4097|64,a):null;case 3:eh();H(K);H(J);b=a.effectTag;if(0!==(b&64))throw Error(u(285));a.effectTag=b&-4097|64;return a;case 5:return gh(a),null;case 13:return H(M),b=a.effectTag,b&4096?(a.effectTag=b&-4097|64,a):null;case 19:return H(M),null;case 4:return eh(),null;case 10:return og(a),null;default:return null}}function Ai(a,b){return{value:a,source:b,stack:qb(b)}}
var Bi="function"===typeof WeakSet?WeakSet:Set;function Ci(a,b){var c=b.source,d=b.stack;null===d&&null!==c&&(d=qb(c));null!==c&&pb(c.type);b=b.value;null!==a&&1===a.tag&&pb(a.type);try{console.error(b)}catch(e){setTimeout(function(){throw e;})}}function Di(a,b){try{b.props=a.memoizedProps,b.state=a.memoizedState,b.componentWillUnmount()}catch(c){Ei(a,c)}}function Fi(a){var b=a.ref;if(null!==b)if("function"===typeof b)try{b(null)}catch(c){Ei(a,c)}else b.current=null}
function Gi(a,b){switch(b.tag){case 0:case 11:case 15:case 22:return;case 1:if(b.effectTag&256&&null!==a){var c=a.memoizedProps,d=a.memoizedState;a=b.stateNode;b=a.getSnapshotBeforeUpdate(b.elementType===b.type?c:ig(b.type,c),d);a.__reactInternalSnapshotBeforeUpdate=b}return;case 3:case 5:case 6:case 4:case 17:return}throw Error(u(163));}
function Hi(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.destroy;c.destroy=void 0;void 0!==d&&d()}c=c.next}while(c!==b)}}function Ii(a,b){b=b.updateQueue;b=null!==b?b.lastEffect:null;if(null!==b){var c=b=b.next;do{if((c.tag&a)===a){var d=c.create;c.destroy=d()}c=c.next}while(c!==b)}}
function Ji(a,b,c){switch(c.tag){case 0:case 11:case 15:case 22:Ii(3,c);return;case 1:a=c.stateNode;if(c.effectTag&4)if(null===b)a.componentDidMount();else{var d=c.elementType===c.type?b.memoizedProps:ig(c.type,b.memoizedProps);a.componentDidUpdate(d,b.memoizedState,a.__reactInternalSnapshotBeforeUpdate)}b=c.updateQueue;null!==b&&Cg(c,b,a);return;case 3:b=c.updateQueue;if(null!==b){a=null;if(null!==c.child)switch(c.child.tag){case 5:a=c.child.stateNode;break;case 1:a=c.child.stateNode}Cg(c,b,a)}return;
case 5:a=c.stateNode;null===b&&c.effectTag&4&&Fd(c.type,c.memoizedProps)&&a.focus();return;case 6:return;case 4:return;case 12:return;case 13:null===c.memoizedState&&(c=c.alternate,null!==c&&(c=c.memoizedState,null!==c&&(c=c.dehydrated,null!==c&&Vc(c))));return;case 19:case 17:case 20:case 21:return}throw Error(u(163));}
function Ki(a,b,c){"function"===typeof Li&&Li(b);switch(b.tag){case 0:case 11:case 14:case 15:case 22:a=b.updateQueue;if(null!==a&&(a=a.lastEffect,null!==a)){var d=a.next;cg(97<c?97:c,function(){var a=d;do{var c=a.destroy;if(void 0!==c){var g=b;try{c()}catch(h){Ei(g,h)}}a=a.next}while(a!==d)})}break;case 1:Fi(b);c=b.stateNode;"function"===typeof c.componentWillUnmount&&Di(b,c);break;case 5:Fi(b);break;case 4:Mi(a,b,c)}}
function Ni(a){var b=a.alternate;a.return=null;a.child=null;a.memoizedState=null;a.updateQueue=null;a.dependencies=null;a.alternate=null;a.firstEffect=null;a.lastEffect=null;a.pendingProps=null;a.memoizedProps=null;a.stateNode=null;null!==b&&Ni(b)}function Oi(a){return 5===a.tag||3===a.tag||4===a.tag}
function Pi(a){a:{for(var b=a.return;null!==b;){if(Oi(b)){var c=b;break a}b=b.return}throw Error(u(160));}b=c.stateNode;switch(c.tag){case 5:var d=!1;break;case 3:b=b.containerInfo;d=!0;break;case 4:b=b.containerInfo;d=!0;break;default:throw Error(u(161));}c.effectTag&16&&(Rb(b,""),c.effectTag&=-17);a:b:for(c=a;;){for(;null===c.sibling;){if(null===c.return||Oi(c.return)){c=null;break a}c=c.return}c.sibling.return=c.return;for(c=c.sibling;5!==c.tag&&6!==c.tag&&18!==c.tag;){if(c.effectTag&2)continue b;
if(null===c.child||4===c.tag)continue b;else c.child.return=c,c=c.child}if(!(c.effectTag&2)){c=c.stateNode;break a}}d?Qi(a,c,b):Ri(a,c,b)}
function Qi(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?8===c.nodeType?c.parentNode.insertBefore(a,b):c.insertBefore(a,b):(8===c.nodeType?(b=c.parentNode,b.insertBefore(a,c)):(b=c,b.appendChild(a)),c=c._reactRootContainer,null!==c&&void 0!==c||null!==b.onclick||(b.onclick=sd));else if(4!==d&&(a=a.child,null!==a))for(Qi(a,b,c),a=a.sibling;null!==a;)Qi(a,b,c),a=a.sibling}
function Ri(a,b,c){var d=a.tag,e=5===d||6===d;if(e)a=e?a.stateNode:a.stateNode.instance,b?c.insertBefore(a,b):c.appendChild(a);else if(4!==d&&(a=a.child,null!==a))for(Ri(a,b,c),a=a.sibling;null!==a;)Ri(a,b,c),a=a.sibling}
function Mi(a,b,c){for(var d=b,e=!1,f,g;;){if(!e){e=d.return;a:for(;;){if(null===e)throw Error(u(160));f=e.stateNode;switch(e.tag){case 5:g=!1;break a;case 3:f=f.containerInfo;g=!0;break a;case 4:f=f.containerInfo;g=!0;break a}e=e.return}e=!0}if(5===d.tag||6===d.tag){a:for(var h=a,k=d,l=c,m=k;;)if(Ki(h,m,l),null!==m.child&&4!==m.tag)m.child.return=m,m=m.child;else{if(m===k)break a;for(;null===m.sibling;){if(null===m.return||m.return===k)break a;m=m.return}m.sibling.return=m.return;m=m.sibling}g?(h=
f,k=d.stateNode,8===h.nodeType?h.parentNode.removeChild(k):h.removeChild(k)):f.removeChild(d.stateNode)}else if(4===d.tag){if(null!==d.child){f=d.stateNode.containerInfo;g=!0;d.child.return=d;d=d.child;continue}}else if(Ki(a,d,c),null!==d.child){d.child.return=d;d=d.child;continue}if(d===b)break;for(;null===d.sibling;){if(null===d.return||d.return===b)return;d=d.return;4===d.tag&&(e=!1)}d.sibling.return=d.return;d=d.sibling}}
function Si(a,b){switch(b.tag){case 0:case 11:case 14:case 15:case 22:Hi(3,b);return;case 1:return;case 5:var c=b.stateNode;if(null!=c){var d=b.memoizedProps,e=null!==a?a.memoizedProps:d;a=b.type;var f=b.updateQueue;b.updateQueue=null;if(null!==f){c[Nd]=d;"input"===a&&"radio"===d.type&&null!=d.name&&Bb(c,d);pd(a,e);b=pd(a,d);for(e=0;e<f.length;e+=2){var g=f[e],h=f[e+1];"style"===g?md(c,h):"dangerouslySetInnerHTML"===g?Qb(c,h):"children"===g?Rb(c,h):Xa(c,g,h,b)}switch(a){case "input":Cb(c,d);break;
case "textarea":Kb(c,d);break;case "select":b=c._wrapperState.wasMultiple,c._wrapperState.wasMultiple=!!d.multiple,a=d.value,null!=a?Hb(c,!!d.multiple,a,!1):b!==!!d.multiple&&(null!=d.defaultValue?Hb(c,!!d.multiple,d.defaultValue,!0):Hb(c,!!d.multiple,d.multiple?[]:"",!1))}}}return;case 6:if(null===b.stateNode)throw Error(u(162));b.stateNode.nodeValue=b.memoizedProps;return;case 3:b=b.stateNode;b.hydrate&&(b.hydrate=!1,Vc(b.containerInfo));return;case 12:return;case 13:c=b;null===b.memoizedState?
d=!1:(d=!0,c=b.child,Ti=$f());if(null!==c)a:for(a=c;;){if(5===a.tag)f=a.stateNode,d?(f=f.style,"function"===typeof f.setProperty?f.setProperty("display","none","important"):f.display="none"):(f=a.stateNode,e=a.memoizedProps.style,e=void 0!==e&&null!==e&&e.hasOwnProperty("display")?e.display:null,f.style.display=ld("display",e));else if(6===a.tag)a.stateNode.nodeValue=d?"":a.memoizedProps;else if(13===a.tag&&null!==a.memoizedState&&null===a.memoizedState.dehydrated){f=a.child.sibling;f.return=a;a=
f;continue}else if(null!==a.child){a.child.return=a;a=a.child;continue}if(a===c)break;for(;null===a.sibling;){if(null===a.return||a.return===c)break a;a=a.return}a.sibling.return=a.return;a=a.sibling}Ui(b);return;case 19:Ui(b);return;case 17:return}throw Error(u(163));}function Ui(a){var b=a.updateQueue;if(null!==b){a.updateQueue=null;var c=a.stateNode;null===c&&(c=a.stateNode=new Bi);b.forEach(function(b){var d=Vi.bind(null,a,b);c.has(b)||(c.add(b),b.then(d,d))})}}
var Wi="function"===typeof WeakMap?WeakMap:Map;function Xi(a,b,c){c=wg(c,null);c.tag=3;c.payload={element:null};var d=b.value;c.callback=function(){Yi||(Yi=!0,Zi=d);Ci(a,b)};return c}
function $i(a,b,c){c=wg(c,null);c.tag=3;var d=a.type.getDerivedStateFromError;if("function"===typeof d){var e=b.value;c.payload=function(){Ci(a,b);return d(e)}}var f=a.stateNode;null!==f&&"function"===typeof f.componentDidCatch&&(c.callback=function(){"function"!==typeof d&&(null===aj?aj=new Set([this]):aj.add(this),Ci(a,b));var c=b.stack;this.componentDidCatch(b.value,{componentStack:null!==c?c:""})});return c}
var bj=Math.ceil,cj=Wa.ReactCurrentDispatcher,dj=Wa.ReactCurrentOwner,V=0,ej=8,fj=16,gj=32,ti=0,hj=1,ij=2,ui=3,vi=4,jj=5,W=V,T=null,X=null,U=0,S=ti,kj=null,lj=1073741823,mj=1073741823,nj=null,wi=0,oj=!1,Ti=0,pj=500,Y=null,Yi=!1,Zi=null,aj=null,qj=!1,rj=null,sj=90,tj=null,uj=0,vj=null,wj=0;function Gg(){return(W&(fj|gj))!==V?1073741821-($f()/10|0):0!==wj?wj:wj=1073741821-($f()/10|0)}
function Hg(a,b,c){b=b.mode;if(0===(b&2))return 1073741823;var d=ag();if(0===(b&4))return 99===d?1073741823:1073741822;if((W&fj)!==V)return U;if(null!==c)a=hg(a,c.timeoutMs|0||5E3,250);else switch(d){case 99:a=1073741823;break;case 98:a=hg(a,150,100);break;case 97:case 96:a=hg(a,5E3,250);break;case 95:a=2;break;default:throw Error(u(326));}null!==T&&a===U&&--a;return a}
function Ig(a,b){if(50<uj)throw uj=0,vj=null,Error(u(185));a=xj(a,b);if(null!==a){var c=ag();1073741823===b?(W&ej)!==V&&(W&(fj|gj))===V?yj(a):(Z(a),W===V&&gg()):Z(a);(W&4)===V||98!==c&&99!==c||(null===tj?tj=new Map([[a,b]]):(c=tj.get(a),(void 0===c||c>b)&&tj.set(a,b)))}}
function xj(a,b){a.expirationTime<b&&(a.expirationTime=b);var c=a.alternate;null!==c&&c.expirationTime<b&&(c.expirationTime=b);var d=a.return,e=null;if(null===d&&3===a.tag)e=a.stateNode;else for(;null!==d;){c=d.alternate;d.childExpirationTime<b&&(d.childExpirationTime=b);null!==c&&c.childExpirationTime<b&&(c.childExpirationTime=b);if(null===d.return&&3===d.tag){e=d.stateNode;break}d=d.return}null!==e&&(T===e&&(Bg(b),S===vi&&xi(e,U)),yi(e,b));return e}
function zj(a){var b=a.lastExpiredTime;if(0!==b)return b;b=a.firstPendingTime;if(!Aj(a,b))return b;var c=a.lastPingedTime;a=a.nextKnownPendingLevel;a=c>a?c:a;return 2>=a&&b!==a?0:a}
function Z(a){if(0!==a.lastExpiredTime)a.callbackExpirationTime=1073741823,a.callbackPriority=99,a.callbackNode=eg(yj.bind(null,a));else{var b=zj(a),c=a.callbackNode;if(0===b)null!==c&&(a.callbackNode=null,a.callbackExpirationTime=0,a.callbackPriority=90);else{var d=Gg();1073741823===b?d=99:1===b||2===b?d=95:(d=10*(1073741821-b)-10*(1073741821-d),d=0>=d?99:250>=d?98:5250>=d?97:95);if(null!==c){var e=a.callbackPriority;if(a.callbackExpirationTime===b&&e>=d)return;c!==Tf&&Kf(c)}a.callbackExpirationTime=
b;a.callbackPriority=d;b=1073741823===b?eg(yj.bind(null,a)):dg(d,Bj.bind(null,a),{timeout:10*(1073741821-b)-$f()});a.callbackNode=b}}}
function Bj(a,b){wj=0;if(b)return b=Gg(),Cj(a,b),Z(a),null;var c=zj(a);if(0!==c){b=a.callbackNode;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&c===U||Ej(a,c);if(null!==X){var d=W;W|=fj;var e=Fj();do try{Gj();break}catch(h){Hj(a,h)}while(1);ng();W=d;cj.current=e;if(S===hj)throw b=kj,Ej(a,c),xi(a,c),Z(a),b;if(null===X)switch(e=a.finishedWork=a.current.alternate,a.finishedExpirationTime=c,d=S,T=null,d){case ti:case hj:throw Error(u(345));case ij:Cj(a,2<c?2:c);break;case ui:xi(a,c);d=a.lastSuspendedTime;
c===d&&(a.nextKnownPendingLevel=Ij(e));if(1073741823===lj&&(e=Ti+pj-$f(),10<e)){if(oj){var f=a.lastPingedTime;if(0===f||f>=c){a.lastPingedTime=c;Ej(a,c);break}}f=zj(a);if(0!==f&&f!==c)break;if(0!==d&&d!==c){a.lastPingedTime=d;break}a.timeoutHandle=Hd(Jj.bind(null,a),e);break}Jj(a);break;case vi:xi(a,c);d=a.lastSuspendedTime;c===d&&(a.nextKnownPendingLevel=Ij(e));if(oj&&(e=a.lastPingedTime,0===e||e>=c)){a.lastPingedTime=c;Ej(a,c);break}e=zj(a);if(0!==e&&e!==c)break;if(0!==d&&d!==c){a.lastPingedTime=
d;break}1073741823!==mj?d=10*(1073741821-mj)-$f():1073741823===lj?d=0:(d=10*(1073741821-lj)-5E3,e=$f(),c=10*(1073741821-c)-e,d=e-d,0>d&&(d=0),d=(120>d?120:480>d?480:1080>d?1080:1920>d?1920:3E3>d?3E3:4320>d?4320:1960*bj(d/1960))-d,c<d&&(d=c));if(10<d){a.timeoutHandle=Hd(Jj.bind(null,a),d);break}Jj(a);break;case jj:if(1073741823!==lj&&null!==nj){f=lj;var g=nj;d=g.busyMinDurationMs|0;0>=d?d=0:(e=g.busyDelayMs|0,f=$f()-(10*(1073741821-f)-(g.timeoutMs|0||5E3)),d=f<=e?0:e+d-f);if(10<d){xi(a,c);a.timeoutHandle=
Hd(Jj.bind(null,a),d);break}}Jj(a);break;default:throw Error(u(329));}Z(a);if(a.callbackNode===b)return Bj.bind(null,a)}}return null}
function yj(a){var b=a.lastExpiredTime;b=0!==b?b:1073741823;if((W&(fj|gj))!==V)throw Error(u(327));Dj();a===T&&b===U||Ej(a,b);if(null!==X){var c=W;W|=fj;var d=Fj();do try{Kj();break}catch(e){Hj(a,e)}while(1);ng();W=c;cj.current=d;if(S===hj)throw c=kj,Ej(a,b),xi(a,b),Z(a),c;if(null!==X)throw Error(u(261));a.finishedWork=a.current.alternate;a.finishedExpirationTime=b;T=null;Jj(a);Z(a)}return null}function Lj(){if(null!==tj){var a=tj;tj=null;a.forEach(function(a,c){Cj(c,a);Z(c)});gg()}}
function Mj(a,b){var c=W;W|=1;try{return a(b)}finally{W=c,W===V&&gg()}}function Nj(a,b){var c=W;W&=-2;W|=ej;try{return a(b)}finally{W=c,W===V&&gg()}}
function Ej(a,b){a.finishedWork=null;a.finishedExpirationTime=0;var c=a.timeoutHandle;-1!==c&&(a.timeoutHandle=-1,Id(c));if(null!==X)for(c=X.return;null!==c;){var d=c;switch(d.tag){case 1:d=d.type.childContextTypes;null!==d&&void 0!==d&&Df();break;case 3:eh();H(K);H(J);break;case 5:gh(d);break;case 4:eh();break;case 13:H(M);break;case 19:H(M);break;case 10:og(d)}c=c.return}T=a;X=Sg(a.current,null);U=b;S=ti;kj=null;mj=lj=1073741823;nj=null;wi=0;oj=!1}
function Hj(a,b){do{try{ng();jh.current=sh;if(mh)for(var c=N.memoizedState;null!==c;){var d=c.queue;null!==d&&(d.pending=null);c=c.next}lh=0;P=O=N=null;mh=!1;if(null===X||null===X.return)return S=hj,kj=b,X=null;a:{var e=a,f=X.return,g=X,h=b;b=U;g.effectTag|=2048;g.firstEffect=g.lastEffect=null;if(null!==h&&"object"===typeof h&&"function"===typeof h.then){var k=h;if(0===(g.mode&2)){var l=g.alternate;l?(g.updateQueue=l.updateQueue,g.memoizedState=l.memoizedState,g.expirationTime=l.expirationTime):(g.updateQueue=
null,g.memoizedState=null)}var m=0!==(M.current&1),p=f;do{var x;if(x=13===p.tag){var z=p.memoizedState;if(null!==z)x=null!==z.dehydrated?!0:!1;else{var ca=p.memoizedProps;x=void 0===ca.fallback?!1:!0!==ca.unstable_avoidThisFallback?!0:m?!1:!0}}if(x){var D=p.updateQueue;if(null===D){var t=new Set;t.add(k);p.updateQueue=t}else D.add(k);if(0===(p.mode&2)){p.effectTag|=64;g.effectTag&=-2981;if(1===g.tag)if(null===g.alternate)g.tag=17;else{var y=wg(1073741823,null);y.tag=2;xg(g,y)}g.expirationTime=1073741823;
break a}h=void 0;g=b;var A=e.pingCache;null===A?(A=e.pingCache=new Wi,h=new Set,A.set(k,h)):(h=A.get(k),void 0===h&&(h=new Set,A.set(k,h)));if(!h.has(g)){h.add(g);var q=Oj.bind(null,e,k,g);k.then(q,q)}p.effectTag|=4096;p.expirationTime=b;break a}p=p.return}while(null!==p);h=Error((pb(g.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display."+qb(g))}S!==
jj&&(S=ij);h=Ai(h,g);p=f;do{switch(p.tag){case 3:k=h;p.effectTag|=4096;p.expirationTime=b;var B=Xi(p,k,b);yg(p,B);break a;case 1:k=h;var w=p.type,ub=p.stateNode;if(0===(p.effectTag&64)&&("function"===typeof w.getDerivedStateFromError||null!==ub&&"function"===typeof ub.componentDidCatch&&(null===aj||!aj.has(ub)))){p.effectTag|=4096;p.expirationTime=b;var vb=$i(p,k,b);yg(p,vb);break a}}p=p.return}while(null!==p)}X=Pj(X)}catch(Xc){b=Xc;continue}break}while(1)}
function Fj(){var a=cj.current;cj.current=sh;return null===a?sh:a}function Ag(a,b){a<lj&&2<a&&(lj=a);null!==b&&a<mj&&2<a&&(mj=a,nj=b)}function Bg(a){a>wi&&(wi=a)}function Kj(){for(;null!==X;)X=Qj(X)}function Gj(){for(;null!==X&&!Uf();)X=Qj(X)}function Qj(a){var b=Rj(a.alternate,a,U);a.memoizedProps=a.pendingProps;null===b&&(b=Pj(a));dj.current=null;return b}
function Pj(a){X=a;do{var b=X.alternate;a=X.return;if(0===(X.effectTag&2048)){b=si(b,X,U);if(1===U||1!==X.childExpirationTime){for(var c=0,d=X.child;null!==d;){var e=d.expirationTime,f=d.childExpirationTime;e>c&&(c=e);f>c&&(c=f);d=d.sibling}X.childExpirationTime=c}if(null!==b)return b;null!==a&&0===(a.effectTag&2048)&&(null===a.firstEffect&&(a.firstEffect=X.firstEffect),null!==X.lastEffect&&(null!==a.lastEffect&&(a.lastEffect.nextEffect=X.firstEffect),a.lastEffect=X.lastEffect),1<X.effectTag&&(null!==
a.lastEffect?a.lastEffect.nextEffect=X:a.firstEffect=X,a.lastEffect=X))}else{b=zi(X);if(null!==b)return b.effectTag&=2047,b;null!==a&&(a.firstEffect=a.lastEffect=null,a.effectTag|=2048)}b=X.sibling;if(null!==b)return b;X=a}while(null!==X);S===ti&&(S=jj);return null}function Ij(a){var b=a.expirationTime;a=a.childExpirationTime;return b>a?b:a}function Jj(a){var b=ag();cg(99,Sj.bind(null,a,b));return null}
function Sj(a,b){do Dj();while(null!==rj);if((W&(fj|gj))!==V)throw Error(u(327));var c=a.finishedWork,d=a.finishedExpirationTime;if(null===c)return null;a.finishedWork=null;a.finishedExpirationTime=0;if(c===a.current)throw Error(u(177));a.callbackNode=null;a.callbackExpirationTime=0;a.callbackPriority=90;a.nextKnownPendingLevel=0;var e=Ij(c);a.firstPendingTime=e;d<=a.lastSuspendedTime?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:d<=a.firstSuspendedTime&&(a.firstSuspendedTime=
d-1);d<=a.lastPingedTime&&(a.lastPingedTime=0);d<=a.lastExpiredTime&&(a.lastExpiredTime=0);a===T&&(X=T=null,U=0);1<c.effectTag?null!==c.lastEffect?(c.lastEffect.nextEffect=c,e=c.firstEffect):e=c:e=c.firstEffect;if(null!==e){var f=W;W|=gj;dj.current=null;Dd=fd;var g=xd();if(yd(g)){if("selectionStart"in g)var h={start:g.selectionStart,end:g.selectionEnd};else a:{h=(h=g.ownerDocument)&&h.defaultView||window;var k=h.getSelection&&h.getSelection();if(k&&0!==k.rangeCount){h=k.anchorNode;var l=k.anchorOffset,
m=k.focusNode;k=k.focusOffset;try{h.nodeType,m.nodeType}catch(wb){h=null;break a}var p=0,x=-1,z=-1,ca=0,D=0,t=g,y=null;b:for(;;){for(var A;;){t!==h||0!==l&&3!==t.nodeType||(x=p+l);t!==m||0!==k&&3!==t.nodeType||(z=p+k);3===t.nodeType&&(p+=t.nodeValue.length);if(null===(A=t.firstChild))break;y=t;t=A}for(;;){if(t===g)break b;y===h&&++ca===l&&(x=p);y===m&&++D===k&&(z=p);if(null!==(A=t.nextSibling))break;t=y;y=t.parentNode}t=A}h=-1===x||-1===z?null:{start:x,end:z}}else h=null}h=h||{start:0,end:0}}else h=
null;Ed={activeElementDetached:null,focusedElem:g,selectionRange:h};fd=!1;Y=e;do try{Tj()}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=e;do try{for(g=a,h=b;null!==Y;){var q=Y.effectTag;q&16&&Rb(Y.stateNode,"");if(q&128){var B=Y.alternate;if(null!==B){var w=B.ref;null!==w&&("function"===typeof w?w(null):w.current=null)}}switch(q&1038){case 2:Pi(Y);Y.effectTag&=-3;break;case 6:Pi(Y);Y.effectTag&=-3;Si(Y.alternate,Y);break;case 1024:Y.effectTag&=-1025;break;case 1028:Y.effectTag&=
-1025;Si(Y.alternate,Y);break;case 4:Si(Y.alternate,Y);break;case 8:l=Y,Mi(g,l,h),Ni(l)}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);w=Ed;B=xd();q=w.focusedElem;h=w.selectionRange;if(B!==q&&q&&q.ownerDocument&&wd(q.ownerDocument.documentElement,q)){null!==h&&yd(q)&&(B=h.start,w=h.end,void 0===w&&(w=B),"selectionStart"in q?(q.selectionStart=B,q.selectionEnd=Math.min(w,q.value.length)):(w=(B=q.ownerDocument||document)&&B.defaultView||window,w.getSelection&&
(w=w.getSelection(),l=q.textContent.length,g=Math.min(h.start,l),h=void 0===h.end?g:Math.min(h.end,l),!w.extend&&g>h&&(l=h,h=g,g=l),l=vd(q,g),m=vd(q,h),l&&m&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==m.node||w.focusOffset!==m.offset)&&(B=B.createRange(),B.setStart(l.node,l.offset),w.removeAllRanges(),g>h?(w.addRange(B),w.extend(m.node,m.offset)):(B.setEnd(m.node,m.offset),w.addRange(B))))));B=[];for(w=q;w=w.parentNode;)1===w.nodeType&&B.push({element:w,left:w.scrollLeft,
top:w.scrollTop});"function"===typeof q.focus&&q.focus();for(q=0;q<B.length;q++)w=B[q],w.element.scrollLeft=w.left,w.element.scrollTop=w.top}fd=!!Dd;Ed=Dd=null;a.current=c;Y=e;do try{for(q=a;null!==Y;){var ub=Y.effectTag;ub&36&&Ji(q,Y.alternate,Y);if(ub&128){B=void 0;var vb=Y.ref;if(null!==vb){var Xc=Y.stateNode;switch(Y.tag){case 5:B=Xc;break;default:B=Xc}"function"===typeof vb?vb(B):vb.current=B}}Y=Y.nextEffect}}catch(wb){if(null===Y)throw Error(u(330));Ei(Y,wb);Y=Y.nextEffect}while(null!==Y);Y=
null;Vf();W=f}else a.current=c;if(qj)qj=!1,rj=a,sj=b;else for(Y=e;null!==Y;)b=Y.nextEffect,Y.nextEffect=null,Y=b;b=a.firstPendingTime;0===b&&(aj=null);1073741823===b?a===vj?uj++:(uj=0,vj=a):uj=0;"function"===typeof Uj&&Uj(c.stateNode,d);Z(a);if(Yi)throw Yi=!1,a=Zi,Zi=null,a;if((W&ej)!==V)return null;gg();return null}function Tj(){for(;null!==Y;){var a=Y.effectTag;0!==(a&256)&&Gi(Y.alternate,Y);0===(a&512)||qj||(qj=!0,dg(97,function(){Dj();return null}));Y=Y.nextEffect}}
function Dj(){if(90!==sj){var a=97<sj?97:sj;sj=90;return cg(a,Vj)}}function Vj(){if(null===rj)return!1;var a=rj;rj=null;if((W&(fj|gj))!==V)throw Error(u(331));var b=W;W|=gj;for(a=a.current.firstEffect;null!==a;){try{var c=a;if(0!==(c.effectTag&512))switch(c.tag){case 0:case 11:case 15:case 22:Hi(5,c),Ii(5,c)}}catch(d){if(null===a)throw Error(u(330));Ei(a,d)}c=a.nextEffect;a.nextEffect=null;a=c}W=b;gg();return!0}
function Wj(a,b,c){b=Ai(c,b);b=Xi(a,b,1073741823);xg(a,b);a=xj(a,1073741823);null!==a&&Z(a)}function Ei(a,b){if(3===a.tag)Wj(a,a,b);else for(var c=a.return;null!==c;){if(3===c.tag){Wj(c,a,b);break}else if(1===c.tag){var d=c.stateNode;if("function"===typeof c.type.getDerivedStateFromError||"function"===typeof d.componentDidCatch&&(null===aj||!aj.has(d))){a=Ai(b,a);a=$i(c,a,1073741823);xg(c,a);c=xj(c,1073741823);null!==c&&Z(c);break}}c=c.return}}
function Oj(a,b,c){var d=a.pingCache;null!==d&&d.delete(b);T===a&&U===c?S===vi||S===ui&&1073741823===lj&&$f()-Ti<pj?Ej(a,U):oj=!0:Aj(a,c)&&(b=a.lastPingedTime,0!==b&&b<c||(a.lastPingedTime=c,Z(a)))}function Vi(a,b){var c=a.stateNode;null!==c&&c.delete(b);b=0;0===b&&(b=Gg(),b=Hg(b,a,null));a=xj(a,b);null!==a&&Z(a)}var Rj;
Rj=function(a,b,c){var d=b.expirationTime;if(null!==a){var e=b.pendingProps;if(a.memoizedProps!==e||K.current)rg=!0;else{if(d<c){rg=!1;switch(b.tag){case 3:hi(b);Xh();break;case 5:fh(b);if(b.mode&4&&1!==c&&e.hidden)return b.expirationTime=b.childExpirationTime=1,null;break;case 1:L(b.type)&&Gf(b);break;case 4:dh(b,b.stateNode.containerInfo);break;case 10:d=b.memoizedProps.value;e=b.type._context;I(jg,e._currentValue);e._currentValue=d;break;case 13:if(null!==b.memoizedState){d=b.child.childExpirationTime;
if(0!==d&&d>=c)return ji(a,b,c);I(M,M.current&1);b=$h(a,b,c);return null!==b?b.sibling:null}I(M,M.current&1);break;case 19:d=b.childExpirationTime>=c;if(0!==(a.effectTag&64)){if(d)return mi(a,b,c);b.effectTag|=64}e=b.memoizedState;null!==e&&(e.rendering=null,e.tail=null);I(M,M.current);if(!d)return null}return $h(a,b,c)}rg=!1}}else rg=!1;b.expirationTime=0;switch(b.tag){case 2:d=b.type;null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;e=Cf(b,J.current);qg(b,c);e=oh(null,
b,d,a,e,c);b.effectTag|=1;if("object"===typeof e&&null!==e&&"function"===typeof e.render&&void 0===e.$$typeof){b.tag=1;b.memoizedState=null;b.updateQueue=null;if(L(d)){var f=!0;Gf(b)}else f=!1;b.memoizedState=null!==e.state&&void 0!==e.state?e.state:null;ug(b);var g=d.getDerivedStateFromProps;"function"===typeof g&&Fg(b,d,g,a);e.updater=Jg;b.stateNode=e;e._reactInternalFiber=b;Ng(b,d,a,c);b=gi(null,b,d,!0,f,c)}else b.tag=0,R(null,b,e,c),b=b.child;return b;case 16:a:{e=b.elementType;null!==a&&(a.alternate=
null,b.alternate=null,b.effectTag|=2);a=b.pendingProps;ob(e);if(1!==e._status)throw e._result;e=e._result;b.type=e;f=b.tag=Xj(e);a=ig(e,a);switch(f){case 0:b=di(null,b,e,a,c);break a;case 1:b=fi(null,b,e,a,c);break a;case 11:b=Zh(null,b,e,a,c);break a;case 14:b=ai(null,b,e,ig(e.type,a),d,c);break a}throw Error(u(306,e,""));}return b;case 0:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),di(a,b,d,e,c);case 1:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),fi(a,b,d,e,c);
case 3:hi(b);d=b.updateQueue;if(null===a||null===d)throw Error(u(282));d=b.pendingProps;e=b.memoizedState;e=null!==e?e.element:null;vg(a,b);zg(b,d,null,c);d=b.memoizedState.element;if(d===e)Xh(),b=$h(a,b,c);else{if(e=b.stateNode.hydrate)Ph=Jd(b.stateNode.containerInfo.firstChild),Oh=b,e=Qh=!0;if(e)for(c=Yg(b,null,d,c),b.child=c;c;)c.effectTag=c.effectTag&-3|1024,c=c.sibling;else R(a,b,d,c),Xh();b=b.child}return b;case 5:return fh(b),null===a&&Uh(b),d=b.type,e=b.pendingProps,f=null!==a?a.memoizedProps:
null,g=e.children,Gd(d,e)?g=null:null!==f&&Gd(d,f)&&(b.effectTag|=16),ei(a,b),b.mode&4&&1!==c&&e.hidden?(b.expirationTime=b.childExpirationTime=1,b=null):(R(a,b,g,c),b=b.child),b;case 6:return null===a&&Uh(b),null;case 13:return ji(a,b,c);case 4:return dh(b,b.stateNode.containerInfo),d=b.pendingProps,null===a?b.child=Xg(b,null,d,c):R(a,b,d,c),b.child;case 11:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),Zh(a,b,d,e,c);case 7:return R(a,b,b.pendingProps,c),b.child;case 8:return R(a,
b,b.pendingProps.children,c),b.child;case 12:return R(a,b,b.pendingProps.children,c),b.child;case 10:a:{d=b.type._context;e=b.pendingProps;g=b.memoizedProps;f=e.value;var h=b.type._context;I(jg,h._currentValue);h._currentValue=f;if(null!==g)if(h=g.value,f=$e(h,f)?0:("function"===typeof d._calculateChangedBits?d._calculateChangedBits(h,f):1073741823)|0,0===f){if(g.children===e.children&&!K.current){b=$h(a,b,c);break a}}else for(h=b.child,null!==h&&(h.return=b);null!==h;){var k=h.dependencies;if(null!==
k){g=h.child;for(var l=k.firstContext;null!==l;){if(l.context===d&&0!==(l.observedBits&f)){1===h.tag&&(l=wg(c,null),l.tag=2,xg(h,l));h.expirationTime<c&&(h.expirationTime=c);l=h.alternate;null!==l&&l.expirationTime<c&&(l.expirationTime=c);pg(h.return,c);k.expirationTime<c&&(k.expirationTime=c);break}l=l.next}}else g=10===h.tag?h.type===b.type?null:h.child:h.child;if(null!==g)g.return=h;else for(g=h;null!==g;){if(g===b){g=null;break}h=g.sibling;if(null!==h){h.return=g.return;g=h;break}g=g.return}h=
g}R(a,b,e.children,c);b=b.child}return b;case 9:return e=b.type,f=b.pendingProps,d=f.children,qg(b,c),e=sg(e,f.unstable_observedBits),d=d(e),b.effectTag|=1,R(a,b,d,c),b.child;case 14:return e=b.type,f=ig(e,b.pendingProps),f=ig(e.type,f),ai(a,b,e,f,d,c);case 15:return ci(a,b,b.type,b.pendingProps,d,c);case 17:return d=b.type,e=b.pendingProps,e=b.elementType===d?e:ig(d,e),null!==a&&(a.alternate=null,b.alternate=null,b.effectTag|=2),b.tag=1,L(d)?(a=!0,Gf(b)):a=!1,qg(b,c),Lg(b,d,e),Ng(b,d,e,c),gi(null,
b,d,!0,a,c);case 19:return mi(a,b,c)}throw Error(u(156,b.tag));};var Uj=null,Li=null;function Yj(a){if("undefined"===typeof __REACT_DEVTOOLS_GLOBAL_HOOK__)return!1;var b=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(b.isDisabled||!b.supportsFiber)return!0;try{var c=b.inject(a);Uj=function(a){try{b.onCommitFiberRoot(c,a,void 0,64===(a.current.effectTag&64))}catch(e){}};Li=function(a){try{b.onCommitFiberUnmount(c,a)}catch(e){}}}catch(d){}return!0}
function Zj(a,b,c,d){this.tag=a;this.key=c;this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null;this.index=0;this.ref=null;this.pendingProps=b;this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null;this.mode=d;this.effectTag=0;this.lastEffect=this.firstEffect=this.nextEffect=null;this.childExpirationTime=this.expirationTime=0;this.alternate=null}function Sh(a,b,c,d){return new Zj(a,b,c,d)}
function bi(a){a=a.prototype;return!(!a||!a.isReactComponent)}function Xj(a){if("function"===typeof a)return bi(a)?1:0;if(void 0!==a&&null!==a){a=a.$$typeof;if(a===gb)return 11;if(a===jb)return 14}return 2}
function Sg(a,b){var c=a.alternate;null===c?(c=Sh(a.tag,b,a.key,a.mode),c.elementType=a.elementType,c.type=a.type,c.stateNode=a.stateNode,c.alternate=a,a.alternate=c):(c.pendingProps=b,c.effectTag=0,c.nextEffect=null,c.firstEffect=null,c.lastEffect=null);c.childExpirationTime=a.childExpirationTime;c.expirationTime=a.expirationTime;c.child=a.child;c.memoizedProps=a.memoizedProps;c.memoizedState=a.memoizedState;c.updateQueue=a.updateQueue;b=a.dependencies;c.dependencies=null===b?null:{expirationTime:b.expirationTime,
firstContext:b.firstContext,responders:b.responders};c.sibling=a.sibling;c.index=a.index;c.ref=a.ref;return c}
function Ug(a,b,c,d,e,f){var g=2;d=a;if("function"===typeof a)bi(a)&&(g=1);else if("string"===typeof a)g=5;else a:switch(a){case ab:return Wg(c.children,e,f,b);case fb:g=8;e|=7;break;case bb:g=8;e|=1;break;case cb:return a=Sh(12,c,b,e|8),a.elementType=cb,a.type=cb,a.expirationTime=f,a;case hb:return a=Sh(13,c,b,e),a.type=hb,a.elementType=hb,a.expirationTime=f,a;case ib:return a=Sh(19,c,b,e),a.elementType=ib,a.expirationTime=f,a;default:if("object"===typeof a&&null!==a)switch(a.$$typeof){case db:g=
10;break a;case eb:g=9;break a;case gb:g=11;break a;case jb:g=14;break a;case kb:g=16;d=null;break a;case lb:g=22;break a}throw Error(u(130,null==a?a:typeof a,""));}b=Sh(g,c,b,e);b.elementType=a;b.type=d;b.expirationTime=f;return b}function Wg(a,b,c,d){a=Sh(7,a,d,b);a.expirationTime=c;return a}function Tg(a,b,c){a=Sh(6,a,null,b);a.expirationTime=c;return a}
function Vg(a,b,c){b=Sh(4,null!==a.children?a.children:[],a.key,b);b.expirationTime=c;b.stateNode={containerInfo:a.containerInfo,pendingChildren:null,implementation:a.implementation};return b}
function ak(a,b,c){this.tag=b;this.current=null;this.containerInfo=a;this.pingCache=this.pendingChildren=null;this.finishedExpirationTime=0;this.finishedWork=null;this.timeoutHandle=-1;this.pendingContext=this.context=null;this.hydrate=c;this.callbackNode=null;this.callbackPriority=90;this.lastExpiredTime=this.lastPingedTime=this.nextKnownPendingLevel=this.lastSuspendedTime=this.firstSuspendedTime=this.firstPendingTime=0}
function Aj(a,b){var c=a.firstSuspendedTime;a=a.lastSuspendedTime;return 0!==c&&c>=b&&a<=b}function xi(a,b){var c=a.firstSuspendedTime,d=a.lastSuspendedTime;c<b&&(a.firstSuspendedTime=b);if(d>b||0===c)a.lastSuspendedTime=b;b<=a.lastPingedTime&&(a.lastPingedTime=0);b<=a.lastExpiredTime&&(a.lastExpiredTime=0)}
function yi(a,b){b>a.firstPendingTime&&(a.firstPendingTime=b);var c=a.firstSuspendedTime;0!==c&&(b>=c?a.firstSuspendedTime=a.lastSuspendedTime=a.nextKnownPendingLevel=0:b>=a.lastSuspendedTime&&(a.lastSuspendedTime=b+1),b>a.nextKnownPendingLevel&&(a.nextKnownPendingLevel=b))}function Cj(a,b){var c=a.lastExpiredTime;if(0===c||c>b)a.lastExpiredTime=b}
function bk(a,b,c,d){var e=b.current,f=Gg(),g=Dg.suspense;f=Hg(f,e,g);a:if(c){c=c._reactInternalFiber;b:{if(dc(c)!==c||1!==c.tag)throw Error(u(170));var h=c;do{switch(h.tag){case 3:h=h.stateNode.context;break b;case 1:if(L(h.type)){h=h.stateNode.__reactInternalMemoizedMergedChildContext;break b}}h=h.return}while(null!==h);throw Error(u(171));}if(1===c.tag){var k=c.type;if(L(k)){c=Ff(c,k,h);break a}}c=h}else c=Af;null===b.context?b.context=c:b.pendingContext=c;b=wg(f,g);b.payload={element:a};d=void 0===
d?null:d;null!==d&&(b.callback=d);xg(e,b);Ig(e,f);return f}function ck(a){a=a.current;if(!a.child)return null;switch(a.child.tag){case 5:return a.child.stateNode;default:return a.child.stateNode}}function dk(a,b){a=a.memoizedState;null!==a&&null!==a.dehydrated&&a.retryTime<b&&(a.retryTime=b)}function ek(a,b){dk(a,b);(a=a.alternate)&&dk(a,b)}
function fk(a,b,c){c=null!=c&&!0===c.hydrate;var d=new ak(a,b,c),e=Sh(3,null,null,2===b?7:1===b?3:0);d.current=e;e.stateNode=d;ug(e);a[Od]=d.current;c&&0!==b&&Jc(a,9===a.nodeType?a:a.ownerDocument);this._internalRoot=d}fk.prototype.render=function(a){bk(a,this._internalRoot,null,null)};fk.prototype.unmount=function(){var a=this._internalRoot,b=a.containerInfo;bk(null,a,null,function(){b[Od]=null})};
function gk(a){return!(!a||1!==a.nodeType&&9!==a.nodeType&&11!==a.nodeType&&(8!==a.nodeType||" react-mount-point-unstable "!==a.nodeValue))}function hk(a,b){b||(b=a?9===a.nodeType?a.documentElement:a.firstChild:null,b=!(!b||1!==b.nodeType||!b.hasAttribute("data-reactroot")));if(!b)for(var c;c=a.lastChild;)a.removeChild(c);return new fk(a,0,b?{hydrate:!0}:void 0)}
function ik(a,b,c,d,e){var f=c._reactRootContainer;if(f){var g=f._internalRoot;if("function"===typeof e){var h=e;e=function(){var a=ck(g);h.call(a)}}bk(b,g,a,e)}else{f=c._reactRootContainer=hk(c,d);g=f._internalRoot;if("function"===typeof e){var k=e;e=function(){var a=ck(g);k.call(a)}}Nj(function(){bk(b,g,a,e)})}return ck(g)}function jk(a,b,c){var d=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:$a,key:null==d?null:""+d,children:a,containerInfo:b,implementation:c}}
wc=function(a){if(13===a.tag){var b=hg(Gg(),150,100);Ig(a,b);ek(a,b)}};xc=function(a){13===a.tag&&(Ig(a,3),ek(a,3))};yc=function(a){if(13===a.tag){var b=Gg();b=Hg(b,a,null);Ig(a,b);ek(a,b)}};
za=function(a,b,c){switch(b){case "input":Cb(a,c);b=c.name;if("radio"===c.type&&null!=b){for(c=a;c.parentNode;)c=c.parentNode;c=c.querySelectorAll("input[name="+JSON.stringify(""+b)+'][type="radio"]');for(b=0;b<c.length;b++){var d=c[b];if(d!==a&&d.form===a.form){var e=Qd(d);if(!e)throw Error(u(90));yb(d);Cb(d,e)}}}break;case "textarea":Kb(a,c);break;case "select":b=c.value,null!=b&&Hb(a,!!c.multiple,b,!1)}};Fa=Mj;
Ga=function(a,b,c,d,e){var f=W;W|=4;try{return cg(98,a.bind(null,b,c,d,e))}finally{W=f,W===V&&gg()}};Ha=function(){(W&(1|fj|gj))===V&&(Lj(),Dj())};Ia=function(a,b){var c=W;W|=2;try{return a(b)}finally{W=c,W===V&&gg()}};function kk(a,b){var c=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!gk(b))throw Error(u(200));return jk(a,b,null,c)}var lk={Events:[Nc,Pd,Qd,xa,ta,Xd,function(a){jc(a,Wd)},Da,Ea,id,mc,Dj,{current:!1}]};
(function(a){var b=a.findFiberByHostInstance;return Yj(n({},a,{overrideHookState:null,overrideProps:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:Wa.ReactCurrentDispatcher,findHostInstanceByFiber:function(a){a=hc(a);return null===a?null:a.stateNode},findFiberByHostInstance:function(a){return b?b(a):null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null}))})({findFiberByHostInstance:tc,bundleType:0,version:"16.14.0",
rendererPackageName:"react-dom"});exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=lk;exports.createPortal=kk;exports.findDOMNode=function(a){if(null==a)return null;if(1===a.nodeType)return a;var b=a._reactInternalFiber;if(void 0===b){if("function"===typeof a.render)throw Error(u(188));throw Error(u(268,Object.keys(a)));}a=hc(b);a=null===a?null:a.stateNode;return a};
exports.flushSync=function(a,b){if((W&(fj|gj))!==V)throw Error(u(187));var c=W;W|=1;try{return cg(99,a.bind(null,b))}finally{W=c,gg()}};exports.hydrate=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!0,c)};exports.render=function(a,b,c){if(!gk(b))throw Error(u(200));return ik(null,a,b,!1,c)};
exports.unmountComponentAtNode=function(a){if(!gk(a))throw Error(u(40));return a._reactRootContainer?(Nj(function(){ik(null,null,a,!1,function(){a._reactRootContainer=null;a[Od]=null})}),!0):!1};exports.unstable_batchedUpdates=Mj;exports.unstable_createPortal=function(a,b){return kk(a,b,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)};
exports.unstable_renderSubtreeIntoContainer=function(a,b,c,d){if(!gk(c))throw Error(u(200));if(null==a||void 0===a._reactInternalFiber)throw Error(u(38));return ik(a,b,c,!1,d)};exports.version="16.14.0";


/***/ }),
/* 82 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.19.1
 * scheduler.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var f,g,h,k,l;
if("undefined"===typeof window||"function"!==typeof MessageChannel){var p=null,q=null,t=function(){if(null!==p)try{var a=exports.unstable_now();p(!0,a);p=null}catch(b){throw setTimeout(t,0),b;}},u=Date.now();exports.unstable_now=function(){return Date.now()-u};f=function(a){null!==p?setTimeout(f,0,a):(p=a,setTimeout(t,0))};g=function(a,b){q=setTimeout(a,b)};h=function(){clearTimeout(q)};k=function(){return!1};l=exports.unstable_forceFrameRate=function(){}}else{var w=window.performance,x=window.Date,
y=window.setTimeout,z=window.clearTimeout;if("undefined"!==typeof console){var A=window.cancelAnimationFrame;"function"!==typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills");"function"!==typeof A&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://fb.me/react-polyfills")}if("object"===
typeof w&&"function"===typeof w.now)exports.unstable_now=function(){return w.now()};else{var B=x.now();exports.unstable_now=function(){return x.now()-B}}var C=!1,D=null,E=-1,F=5,G=0;k=function(){return exports.unstable_now()>=G};l=function(){};exports.unstable_forceFrameRate=function(a){0>a||125<a?console.error("forceFrameRate takes a positive int between 0 and 125, forcing framerates higher than 125 fps is not unsupported"):F=0<a?Math.floor(1E3/a):5};var H=new MessageChannel,I=H.port2;H.port1.onmessage=
function(){if(null!==D){var a=exports.unstable_now();G=a+F;try{D(!0,a)?I.postMessage(null):(C=!1,D=null)}catch(b){throw I.postMessage(null),b;}}else C=!1};f=function(a){D=a;C||(C=!0,I.postMessage(null))};g=function(a,b){E=y(function(){a(exports.unstable_now())},b)};h=function(){z(E);E=-1}}function J(a,b){var c=a.length;a.push(b);a:for(;;){var d=c-1>>>1,e=a[d];if(void 0!==e&&0<K(e,b))a[d]=b,a[c]=e,c=d;else break a}}function L(a){a=a[0];return void 0===a?null:a}
function M(a){var b=a[0];if(void 0!==b){var c=a.pop();if(c!==b){a[0]=c;a:for(var d=0,e=a.length;d<e;){var m=2*(d+1)-1,n=a[m],v=m+1,r=a[v];if(void 0!==n&&0>K(n,c))void 0!==r&&0>K(r,n)?(a[d]=r,a[v]=c,d=v):(a[d]=n,a[m]=c,d=m);else if(void 0!==r&&0>K(r,c))a[d]=r,a[v]=c,d=v;else break a}}return b}return null}function K(a,b){var c=a.sortIndex-b.sortIndex;return 0!==c?c:a.id-b.id}var N=[],O=[],P=1,Q=null,R=3,S=!1,T=!1,U=!1;
function V(a){for(var b=L(O);null!==b;){if(null===b.callback)M(O);else if(b.startTime<=a)M(O),b.sortIndex=b.expirationTime,J(N,b);else break;b=L(O)}}function W(a){U=!1;V(a);if(!T)if(null!==L(N))T=!0,f(X);else{var b=L(O);null!==b&&g(W,b.startTime-a)}}
function X(a,b){T=!1;U&&(U=!1,h());S=!0;var c=R;try{V(b);for(Q=L(N);null!==Q&&(!(Q.expirationTime>b)||a&&!k());){var d=Q.callback;if(null!==d){Q.callback=null;R=Q.priorityLevel;var e=d(Q.expirationTime<=b);b=exports.unstable_now();"function"===typeof e?Q.callback=e:Q===L(N)&&M(N);V(b)}else M(N);Q=L(N)}if(null!==Q)var m=!0;else{var n=L(O);null!==n&&g(W,n.startTime-b);m=!1}return m}finally{Q=null,R=c,S=!1}}
function Y(a){switch(a){case 1:return-1;case 2:return 250;case 5:return 1073741823;case 4:return 1E4;default:return 5E3}}var Z=l;exports.unstable_IdlePriority=5;exports.unstable_ImmediatePriority=1;exports.unstable_LowPriority=4;exports.unstable_NormalPriority=3;exports.unstable_Profiling=null;exports.unstable_UserBlockingPriority=2;exports.unstable_cancelCallback=function(a){a.callback=null};exports.unstable_continueExecution=function(){T||S||(T=!0,f(X))};
exports.unstable_getCurrentPriorityLevel=function(){return R};exports.unstable_getFirstCallbackNode=function(){return L(N)};exports.unstable_next=function(a){switch(R){case 1:case 2:case 3:var b=3;break;default:b=R}var c=R;R=b;try{return a()}finally{R=c}};exports.unstable_pauseExecution=function(){};exports.unstable_requestPaint=Z;exports.unstable_runWithPriority=function(a,b){switch(a){case 1:case 2:case 3:case 4:case 5:break;default:a=3}var c=R;R=a;try{return b()}finally{R=c}};
exports.unstable_scheduleCallback=function(a,b,c){var d=exports.unstable_now();if("object"===typeof c&&null!==c){var e=c.delay;e="number"===typeof e&&0<e?d+e:d;c="number"===typeof c.timeout?c.timeout:Y(a)}else c=Y(a),e=d;c=e+c;a={id:P++,callback:b,priorityLevel:a,startTime:e,expirationTime:c,sortIndex:-1};e>d?(a.sortIndex=e,J(O,a),null===L(N)&&a===L(O)&&(U?h():U=!0,g(W,e-d))):(a.sortIndex=c,J(N,a),T||S||(T=!0,f(X)));return a};
exports.unstable_shouldYield=function(){var a=exports.unstable_now();V(a);var b=L(N);return b!==Q&&null!==Q&&null!==b&&null!==b.callback&&b.startTime<=a&&b.expirationTime<Q.expirationTime||k()};exports.unstable_wrapCallback=function(a){var b=R;return function(){var c=R;R=b;try{return a.apply(this,arguments)}finally{R=c}}};


/***/ }),
/* 83 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v0.19.1
 * scheduler.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var enableSchedulerDebugging = false;
var enableProfiling = true;

var requestHostCallback;
var requestHostTimeout;
var cancelHostTimeout;
var shouldYieldToHost;
var requestPaint;

if ( // If Scheduler runs in a non-DOM environment, it falls back to a naive
// implementation using setTimeout.
typeof window === 'undefined' || // Check if MessageChannel is supported, too.
typeof MessageChannel !== 'function') {
  // If this accidentally gets imported in a non-browser environment, e.g. JavaScriptCore,
  // fallback to a naive implementation.
  var _callback = null;
  var _timeoutID = null;

  var _flushCallback = function () {
    if (_callback !== null) {
      try {
        var currentTime = exports.unstable_now();
        var hasRemainingTime = true;

        _callback(hasRemainingTime, currentTime);

        _callback = null;
      } catch (e) {
        setTimeout(_flushCallback, 0);
        throw e;
      }
    }
  };

  var initialTime = Date.now();

  exports.unstable_now = function () {
    return Date.now() - initialTime;
  };

  requestHostCallback = function (cb) {
    if (_callback !== null) {
      // Protect against re-entrancy.
      setTimeout(requestHostCallback, 0, cb);
    } else {
      _callback = cb;
      setTimeout(_flushCallback, 0);
    }
  };

  requestHostTimeout = function (cb, ms) {
    _timeoutID = setTimeout(cb, ms);
  };

  cancelHostTimeout = function () {
    clearTimeout(_timeoutID);
  };

  shouldYieldToHost = function () {
    return false;
  };

  requestPaint = exports.unstable_forceFrameRate = function () {};
} else {
  // Capture local references to native APIs, in case a polyfill overrides them.
  var performance = window.performance;
  var _Date = window.Date;
  var _setTimeout = window.setTimeout;
  var _clearTimeout = window.clearTimeout;

  if (typeof console !== 'undefined') {
    // TODO: Scheduler no longer requires these methods to be polyfilled. But
    // maybe we want to continue warning if they don't exist, to preserve the
    // option to rely on it in the future?
    var requestAnimationFrame = window.requestAnimationFrame;
    var cancelAnimationFrame = window.cancelAnimationFrame; // TODO: Remove fb.me link

    if (typeof requestAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support requestAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }

    if (typeof cancelAnimationFrame !== 'function') {
      // Using console['error'] to evade Babel and ESLint
      console['error']("This browser doesn't support cancelAnimationFrame. " + 'Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
    }
  }

  if (typeof performance === 'object' && typeof performance.now === 'function') {
    exports.unstable_now = function () {
      return performance.now();
    };
  } else {
    var _initialTime = _Date.now();

    exports.unstable_now = function () {
      return _Date.now() - _initialTime;
    };
  }

  var isMessageLoopRunning = false;
  var scheduledHostCallback = null;
  var taskTimeoutID = -1; // Scheduler periodically yields in case there is other work on the main
  // thread, like user events. By default, it yields multiple times per frame.
  // It does not attempt to align with frame boundaries, since most tasks don't
  // need to be frame aligned; for those that do, use requestAnimationFrame.

  var yieldInterval = 5;
  var deadline = 0; // TODO: Make this configurable

  {
    // `isInputPending` is not available. Since we have no way of knowing if
    // there's pending input, always yield at the end of the frame.
    shouldYieldToHost = function () {
      return exports.unstable_now() >= deadline;
    }; // Since we yield every frame regardless, `requestPaint` has no effect.


    requestPaint = function () {};
  }

  exports.unstable_forceFrameRate = function (fps) {
    if (fps < 0 || fps > 125) {
      // Using console['error'] to evade Babel and ESLint
      console['error']('forceFrameRate takes a positive int between 0 and 125, ' + 'forcing framerates higher than 125 fps is not unsupported');
      return;
    }

    if (fps > 0) {
      yieldInterval = Math.floor(1000 / fps);
    } else {
      // reset the framerate
      yieldInterval = 5;
    }
  };

  var performWorkUntilDeadline = function () {
    if (scheduledHostCallback !== null) {
      var currentTime = exports.unstable_now(); // Yield after `yieldInterval` ms, regardless of where we are in the vsync
      // cycle. This means there's always time remaining at the beginning of
      // the message event.

      deadline = currentTime + yieldInterval;
      var hasTimeRemaining = true;

      try {
        var hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);

        if (!hasMoreWork) {
          isMessageLoopRunning = false;
          scheduledHostCallback = null;
        } else {
          // If there's more work, schedule the next message event at the end
          // of the preceding one.
          port.postMessage(null);
        }
      } catch (error) {
        // If a scheduler task throws, exit the current browser task so the
        // error can be observed.
        port.postMessage(null);
        throw error;
      }
    } else {
      isMessageLoopRunning = false;
    } // Yielding to the browser will give it a chance to paint, so we can
  };

  var channel = new MessageChannel();
  var port = channel.port2;
  channel.port1.onmessage = performWorkUntilDeadline;

  requestHostCallback = function (callback) {
    scheduledHostCallback = callback;

    if (!isMessageLoopRunning) {
      isMessageLoopRunning = true;
      port.postMessage(null);
    }
  };

  requestHostTimeout = function (callback, ms) {
    taskTimeoutID = _setTimeout(function () {
      callback(exports.unstable_now());
    }, ms);
  };

  cancelHostTimeout = function () {
    _clearTimeout(taskTimeoutID);

    taskTimeoutID = -1;
  };
}

function push(heap, node) {
  var index = heap.length;
  heap.push(node);
  siftUp(heap, node, index);
}
function peek(heap) {
  var first = heap[0];
  return first === undefined ? null : first;
}
function pop(heap) {
  var first = heap[0];

  if (first !== undefined) {
    var last = heap.pop();

    if (last !== first) {
      heap[0] = last;
      siftDown(heap, last, 0);
    }

    return first;
  } else {
    return null;
  }
}

function siftUp(heap, node, i) {
  var index = i;

  while (true) {
    var parentIndex = index - 1 >>> 1;
    var parent = heap[parentIndex];

    if (parent !== undefined && compare(parent, node) > 0) {
      // The parent is larger. Swap positions.
      heap[parentIndex] = node;
      heap[index] = parent;
      index = parentIndex;
    } else {
      // The parent is smaller. Exit.
      return;
    }
  }
}

function siftDown(heap, node, i) {
  var index = i;
  var length = heap.length;

  while (index < length) {
    var leftIndex = (index + 1) * 2 - 1;
    var left = heap[leftIndex];
    var rightIndex = leftIndex + 1;
    var right = heap[rightIndex]; // If the left or right node is smaller, swap with the smaller of those.

    if (left !== undefined && compare(left, node) < 0) {
      if (right !== undefined && compare(right, left) < 0) {
        heap[index] = right;
        heap[rightIndex] = node;
        index = rightIndex;
      } else {
        heap[index] = left;
        heap[leftIndex] = node;
        index = leftIndex;
      }
    } else if (right !== undefined && compare(right, node) < 0) {
      heap[index] = right;
      heap[rightIndex] = node;
      index = rightIndex;
    } else {
      // Neither child is smaller. Exit.
      return;
    }
  }
}

function compare(a, b) {
  // Compare sort index first, then task id.
  var diff = a.sortIndex - b.sortIndex;
  return diff !== 0 ? diff : a.id - b.id;
}

// TODO: Use symbols?
var NoPriority = 0;
var ImmediatePriority = 1;
var UserBlockingPriority = 2;
var NormalPriority = 3;
var LowPriority = 4;
var IdlePriority = 5;

var runIdCounter = 0;
var mainThreadIdCounter = 0;
var profilingStateSize = 4;
var sharedProfilingBuffer =  // $FlowFixMe Flow doesn't know about SharedArrayBuffer
typeof SharedArrayBuffer === 'function' ? new SharedArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : // $FlowFixMe Flow doesn't know about ArrayBuffer
typeof ArrayBuffer === 'function' ? new ArrayBuffer(profilingStateSize * Int32Array.BYTES_PER_ELEMENT) : null // Don't crash the init path on IE9
;
var profilingState =  sharedProfilingBuffer !== null ? new Int32Array(sharedProfilingBuffer) : []; // We can't read this but it helps save bytes for null checks

var PRIORITY = 0;
var CURRENT_TASK_ID = 1;
var CURRENT_RUN_ID = 2;
var QUEUE_SIZE = 3;

{
  profilingState[PRIORITY] = NoPriority; // This is maintained with a counter, because the size of the priority queue
  // array might include canceled tasks.

  profilingState[QUEUE_SIZE] = 0;
  profilingState[CURRENT_TASK_ID] = 0;
} // Bytes per element is 4


var INITIAL_EVENT_LOG_SIZE = 131072;
var MAX_EVENT_LOG_SIZE = 524288; // Equivalent to 2 megabytes

var eventLogSize = 0;
var eventLogBuffer = null;
var eventLog = null;
var eventLogIndex = 0;
var TaskStartEvent = 1;
var TaskCompleteEvent = 2;
var TaskErrorEvent = 3;
var TaskCancelEvent = 4;
var TaskRunEvent = 5;
var TaskYieldEvent = 6;
var SchedulerSuspendEvent = 7;
var SchedulerResumeEvent = 8;

function logEvent(entries) {
  if (eventLog !== null) {
    var offset = eventLogIndex;
    eventLogIndex += entries.length;

    if (eventLogIndex + 1 > eventLogSize) {
      eventLogSize *= 2;

      if (eventLogSize > MAX_EVENT_LOG_SIZE) {
        // Using console['error'] to evade Babel and ESLint
        console['error']("Scheduler Profiling: Event log exceeded maximum size. Don't " + 'forget to call `stopLoggingProfilingEvents()`.');
        stopLoggingProfilingEvents();
        return;
      }

      var newEventLog = new Int32Array(eventLogSize * 4);
      newEventLog.set(eventLog);
      eventLogBuffer = newEventLog.buffer;
      eventLog = newEventLog;
    }

    eventLog.set(entries, offset);
  }
}

function startLoggingProfilingEvents() {
  eventLogSize = INITIAL_EVENT_LOG_SIZE;
  eventLogBuffer = new ArrayBuffer(eventLogSize * 4);
  eventLog = new Int32Array(eventLogBuffer);
  eventLogIndex = 0;
}
function stopLoggingProfilingEvents() {
  var buffer = eventLogBuffer;
  eventLogSize = 0;
  eventLogBuffer = null;
  eventLog = null;
  eventLogIndex = 0;
  return buffer;
}
function markTaskStart(task, ms) {
  {
    profilingState[QUEUE_SIZE]++;

    if (eventLog !== null) {
      // performance.now returns a float, representing milliseconds. When the
      // event is logged, it's coerced to an int. Convert to microseconds to
      // maintain extra degrees of precision.
      logEvent([TaskStartEvent, ms * 1000, task.id, task.priorityLevel]);
    }
  }
}
function markTaskCompleted(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCompleteEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskCanceled(task, ms) {
  {
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskCancelEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskErrored(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[QUEUE_SIZE]--;

    if (eventLog !== null) {
      logEvent([TaskErrorEvent, ms * 1000, task.id]);
    }
  }
}
function markTaskRun(task, ms) {
  {
    runIdCounter++;
    profilingState[PRIORITY] = task.priorityLevel;
    profilingState[CURRENT_TASK_ID] = task.id;
    profilingState[CURRENT_RUN_ID] = runIdCounter;

    if (eventLog !== null) {
      logEvent([TaskRunEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markTaskYield(task, ms) {
  {
    profilingState[PRIORITY] = NoPriority;
    profilingState[CURRENT_TASK_ID] = 0;
    profilingState[CURRENT_RUN_ID] = 0;

    if (eventLog !== null) {
      logEvent([TaskYieldEvent, ms * 1000, task.id, runIdCounter]);
    }
  }
}
function markSchedulerSuspended(ms) {
  {
    mainThreadIdCounter++;

    if (eventLog !== null) {
      logEvent([SchedulerSuspendEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}
function markSchedulerUnsuspended(ms) {
  {
    if (eventLog !== null) {
      logEvent([SchedulerResumeEvent, ms * 1000, mainThreadIdCounter]);
    }
  }
}

/* eslint-disable no-var */
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111

var maxSigned31BitInt = 1073741823; // Times out immediately

var IMMEDIATE_PRIORITY_TIMEOUT = -1; // Eventually times out

var USER_BLOCKING_PRIORITY = 250;
var NORMAL_PRIORITY_TIMEOUT = 5000;
var LOW_PRIORITY_TIMEOUT = 10000; // Never times out

var IDLE_PRIORITY = maxSigned31BitInt; // Tasks are stored on a min heap

var taskQueue = [];
var timerQueue = []; // Incrementing id counter. Used to maintain insertion order.

var taskIdCounter = 1; // Pausing the scheduler is useful for debugging.
var currentTask = null;
var currentPriorityLevel = NormalPriority; // This is set while performing work, to prevent re-entrancy.

var isPerformingWork = false;
var isHostCallbackScheduled = false;
var isHostTimeoutScheduled = false;

function advanceTimers(currentTime) {
  // Check for tasks that are no longer delayed and add them to the queue.
  var timer = peek(timerQueue);

  while (timer !== null) {
    if (timer.callback === null) {
      // Timer was cancelled.
      pop(timerQueue);
    } else if (timer.startTime <= currentTime) {
      // Timer fired. Transfer to the task queue.
      pop(timerQueue);
      timer.sortIndex = timer.expirationTime;
      push(taskQueue, timer);

      {
        markTaskStart(timer, currentTime);
        timer.isQueued = true;
      }
    } else {
      // Remaining timers are pending.
      return;
    }

    timer = peek(timerQueue);
  }
}

function handleTimeout(currentTime) {
  isHostTimeoutScheduled = false;
  advanceTimers(currentTime);

  if (!isHostCallbackScheduled) {
    if (peek(taskQueue) !== null) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    } else {
      var firstTimer = peek(timerQueue);

      if (firstTimer !== null) {
        requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
      }
    }
  }
}

function flushWork(hasTimeRemaining, initialTime) {
  {
    markSchedulerUnsuspended(initialTime);
  } // We'll need a host callback the next time work is scheduled.


  isHostCallbackScheduled = false;

  if (isHostTimeoutScheduled) {
    // We scheduled a timeout but it's no longer needed. Cancel it.
    isHostTimeoutScheduled = false;
    cancelHostTimeout();
  }

  isPerformingWork = true;
  var previousPriorityLevel = currentPriorityLevel;

  try {
    if (enableProfiling) {
      try {
        return workLoop(hasTimeRemaining, initialTime);
      } catch (error) {
        if (currentTask !== null) {
          var currentTime = exports.unstable_now();
          markTaskErrored(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        throw error;
      }
    } else {
      // No catch in prod codepath.
      return workLoop(hasTimeRemaining, initialTime);
    }
  } finally {
    currentTask = null;
    currentPriorityLevel = previousPriorityLevel;
    isPerformingWork = false;

    {
      var _currentTime = exports.unstable_now();

      markSchedulerSuspended(_currentTime);
    }
  }
}

function workLoop(hasTimeRemaining, initialTime) {
  var currentTime = initialTime;
  advanceTimers(currentTime);
  currentTask = peek(taskQueue);

  while (currentTask !== null && !(enableSchedulerDebugging )) {
    if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
      // This currentTask hasn't expired, and we've reached the deadline.
      break;
    }

    var callback = currentTask.callback;

    if (callback !== null) {
      currentTask.callback = null;
      currentPriorityLevel = currentTask.priorityLevel;
      var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
      markTaskRun(currentTask, currentTime);
      var continuationCallback = callback(didUserCallbackTimeout);
      currentTime = exports.unstable_now();

      if (typeof continuationCallback === 'function') {
        currentTask.callback = continuationCallback;
        markTaskYield(currentTask, currentTime);
      } else {
        {
          markTaskCompleted(currentTask, currentTime);
          currentTask.isQueued = false;
        }

        if (currentTask === peek(taskQueue)) {
          pop(taskQueue);
        }
      }

      advanceTimers(currentTime);
    } else {
      pop(taskQueue);
    }

    currentTask = peek(taskQueue);
  } // Return whether there's additional work


  if (currentTask !== null) {
    return true;
  } else {
    var firstTimer = peek(timerQueue);

    if (firstTimer !== null) {
      requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
    }

    return false;
  }
}

function unstable_runWithPriority(priorityLevel, eventHandler) {
  switch (priorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
    case LowPriority:
    case IdlePriority:
      break;

    default:
      priorityLevel = NormalPriority;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_next(eventHandler) {
  var priorityLevel;

  switch (currentPriorityLevel) {
    case ImmediatePriority:
    case UserBlockingPriority:
    case NormalPriority:
      // Shift down to normal priority
      priorityLevel = NormalPriority;
      break;

    default:
      // Anything lower than normal priority should remain at the current level.
      priorityLevel = currentPriorityLevel;
      break;
  }

  var previousPriorityLevel = currentPriorityLevel;
  currentPriorityLevel = priorityLevel;

  try {
    return eventHandler();
  } finally {
    currentPriorityLevel = previousPriorityLevel;
  }
}

function unstable_wrapCallback(callback) {
  var parentPriorityLevel = currentPriorityLevel;
  return function () {
    // This is a fork of runWithPriority, inlined for performance.
    var previousPriorityLevel = currentPriorityLevel;
    currentPriorityLevel = parentPriorityLevel;

    try {
      return callback.apply(this, arguments);
    } finally {
      currentPriorityLevel = previousPriorityLevel;
    }
  };
}

function timeoutForPriorityLevel(priorityLevel) {
  switch (priorityLevel) {
    case ImmediatePriority:
      return IMMEDIATE_PRIORITY_TIMEOUT;

    case UserBlockingPriority:
      return USER_BLOCKING_PRIORITY;

    case IdlePriority:
      return IDLE_PRIORITY;

    case LowPriority:
      return LOW_PRIORITY_TIMEOUT;

    case NormalPriority:
    default:
      return NORMAL_PRIORITY_TIMEOUT;
  }
}

function unstable_scheduleCallback(priorityLevel, callback, options) {
  var currentTime = exports.unstable_now();
  var startTime;
  var timeout;

  if (typeof options === 'object' && options !== null) {
    var delay = options.delay;

    if (typeof delay === 'number' && delay > 0) {
      startTime = currentTime + delay;
    } else {
      startTime = currentTime;
    }

    timeout = typeof options.timeout === 'number' ? options.timeout : timeoutForPriorityLevel(priorityLevel);
  } else {
    timeout = timeoutForPriorityLevel(priorityLevel);
    startTime = currentTime;
  }

  var expirationTime = startTime + timeout;
  var newTask = {
    id: taskIdCounter++,
    callback: callback,
    priorityLevel: priorityLevel,
    startTime: startTime,
    expirationTime: expirationTime,
    sortIndex: -1
  };

  {
    newTask.isQueued = false;
  }

  if (startTime > currentTime) {
    // This is a delayed task.
    newTask.sortIndex = startTime;
    push(timerQueue, newTask);

    if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
      // All tasks are delayed, and this is the task with the earliest delay.
      if (isHostTimeoutScheduled) {
        // Cancel an existing timeout.
        cancelHostTimeout();
      } else {
        isHostTimeoutScheduled = true;
      } // Schedule a timeout.


      requestHostTimeout(handleTimeout, startTime - currentTime);
    }
  } else {
    newTask.sortIndex = expirationTime;
    push(taskQueue, newTask);

    {
      markTaskStart(newTask, currentTime);
      newTask.isQueued = true;
    } // Schedule a host callback, if needed. If we're already performing work,
    // wait until the next time we yield.


    if (!isHostCallbackScheduled && !isPerformingWork) {
      isHostCallbackScheduled = true;
      requestHostCallback(flushWork);
    }
  }

  return newTask;
}

function unstable_pauseExecution() {
}

function unstable_continueExecution() {

  if (!isHostCallbackScheduled && !isPerformingWork) {
    isHostCallbackScheduled = true;
    requestHostCallback(flushWork);
  }
}

function unstable_getFirstCallbackNode() {
  return peek(taskQueue);
}

function unstable_cancelCallback(task) {
  {
    if (task.isQueued) {
      var currentTime = exports.unstable_now();
      markTaskCanceled(task, currentTime);
      task.isQueued = false;
    }
  } // Null out the callback to indicate the task has been canceled. (Can't
  // remove from the queue because you can't remove arbitrary nodes from an
  // array based heap, only the first one.)


  task.callback = null;
}

function unstable_getCurrentPriorityLevel() {
  return currentPriorityLevel;
}

function unstable_shouldYield() {
  var currentTime = exports.unstable_now();
  advanceTimers(currentTime);
  var firstTask = peek(taskQueue);
  return firstTask !== currentTask && currentTask !== null && firstTask !== null && firstTask.callback !== null && firstTask.startTime <= currentTime && firstTask.expirationTime < currentTask.expirationTime || shouldYieldToHost();
}

var unstable_requestPaint = requestPaint;
var unstable_Profiling =  {
  startLoggingProfilingEvents: startLoggingProfilingEvents,
  stopLoggingProfilingEvents: stopLoggingProfilingEvents,
  sharedProfilingBuffer: sharedProfilingBuffer
} ;

exports.unstable_IdlePriority = IdlePriority;
exports.unstable_ImmediatePriority = ImmediatePriority;
exports.unstable_LowPriority = LowPriority;
exports.unstable_NormalPriority = NormalPriority;
exports.unstable_Profiling = unstable_Profiling;
exports.unstable_UserBlockingPriority = UserBlockingPriority;
exports.unstable_cancelCallback = unstable_cancelCallback;
exports.unstable_continueExecution = unstable_continueExecution;
exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
exports.unstable_next = unstable_next;
exports.unstable_pauseExecution = unstable_pauseExecution;
exports.unstable_requestPaint = unstable_requestPaint;
exports.unstable_runWithPriority = unstable_runWithPriority;
exports.unstable_scheduleCallback = unstable_scheduleCallback;
exports.unstable_shouldYield = unstable_shouldYield;
exports.unstable_wrapCallback = unstable_wrapCallback;
  })();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 84 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.14.0
 * react-dom.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var React = __webpack_require__(0);
var _assign = __webpack_require__(12);
var Scheduler = __webpack_require__(38);
var checkPropTypes = __webpack_require__(24);
var tracing = __webpack_require__(85);

var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED; // Prevent newer renderers from RTE when used with older react package versions.
// Current owner and dispatcher used to share the same ref,
// but PR #14548 split them out to better support the react-debug-tools package.

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentDispatcher')) {
  ReactSharedInternals.ReactCurrentDispatcher = {
    current: null
  };
}

if (!ReactSharedInternals.hasOwnProperty('ReactCurrentBatchConfig')) {
  ReactSharedInternals.ReactCurrentBatchConfig = {
    suspense: null
  };
}

// by calls to these methods by a Babel plugin.
//
// In PROD (or in packages without access to React internals),
// they are left as they are instead.

function warn(format) {
  {
    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
      args[_key - 1] = arguments[_key];
    }

    printWarning('warn', format, args);
  }
}
function error(format) {
  {
    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
      args[_key2 - 1] = arguments[_key2];
    }

    printWarning('error', format, args);
  }
}

function printWarning(level, format, args) {
  // When changing this logic, you might want to also
  // update consoleWithStackDev.www.js as well.
  {
    var hasExistingStack = args.length > 0 && typeof args[args.length - 1] === 'string' && args[args.length - 1].indexOf('\n    in') === 0;

    if (!hasExistingStack) {
      var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
      var stack = ReactDebugCurrentFrame.getStackAddendum();

      if (stack !== '') {
        format += '%s';
        args = args.concat([stack]);
      }
    }

    var argsWithFormat = args.map(function (item) {
      return '' + item;
    }); // Careful: RN currently depends on this prefix

    argsWithFormat.unshift('Warning: ' + format); // We intentionally don't use spread (or .apply) directly because it
    // breaks IE9: https://github.com/facebook/react/issues/13610
    // eslint-disable-next-line react-internal/no-production-logging

    Function.prototype.apply.call(console[level], console, argsWithFormat);

    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      var argIndex = 0;
      var message = 'Warning: ' + format.replace(/%s/g, function () {
        return args[argIndex++];
      });
      throw new Error(message);
    } catch (x) {}
  }
}

if (!React) {
  {
    throw Error( "ReactDOM was loaded before React. Make sure you load the React package before loading ReactDOM." );
  }
}

var invokeGuardedCallbackImpl = function (name, func, context, a, b, c, d, e, f) {
  var funcArgs = Array.prototype.slice.call(arguments, 3);

  try {
    func.apply(context, funcArgs);
  } catch (error) {
    this.onError(error);
  }
};

{
  // In DEV mode, we swap out invokeGuardedCallback for a special version
  // that plays more nicely with the browser's DevTools. The idea is to preserve
  // "Pause on exceptions" behavior. Because React wraps all user-provided
  // functions in invokeGuardedCallback, and the production version of
  // invokeGuardedCallback uses a try-catch, all user exceptions are treated
  // like caught exceptions, and the DevTools won't pause unless the developer
  // takes the extra step of enabling pause on caught exceptions. This is
  // unintuitive, though, because even though React has caught the error, from
  // the developer's perspective, the error is uncaught.
  //
  // To preserve the expected "Pause on exceptions" behavior, we don't use a
  // try-catch in DEV. Instead, we synchronously dispatch a fake event to a fake
  // DOM node, and call the user-provided callback from inside an event handler
  // for that fake event. If the callback throws, the error is "captured" using
  // a global event handler. But because the error happens in a different
  // event loop context, it does not interrupt the normal program flow.
  // Effectively, this gives us try-catch behavior without actually using
  // try-catch. Neat!
  // Check that the browser supports the APIs we need to implement our special
  // DEV version of invokeGuardedCallback
  if (typeof window !== 'undefined' && typeof window.dispatchEvent === 'function' && typeof document !== 'undefined' && typeof document.createEvent === 'function') {
    var fakeNode = document.createElement('react');

    var invokeGuardedCallbackDev = function (name, func, context, a, b, c, d, e, f) {
      // If document doesn't exist we know for sure we will crash in this method
      // when we call document.createEvent(). However this can cause confusing
      // errors: https://github.com/facebookincubator/create-react-app/issues/3482
      // So we preemptively throw with a better message instead.
      if (!(typeof document !== 'undefined')) {
        {
          throw Error( "The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous." );
        }
      }

      var evt = document.createEvent('Event'); // Keeps track of whether the user-provided callback threw an error. We
      // set this to true at the beginning, then set it to false right after
      // calling the function. If the function errors, `didError` will never be
      // set to false. This strategy works even if the browser is flaky and
      // fails to call our global error handler, because it doesn't rely on
      // the error event at all.

      var didError = true; // Keeps track of the value of window.event so that we can reset it
      // during the callback to let user code access window.event in the
      // browsers that support it.

      var windowEvent = window.event; // Keeps track of the descriptor of window.event to restore it after event
      // dispatching: https://github.com/facebook/react/issues/13688

      var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, 'event'); // Create an event handler for our fake event. We will synchronously
      // dispatch our fake event using `dispatchEvent`. Inside the handler, we
      // call the user-provided callback.

      var funcArgs = Array.prototype.slice.call(arguments, 3);

      function callCallback() {
        // We immediately remove the callback from event listeners so that
        // nested `invokeGuardedCallback` calls do not clash. Otherwise, a
        // nested call would trigger the fake event handlers of any call higher
        // in the stack.
        fakeNode.removeEventListener(evtType, callCallback, false); // We check for window.hasOwnProperty('event') to prevent the
        // window.event assignment in both IE <= 10 as they throw an error
        // "Member not found" in strict mode, and in Firefox which does not
        // support window.event.

        if (typeof window.event !== 'undefined' && window.hasOwnProperty('event')) {
          window.event = windowEvent;
        }

        func.apply(context, funcArgs);
        didError = false;
      } // Create a global error event handler. We use this to capture the value
      // that was thrown. It's possible that this error handler will fire more
      // than once; for example, if non-React code also calls `dispatchEvent`
      // and a handler for that event throws. We should be resilient to most of
      // those cases. Even if our error event handler fires more than once, the
      // last error event is always used. If the callback actually does error,
      // we know that the last error event is the correct one, because it's not
      // possible for anything else to have happened in between our callback
      // erroring and the code that follows the `dispatchEvent` call below. If
      // the callback doesn't error, but the error event was fired, we know to
      // ignore it because `didError` will be false, as described above.


      var error; // Use this to track whether the error event is ever called.

      var didSetError = false;
      var isCrossOriginError = false;

      function handleWindowError(event) {
        error = event.error;
        didSetError = true;

        if (error === null && event.colno === 0 && event.lineno === 0) {
          isCrossOriginError = true;
        }

        if (event.defaultPrevented) {
          // Some other error handler has prevented default.
          // Browsers silence the error report if this happens.
          // We'll remember this to later decide whether to log it or not.
          if (error != null && typeof error === 'object') {
            try {
              error._suppressLogging = true;
            } catch (inner) {// Ignore.
            }
          }
        }
      } // Create a fake event type.


      var evtType = "react-" + (name ? name : 'invokeguardedcallback'); // Attach our event handlers

      window.addEventListener('error', handleWindowError);
      fakeNode.addEventListener(evtType, callCallback, false); // Synchronously dispatch our fake event. If the user-provided function
      // errors, it will trigger our global error handler.

      evt.initEvent(evtType, false, false);
      fakeNode.dispatchEvent(evt);

      if (windowEventDescriptor) {
        Object.defineProperty(window, 'event', windowEventDescriptor);
      }

      if (didError) {
        if (!didSetError) {
          // The callback errored, but the error event never fired.
          error = new Error('An error was thrown inside one of your components, but React ' + "doesn't know what it was. This is likely due to browser " + 'flakiness. React does its best to preserve the "Pause on ' + 'exceptions" behavior of the DevTools, which requires some ' + "DEV-mode only tricks. It's possible that these don't work in " + 'your browser. Try triggering the error in production mode, ' + 'or switching to a modern browser. If you suspect that this is ' + 'actually an issue with React, please file an issue.');
        } else if (isCrossOriginError) {
          error = new Error("A cross-origin error was thrown. React doesn't have access to " + 'the actual error object in development. ' + 'See https://fb.me/react-crossorigin-error for more information.');
        }

        this.onError(error);
      } // Remove our event listeners


      window.removeEventListener('error', handleWindowError);
    };

    invokeGuardedCallbackImpl = invokeGuardedCallbackDev;
  }
}

var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;

var hasError = false;
var caughtError = null; // Used by event system to capture/rethrow the first error.

var hasRethrowError = false;
var rethrowError = null;
var reporter = {
  onError: function (error) {
    hasError = true;
    caughtError = error;
  }
};
/**
 * Call a function while guarding against errors that happens within it.
 * Returns an error if it throws, otherwise null.
 *
 * In production, this is implemented using a try-catch. The reason we don't
 * use a try-catch directly is so that we can swap out a different
 * implementation in DEV mode.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallback(name, func, context, a, b, c, d, e, f) {
  hasError = false;
  caughtError = null;
  invokeGuardedCallbackImpl$1.apply(reporter, arguments);
}
/**
 * Same as invokeGuardedCallback, but instead of returning an error, it stores
 * it in a global so it can be rethrown by `rethrowCaughtError` later.
 * TODO: See if caughtError and rethrowError can be unified.
 *
 * @param {String} name of the guard to use for logging or debugging
 * @param {Function} func The function to invoke
 * @param {*} context The context to use when calling the function
 * @param {...*} args Arguments for function
 */

function invokeGuardedCallbackAndCatchFirstError(name, func, context, a, b, c, d, e, f) {
  invokeGuardedCallback.apply(this, arguments);

  if (hasError) {
    var error = clearCaughtError();

    if (!hasRethrowError) {
      hasRethrowError = true;
      rethrowError = error;
    }
  }
}
/**
 * During execution of guarded functions we will capture the first error which
 * we will rethrow to be handled by the top level error handler.
 */

function rethrowCaughtError() {
  if (hasRethrowError) {
    var error = rethrowError;
    hasRethrowError = false;
    rethrowError = null;
    throw error;
  }
}
function hasCaughtError() {
  return hasError;
}
function clearCaughtError() {
  if (hasError) {
    var error = caughtError;
    hasError = false;
    caughtError = null;
    return error;
  } else {
    {
      {
        throw Error( "clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var getFiberCurrentPropsFromNode = null;
var getInstanceFromNode = null;
var getNodeFromInstance = null;
function setComponentTree(getFiberCurrentPropsFromNodeImpl, getInstanceFromNodeImpl, getNodeFromInstanceImpl) {
  getFiberCurrentPropsFromNode = getFiberCurrentPropsFromNodeImpl;
  getInstanceFromNode = getInstanceFromNodeImpl;
  getNodeFromInstance = getNodeFromInstanceImpl;

  {
    if (!getNodeFromInstance || !getInstanceFromNode) {
      error('EventPluginUtils.setComponentTree(...): Injected ' + 'module is missing getNodeFromInstance or getInstanceFromNode.');
    }
  }
}
var validateEventDispatches;

{
  validateEventDispatches = function (event) {
    var dispatchListeners = event._dispatchListeners;
    var dispatchInstances = event._dispatchInstances;
    var listenersIsArr = Array.isArray(dispatchListeners);
    var listenersLen = listenersIsArr ? dispatchListeners.length : dispatchListeners ? 1 : 0;
    var instancesIsArr = Array.isArray(dispatchInstances);
    var instancesLen = instancesIsArr ? dispatchInstances.length : dispatchInstances ? 1 : 0;

    if (instancesIsArr !== listenersIsArr || instancesLen !== listenersLen) {
      error('EventPluginUtils: Invalid `event`.');
    }
  };
}
/**
 * Dispatch the event to the listener.
 * @param {SyntheticEvent} event SyntheticEvent to handle
 * @param {function} listener Application-level callback
 * @param {*} inst Internal component instance
 */


function executeDispatch(event, listener, inst) {
  var type = event.type || 'unknown-event';
  event.currentTarget = getNodeFromInstance(inst);
  invokeGuardedCallbackAndCatchFirstError(type, listener, undefined, event);
  event.currentTarget = null;
}
/**
 * Standard/simple iteration through an event's collected dispatches.
 */

function executeDispatchesInOrder(event) {
  var dispatchListeners = event._dispatchListeners;
  var dispatchInstances = event._dispatchInstances;

  {
    validateEventDispatches(event);
  }

  if (Array.isArray(dispatchListeners)) {
    for (var i = 0; i < dispatchListeners.length; i++) {
      if (event.isPropagationStopped()) {
        break;
      } // Listeners and Instances are two parallel arrays that are always in sync.


      executeDispatch(event, dispatchListeners[i], dispatchInstances[i]);
    }
  } else if (dispatchListeners) {
    executeDispatch(event, dispatchListeners, dispatchInstances);
  }

  event._dispatchListeners = null;
  event._dispatchInstances = null;
}

var FunctionComponent = 0;
var ClassComponent = 1;
var IndeterminateComponent = 2; // Before we know whether it is function or class

var HostRoot = 3; // Root of a host tree. Could be nested inside another node.

var HostPortal = 4; // A subtree. Could be an entry point to a different renderer.

var HostComponent = 5;
var HostText = 6;
var Fragment = 7;
var Mode = 8;
var ContextConsumer = 9;
var ContextProvider = 10;
var ForwardRef = 11;
var Profiler = 12;
var SuspenseComponent = 13;
var MemoComponent = 14;
var SimpleMemoComponent = 15;
var LazyComponent = 16;
var IncompleteClassComponent = 17;
var DehydratedFragment = 18;
var SuspenseListComponent = 19;
var FundamentalComponent = 20;
var ScopeComponent = 21;
var Block = 22;

/**
 * Injectable ordering of event plugins.
 */
var eventPluginOrder = null;
/**
 * Injectable mapping from names to event plugin modules.
 */

var namesToPlugins = {};
/**
 * Recomputes the plugin list using the injected plugins and plugin ordering.
 *
 * @private
 */

function recomputePluginOrdering() {
  if (!eventPluginOrder) {
    // Wait until an `eventPluginOrder` is injected.
    return;
  }

  for (var pluginName in namesToPlugins) {
    var pluginModule = namesToPlugins[pluginName];
    var pluginIndex = eventPluginOrder.indexOf(pluginName);

    if (!(pluginIndex > -1)) {
      {
        throw Error( "EventPluginRegistry: Cannot inject event plugins that do not exist in the plugin ordering, `" + pluginName + "`." );
      }
    }

    if (plugins[pluginIndex]) {
      continue;
    }

    if (!pluginModule.extractEvents) {
      {
        throw Error( "EventPluginRegistry: Event plugins must implement an `extractEvents` method, but `" + pluginName + "` does not." );
      }
    }

    plugins[pluginIndex] = pluginModule;
    var publishedEvents = pluginModule.eventTypes;

    for (var eventName in publishedEvents) {
      if (!publishEventForPlugin(publishedEvents[eventName], pluginModule, eventName)) {
        {
          throw Error( "EventPluginRegistry: Failed to publish event `" + eventName + "` for plugin `" + pluginName + "`." );
        }
      }
    }
  }
}
/**
 * Publishes an event so that it can be dispatched by the supplied plugin.
 *
 * @param {object} dispatchConfig Dispatch configuration for the event.
 * @param {object} PluginModule Plugin publishing the event.
 * @return {boolean} True if the event was successfully published.
 * @private
 */


function publishEventForPlugin(dispatchConfig, pluginModule, eventName) {
  if (!!eventNameDispatchConfigs.hasOwnProperty(eventName)) {
    {
      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same event name, `" + eventName + "`." );
    }
  }

  eventNameDispatchConfigs[eventName] = dispatchConfig;
  var phasedRegistrationNames = dispatchConfig.phasedRegistrationNames;

  if (phasedRegistrationNames) {
    for (var phaseName in phasedRegistrationNames) {
      if (phasedRegistrationNames.hasOwnProperty(phaseName)) {
        var phasedRegistrationName = phasedRegistrationNames[phaseName];
        publishRegistrationName(phasedRegistrationName, pluginModule, eventName);
      }
    }

    return true;
  } else if (dispatchConfig.registrationName) {
    publishRegistrationName(dispatchConfig.registrationName, pluginModule, eventName);
    return true;
  }

  return false;
}
/**
 * Publishes a registration name that is used to identify dispatched events.
 *
 * @param {string} registrationName Registration name to add.
 * @param {object} PluginModule Plugin publishing the event.
 * @private
 */


function publishRegistrationName(registrationName, pluginModule, eventName) {
  if (!!registrationNameModules[registrationName]) {
    {
      throw Error( "EventPluginRegistry: More than one plugin attempted to publish the same registration name, `" + registrationName + "`." );
    }
  }

  registrationNameModules[registrationName] = pluginModule;
  registrationNameDependencies[registrationName] = pluginModule.eventTypes[eventName].dependencies;

  {
    var lowerCasedName = registrationName.toLowerCase();
    possibleRegistrationNames[lowerCasedName] = registrationName;

    if (registrationName === 'onDoubleClick') {
      possibleRegistrationNames.ondblclick = registrationName;
    }
  }
}
/**
 * Registers plugins so that they can extract and dispatch events.
 */

/**
 * Ordered list of injected plugins.
 */


var plugins = [];
/**
 * Mapping from event name to dispatch config
 */

var eventNameDispatchConfigs = {};
/**
 * Mapping from registration name to plugin module
 */

var registrationNameModules = {};
/**
 * Mapping from registration name to event name
 */

var registrationNameDependencies = {};
/**
 * Mapping from lowercase registration names to the properly cased version,
 * used to warn in the case of missing event handlers. Available
 * only in true.
 * @type {Object}
 */

var possibleRegistrationNames =  {} ; // Trust the developer to only use possibleRegistrationNames in true

/**
 * Injects an ordering of plugins (by plugin name). This allows the ordering
 * to be decoupled from injection of the actual plugins so that ordering is
 * always deterministic regardless of packaging, on-the-fly injection, etc.
 *
 * @param {array} InjectedEventPluginOrder
 * @internal
 */

function injectEventPluginOrder(injectedEventPluginOrder) {
  if (!!eventPluginOrder) {
    {
      throw Error( "EventPluginRegistry: Cannot inject event plugin ordering more than once. You are likely trying to load more than one copy of React." );
    }
  } // Clone the ordering so it cannot be dynamically mutated.


  eventPluginOrder = Array.prototype.slice.call(injectedEventPluginOrder);
  recomputePluginOrdering();
}
/**
 * Injects plugins to be used by plugin event system. The plugin names must be
 * in the ordering injected by `injectEventPluginOrder`.
 *
 * Plugins can be injected as part of page initialization or on-the-fly.
 *
 * @param {object} injectedNamesToPlugins Map from names to plugin modules.
 * @internal
 */

function injectEventPluginsByName(injectedNamesToPlugins) {
  var isOrderingDirty = false;

  for (var pluginName in injectedNamesToPlugins) {
    if (!injectedNamesToPlugins.hasOwnProperty(pluginName)) {
      continue;
    }

    var pluginModule = injectedNamesToPlugins[pluginName];

    if (!namesToPlugins.hasOwnProperty(pluginName) || namesToPlugins[pluginName] !== pluginModule) {
      if (!!namesToPlugins[pluginName]) {
        {
          throw Error( "EventPluginRegistry: Cannot inject two different event plugins using the same name, `" + pluginName + "`." );
        }
      }

      namesToPlugins[pluginName] = pluginModule;
      isOrderingDirty = true;
    }
  }

  if (isOrderingDirty) {
    recomputePluginOrdering();
  }
}

var canUseDOM = !!(typeof window !== 'undefined' && typeof window.document !== 'undefined' && typeof window.document.createElement !== 'undefined');

var PLUGIN_EVENT_SYSTEM = 1;
var IS_REPLAYED = 1 << 5;
var IS_FIRST_ANCESTOR = 1 << 6;

var restoreImpl = null;
var restoreTarget = null;
var restoreQueue = null;

function restoreStateOfTarget(target) {
  // We perform this translation at the end of the event loop so that we
  // always receive the correct fiber here
  var internalInstance = getInstanceFromNode(target);

  if (!internalInstance) {
    // Unmounted
    return;
  }

  if (!(typeof restoreImpl === 'function')) {
    {
      throw Error( "setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var stateNode = internalInstance.stateNode; // Guard against Fiber being unmounted.

  if (stateNode) {
    var _props = getFiberCurrentPropsFromNode(stateNode);

    restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
  }
}

function setRestoreImplementation(impl) {
  restoreImpl = impl;
}
function enqueueStateRestore(target) {
  if (restoreTarget) {
    if (restoreQueue) {
      restoreQueue.push(target);
    } else {
      restoreQueue = [target];
    }
  } else {
    restoreTarget = target;
  }
}
function needsStateRestore() {
  return restoreTarget !== null || restoreQueue !== null;
}
function restoreStateIfNeeded() {
  if (!restoreTarget) {
    return;
  }

  var target = restoreTarget;
  var queuedTargets = restoreQueue;
  restoreTarget = null;
  restoreQueue = null;
  restoreStateOfTarget(target);

  if (queuedTargets) {
    for (var i = 0; i < queuedTargets.length; i++) {
      restoreStateOfTarget(queuedTargets[i]);
    }
  }
}

var enableProfilerTimer = true; // Trace which interactions trigger each commit.

var enableDeprecatedFlareAPI = false; // Experimental Host Component support.

var enableFundamentalAPI = false; // Experimental Scope support.
var warnAboutStringRefs = false;

// the renderer. Such as when we're dispatching events or if third party
// libraries need to call batchedUpdates. Eventually, this API will go away when
// everything is batched by default. We'll then have a similar API to opt-out of
// scheduled work and instead do synchronous work.
// Defaults

var batchedUpdatesImpl = function (fn, bookkeeping) {
  return fn(bookkeeping);
};

var discreteUpdatesImpl = function (fn, a, b, c, d) {
  return fn(a, b, c, d);
};

var flushDiscreteUpdatesImpl = function () {};

var batchedEventUpdatesImpl = batchedUpdatesImpl;
var isInsideEventHandler = false;
var isBatchingEventUpdates = false;

function finishEventHandler() {
  // Here we wait until all updates have propagated, which is important
  // when using controlled components within layers:
  // https://github.com/facebook/react/issues/1698
  // Then we restore state of any controlled component.
  var controlledComponentsHavePendingUpdates = needsStateRestore();

  if (controlledComponentsHavePendingUpdates) {
    // If a controlled event was fired, we may need to restore the state of
    // the DOM node back to the controlled value. This is necessary when React
    // bails out of the update without touching the DOM.
    flushDiscreteUpdatesImpl();
    restoreStateIfNeeded();
  }
}

function batchedUpdates(fn, bookkeeping) {
  if (isInsideEventHandler) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(bookkeeping);
  }

  isInsideEventHandler = true;

  try {
    return batchedUpdatesImpl(fn, bookkeeping);
  } finally {
    isInsideEventHandler = false;
    finishEventHandler();
  }
}
function batchedEventUpdates(fn, a, b) {
  if (isBatchingEventUpdates) {
    // If we are currently inside another batch, we need to wait until it
    // fully completes before restoring state.
    return fn(a, b);
  }

  isBatchingEventUpdates = true;

  try {
    return batchedEventUpdatesImpl(fn, a, b);
  } finally {
    isBatchingEventUpdates = false;
    finishEventHandler();
  }
} // This is for the React Flare event system
function discreteUpdates(fn, a, b, c, d) {
  var prevIsInsideEventHandler = isInsideEventHandler;
  isInsideEventHandler = true;

  try {
    return discreteUpdatesImpl(fn, a, b, c, d);
  } finally {
    isInsideEventHandler = prevIsInsideEventHandler;

    if (!isInsideEventHandler) {
      finishEventHandler();
    }
  }
}
function flushDiscreteUpdatesIfNeeded(timeStamp) {
  // event.timeStamp isn't overly reliable due to inconsistencies in
  // how different browsers have historically provided the time stamp.
  // Some browsers provide high-resolution time stamps for all events,
  // some provide low-resolution time stamps for all events. FF < 52
  // even mixes both time stamps together. Some browsers even report
  // negative time stamps or time stamps that are 0 (iOS9) in some cases.
  // Given we are only comparing two time stamps with equality (!==),
  // we are safe from the resolution differences. If the time stamp is 0
  // we bail-out of preventing the flush, which can affect semantics,
  // such as if an earlier flush removes or adds event listeners that
  // are fired in the subsequent flush. However, this is the same
  // behaviour as we had before this change, so the risks are low.
  if (!isInsideEventHandler && (!enableDeprecatedFlareAPI  )) {
    flushDiscreteUpdatesImpl();
  }
}
function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushDiscreteUpdatesImpl, _batchedEventUpdatesImpl) {
  batchedUpdatesImpl = _batchedUpdatesImpl;
  discreteUpdatesImpl = _discreteUpdatesImpl;
  flushDiscreteUpdatesImpl = _flushDiscreteUpdatesImpl;
  batchedEventUpdatesImpl = _batchedEventUpdatesImpl;
}

var DiscreteEvent = 0;
var UserBlockingEvent = 1;
var ContinuousEvent = 2;

// A reserved attribute.
// It is handled by React separately and shouldn't be written to the DOM.
var RESERVED = 0; // A simple string attribute.
// Attributes that aren't in the whitelist are presumed to have this type.

var STRING = 1; // A string attribute that accepts booleans in React. In HTML, these are called
// "enumerated" attributes with "true" and "false" as possible values.
// When true, it should be set to a "true" string.
// When false, it should be set to a "false" string.

var BOOLEANISH_STRING = 2; // A real boolean attribute.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.

var BOOLEAN = 3; // An attribute that can be used as a flag as well as with a value.
// When true, it should be present (set either to an empty string or its name).
// When false, it should be omitted.
// For any other value, should be present with that value.

var OVERLOADED_BOOLEAN = 4; // An attribute that must be numeric or parse as a numeric.
// When falsy, it should be removed.

var NUMERIC = 5; // An attribute that must be positive numeric or parse as a positive numeric.
// When falsy, it should be removed.

var POSITIVE_NUMERIC = 6;

/* eslint-disable max-len */
var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
/* eslint-enable max-len */

var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
var ROOT_ATTRIBUTE_NAME = 'data-reactroot';
var VALID_ATTRIBUTE_NAME_REGEX = new RegExp('^[' + ATTRIBUTE_NAME_START_CHAR + '][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty = Object.prototype.hasOwnProperty;
var illegalAttributeNameCache = {};
var validatedAttributeNameCache = {};
function isAttributeNameSafe(attributeName) {
  if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
    return true;
  }

  if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
    return false;
  }

  if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
    validatedAttributeNameCache[attributeName] = true;
    return true;
  }

  illegalAttributeNameCache[attributeName] = true;

  {
    error('Invalid attribute name: `%s`', attributeName);
  }

  return false;
}
function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null) {
    return propertyInfo.type === RESERVED;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (name.length > 2 && (name[0] === 'o' || name[0] === 'O') && (name[1] === 'n' || name[1] === 'N')) {
    return true;
  }

  return false;
}
function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
  if (propertyInfo !== null && propertyInfo.type === RESERVED) {
    return false;
  }

  switch (typeof value) {
    case 'function': // $FlowIssue symbol is perfectly valid here

    case 'symbol':
      // eslint-disable-line
      return true;

    case 'boolean':
      {
        if (isCustomComponentTag) {
          return false;
        }

        if (propertyInfo !== null) {
          return !propertyInfo.acceptsBooleans;
        } else {
          var prefix = name.toLowerCase().slice(0, 5);
          return prefix !== 'data-' && prefix !== 'aria-';
        }
      }

    default:
      return false;
  }
}
function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
  if (value === null || typeof value === 'undefined') {
    return true;
  }

  if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
    return true;
  }

  if (isCustomComponentTag) {
    return false;
  }

  if (propertyInfo !== null) {
    switch (propertyInfo.type) {
      case BOOLEAN:
        return !value;

      case OVERLOADED_BOOLEAN:
        return value === false;

      case NUMERIC:
        return isNaN(value);

      case POSITIVE_NUMERIC:
        return isNaN(value) || value < 1;
    }
  }

  return false;
}
function getPropertyInfo(name) {
  return properties.hasOwnProperty(name) ? properties[name] : null;
}

function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL) {
  this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
  this.attributeName = attributeName;
  this.attributeNamespace = attributeNamespace;
  this.mustUseProperty = mustUseProperty;
  this.propertyName = name;
  this.type = type;
  this.sanitizeURL = sanitizeURL;
} // When adding attributes to this list, be sure to also add them to
// the `possibleStandardNames` module to ensure casing and incorrect
// name warnings.


var properties = {}; // These props are reserved by React. They shouldn't be written to the DOM.

var reservedProps = ['children', 'dangerouslySetInnerHTML', // TODO: This prevents the assignment of defaultValue to regular
// elements (not just inputs). Now that ReactDOMInput assigns to the
// defaultValue property -- do we need this?
'defaultValue', 'defaultChecked', 'innerHTML', 'suppressContentEditableWarning', 'suppressHydrationWarning', 'style'];

reservedProps.forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, RESERVED, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // A few React string attributes have a different name.
// This is a mapping from React prop names to the attribute names.

[['acceptCharset', 'accept-charset'], ['className', 'class'], ['htmlFor', 'for'], ['httpEquiv', 'http-equiv']].forEach(function (_ref) {
  var name = _ref[0],
      attributeName = _ref[1];
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" HTML attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).

['contentEditable', 'draggable', 'spellCheck', 'value'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are "enumerated" SVG attributes that accept "true" and "false".
// In React, we let users pass `true` and `false` even though technically
// these aren't boolean attributes (they are coerced to strings).
// Since these are SVG attributes, their attribute names are case-sensitive.

['autoReverse', 'externalResourcesRequired', 'focusable', 'preserveAlpha'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEANISH_STRING, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML boolean attributes.

['allowFullScreen', 'async', // Note: there is a special case that prevents it from being written to the DOM
// on the client side because the browsers are inconsistent. Instead we call focus().
'autoFocus', 'autoPlay', 'controls', 'default', 'defer', 'disabled', 'disablePictureInPicture', 'formNoValidate', 'hidden', 'loop', 'noModule', 'noValidate', 'open', 'playsInline', 'readOnly', 'required', 'reversed', 'scoped', 'seamless', // Microdata
'itemScope'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These are the few React props that we set as DOM properties
// rather than attributes. These are all booleans.

['checked', // Note: `option.selected` is not updated if `select.multiple` is
// disabled with `removeAttribute`. We have special logic for handling this.
'multiple', 'muted', 'selected' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, BOOLEAN, true, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that are "overloaded booleans": they behave like
// booleans, but can also accept a string value.

['capture', 'download' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, OVERLOADED_BOOLEAN, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be positive numbers.

['cols', 'rows', 'size', 'span' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, POSITIVE_NUMERIC, false, // mustUseProperty
  name, // attributeName
  null, // attributeNamespace
  false);
}); // These are HTML attributes that must be numbers.

['rowSpan', 'start'].forEach(function (name) {
  properties[name] = new PropertyInfoRecord(name, NUMERIC, false, // mustUseProperty
  name.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
});
var CAMELIZE = /[\-\:]([a-z])/g;

var capitalize = function (token) {
  return token[1].toUpperCase();
}; // This is a list of all SVG attributes that need special casing, namespacing,
// or boolean value assignment. Regular attributes that just accept strings
// and have the same names are omitted, just like in the HTML whitelist.
// Some of these attributes can be hard to find. This list was created by
// scraping the MDN documentation.


['accent-height', 'alignment-baseline', 'arabic-form', 'baseline-shift', 'cap-height', 'clip-path', 'clip-rule', 'color-interpolation', 'color-interpolation-filters', 'color-profile', 'color-rendering', 'dominant-baseline', 'enable-background', 'fill-opacity', 'fill-rule', 'flood-color', 'flood-opacity', 'font-family', 'font-size', 'font-size-adjust', 'font-stretch', 'font-style', 'font-variant', 'font-weight', 'glyph-name', 'glyph-orientation-horizontal', 'glyph-orientation-vertical', 'horiz-adv-x', 'horiz-origin-x', 'image-rendering', 'letter-spacing', 'lighting-color', 'marker-end', 'marker-mid', 'marker-start', 'overline-position', 'overline-thickness', 'paint-order', 'panose-1', 'pointer-events', 'rendering-intent', 'shape-rendering', 'stop-color', 'stop-opacity', 'strikethrough-position', 'strikethrough-thickness', 'stroke-dasharray', 'stroke-dashoffset', 'stroke-linecap', 'stroke-linejoin', 'stroke-miterlimit', 'stroke-opacity', 'stroke-width', 'text-anchor', 'text-decoration', 'text-rendering', 'underline-position', 'underline-thickness', 'unicode-bidi', 'unicode-range', 'units-per-em', 'v-alphabetic', 'v-hanging', 'v-ideographic', 'v-mathematical', 'vector-effect', 'vert-adv-y', 'vert-origin-x', 'vert-origin-y', 'word-spacing', 'writing-mode', 'xmlns:xlink', 'x-height' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, null, // attributeNamespace
  false);
}); // String SVG attributes with the xlink namespace.

['xlink:actuate', 'xlink:arcrole', 'xlink:role', 'xlink:show', 'xlink:title', 'xlink:type' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/1999/xlink', false);
}); // String SVG attributes with the xml namespace.

['xml:base', 'xml:lang', 'xml:space' // NOTE: if you add a camelCased prop to this list,
// you'll need to set attributeName to name.toLowerCase()
// instead in the assignment below.
].forEach(function (attributeName) {
  var name = attributeName.replace(CAMELIZE, capitalize);
  properties[name] = new PropertyInfoRecord(name, STRING, false, // mustUseProperty
  attributeName, 'http://www.w3.org/XML/1998/namespace', false);
}); // These attribute exists both in HTML and SVG.
// The attribute name is case-sensitive in SVG so we can't just use
// the React name like we do for attributes that exist only in HTML.

['tabIndex', 'crossOrigin'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  false);
}); // These attributes accept URLs. These must not allow javascript: URLS.
// These will also need to accept Trusted Types object in the future.

var xlinkHref = 'xlinkHref';
properties[xlinkHref] = new PropertyInfoRecord('xlinkHref', STRING, false, // mustUseProperty
'xlink:href', 'http://www.w3.org/1999/xlink', true);
['src', 'href', 'action', 'formAction'].forEach(function (attributeName) {
  properties[attributeName] = new PropertyInfoRecord(attributeName, STRING, false, // mustUseProperty
  attributeName.toLowerCase(), // attributeName
  null, // attributeNamespace
  true);
});

var ReactDebugCurrentFrame = null;

{
  ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
} // A javascript: URL can contain leading C0 control or \u0020 SPACE,
// and any newline or tab are filtered out as if they're not part of the URL.
// https://url.spec.whatwg.org/#url-parsing
// Tab or newline are defined as \r\n\t:
// https://infra.spec.whatwg.org/#ascii-tab-or-newline
// A C0 control is a code point in the range \u0000 NULL to \u001F
// INFORMATION SEPARATOR ONE, inclusive:
// https://infra.spec.whatwg.org/#c0-control-or-space

/* eslint-disable max-len */


var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
var didWarn = false;

function sanitizeURL(url) {
  {
    if (!didWarn && isJavaScriptProtocol.test(url)) {
      didWarn = true;

      error('A future version of React will block javascript: URLs as a security precaution. ' + 'Use event handlers instead if you can. If you need to generate unsafe HTML try ' + 'using dangerouslySetInnerHTML instead. React was passed %s.', JSON.stringify(url));
    }
  }
}

/**
 * Get the value for a property on a node. Only used in DEV for SSR validation.
 * The "expected" argument is used as a hint of what the expected value is.
 * Some properties have multiple equivalent values.
 */
function getValueForProperty(node, name, expected, propertyInfo) {
  {
    if (propertyInfo.mustUseProperty) {
      var propertyName = propertyInfo.propertyName;
      return node[propertyName];
    } else {
      if ( propertyInfo.sanitizeURL) {
        // If we haven't fully disabled javascript: URLs, and if
        // the hydration is successful of a javascript: URL, we
        // still want to warn on the client.
        sanitizeURL('' + expected);
      }

      var attributeName = propertyInfo.attributeName;
      var stringValue = null;

      if (propertyInfo.type === OVERLOADED_BOOLEAN) {
        if (node.hasAttribute(attributeName)) {
          var value = node.getAttribute(attributeName);

          if (value === '') {
            return true;
          }

          if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
            return value;
          }

          if (value === '' + expected) {
            return expected;
          }

          return value;
        }
      } else if (node.hasAttribute(attributeName)) {
        if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
          // We had an attribute but shouldn't have had one, so read it
          // for the error message.
          return node.getAttribute(attributeName);
        }

        if (propertyInfo.type === BOOLEAN) {
          // If this was a boolean, it doesn't matter what the value is
          // the fact that we have it is the same as the expected.
          return expected;
        } // Even if this property uses a namespace we use getAttribute
        // because we assume its namespaced name is the same as our config.
        // To use getAttributeNS we need the local name which we don't have
        // in our config atm.


        stringValue = node.getAttribute(attributeName);
      }

      if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
        return stringValue === null ? expected : stringValue;
      } else if (stringValue === '' + expected) {
        return expected;
      } else {
        return stringValue;
      }
    }
  }
}
/**
 * Get the value for a attribute on a node. Only used in DEV for SSR validation.
 * The third argument is used as a hint of what the expected value is. Some
 * attributes have multiple equivalent values.
 */

function getValueForAttribute(node, name, expected) {
  {
    if (!isAttributeNameSafe(name)) {
      return;
    }

    if (!node.hasAttribute(name)) {
      return expected === undefined ? undefined : null;
    }

    var value = node.getAttribute(name);

    if (value === '' + expected) {
      return expected;
    }

    return value;
  }
}
/**
 * Sets the value for a property on a node.
 *
 * @param {DOMElement} node
 * @param {string} name
 * @param {*} value
 */

function setValueForProperty(node, name, value, isCustomComponentTag) {
  var propertyInfo = getPropertyInfo(name);

  if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
    return;
  }

  if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
    value = null;
  } // If the prop isn't in the special list, treat it as a simple attribute.


  if (isCustomComponentTag || propertyInfo === null) {
    if (isAttributeNameSafe(name)) {
      var _attributeName = name;

      if (value === null) {
        node.removeAttribute(_attributeName);
      } else {
        node.setAttribute(_attributeName,  '' + value);
      }
    }

    return;
  }

  var mustUseProperty = propertyInfo.mustUseProperty;

  if (mustUseProperty) {
    var propertyName = propertyInfo.propertyName;

    if (value === null) {
      var type = propertyInfo.type;
      node[propertyName] = type === BOOLEAN ? false : '';
    } else {
      // Contrary to `setAttribute`, object properties are properly
      // `toString`ed by IE8/9.
      node[propertyName] = value;
    }

    return;
  } // The rest are treated as attributes with special cases.


  var attributeName = propertyInfo.attributeName,
      attributeNamespace = propertyInfo.attributeNamespace;

  if (value === null) {
    node.removeAttribute(attributeName);
  } else {
    var _type = propertyInfo.type;
    var attributeValue;

    if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
      // If attribute type is boolean, we know for sure it won't be an execution sink
      // and we won't require Trusted Type here.
      attributeValue = '';
    } else {
      // `setAttribute` with objects becomes only `[object]` in IE8/9,
      // ('' + value) makes it output the correct toString()-value.
      {
        attributeValue = '' + value;
      }

      if (propertyInfo.sanitizeURL) {
        sanitizeURL(attributeValue.toString());
      }
    }

    if (attributeNamespace) {
      node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
    } else {
      node.setAttribute(attributeName, attributeValue);
    }
  }
}

var BEFORE_SLASH_RE = /^(.*)[\\\/]/;
function describeComponentFrame (name, source, ownerName) {
  var sourceInfo = '';

  if (source) {
    var path = source.fileName;
    var fileName = path.replace(BEFORE_SLASH_RE, '');

    {
      // In DEV, include code for a common special case:
      // prefer "folder/index.js" instead of just "index.js".
      if (/^index\./.test(fileName)) {
        var match = path.match(BEFORE_SLASH_RE);

        if (match) {
          var pathBeforeSlash = match[1];

          if (pathBeforeSlash) {
            var folderName = pathBeforeSlash.replace(BEFORE_SLASH_RE, '');
            fileName = folderName + '/' + fileName;
          }
        }
      }
    }

    sourceInfo = ' (at ' + fileName + ':' + source.lineNumber + ')';
  } else if (ownerName) {
    sourceInfo = ' (created by ' + ownerName + ')';
  }

  return '\n    in ' + (name || 'Unknown') + sourceInfo;
}

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var MAYBE_ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
var FAUX_ITERATOR_SYMBOL = '@@iterator';
function getIteratorFn(maybeIterable) {
  if (maybeIterable === null || typeof maybeIterable !== 'object') {
    return null;
  }

  var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];

  if (typeof maybeIterator === 'function') {
    return maybeIterator;
  }

  return null;
}

var Uninitialized = -1;
var Pending = 0;
var Resolved = 1;
var Rejected = 2;
function refineResolvedLazyComponent(lazyComponent) {
  return lazyComponent._status === Resolved ? lazyComponent._result : null;
}
function initializeLazyComponentType(lazyComponent) {
  if (lazyComponent._status === Uninitialized) {
    lazyComponent._status = Pending;
    var ctor = lazyComponent._ctor;
    var thenable = ctor();
    lazyComponent._result = thenable;
    thenable.then(function (moduleObject) {
      if (lazyComponent._status === Pending) {
        var defaultExport = moduleObject.default;

        {
          if (defaultExport === undefined) {
            error('lazy: Expected the result of a dynamic import() call. ' + 'Instead received: %s\n\nYour code should look like: \n  ' + "const MyComponent = lazy(() => import('./MyComponent'))", moduleObject);
          }
        }

        lazyComponent._status = Resolved;
        lazyComponent._result = defaultExport;
      }
    }, function (error) {
      if (lazyComponent._status === Pending) {
        lazyComponent._status = Rejected;
        lazyComponent._result = error;
      }
    });
  }
}

function getWrappedName(outerType, innerType, wrapperName) {
  var functionName = innerType.displayName || innerType.name || '';
  return outerType.displayName || (functionName !== '' ? wrapperName + "(" + functionName + ")" : wrapperName);
}

function getComponentName(type) {
  if (type == null) {
    // Host root, text node or just invalid type.
    return null;
  }

  {
    if (typeof type.tag === 'number') {
      error('Received an unexpected object in getComponentName(). ' + 'This is likely a bug in React. Please file an issue.');
    }
  }

  if (typeof type === 'function') {
    return type.displayName || type.name || null;
  }

  if (typeof type === 'string') {
    return type;
  }

  switch (type) {
    case REACT_FRAGMENT_TYPE:
      return 'Fragment';

    case REACT_PORTAL_TYPE:
      return 'Portal';

    case REACT_PROFILER_TYPE:
      return "Profiler";

    case REACT_STRICT_MODE_TYPE:
      return 'StrictMode';

    case REACT_SUSPENSE_TYPE:
      return 'Suspense';

    case REACT_SUSPENSE_LIST_TYPE:
      return 'SuspenseList';
  }

  if (typeof type === 'object') {
    switch (type.$$typeof) {
      case REACT_CONTEXT_TYPE:
        return 'Context.Consumer';

      case REACT_PROVIDER_TYPE:
        return 'Context.Provider';

      case REACT_FORWARD_REF_TYPE:
        return getWrappedName(type, type.render, 'ForwardRef');

      case REACT_MEMO_TYPE:
        return getComponentName(type.type);

      case REACT_BLOCK_TYPE:
        return getComponentName(type.render);

      case REACT_LAZY_TYPE:
        {
          var thenable = type;
          var resolvedThenable = refineResolvedLazyComponent(thenable);

          if (resolvedThenable) {
            return getComponentName(resolvedThenable);
          }

          break;
        }
    }
  }

  return null;
}

var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;

function describeFiber(fiber) {
  switch (fiber.tag) {
    case HostRoot:
    case HostPortal:
    case HostText:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
      return '';

    default:
      var owner = fiber._debugOwner;
      var source = fiber._debugSource;
      var name = getComponentName(fiber.type);
      var ownerName = null;

      if (owner) {
        ownerName = getComponentName(owner.type);
      }

      return describeComponentFrame(name, source, ownerName);
  }
}

function getStackByFiberInDevAndProd(workInProgress) {
  var info = '';
  var node = workInProgress;

  do {
    info += describeFiber(node);
    node = node.return;
  } while (node);

  return info;
}
var current = null;
var isRendering = false;
function getCurrentFiberOwnerNameInDevOrNull() {
  {
    if (current === null) {
      return null;
    }

    var owner = current._debugOwner;

    if (owner !== null && typeof owner !== 'undefined') {
      return getComponentName(owner.type);
    }
  }

  return null;
}
function getCurrentFiberStackInDev() {
  {
    if (current === null) {
      return '';
    } // Safe because if current fiber exists, we are reconciling,
    // and it is guaranteed to be the work-in-progress version.


    return getStackByFiberInDevAndProd(current);
  }
}
function resetCurrentFiber() {
  {
    ReactDebugCurrentFrame$1.getCurrentStack = null;
    current = null;
    isRendering = false;
  }
}
function setCurrentFiber(fiber) {
  {
    ReactDebugCurrentFrame$1.getCurrentStack = getCurrentFiberStackInDev;
    current = fiber;
    isRendering = false;
  }
}
function setIsRendering(rendering) {
  {
    isRendering = rendering;
  }
}

// Flow does not allow string concatenation of most non-string types. To work
// around this limitation, we use an opaque type that can only be obtained by
// passing the value through getToStringValue first.
function toString(value) {
  return '' + value;
}
function getToStringValue(value) {
  switch (typeof value) {
    case 'boolean':
    case 'number':
    case 'object':
    case 'string':
    case 'undefined':
      return value;

    default:
      // function, symbol are assigned as empty strings
      return '';
  }
}

var ReactDebugCurrentFrame$2 = null;
var ReactControlledValuePropTypes = {
  checkPropTypes: null
};

{
  ReactDebugCurrentFrame$2 = ReactSharedInternals.ReactDebugCurrentFrame;
  var hasReadOnlyValue = {
    button: true,
    checkbox: true,
    image: true,
    hidden: true,
    radio: true,
    reset: true,
    submit: true
  };
  var propTypes = {
    value: function (props, propName, componentName) {
      if (hasReadOnlyValue[props.type] || props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
        return null;
      }

      return new Error('You provided a `value` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultValue`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    },
    checked: function (props, propName, componentName) {
      if (props.onChange || props.readOnly || props.disabled || props[propName] == null || enableDeprecatedFlareAPI ) {
        return null;
      }

      return new Error('You provided a `checked` prop to a form field without an ' + '`onChange` handler. This will render a read-only field. If ' + 'the field should be mutable use `defaultChecked`. Otherwise, ' + 'set either `onChange` or `readOnly`.');
    }
  };
  /**
   * Provide a linked `value` attribute for controlled forms. You should not use
   * this outside of the ReactDOM controlled form components.
   */

  ReactControlledValuePropTypes.checkPropTypes = function (tagName, props) {
    checkPropTypes(propTypes, props, 'prop', tagName, ReactDebugCurrentFrame$2.getStackAddendum);
  };
}

function isCheckable(elem) {
  var type = elem.type;
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (type === 'checkbox' || type === 'radio');
}

function getTracker(node) {
  return node._valueTracker;
}

function detachTracker(node) {
  node._valueTracker = null;
}

function getValueFromNode(node) {
  var value = '';

  if (!node) {
    return value;
  }

  if (isCheckable(node)) {
    value = node.checked ? 'true' : 'false';
  } else {
    value = node.value;
  }

  return value;
}

function trackValueOnNode(node) {
  var valueField = isCheckable(node) ? 'checked' : 'value';
  var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
  var currentValue = '' + node[valueField]; // if someone has already defined a value or Safari, then bail
  // and don't track value will cause over reporting of changes,
  // but it's better then a hard failure
  // (needed for certain tests that spyOn input values and Safari)

  if (node.hasOwnProperty(valueField) || typeof descriptor === 'undefined' || typeof descriptor.get !== 'function' || typeof descriptor.set !== 'function') {
    return;
  }

  var get = descriptor.get,
      set = descriptor.set;
  Object.defineProperty(node, valueField, {
    configurable: true,
    get: function () {
      return get.call(this);
    },
    set: function (value) {
      currentValue = '' + value;
      set.call(this, value);
    }
  }); // We could've passed this the first time
  // but it triggers a bug in IE11 and Edge 14/15.
  // Calling defineProperty() again should be equivalent.
  // https://github.com/facebook/react/issues/11768

  Object.defineProperty(node, valueField, {
    enumerable: descriptor.enumerable
  });
  var tracker = {
    getValue: function () {
      return currentValue;
    },
    setValue: function (value) {
      currentValue = '' + value;
    },
    stopTracking: function () {
      detachTracker(node);
      delete node[valueField];
    }
  };
  return tracker;
}

function track(node) {
  if (getTracker(node)) {
    return;
  } // TODO: Once it's just Fiber we can move this to node._wrapperState


  node._valueTracker = trackValueOnNode(node);
}
function updateValueIfChanged(node) {
  if (!node) {
    return false;
  }

  var tracker = getTracker(node); // if there is no tracker at this point it's unlikely
  // that trying again will succeed

  if (!tracker) {
    return true;
  }

  var lastValue = tracker.getValue();
  var nextValue = getValueFromNode(node);

  if (nextValue !== lastValue) {
    tracker.setValue(nextValue);
    return true;
  }

  return false;
}

var didWarnValueDefaultValue = false;
var didWarnCheckedDefaultChecked = false;
var didWarnControlledToUncontrolled = false;
var didWarnUncontrolledToControlled = false;

function isControlled(props) {
  var usesChecked = props.type === 'checkbox' || props.type === 'radio';
  return usesChecked ? props.checked != null : props.value != null;
}
/**
 * Implements an <input> host component that allows setting these optional
 * props: `checked`, `value`, `defaultChecked`, and `defaultValue`.
 *
 * If `checked` or `value` are not supplied (or null/undefined), user actions
 * that affect the checked state or value will trigger updates to the element.
 *
 * If they are supplied (and not null/undefined), the rendered element will not
 * trigger updates to the element. Instead, the props must change in order for
 * the rendered element to be updated.
 *
 * The rendered element will be initialized as unchecked (or `defaultChecked`)
 * with an empty value (or `defaultValue`).
 *
 * See http://www.w3.org/TR/2012/WD-html5-20121025/the-input-element.html
 */


function getHostProps(element, props) {
  var node = element;
  var checked = props.checked;

  var hostProps = _assign({}, props, {
    defaultChecked: undefined,
    defaultValue: undefined,
    value: undefined,
    checked: checked != null ? checked : node._wrapperState.initialChecked
  });

  return hostProps;
}
function initWrapperState(element, props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('input', props);

    if (props.checked !== undefined && props.defaultChecked !== undefined && !didWarnCheckedDefaultChecked) {
      error('%s contains an input of type %s with both checked and defaultChecked props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the checked prop, or the defaultChecked prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnCheckedDefaultChecked = true;
    }

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue) {
      error('%s contains an input of type %s with both value and defaultValue props. ' + 'Input elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled input ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component', props.type);

      didWarnValueDefaultValue = true;
    }
  }

  var node = element;
  var defaultValue = props.defaultValue == null ? '' : props.defaultValue;
  node._wrapperState = {
    initialChecked: props.checked != null ? props.checked : props.defaultChecked,
    initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
    controlled: isControlled(props)
  };
}
function updateChecked(element, props) {
  var node = element;
  var checked = props.checked;

  if (checked != null) {
    setValueForProperty(node, 'checked', checked, false);
  }
}
function updateWrapper(element, props) {
  var node = element;

  {
    var controlled = isControlled(props);

    if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
      error('A component is changing an uncontrolled input of type %s to be controlled. ' + 'Input elements should not switch from uncontrolled to controlled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

      didWarnUncontrolledToControlled = true;
    }

    if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
      error('A component is changing a controlled input of type %s to be uncontrolled. ' + 'Input elements should not switch from controlled to uncontrolled (or vice versa). ' + 'Decide between using a controlled or uncontrolled input ' + 'element for the lifetime of the component. More info: https://fb.me/react-controlled-components', props.type);

      didWarnControlledToUncontrolled = true;
    }
  }

  updateChecked(element, props);
  var value = getToStringValue(props.value);
  var type = props.type;

  if (value != null) {
    if (type === 'number') {
      if (value === 0 && node.value === '' || // We explicitly want to coerce to number here if possible.
      // eslint-disable-next-line
      node.value != value) {
        node.value = toString(value);
      }
    } else if (node.value !== toString(value)) {
      node.value = toString(value);
    }
  } else if (type === 'submit' || type === 'reset') {
    // Submit/reset inputs need the attribute removed completely to avoid
    // blank-text buttons.
    node.removeAttribute('value');
    return;
  }

  {
    // When syncing the value attribute, the value comes from a cascade of
    // properties:
    //  1. The value React property
    //  2. The defaultValue React property
    //  3. Otherwise there should be no change
    if (props.hasOwnProperty('value')) {
      setDefaultValue(node, props.type, value);
    } else if (props.hasOwnProperty('defaultValue')) {
      setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
    }
  }

  {
    // When syncing the checked attribute, it only changes when it needs
    // to be removed, such as transitioning from a checkbox into a text input
    if (props.checked == null && props.defaultChecked != null) {
      node.defaultChecked = !!props.defaultChecked;
    }
  }
}
function postMountWrapper(element, props, isHydrating) {
  var node = element; // Do not assign value if it is already set. This prevents user text input
  // from being lost during SSR hydration.

  if (props.hasOwnProperty('value') || props.hasOwnProperty('defaultValue')) {
    var type = props.type;
    var isButton = type === 'submit' || type === 'reset'; // Avoid setting value attribute on submit/reset inputs as it overrides the
    // default value provided by the browser. See: #12872

    if (isButton && (props.value === undefined || props.value === null)) {
      return;
    }

    var initialValue = toString(node._wrapperState.initialValue); // Do not assign value if it is already set. This prevents user text input
    // from being lost during SSR hydration.

    if (!isHydrating) {
      {
        // When syncing the value attribute, the value property should use
        // the wrapperState._initialValue property. This uses:
        //
        //   1. The value React property when present
        //   2. The defaultValue React property when present
        //   3. An empty string
        if (initialValue !== node.value) {
          node.value = initialValue;
        }
      }
    }

    {
      // Otherwise, the value attribute is synchronized to the property,
      // so we assign defaultValue to the same thing as the value property
      // assignment step above.
      node.defaultValue = initialValue;
    }
  } // Normally, we'd just do `node.checked = node.checked` upon initial mount, less this bug
  // this is needed to work around a chrome bug where setting defaultChecked
  // will sometimes influence the value of checked (even after detachment).
  // Reference: https://bugs.chromium.org/p/chromium/issues/detail?id=608416
  // We need to temporarily unset name to avoid disrupting radio button groups.


  var name = node.name;

  if (name !== '') {
    node.name = '';
  }

  {
    // When syncing the checked attribute, both the checked property and
    // attribute are assigned at the same time using defaultChecked. This uses:
    //
    //   1. The checked React property when present
    //   2. The defaultChecked React property when present
    //   3. Otherwise, false
    node.defaultChecked = !node.defaultChecked;
    node.defaultChecked = !!node._wrapperState.initialChecked;
  }

  if (name !== '') {
    node.name = name;
  }
}
function restoreControlledState(element, props) {
  var node = element;
  updateWrapper(node, props);
  updateNamedCousins(node, props);
}

function updateNamedCousins(rootNode, props) {
  var name = props.name;

  if (props.type === 'radio' && name != null) {
    var queryRoot = rootNode;

    while (queryRoot.parentNode) {
      queryRoot = queryRoot.parentNode;
    } // If `rootNode.form` was non-null, then we could try `form.elements`,
    // but that sometimes behaves strangely in IE8. We could also try using
    // `form.getElementsByName`, but that will only return direct children
    // and won't include inputs that use the HTML5 `form=` attribute. Since
    // the input might not even be in a form. It might not even be in the
    // document. Let's just use the local `querySelectorAll` to ensure we don't
    // miss anything.


    var group = queryRoot.querySelectorAll('input[name=' + JSON.stringify('' + name) + '][type="radio"]');

    for (var i = 0; i < group.length; i++) {
      var otherNode = group[i];

      if (otherNode === rootNode || otherNode.form !== rootNode.form) {
        continue;
      } // This will throw if radio buttons rendered by different copies of React
      // and the same name are rendered into the same form (same as #1939).
      // That's probably okay; we don't support it just as we don't support
      // mixing React radio buttons with non-React ones.


      var otherProps = getFiberCurrentPropsFromNode$1(otherNode);

      if (!otherProps) {
        {
          throw Error( "ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported." );
        }
      } // We need update the tracked value on the named cousin since the value
      // was changed but the input saw no event or value set


      updateValueIfChanged(otherNode); // If this is a controlled radio button group, forcing the input that
      // was previously checked to update will cause it to be come re-checked
      // as appropriate.

      updateWrapper(otherNode, otherProps);
    }
  }
} // In Chrome, assigning defaultValue to certain input types triggers input validation.
// For number inputs, the display value loses trailing decimal points. For email inputs,
// Chrome raises "The specified value <x> is not a valid email address".
//
// Here we check to see if the defaultValue has actually changed, avoiding these problems
// when the user is inputting text
//
// https://github.com/facebook/react/issues/7253


function setDefaultValue(node, type, value) {
  if ( // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
  type !== 'number' || node.ownerDocument.activeElement !== node) {
    if (value == null) {
      node.defaultValue = toString(node._wrapperState.initialValue);
    } else if (node.defaultValue !== toString(value)) {
      node.defaultValue = toString(value);
    }
  }
}

var didWarnSelectedSetOnOption = false;
var didWarnInvalidChild = false;

function flattenChildren(children) {
  var content = ''; // Flatten children. We'll warn if they are invalid
  // during validateProps() which runs for hydration too.
  // Note that this would throw on non-element objects.
  // Elements are stringified (which is normally irrelevant
  // but matters for <fbt>).

  React.Children.forEach(children, function (child) {
    if (child == null) {
      return;
    }

    content += child; // Note: we don't warn about invalid children here.
    // Instead, this is done separately below so that
    // it happens during the hydration codepath too.
  });
  return content;
}
/**
 * Implements an <option> host component that warns when `selected` is set.
 */


function validateProps(element, props) {
  {
    // This mirrors the codepath above, but runs for hydration too.
    // Warn about invalid children here so that client and hydration are consistent.
    // TODO: this seems like it could cause a DEV-only throw for hydration
    // if children contains a non-element object. We should try to avoid that.
    if (typeof props.children === 'object' && props.children !== null) {
      React.Children.forEach(props.children, function (child) {
        if (child == null) {
          return;
        }

        if (typeof child === 'string' || typeof child === 'number') {
          return;
        }

        if (typeof child.type !== 'string') {
          return;
        }

        if (!didWarnInvalidChild) {
          didWarnInvalidChild = true;

          error('Only strings and numbers are supported as <option> children.');
        }
      });
    } // TODO: Remove support for `selected` in <option>.


    if (props.selected != null && !didWarnSelectedSetOnOption) {
      error('Use the `defaultValue` or `value` props on <select> instead of ' + 'setting `selected` on <option>.');

      didWarnSelectedSetOnOption = true;
    }
  }
}
function postMountWrapper$1(element, props) {
  // value="" should make a value attribute (#6219)
  if (props.value != null) {
    element.setAttribute('value', toString(getToStringValue(props.value)));
  }
}
function getHostProps$1(element, props) {
  var hostProps = _assign({
    children: undefined
  }, props);

  var content = flattenChildren(props.children);

  if (content) {
    hostProps.children = content;
  }

  return hostProps;
}

var didWarnValueDefaultValue$1;

{
  didWarnValueDefaultValue$1 = false;
}

function getDeclarationErrorAddendum() {
  var ownerName = getCurrentFiberOwnerNameInDevOrNull();

  if (ownerName) {
    return '\n\nCheck the render method of `' + ownerName + '`.';
  }

  return '';
}

var valuePropNames = ['value', 'defaultValue'];
/**
 * Validation function for `value` and `defaultValue`.
 */

function checkSelectPropTypes(props) {
  {
    ReactControlledValuePropTypes.checkPropTypes('select', props);

    for (var i = 0; i < valuePropNames.length; i++) {
      var propName = valuePropNames[i];

      if (props[propName] == null) {
        continue;
      }

      var isArray = Array.isArray(props[propName]);

      if (props.multiple && !isArray) {
        error('The `%s` prop supplied to <select> must be an array if ' + '`multiple` is true.%s', propName, getDeclarationErrorAddendum());
      } else if (!props.multiple && isArray) {
        error('The `%s` prop supplied to <select> must be a scalar ' + 'value if `multiple` is false.%s', propName, getDeclarationErrorAddendum());
      }
    }
  }
}

function updateOptions(node, multiple, propValue, setDefaultSelected) {
  var options = node.options;

  if (multiple) {
    var selectedValues = propValue;
    var selectedValue = {};

    for (var i = 0; i < selectedValues.length; i++) {
      // Prefix to avoid chaos with special keys.
      selectedValue['$' + selectedValues[i]] = true;
    }

    for (var _i = 0; _i < options.length; _i++) {
      var selected = selectedValue.hasOwnProperty('$' + options[_i].value);

      if (options[_i].selected !== selected) {
        options[_i].selected = selected;
      }

      if (selected && setDefaultSelected) {
        options[_i].defaultSelected = true;
      }
    }
  } else {
    // Do not set `select.value` as exact behavior isn't consistent across all
    // browsers for all cases.
    var _selectedValue = toString(getToStringValue(propValue));

    var defaultSelected = null;

    for (var _i2 = 0; _i2 < options.length; _i2++) {
      if (options[_i2].value === _selectedValue) {
        options[_i2].selected = true;

        if (setDefaultSelected) {
          options[_i2].defaultSelected = true;
        }

        return;
      }

      if (defaultSelected === null && !options[_i2].disabled) {
        defaultSelected = options[_i2];
      }
    }

    if (defaultSelected !== null) {
      defaultSelected.selected = true;
    }
  }
}
/**
 * Implements a <select> host component that allows optionally setting the
 * props `value` and `defaultValue`. If `multiple` is false, the prop must be a
 * stringable. If `multiple` is true, the prop must be an array of stringables.
 *
 * If `value` is not supplied (or null/undefined), user actions that change the
 * selected option will trigger updates to the rendered options.
 *
 * If it is supplied (and not null/undefined), the rendered options will not
 * update in response to user actions. Instead, the `value` prop must change in
 * order for the rendered options to update.
 *
 * If `defaultValue` is provided, any options with the supplied values will be
 * selected.
 */


function getHostProps$2(element, props) {
  return _assign({}, props, {
    value: undefined
  });
}
function initWrapperState$1(element, props) {
  var node = element;

  {
    checkSelectPropTypes(props);
  }

  node._wrapperState = {
    wasMultiple: !!props.multiple
  };

  {
    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValueDefaultValue$1) {
      error('Select elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled select ' + 'element and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components');

      didWarnValueDefaultValue$1 = true;
    }
  }
}
function postMountWrapper$2(element, props) {
  var node = element;
  node.multiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (props.defaultValue != null) {
    updateOptions(node, !!props.multiple, props.defaultValue, true);
  }
}
function postUpdateWrapper(element, props) {
  var node = element;
  var wasMultiple = node._wrapperState.wasMultiple;
  node._wrapperState.wasMultiple = !!props.multiple;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  } else if (wasMultiple !== !!props.multiple) {
    // For simplicity, reapply `defaultValue` if `multiple` is toggled.
    if (props.defaultValue != null) {
      updateOptions(node, !!props.multiple, props.defaultValue, true);
    } else {
      // Revert the select back to its default unselected state.
      updateOptions(node, !!props.multiple, props.multiple ? [] : '', false);
    }
  }
}
function restoreControlledState$1(element, props) {
  var node = element;
  var value = props.value;

  if (value != null) {
    updateOptions(node, !!props.multiple, value, false);
  }
}

var didWarnValDefaultVal = false;

/**
 * Implements a <textarea> host component that allows setting `value`, and
 * `defaultValue`. This differs from the traditional DOM API because value is
 * usually set as PCDATA children.
 *
 * If `value` is not supplied (or null/undefined), user actions that affect the
 * value will trigger updates to the element.
 *
 * If `value` is supplied (and not null/undefined), the rendered element will
 * not trigger updates to the element. Instead, the `value` prop must change in
 * order for the rendered element to be updated.
 *
 * The rendered element will be initialized with an empty value, the prop
 * `defaultValue` if specified, or the children content (deprecated).
 */
function getHostProps$3(element, props) {
  var node = element;

  if (!(props.dangerouslySetInnerHTML == null)) {
    {
      throw Error( "`dangerouslySetInnerHTML` does not make sense on <textarea>." );
    }
  } // Always set children to the same thing. In IE9, the selection range will
  // get reset if `textContent` is mutated.  We could add a check in setTextContent
  // to only set the value if/when the value differs from the node value (which would
  // completely solve this IE9 bug), but Sebastian+Sophie seemed to like this
  // solution. The value can be a boolean or object so that's why it's forced
  // to be a string.


  var hostProps = _assign({}, props, {
    value: undefined,
    defaultValue: undefined,
    children: toString(node._wrapperState.initialValue)
  });

  return hostProps;
}
function initWrapperState$2(element, props) {
  var node = element;

  {
    ReactControlledValuePropTypes.checkPropTypes('textarea', props);

    if (props.value !== undefined && props.defaultValue !== undefined && !didWarnValDefaultVal) {
      error('%s contains a textarea with both value and defaultValue props. ' + 'Textarea elements must be either controlled or uncontrolled ' + '(specify either the value prop, or the defaultValue prop, but not ' + 'both). Decide between using a controlled or uncontrolled textarea ' + 'and remove one of these props. More info: ' + 'https://fb.me/react-controlled-components', getCurrentFiberOwnerNameInDevOrNull() || 'A component');

      didWarnValDefaultVal = true;
    }
  }

  var initialValue = props.value; // Only bother fetching default value if we're going to use it

  if (initialValue == null) {
    var children = props.children,
        defaultValue = props.defaultValue;

    if (children != null) {
      {
        error('Use the `defaultValue` or `value` props instead of setting ' + 'children on <textarea>.');
      }

      {
        if (!(defaultValue == null)) {
          {
            throw Error( "If you supply `defaultValue` on a <textarea>, do not pass children." );
          }
        }

        if (Array.isArray(children)) {
          if (!(children.length <= 1)) {
            {
              throw Error( "<textarea> can only have at most one child." );
            }
          }

          children = children[0];
        }

        defaultValue = children;
      }
    }

    if (defaultValue == null) {
      defaultValue = '';
    }

    initialValue = defaultValue;
  }

  node._wrapperState = {
    initialValue: getToStringValue(initialValue)
  };
}
function updateWrapper$1(element, props) {
  var node = element;
  var value = getToStringValue(props.value);
  var defaultValue = getToStringValue(props.defaultValue);

  if (value != null) {
    // Cast `value` to a string to ensure the value is set correctly. While
    // browsers typically do this as necessary, jsdom doesn't.
    var newValue = toString(value); // To avoid side effects (such as losing text selection), only set value if changed

    if (newValue !== node.value) {
      node.value = newValue;
    }

    if (props.defaultValue == null && node.defaultValue !== newValue) {
      node.defaultValue = newValue;
    }
  }

  if (defaultValue != null) {
    node.defaultValue = toString(defaultValue);
  }
}
function postMountWrapper$3(element, props) {
  var node = element; // This is in postMount because we need access to the DOM node, which is not
  // available until after the component has mounted.

  var textContent = node.textContent; // Only set node.value if textContent is equal to the expected
  // initial value. In IE10/IE11 there is a bug where the placeholder attribute
  // will populate textContent as well.
  // https://developer.microsoft.com/microsoft-edge/platform/issues/101525/

  if (textContent === node._wrapperState.initialValue) {
    if (textContent !== '' && textContent !== null) {
      node.value = textContent;
    }
  }
}
function restoreControlledState$2(element, props) {
  // DOM component is still mounted; update
  updateWrapper$1(element, props);
}

var HTML_NAMESPACE = 'http://www.w3.org/1999/xhtml';
var MATH_NAMESPACE = 'http://www.w3.org/1998/Math/MathML';
var SVG_NAMESPACE = 'http://www.w3.org/2000/svg';
var Namespaces = {
  html: HTML_NAMESPACE,
  mathml: MATH_NAMESPACE,
  svg: SVG_NAMESPACE
}; // Assumes there is no parent namespace.

function getIntrinsicNamespace(type) {
  switch (type) {
    case 'svg':
      return SVG_NAMESPACE;

    case 'math':
      return MATH_NAMESPACE;

    default:
      return HTML_NAMESPACE;
  }
}
function getChildNamespace(parentNamespace, type) {
  if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
    // No (or default) parent namespace: potential entry point.
    return getIntrinsicNamespace(type);
  }

  if (parentNamespace === SVG_NAMESPACE && type === 'foreignObject') {
    // We're leaving SVG.
    return HTML_NAMESPACE;
  } // By default, pass namespace below.


  return parentNamespace;
}

/* globals MSApp */

/**
 * Create a function which has 'unsafe' privileges (required by windows8 apps)
 */
var createMicrosoftUnsafeLocalFunction = function (func) {
  if (typeof MSApp !== 'undefined' && MSApp.execUnsafeLocalFunction) {
    return function (arg0, arg1, arg2, arg3) {
      MSApp.execUnsafeLocalFunction(function () {
        return func(arg0, arg1, arg2, arg3);
      });
    };
  } else {
    return func;
  }
};

var reusableSVGContainer;
/**
 * Set the innerHTML property of a node
 *
 * @param {DOMElement} node
 * @param {string} html
 * @internal
 */

var setInnerHTML = createMicrosoftUnsafeLocalFunction(function (node, html) {
  if (node.namespaceURI === Namespaces.svg) {

    if (!('innerHTML' in node)) {
      // IE does not have innerHTML for SVG nodes, so instead we inject the
      // new markup in a temp node and then move the child nodes across into
      // the target node
      reusableSVGContainer = reusableSVGContainer || document.createElement('div');
      reusableSVGContainer.innerHTML = '<svg>' + html.valueOf().toString() + '</svg>';
      var svgNode = reusableSVGContainer.firstChild;

      while (node.firstChild) {
        node.removeChild(node.firstChild);
      }

      while (svgNode.firstChild) {
        node.appendChild(svgNode.firstChild);
      }

      return;
    }
  }

  node.innerHTML = html;
});

/**
 * HTML nodeType values that represent the type of the node
 */
var ELEMENT_NODE = 1;
var TEXT_NODE = 3;
var COMMENT_NODE = 8;
var DOCUMENT_NODE = 9;
var DOCUMENT_FRAGMENT_NODE = 11;

/**
 * Set the textContent property of a node. For text updates, it's faster
 * to set the `nodeValue` of the Text node directly instead of using
 * `.textContent` which will remove the existing node and create a new one.
 *
 * @param {DOMElement} node
 * @param {string} text
 * @internal
 */

var setTextContent = function (node, text) {
  if (text) {
    var firstChild = node.firstChild;

    if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
      firstChild.nodeValue = text;
      return;
    }
  }

  node.textContent = text;
};

// Do not use the below two methods directly!
// Instead use constants exported from DOMTopLevelEventTypes in ReactDOM.
// (It is the only module that is allowed to access these methods.)
function unsafeCastStringToDOMTopLevelType(topLevelType) {
  return topLevelType;
}
function unsafeCastDOMTopLevelTypeToString(topLevelType) {
  return topLevelType;
}

/**
 * Generate a mapping of standard vendor prefixes using the defined style property and event name.
 *
 * @param {string} styleProp
 * @param {string} eventName
 * @returns {object}
 */

function makePrefixMap(styleProp, eventName) {
  var prefixes = {};
  prefixes[styleProp.toLowerCase()] = eventName.toLowerCase();
  prefixes['Webkit' + styleProp] = 'webkit' + eventName;
  prefixes['Moz' + styleProp] = 'moz' + eventName;
  return prefixes;
}
/**
 * A list of event names to a configurable list of vendor prefixes.
 */


var vendorPrefixes = {
  animationend: makePrefixMap('Animation', 'AnimationEnd'),
  animationiteration: makePrefixMap('Animation', 'AnimationIteration'),
  animationstart: makePrefixMap('Animation', 'AnimationStart'),
  transitionend: makePrefixMap('Transition', 'TransitionEnd')
};
/**
 * Event names that have already been detected and prefixed (if applicable).
 */

var prefixedEventNames = {};
/**
 * Element to check for prefixes on.
 */

var style = {};
/**
 * Bootstrap if a DOM exists.
 */

if (canUseDOM) {
  style = document.createElement('div').style; // On some platforms, in particular some releases of Android 4.x,
  // the un-prefixed "animation" and "transition" properties are defined on the
  // style object but the events that fire will still be prefixed, so we need
  // to check if the un-prefixed events are usable, and if not remove them from the map.

  if (!('AnimationEvent' in window)) {
    delete vendorPrefixes.animationend.animation;
    delete vendorPrefixes.animationiteration.animation;
    delete vendorPrefixes.animationstart.animation;
  } // Same as above


  if (!('TransitionEvent' in window)) {
    delete vendorPrefixes.transitionend.transition;
  }
}
/**
 * Attempts to determine the correct vendor prefixed event name.
 *
 * @param {string} eventName
 * @returns {string}
 */


function getVendorPrefixedEventName(eventName) {
  if (prefixedEventNames[eventName]) {
    return prefixedEventNames[eventName];
  } else if (!vendorPrefixes[eventName]) {
    return eventName;
  }

  var prefixMap = vendorPrefixes[eventName];

  for (var styleProp in prefixMap) {
    if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
      return prefixedEventNames[eventName] = prefixMap[styleProp];
    }
  }

  return eventName;
}

/**
 * To identify top level events in ReactDOM, we use constants defined by this
 * module. This is the only module that uses the unsafe* methods to express
 * that the constants actually correspond to the browser event names. This lets
 * us save some bundle size by avoiding a top level type -> event name map.
 * The rest of ReactDOM code should import top level types from this file.
 */

var TOP_ABORT = unsafeCastStringToDOMTopLevelType('abort');
var TOP_ANIMATION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationend'));
var TOP_ANIMATION_ITERATION = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationiteration'));
var TOP_ANIMATION_START = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('animationstart'));
var TOP_BLUR = unsafeCastStringToDOMTopLevelType('blur');
var TOP_CAN_PLAY = unsafeCastStringToDOMTopLevelType('canplay');
var TOP_CAN_PLAY_THROUGH = unsafeCastStringToDOMTopLevelType('canplaythrough');
var TOP_CANCEL = unsafeCastStringToDOMTopLevelType('cancel');
var TOP_CHANGE = unsafeCastStringToDOMTopLevelType('change');
var TOP_CLICK = unsafeCastStringToDOMTopLevelType('click');
var TOP_CLOSE = unsafeCastStringToDOMTopLevelType('close');
var TOP_COMPOSITION_END = unsafeCastStringToDOMTopLevelType('compositionend');
var TOP_COMPOSITION_START = unsafeCastStringToDOMTopLevelType('compositionstart');
var TOP_COMPOSITION_UPDATE = unsafeCastStringToDOMTopLevelType('compositionupdate');
var TOP_CONTEXT_MENU = unsafeCastStringToDOMTopLevelType('contextmenu');
var TOP_COPY = unsafeCastStringToDOMTopLevelType('copy');
var TOP_CUT = unsafeCastStringToDOMTopLevelType('cut');
var TOP_DOUBLE_CLICK = unsafeCastStringToDOMTopLevelType('dblclick');
var TOP_AUX_CLICK = unsafeCastStringToDOMTopLevelType('auxclick');
var TOP_DRAG = unsafeCastStringToDOMTopLevelType('drag');
var TOP_DRAG_END = unsafeCastStringToDOMTopLevelType('dragend');
var TOP_DRAG_ENTER = unsafeCastStringToDOMTopLevelType('dragenter');
var TOP_DRAG_EXIT = unsafeCastStringToDOMTopLevelType('dragexit');
var TOP_DRAG_LEAVE = unsafeCastStringToDOMTopLevelType('dragleave');
var TOP_DRAG_OVER = unsafeCastStringToDOMTopLevelType('dragover');
var TOP_DRAG_START = unsafeCastStringToDOMTopLevelType('dragstart');
var TOP_DROP = unsafeCastStringToDOMTopLevelType('drop');
var TOP_DURATION_CHANGE = unsafeCastStringToDOMTopLevelType('durationchange');
var TOP_EMPTIED = unsafeCastStringToDOMTopLevelType('emptied');
var TOP_ENCRYPTED = unsafeCastStringToDOMTopLevelType('encrypted');
var TOP_ENDED = unsafeCastStringToDOMTopLevelType('ended');
var TOP_ERROR = unsafeCastStringToDOMTopLevelType('error');
var TOP_FOCUS = unsafeCastStringToDOMTopLevelType('focus');
var TOP_GOT_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('gotpointercapture');
var TOP_INPUT = unsafeCastStringToDOMTopLevelType('input');
var TOP_INVALID = unsafeCastStringToDOMTopLevelType('invalid');
var TOP_KEY_DOWN = unsafeCastStringToDOMTopLevelType('keydown');
var TOP_KEY_PRESS = unsafeCastStringToDOMTopLevelType('keypress');
var TOP_KEY_UP = unsafeCastStringToDOMTopLevelType('keyup');
var TOP_LOAD = unsafeCastStringToDOMTopLevelType('load');
var TOP_LOAD_START = unsafeCastStringToDOMTopLevelType('loadstart');
var TOP_LOADED_DATA = unsafeCastStringToDOMTopLevelType('loadeddata');
var TOP_LOADED_METADATA = unsafeCastStringToDOMTopLevelType('loadedmetadata');
var TOP_LOST_POINTER_CAPTURE = unsafeCastStringToDOMTopLevelType('lostpointercapture');
var TOP_MOUSE_DOWN = unsafeCastStringToDOMTopLevelType('mousedown');
var TOP_MOUSE_MOVE = unsafeCastStringToDOMTopLevelType('mousemove');
var TOP_MOUSE_OUT = unsafeCastStringToDOMTopLevelType('mouseout');
var TOP_MOUSE_OVER = unsafeCastStringToDOMTopLevelType('mouseover');
var TOP_MOUSE_UP = unsafeCastStringToDOMTopLevelType('mouseup');
var TOP_PASTE = unsafeCastStringToDOMTopLevelType('paste');
var TOP_PAUSE = unsafeCastStringToDOMTopLevelType('pause');
var TOP_PLAY = unsafeCastStringToDOMTopLevelType('play');
var TOP_PLAYING = unsafeCastStringToDOMTopLevelType('playing');
var TOP_POINTER_CANCEL = unsafeCastStringToDOMTopLevelType('pointercancel');
var TOP_POINTER_DOWN = unsafeCastStringToDOMTopLevelType('pointerdown');
var TOP_POINTER_MOVE = unsafeCastStringToDOMTopLevelType('pointermove');
var TOP_POINTER_OUT = unsafeCastStringToDOMTopLevelType('pointerout');
var TOP_POINTER_OVER = unsafeCastStringToDOMTopLevelType('pointerover');
var TOP_POINTER_UP = unsafeCastStringToDOMTopLevelType('pointerup');
var TOP_PROGRESS = unsafeCastStringToDOMTopLevelType('progress');
var TOP_RATE_CHANGE = unsafeCastStringToDOMTopLevelType('ratechange');
var TOP_RESET = unsafeCastStringToDOMTopLevelType('reset');
var TOP_SCROLL = unsafeCastStringToDOMTopLevelType('scroll');
var TOP_SEEKED = unsafeCastStringToDOMTopLevelType('seeked');
var TOP_SEEKING = unsafeCastStringToDOMTopLevelType('seeking');
var TOP_SELECTION_CHANGE = unsafeCastStringToDOMTopLevelType('selectionchange');
var TOP_STALLED = unsafeCastStringToDOMTopLevelType('stalled');
var TOP_SUBMIT = unsafeCastStringToDOMTopLevelType('submit');
var TOP_SUSPEND = unsafeCastStringToDOMTopLevelType('suspend');
var TOP_TEXT_INPUT = unsafeCastStringToDOMTopLevelType('textInput');
var TOP_TIME_UPDATE = unsafeCastStringToDOMTopLevelType('timeupdate');
var TOP_TOGGLE = unsafeCastStringToDOMTopLevelType('toggle');
var TOP_TOUCH_CANCEL = unsafeCastStringToDOMTopLevelType('touchcancel');
var TOP_TOUCH_END = unsafeCastStringToDOMTopLevelType('touchend');
var TOP_TOUCH_MOVE = unsafeCastStringToDOMTopLevelType('touchmove');
var TOP_TOUCH_START = unsafeCastStringToDOMTopLevelType('touchstart');
var TOP_TRANSITION_END = unsafeCastStringToDOMTopLevelType(getVendorPrefixedEventName('transitionend'));
var TOP_VOLUME_CHANGE = unsafeCastStringToDOMTopLevelType('volumechange');
var TOP_WAITING = unsafeCastStringToDOMTopLevelType('waiting');
var TOP_WHEEL = unsafeCastStringToDOMTopLevelType('wheel'); // List of events that need to be individually attached to media elements.
// Note that events in this list will *not* be listened to at the top level
// unless they're explicitly whitelisted in `ReactBrowserEventEmitter.listenTo`.

var mediaEventTypes = [TOP_ABORT, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_VOLUME_CHANGE, TOP_WAITING];
function getRawEventName(topLevelType) {
  return unsafeCastDOMTopLevelTypeToString(topLevelType);
}

var PossiblyWeakMap = typeof WeakMap === 'function' ? WeakMap : Map; // prettier-ignore

var elementListenerMap = new PossiblyWeakMap();
function getListenerMapForElement(element) {
  var listenerMap = elementListenerMap.get(element);

  if (listenerMap === undefined) {
    listenerMap = new Map();
    elementListenerMap.set(element, listenerMap);
  }

  return listenerMap;
}

/**
 * `ReactInstanceMap` maintains a mapping from a public facing stateful
 * instance (key) and the internal representation (value). This allows public
 * methods to accept the user facing instance as an argument and map them back
 * to internal methods.
 *
 * Note that this module is currently shared and assumed to be stateless.
 * If this becomes an actual Map, that will break.
 */
function get(key) {
  return key._reactInternalFiber;
}
function has(key) {
  return key._reactInternalFiber !== undefined;
}
function set(key, value) {
  key._reactInternalFiber = value;
}

// Don't change these two values. They're used by React Dev Tools.
var NoEffect =
/*              */
0;
var PerformedWork =
/*         */
1; // You can change the rest (and add more).

var Placement =
/*             */
2;
var Update =
/*                */
4;
var PlacementAndUpdate =
/*    */
6;
var Deletion =
/*              */
8;
var ContentReset =
/*          */
16;
var Callback =
/*              */
32;
var DidCapture =
/*            */
64;
var Ref =
/*                   */
128;
var Snapshot =
/*              */
256;
var Passive =
/*               */
512;
var Hydrating =
/*             */
1024;
var HydratingAndUpdate =
/*    */
1028; // Passive & Update & Callback & Ref & Snapshot

var LifecycleEffectMask =
/*   */
932; // Union of all host effects

var HostEffectMask =
/*        */
2047;
var Incomplete =
/*            */
2048;
var ShouldCapture =
/*         */
4096;

var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
function getNearestMountedFiber(fiber) {
  var node = fiber;
  var nearestMounted = fiber;

  if (!fiber.alternate) {
    // If there is no alternate, this might be a new tree that isn't inserted
    // yet. If it is, then it will have a pending insertion effect on it.
    var nextNode = node;

    do {
      node = nextNode;

      if ((node.effectTag & (Placement | Hydrating)) !== NoEffect) {
        // This is an insertion or in-progress hydration. The nearest possible
        // mounted fiber is the parent but we need to continue to figure out
        // if that one is still mounted.
        nearestMounted = node.return;
      }

      nextNode = node.return;
    } while (nextNode);
  } else {
    while (node.return) {
      node = node.return;
    }
  }

  if (node.tag === HostRoot) {
    // TODO: Check if this was a nested HostRoot when used with
    // renderContainerIntoSubtree.
    return nearestMounted;
  } // If we didn't hit the root, that means that we're in an disconnected tree
  // that has been unmounted.


  return null;
}
function getSuspenseInstanceFromFiber(fiber) {
  if (fiber.tag === SuspenseComponent) {
    var suspenseState = fiber.memoizedState;

    if (suspenseState === null) {
      var current = fiber.alternate;

      if (current !== null) {
        suspenseState = current.memoizedState;
      }
    }

    if (suspenseState !== null) {
      return suspenseState.dehydrated;
    }
  }

  return null;
}
function getContainerFromFiber(fiber) {
  return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
}
function isFiberMounted(fiber) {
  return getNearestMountedFiber(fiber) === fiber;
}
function isMounted(component) {
  {
    var owner = ReactCurrentOwner.current;

    if (owner !== null && owner.tag === ClassComponent) {
      var ownerFiber = owner;
      var instance = ownerFiber.stateNode;

      if (!instance._warnedAboutRefsInRender) {
        error('%s is accessing isMounted inside its render() function. ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(ownerFiber.type) || 'A component');
      }

      instance._warnedAboutRefsInRender = true;
    }
  }

  var fiber = get(component);

  if (!fiber) {
    return false;
  }

  return getNearestMountedFiber(fiber) === fiber;
}

function assertIsMounted(fiber) {
  if (!(getNearestMountedFiber(fiber) === fiber)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }
}

function findCurrentFiberUsingSlowPath(fiber) {
  var alternate = fiber.alternate;

  if (!alternate) {
    // If there is no alternate, then we only need to check if it is mounted.
    var nearestMounted = getNearestMountedFiber(fiber);

    if (!(nearestMounted !== null)) {
      {
        throw Error( "Unable to find node on an unmounted component." );
      }
    }

    if (nearestMounted !== fiber) {
      return null;
    }

    return fiber;
  } // If we have two possible branches, we'll walk backwards up to the root
  // to see what path the root points to. On the way we may hit one of the
  // special cases and we'll deal with them.


  var a = fiber;
  var b = alternate;

  while (true) {
    var parentA = a.return;

    if (parentA === null) {
      // We're at the root.
      break;
    }

    var parentB = parentA.alternate;

    if (parentB === null) {
      // There is no alternate. This is an unusual case. Currently, it only
      // happens when a Suspense component is hidden. An extra fragment fiber
      // is inserted in between the Suspense fiber and its children. Skip
      // over this extra fragment fiber and proceed to the next parent.
      var nextParent = parentA.return;

      if (nextParent !== null) {
        a = b = nextParent;
        continue;
      } // If there's no parent, we're at the root.


      break;
    } // If both copies of the parent fiber point to the same child, we can
    // assume that the child is current. This happens when we bailout on low
    // priority: the bailed out fiber's child reuses the current child.


    if (parentA.child === parentB.child) {
      var child = parentA.child;

      while (child) {
        if (child === a) {
          // We've determined that A is the current branch.
          assertIsMounted(parentA);
          return fiber;
        }

        if (child === b) {
          // We've determined that B is the current branch.
          assertIsMounted(parentA);
          return alternate;
        }

        child = child.sibling;
      } // We should never have an alternate for any mounting node. So the only
      // way this could possibly happen is if this was unmounted, if at all.


      {
        {
          throw Error( "Unable to find node on an unmounted component." );
        }
      }
    }

    if (a.return !== b.return) {
      // The return pointer of A and the return pointer of B point to different
      // fibers. We assume that return pointers never criss-cross, so A must
      // belong to the child set of A.return, and B must belong to the child
      // set of B.return.
      a = parentA;
      b = parentB;
    } else {
      // The return pointers point to the same fiber. We'll have to use the
      // default, slow path: scan the child sets of each parent alternate to see
      // which child belongs to which set.
      //
      // Search parent A's child set
      var didFindChild = false;
      var _child = parentA.child;

      while (_child) {
        if (_child === a) {
          didFindChild = true;
          a = parentA;
          b = parentB;
          break;
        }

        if (_child === b) {
          didFindChild = true;
          b = parentA;
          a = parentB;
          break;
        }

        _child = _child.sibling;
      }

      if (!didFindChild) {
        // Search parent B's child set
        _child = parentB.child;

        while (_child) {
          if (_child === a) {
            didFindChild = true;
            a = parentB;
            b = parentA;
            break;
          }

          if (_child === b) {
            didFindChild = true;
            b = parentB;
            a = parentA;
            break;
          }

          _child = _child.sibling;
        }

        if (!didFindChild) {
          {
            throw Error( "Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue." );
          }
        }
      }
    }

    if (!(a.alternate === b)) {
      {
        throw Error( "Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  } // If the root is not a host container, we're in a disconnected tree. I.e.
  // unmounted.


  if (!(a.tag === HostRoot)) {
    {
      throw Error( "Unable to find node on an unmounted component." );
    }
  }

  if (a.stateNode.current === a) {
    // We've determined that A is the current branch.
    return fiber;
  } // Otherwise B has to be current branch.


  return alternate;
}
function findCurrentHostFiber(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText) {
      return node;
    } else if (node.child) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}
function findCurrentHostFiberWithNoPortals(parent) {
  var currentParent = findCurrentFiberUsingSlowPath(parent);

  if (!currentParent) {
    return null;
  } // Next we'll drill down this component to find the first HostComponent/Text.


  var node = currentParent;

  while (true) {
    if (node.tag === HostComponent || node.tag === HostText || enableFundamentalAPI ) {
      return node;
    } else if (node.child && node.tag !== HostPortal) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === currentParent) {
      return null;
    }

    while (!node.sibling) {
      if (!node.return || node.return === currentParent) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  } // Flow needs the return null here, but ESLint complains about it.
  // eslint-disable-next-line no-unreachable


  return null;
}

/**
 * Accumulates items that must not be null or undefined into the first one. This
 * is used to conserve memory by avoiding array allocations, and thus sacrifices
 * API cleanness. Since `current` can be null before being passed in and not
 * null after this function, make sure to assign it back to `current`:
 *
 * `a = accumulateInto(a, b);`
 *
 * This API should be sparingly used. Try `accumulate` for something cleaner.
 *
 * @return {*|array<*>} An accumulation of items.
 */

function accumulateInto(current, next) {
  if (!(next != null)) {
    {
      throw Error( "accumulateInto(...): Accumulated items must not be null or undefined." );
    }
  }

  if (current == null) {
    return next;
  } // Both are not empty. Warning: Never call x.concat(y) when you are not
  // certain that x is an Array (x could be a string with concat method).


  if (Array.isArray(current)) {
    if (Array.isArray(next)) {
      current.push.apply(current, next);
      return current;
    }

    current.push(next);
    return current;
  }

  if (Array.isArray(next)) {
    // A bit too dangerous to mutate `next`.
    return [current].concat(next);
  }

  return [current, next];
}

/**
 * @param {array} arr an "accumulation" of items which is either an Array or
 * a single item. Useful when paired with the `accumulate` module. This is a
 * simple utility that allows us to reason about a collection of items, but
 * handling the case when there is exactly one item (and we do not need to
 * allocate an array).
 * @param {function} cb Callback invoked with each element or a collection.
 * @param {?} [scope] Scope used as `this` in a callback.
 */
function forEachAccumulated(arr, cb, scope) {
  if (Array.isArray(arr)) {
    arr.forEach(cb, scope);
  } else if (arr) {
    cb.call(scope, arr);
  }
}

/**
 * Internal queue of events that have accumulated their dispatches and are
 * waiting to have their dispatches executed.
 */

var eventQueue = null;
/**
 * Dispatches an event and releases it back into the pool, unless persistent.
 *
 * @param {?object} event Synthetic event to be dispatched.
 * @private
 */

var executeDispatchesAndRelease = function (event) {
  if (event) {
    executeDispatchesInOrder(event);

    if (!event.isPersistent()) {
      event.constructor.release(event);
    }
  }
};

var executeDispatchesAndReleaseTopLevel = function (e) {
  return executeDispatchesAndRelease(e);
};

function runEventsInBatch(events) {
  if (events !== null) {
    eventQueue = accumulateInto(eventQueue, events);
  } // Set `eventQueue` to null before processing it so that we can tell if more
  // events get enqueued while processing.


  var processingEventQueue = eventQueue;
  eventQueue = null;

  if (!processingEventQueue) {
    return;
  }

  forEachAccumulated(processingEventQueue, executeDispatchesAndReleaseTopLevel);

  if (!!eventQueue) {
    {
      throw Error( "processEventQueue(): Additional events were enqueued while processing an event queue. Support for this has not yet been implemented." );
    }
  } // This would be a good time to rethrow if any of the event handlers threw.


  rethrowCaughtError();
}

/**
 * Gets the target node from a native browser event by accounting for
 * inconsistencies in browser DOM APIs.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {DOMEventTarget} Target node.
 */

function getEventTarget(nativeEvent) {
  // Fallback to nativeEvent.srcElement for IE9
  // https://github.com/facebook/react/issues/12506
  var target = nativeEvent.target || nativeEvent.srcElement || window; // Normalize SVG <use> element events #4963

  if (target.correspondingUseElement) {
    target = target.correspondingUseElement;
  } // Safari may fire events on text nodes (Node.TEXT_NODE is 3).
  // @see http://www.quirksmode.org/js/events_properties.html


  return target.nodeType === TEXT_NODE ? target.parentNode : target;
}

/**
 * Checks if an event is supported in the current execution environment.
 *
 * NOTE: This will not work correctly for non-generic events such as `change`,
 * `reset`, `load`, `error`, and `select`.
 *
 * Borrows from Modernizr.
 *
 * @param {string} eventNameSuffix Event name, e.g. "click".
 * @return {boolean} True if the event is supported.
 * @internal
 * @license Modernizr 3.0.0pre (Custom Build) | MIT
 */

function isEventSupported(eventNameSuffix) {
  if (!canUseDOM) {
    return false;
  }

  var eventName = 'on' + eventNameSuffix;
  var isSupported = eventName in document;

  if (!isSupported) {
    var element = document.createElement('div');
    element.setAttribute(eventName, 'return;');
    isSupported = typeof element[eventName] === 'function';
  }

  return isSupported;
}

/**
 * Summary of `DOMEventPluginSystem` event handling:
 *
 *  - Top-level delegation is used to trap most native browser events. This
 *    may only occur in the main thread and is the responsibility of
 *    ReactDOMEventListener, which is injected and can therefore support
 *    pluggable event sources. This is the only work that occurs in the main
 *    thread.
 *
 *  - We normalize and de-duplicate events to account for browser quirks. This
 *    may be done in the worker thread.
 *
 *  - Forward these native events (with the associated top-level type used to
 *    trap it) to `EventPluginRegistry`, which in turn will ask plugins if they want
 *    to extract any synthetic events.
 *
 *  - The `EventPluginRegistry` will then process each event by annotating them with
 *    "dispatches", a sequence of listeners and IDs that care about that event.
 *
 *  - The `EventPluginRegistry` then dispatches the events.
 *
 * Overview of React and the event system:
 *
 * +------------+    .
 * |    DOM     |    .
 * +------------+    .
 *       |           .
 *       v           .
 * +------------+    .
 * | ReactEvent |    .
 * |  Listener  |    .
 * +------------+    .                         +-----------+
 *       |           .               +--------+|SimpleEvent|
 *       |           .               |         |Plugin     |
 * +-----|------+    .               v         +-----------+
 * |     |      |    .    +--------------+                    +------------+
 * |     +-----------.--->|PluginRegistry|                    |    Event   |
 * |            |    .    |              |     +-----------+  | Propagators|
 * | ReactEvent |    .    |              |     |TapEvent   |  |------------|
 * |  Emitter   |    .    |              |<---+|Plugin     |  |other plugin|
 * |            |    .    |              |     +-----------+  |  utilities |
 * |     +-----------.--->|              |                    +------------+
 * |     |      |    .    +--------------+
 * +-----|------+    .                ^        +-----------+
 *       |           .                |        |Enter/Leave|
 *       +           .                +-------+|Plugin     |
 * +-------------+   .                         +-----------+
 * | application |   .
 * |-------------|   .
 * |             |   .
 * |             |   .
 * +-------------+   .
 *                   .
 *    React Core     .  General Purpose Event Plugin System
 */

var CALLBACK_BOOKKEEPING_POOL_SIZE = 10;
var callbackBookkeepingPool = [];

function releaseTopLevelCallbackBookKeeping(instance) {
  instance.topLevelType = null;
  instance.nativeEvent = null;
  instance.targetInst = null;
  instance.ancestors.length = 0;

  if (callbackBookkeepingPool.length < CALLBACK_BOOKKEEPING_POOL_SIZE) {
    callbackBookkeepingPool.push(instance);
  }
} // Used to store ancestor hierarchy in top level callback


function getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags) {
  if (callbackBookkeepingPool.length) {
    var instance = callbackBookkeepingPool.pop();
    instance.topLevelType = topLevelType;
    instance.eventSystemFlags = eventSystemFlags;
    instance.nativeEvent = nativeEvent;
    instance.targetInst = targetInst;
    return instance;
  }

  return {
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags,
    nativeEvent: nativeEvent,
    targetInst: targetInst,
    ancestors: []
  };
}
/**
 * Find the deepest React component completely containing the root of the
 * passed-in instance (for use when entire React trees are nested within each
 * other). If React trees are not nested, returns null.
 */


function findRootContainerNode(inst) {
  if (inst.tag === HostRoot) {
    return inst.stateNode.containerInfo;
  } // TODO: It may be a good idea to cache this to prevent unnecessary DOM
  // traversal, but caching is difficult to do correctly without using a
  // mutation observer to listen for all DOM changes.


  while (inst.return) {
    inst = inst.return;
  }

  if (inst.tag !== HostRoot) {
    // This can happen if we're in a detached tree.
    return null;
  }

  return inst.stateNode.containerInfo;
}
/**
 * Allows registered plugins an opportunity to extract events from top-level
 * native browser events.
 *
 * @return {*} An accumulation of synthetic events.
 * @internal
 */


function extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = null;

  for (var i = 0; i < plugins.length; i++) {
    // Not every plugin in the ordering may be loaded at runtime.
    var possiblePlugin = plugins[i];

    if (possiblePlugin) {
      var extractedEvents = possiblePlugin.extractEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);

      if (extractedEvents) {
        events = accumulateInto(events, extractedEvents);
      }
    }
  }

  return events;
}

function runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
  var events = extractPluginEvents(topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
  runEventsInBatch(events);
}

function handleTopLevel(bookKeeping) {
  var targetInst = bookKeeping.targetInst; // Loop through the hierarchy, in case there's any nested components.
  // It's important that we build the array of ancestors before calling any
  // event handlers, because event handlers can modify the DOM, leading to
  // inconsistencies with ReactMount's node cache. See #1105.

  var ancestor = targetInst;

  do {
    if (!ancestor) {
      var ancestors = bookKeeping.ancestors;
      ancestors.push(ancestor);
      break;
    }

    var root = findRootContainerNode(ancestor);

    if (!root) {
      break;
    }

    var tag = ancestor.tag;

    if (tag === HostComponent || tag === HostText) {
      bookKeeping.ancestors.push(ancestor);
    }

    ancestor = getClosestInstanceFromNode(root);
  } while (ancestor);

  for (var i = 0; i < bookKeeping.ancestors.length; i++) {
    targetInst = bookKeeping.ancestors[i];
    var eventTarget = getEventTarget(bookKeeping.nativeEvent);
    var topLevelType = bookKeeping.topLevelType;
    var nativeEvent = bookKeeping.nativeEvent;
    var eventSystemFlags = bookKeeping.eventSystemFlags; // If this is the first ancestor, we mark it on the system flags

    if (i === 0) {
      eventSystemFlags |= IS_FIRST_ANCESTOR;
    }

    runExtractedPluginEventsInBatch(topLevelType, targetInst, nativeEvent, eventTarget, eventSystemFlags);
  }
}

function dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst) {
  var bookKeeping = getTopLevelCallbackBookKeeping(topLevelType, nativeEvent, targetInst, eventSystemFlags);

  try {
    // Event queue being processed in the same cycle allows
    // `preventDefault`.
    batchedEventUpdates(handleTopLevel, bookKeeping);
  } finally {
    releaseTopLevelCallbackBookKeeping(bookKeeping);
  }
}
/**
 * We listen for bubbled touch events on the document object.
 *
 * Firefox v8.01 (and possibly others) exhibited strange behavior when
 * mounting `onmousemove` events at some node that was not the document
 * element. The symptoms were that if your mouse is not moving over something
 * contained within that mount point (for example on the background) the
 * top-level listeners for `onmousemove` won't be called. However, if you
 * register the `mousemove` on the document object, then it will of course
 * catch all `mousemove`s. This along with iOS quirks, justifies restricting
 * top-level listeners to the document object only, at least for these
 * movement types of events and possibly all events.
 *
 * @see http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
 *
 * Also, `keyup`/`keypress`/`keydown` do not bubble to the window on IE, but
 * they bubble to document.
 *
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @param {object} mountAt Container where to mount the listener
 */

function legacyListenToEvent(registrationName, mountAt) {
  var listenerMap = getListenerMapForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];
    legacyListenToTopLevelEvent(dependency, mountAt, listenerMap);
  }
}
function legacyListenToTopLevelEvent(topLevelType, mountAt, listenerMap) {
  if (!listenerMap.has(topLevelType)) {
    switch (topLevelType) {
      case TOP_SCROLL:
        trapCapturedEvent(TOP_SCROLL, mountAt);
        break;

      case TOP_FOCUS:
      case TOP_BLUR:
        trapCapturedEvent(TOP_FOCUS, mountAt);
        trapCapturedEvent(TOP_BLUR, mountAt); // We set the flag for a single dependency later in this function,
        // but this ensures we mark both as attached rather than just one.

        listenerMap.set(TOP_BLUR, null);
        listenerMap.set(TOP_FOCUS, null);
        break;

      case TOP_CANCEL:
      case TOP_CLOSE:
        if (isEventSupported(getRawEventName(topLevelType))) {
          trapCapturedEvent(topLevelType, mountAt);
        }

        break;

      case TOP_INVALID:
      case TOP_SUBMIT:
      case TOP_RESET:
        // We listen to them on the target DOM elements.
        // Some of them bubble so we don't want them to fire twice.
        break;

      default:
        // By default, listen on the top level to all non-media events.
        // Media events don't bubble so adding the listener wouldn't do anything.
        var isMediaEvent = mediaEventTypes.indexOf(topLevelType) !== -1;

        if (!isMediaEvent) {
          trapBubbledEvent(topLevelType, mountAt);
        }

        break;
    }

    listenerMap.set(topLevelType, null);
  }
}
function isListeningToAllDependencies(registrationName, mountAt) {
  var listenerMap = getListenerMapForElement(mountAt);
  var dependencies = registrationNameDependencies[registrationName];

  for (var i = 0; i < dependencies.length; i++) {
    var dependency = dependencies[i];

    if (!listenerMap.has(dependency)) {
      return false;
    }
  }

  return true;
}

var attemptUserBlockingHydration;
function setAttemptUserBlockingHydration(fn) {
  attemptUserBlockingHydration = fn;
}
var attemptContinuousHydration;
function setAttemptContinuousHydration(fn) {
  attemptContinuousHydration = fn;
}
var attemptHydrationAtCurrentPriority;
function setAttemptHydrationAtCurrentPriority(fn) {
  attemptHydrationAtCurrentPriority = fn;
} // TODO: Upgrade this definition once we're on a newer version of Flow that
var hasScheduledReplayAttempt = false; // The queue of discrete events to be replayed.

var queuedDiscreteEvents = []; // Indicates if any continuous event targets are non-null for early bailout.
// if the last target was dehydrated.

var queuedFocus = null;
var queuedDrag = null;
var queuedMouse = null; // For pointer events there can be one latest event per pointerId.

var queuedPointers = new Map();
var queuedPointerCaptures = new Map(); // We could consider replaying selectionchange and touchmoves too.

var queuedExplicitHydrationTargets = [];
function hasQueuedDiscreteEvents() {
  return queuedDiscreteEvents.length > 0;
}
var discreteReplayableEvents = [TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_TOUCH_CANCEL, TOP_TOUCH_END, TOP_TOUCH_START, TOP_AUX_CLICK, TOP_DOUBLE_CLICK, TOP_POINTER_CANCEL, TOP_POINTER_DOWN, TOP_POINTER_UP, TOP_DRAG_END, TOP_DRAG_START, TOP_DROP, TOP_COMPOSITION_END, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_INPUT, TOP_TEXT_INPUT, TOP_CLOSE, TOP_CANCEL, TOP_COPY, TOP_CUT, TOP_PASTE, TOP_CLICK, TOP_CHANGE, TOP_CONTEXT_MENU, TOP_RESET, TOP_SUBMIT];
var continuousReplayableEvents = [TOP_FOCUS, TOP_BLUR, TOP_DRAG_ENTER, TOP_DRAG_LEAVE, TOP_MOUSE_OVER, TOP_MOUSE_OUT, TOP_POINTER_OVER, TOP_POINTER_OUT, TOP_GOT_POINTER_CAPTURE, TOP_LOST_POINTER_CAPTURE];
function isReplayableDiscreteEvent(eventType) {
  return discreteReplayableEvents.indexOf(eventType) > -1;
}

function trapReplayableEventForDocument(topLevelType, document, listenerMap) {
  legacyListenToTopLevelEvent(topLevelType, document, listenerMap);
}

function eagerlyTrapReplayableEvents(container, document) {
  var listenerMapForDoc = getListenerMapForElement(document); // Discrete

  discreteReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
  }); // Continuous

  continuousReplayableEvents.forEach(function (topLevelType) {
    trapReplayableEventForDocument(topLevelType, document, listenerMapForDoc);
  });
}

function createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  return {
    blockedOn: blockedOn,
    topLevelType: topLevelType,
    eventSystemFlags: eventSystemFlags | IS_REPLAYED,
    nativeEvent: nativeEvent,
    container: container
  };
}

function queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
  queuedDiscreteEvents.push(queuedEvent);
} // Resets the replaying for this type of continuous event to no event.

function clearIfContinuousEvent(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_FOCUS:
    case TOP_BLUR:
      queuedFocus = null;
      break;

    case TOP_DRAG_ENTER:
    case TOP_DRAG_LEAVE:
      queuedDrag = null;
      break;

    case TOP_MOUSE_OVER:
    case TOP_MOUSE_OUT:
      queuedMouse = null;
      break;

    case TOP_POINTER_OVER:
    case TOP_POINTER_OUT:
      {
        var pointerId = nativeEvent.pointerId;
        queuedPointers.delete(pointerId);
        break;
      }

    case TOP_GOT_POINTER_CAPTURE:
    case TOP_LOST_POINTER_CAPTURE:
      {
        var _pointerId = nativeEvent.pointerId;
        queuedPointerCaptures.delete(_pointerId);
        break;
      }
  }
}

function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
    var queuedEvent = createQueuedReplayableEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);

    if (blockedOn !== null) {
      var _fiber2 = getInstanceFromNode$1(blockedOn);

      if (_fiber2 !== null) {
        // Attempt to increase the priority of this target.
        attemptContinuousHydration(_fiber2);
      }
    }

    return queuedEvent;
  } // If we have already queued this exact event, then it's because
  // the different event systems have different DOM event listeners.
  // We can accumulate the flags and store a single event to be
  // replayed.


  existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
  return existingQueuedEvent;
}

function queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent) {
  // These set relatedTarget to null because the replayed event will be treated as if we
  // moved from outside the window (no target) onto the target once it hydrates.
  // Instead of mutating we could clone the event.
  switch (topLevelType) {
    case TOP_FOCUS:
      {
        var focusEvent = nativeEvent;
        queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, topLevelType, eventSystemFlags, container, focusEvent);
        return true;
      }

    case TOP_DRAG_ENTER:
      {
        var dragEvent = nativeEvent;
        queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, topLevelType, eventSystemFlags, container, dragEvent);
        return true;
      }

    case TOP_MOUSE_OVER:
      {
        var mouseEvent = nativeEvent;
        queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, topLevelType, eventSystemFlags, container, mouseEvent);
        return true;
      }

    case TOP_POINTER_OVER:
      {
        var pointerEvent = nativeEvent;
        var pointerId = pointerEvent.pointerId;
        queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, topLevelType, eventSystemFlags, container, pointerEvent));
        return true;
      }

    case TOP_GOT_POINTER_CAPTURE:
      {
        var _pointerEvent = nativeEvent;
        var _pointerId2 = _pointerEvent.pointerId;
        queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, topLevelType, eventSystemFlags, container, _pointerEvent));
        return true;
      }
  }

  return false;
} // Check if this target is unblocked. Returns true if it's unblocked.

function attemptExplicitHydrationTarget(queuedTarget) {
  // TODO: This function shares a lot of logic with attemptToDispatchEvent.
  // Try to unify them. It's a bit tricky since it would require two return
  // values.
  var targetInst = getClosestInstanceFromNode(queuedTarget.target);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted !== null) {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // We're blocked on hydrating this boundary.
          // Increase its priority.
          queuedTarget.blockedOn = instance;
          Scheduler.unstable_runWithPriority(queuedTarget.priority, function () {
            attemptHydrationAtCurrentPriority(nearestMounted);
          });
          return;
        }
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          queuedTarget.blockedOn = getContainerFromFiber(nearestMounted); // We don't currently have a way to increase the priority of
          // a root other than sync.

          return;
        }
      }
    }
  }

  queuedTarget.blockedOn = null;
}

function attemptReplayContinuousQueuedEvent(queuedEvent) {
  if (queuedEvent.blockedOn !== null) {
    return false;
  }

  var nextBlockedOn = attemptToDispatchEvent(queuedEvent.topLevelType, queuedEvent.eventSystemFlags, queuedEvent.container, queuedEvent.nativeEvent);

  if (nextBlockedOn !== null) {
    // We're still blocked. Try again later.
    var _fiber3 = getInstanceFromNode$1(nextBlockedOn);

    if (_fiber3 !== null) {
      attemptContinuousHydration(_fiber3);
    }

    queuedEvent.blockedOn = nextBlockedOn;
    return false;
  }

  return true;
}

function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
  if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
    map.delete(key);
  }
}

function replayUnblockedEvents() {
  hasScheduledReplayAttempt = false; // First replay discrete events.

  while (queuedDiscreteEvents.length > 0) {
    var nextDiscreteEvent = queuedDiscreteEvents[0];

    if (nextDiscreteEvent.blockedOn !== null) {
      // We're still blocked.
      // Increase the priority of this boundary to unblock
      // the next discrete event.
      var _fiber4 = getInstanceFromNode$1(nextDiscreteEvent.blockedOn);

      if (_fiber4 !== null) {
        attemptUserBlockingHydration(_fiber4);
      }

      break;
    }

    var nextBlockedOn = attemptToDispatchEvent(nextDiscreteEvent.topLevelType, nextDiscreteEvent.eventSystemFlags, nextDiscreteEvent.container, nextDiscreteEvent.nativeEvent);

    if (nextBlockedOn !== null) {
      // We're still blocked. Try again later.
      nextDiscreteEvent.blockedOn = nextBlockedOn;
    } else {
      // We've successfully replayed the first event. Let's try the next one.
      queuedDiscreteEvents.shift();
    }
  } // Next replay any continuous events.


  if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
    queuedFocus = null;
  }

  if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
    queuedDrag = null;
  }

  if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
    queuedMouse = null;
  }

  queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
  queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
}

function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
  if (queuedEvent.blockedOn === unblocked) {
    queuedEvent.blockedOn = null;

    if (!hasScheduledReplayAttempt) {
      hasScheduledReplayAttempt = true; // Schedule a callback to attempt replaying as many events as are
      // now unblocked. This first might not actually be unblocked yet.
      // We could check it early to avoid scheduling an unnecessary callback.

      Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
    }
  }
}

function retryIfBlockedOn(unblocked) {
  // Mark anything that was blocked on this as no longer blocked
  // and eligible for a replay.
  if (queuedDiscreteEvents.length > 0) {
    scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked); // This is a exponential search for each boundary that commits. I think it's
    // worth it because we expect very few discrete events to queue up and once
    // we are actually fully unblocked it will be fast to replay them.

    for (var i = 1; i < queuedDiscreteEvents.length; i++) {
      var queuedEvent = queuedDiscreteEvents[i];

      if (queuedEvent.blockedOn === unblocked) {
        queuedEvent.blockedOn = null;
      }
    }
  }

  if (queuedFocus !== null) {
    scheduleCallbackIfUnblocked(queuedFocus, unblocked);
  }

  if (queuedDrag !== null) {
    scheduleCallbackIfUnblocked(queuedDrag, unblocked);
  }

  if (queuedMouse !== null) {
    scheduleCallbackIfUnblocked(queuedMouse, unblocked);
  }

  var unblock = function (queuedEvent) {
    return scheduleCallbackIfUnblocked(queuedEvent, unblocked);
  };

  queuedPointers.forEach(unblock);
  queuedPointerCaptures.forEach(unblock);

  for (var _i = 0; _i < queuedExplicitHydrationTargets.length; _i++) {
    var queuedTarget = queuedExplicitHydrationTargets[_i];

    if (queuedTarget.blockedOn === unblocked) {
      queuedTarget.blockedOn = null;
    }
  }

  while (queuedExplicitHydrationTargets.length > 0) {
    var nextExplicitTarget = queuedExplicitHydrationTargets[0];

    if (nextExplicitTarget.blockedOn !== null) {
      // We're still blocked.
      break;
    } else {
      attemptExplicitHydrationTarget(nextExplicitTarget);

      if (nextExplicitTarget.blockedOn === null) {
        // We're unblocked.
        queuedExplicitHydrationTargets.shift();
      }
    }
  }
}

function addEventBubbleListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, false);
}
function addEventCaptureListener(element, eventType, listener) {
  element.addEventListener(eventType, listener, true);
}

// do it in two places, which duplicates logic
// and increases the bundle size, we do it all
// here once. If we remove or refactor the
// SimpleEventPlugin, we should also remove or
// update the below line.

var simpleEventPluginEventTypes = {};
var topLevelEventsToDispatchConfig = new Map();
var eventPriorities = new Map(); // We store most of the events in this module in pairs of two strings so we can re-use
// the code required to apply the same logic for event prioritization and that of the
// SimpleEventPlugin. This complicates things slightly, but the aim is to reduce code
// duplication (for which there would be quite a bit). For the events that are not needed
// for the SimpleEventPlugin (otherDiscreteEvents) we process them separately as an
// array of top level events.
// Lastly, we ignore prettier so we can keep the formatting sane.
// prettier-ignore

var discreteEventPairsForSimpleEventPlugin = [TOP_BLUR, 'blur', TOP_CANCEL, 'cancel', TOP_CLICK, 'click', TOP_CLOSE, 'close', TOP_CONTEXT_MENU, 'contextMenu', TOP_COPY, 'copy', TOP_CUT, 'cut', TOP_AUX_CLICK, 'auxClick', TOP_DOUBLE_CLICK, 'doubleClick', TOP_DRAG_END, 'dragEnd', TOP_DRAG_START, 'dragStart', TOP_DROP, 'drop', TOP_FOCUS, 'focus', TOP_INPUT, 'input', TOP_INVALID, 'invalid', TOP_KEY_DOWN, 'keyDown', TOP_KEY_PRESS, 'keyPress', TOP_KEY_UP, 'keyUp', TOP_MOUSE_DOWN, 'mouseDown', TOP_MOUSE_UP, 'mouseUp', TOP_PASTE, 'paste', TOP_PAUSE, 'pause', TOP_PLAY, 'play', TOP_POINTER_CANCEL, 'pointerCancel', TOP_POINTER_DOWN, 'pointerDown', TOP_POINTER_UP, 'pointerUp', TOP_RATE_CHANGE, 'rateChange', TOP_RESET, 'reset', TOP_SEEKED, 'seeked', TOP_SUBMIT, 'submit', TOP_TOUCH_CANCEL, 'touchCancel', TOP_TOUCH_END, 'touchEnd', TOP_TOUCH_START, 'touchStart', TOP_VOLUME_CHANGE, 'volumeChange'];
var otherDiscreteEvents = [TOP_CHANGE, TOP_SELECTION_CHANGE, TOP_TEXT_INPUT, TOP_COMPOSITION_START, TOP_COMPOSITION_END, TOP_COMPOSITION_UPDATE]; // prettier-ignore

var userBlockingPairsForSimpleEventPlugin = [TOP_DRAG, 'drag', TOP_DRAG_ENTER, 'dragEnter', TOP_DRAG_EXIT, 'dragExit', TOP_DRAG_LEAVE, 'dragLeave', TOP_DRAG_OVER, 'dragOver', TOP_MOUSE_MOVE, 'mouseMove', TOP_MOUSE_OUT, 'mouseOut', TOP_MOUSE_OVER, 'mouseOver', TOP_POINTER_MOVE, 'pointerMove', TOP_POINTER_OUT, 'pointerOut', TOP_POINTER_OVER, 'pointerOver', TOP_SCROLL, 'scroll', TOP_TOGGLE, 'toggle', TOP_TOUCH_MOVE, 'touchMove', TOP_WHEEL, 'wheel']; // prettier-ignore

var continuousPairsForSimpleEventPlugin = [TOP_ABORT, 'abort', TOP_ANIMATION_END, 'animationEnd', TOP_ANIMATION_ITERATION, 'animationIteration', TOP_ANIMATION_START, 'animationStart', TOP_CAN_PLAY, 'canPlay', TOP_CAN_PLAY_THROUGH, 'canPlayThrough', TOP_DURATION_CHANGE, 'durationChange', TOP_EMPTIED, 'emptied', TOP_ENCRYPTED, 'encrypted', TOP_ENDED, 'ended', TOP_ERROR, 'error', TOP_GOT_POINTER_CAPTURE, 'gotPointerCapture', TOP_LOAD, 'load', TOP_LOADED_DATA, 'loadedData', TOP_LOADED_METADATA, 'loadedMetadata', TOP_LOAD_START, 'loadStart', TOP_LOST_POINTER_CAPTURE, 'lostPointerCapture', TOP_PLAYING, 'playing', TOP_PROGRESS, 'progress', TOP_SEEKING, 'seeking', TOP_STALLED, 'stalled', TOP_SUSPEND, 'suspend', TOP_TIME_UPDATE, 'timeUpdate', TOP_TRANSITION_END, 'transitionEnd', TOP_WAITING, 'waiting'];
/**
 * Turns
 * ['abort', ...]
 * into
 * eventTypes = {
 *   'abort': {
 *     phasedRegistrationNames: {
 *       bubbled: 'onAbort',
 *       captured: 'onAbortCapture',
 *     },
 *     dependencies: [TOP_ABORT],
 *   },
 *   ...
 * };
 * topLevelEventsToDispatchConfig = new Map([
 *   [TOP_ABORT, { sameConfig }],
 * ]);
 */

function processSimpleEventPluginPairsByPriority(eventTypes, priority) {
  // As the event types are in pairs of two, we need to iterate
  // through in twos. The events are in pairs of two to save code
  // and improve init perf of processing this array, as it will
  // result in far fewer object allocations and property accesses
  // if we only use three arrays to process all the categories of
  // instead of tuples.
  for (var i = 0; i < eventTypes.length; i += 2) {
    var topEvent = eventTypes[i];
    var event = eventTypes[i + 1];
    var capitalizedEvent = event[0].toUpperCase() + event.slice(1);
    var onEvent = 'on' + capitalizedEvent;
    var config = {
      phasedRegistrationNames: {
        bubbled: onEvent,
        captured: onEvent + 'Capture'
      },
      dependencies: [topEvent],
      eventPriority: priority
    };
    eventPriorities.set(topEvent, priority);
    topLevelEventsToDispatchConfig.set(topEvent, config);
    simpleEventPluginEventTypes[event] = config;
  }
}

function processTopEventPairsByPriority(eventTypes, priority) {
  for (var i = 0; i < eventTypes.length; i++) {
    eventPriorities.set(eventTypes[i], priority);
  }
} // SimpleEventPlugin


processSimpleEventPluginPairsByPriority(discreteEventPairsForSimpleEventPlugin, DiscreteEvent);
processSimpleEventPluginPairsByPriority(userBlockingPairsForSimpleEventPlugin, UserBlockingEvent);
processSimpleEventPluginPairsByPriority(continuousPairsForSimpleEventPlugin, ContinuousEvent); // Not used by SimpleEventPlugin

processTopEventPairsByPriority(otherDiscreteEvents, DiscreteEvent);
function getEventPriorityForPluginSystem(topLevelType) {
  var priority = eventPriorities.get(topLevelType); // Default to a ContinuousEvent. Note: we might
  // want to warn if we can't detect the priority
  // for the event.

  return priority === undefined ? ContinuousEvent : priority;
}

// Intentionally not named imports because Rollup would use dynamic dispatch for
var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    runWithPriority = Scheduler.unstable_runWithPriority; // TODO: can we stop exporting these?

var _enabled = true;
function setEnabled(enabled) {
  _enabled = !!enabled;
}
function isEnabled() {
  return _enabled;
}
function trapBubbledEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, false);
}
function trapCapturedEvent(topLevelType, element) {
  trapEventForPluginEventSystem(element, topLevelType, true);
}

function trapEventForPluginEventSystem(container, topLevelType, capture) {
  var listener;

  switch (getEventPriorityForPluginSystem(topLevelType)) {
    case DiscreteEvent:
      listener = dispatchDiscreteEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;

    case UserBlockingEvent:
      listener = dispatchUserBlockingUpdate.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;

    case ContinuousEvent:
    default:
      listener = dispatchEvent.bind(null, topLevelType, PLUGIN_EVENT_SYSTEM, container);
      break;
  }

  var rawEventName = getRawEventName(topLevelType);

  if (capture) {
    addEventCaptureListener(container, rawEventName, listener);
  } else {
    addEventBubbleListener(container, rawEventName, listener);
  }
}

function dispatchDiscreteEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  flushDiscreteUpdatesIfNeeded(nativeEvent.timeStamp);
  discreteUpdates(dispatchEvent, topLevelType, eventSystemFlags, container, nativeEvent);
}

function dispatchUserBlockingUpdate(topLevelType, eventSystemFlags, container, nativeEvent) {
  runWithPriority(UserBlockingPriority, dispatchEvent.bind(null, topLevelType, eventSystemFlags, container, nativeEvent));
}

function dispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  if (!_enabled) {
    return;
  }

  if (hasQueuedDiscreteEvents() && isReplayableDiscreteEvent(topLevelType)) {
    // If we already have a queue of discrete events, and this is another discrete
    // event, then we can't dispatch it regardless of its target, since they
    // need to dispatch in order.
    queueDiscreteEvent(null, // Flags that we're not actually blocked on anything as far as we know.
    topLevelType, eventSystemFlags, container, nativeEvent);
    return;
  }

  var blockedOn = attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent);

  if (blockedOn === null) {
    // We successfully dispatched this event.
    clearIfContinuousEvent(topLevelType, nativeEvent);
    return;
  }

  if (isReplayableDiscreteEvent(topLevelType)) {
    // This this to be replayed later once the target is available.
    queueDiscreteEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent);
    return;
  }

  if (queueIfContinuousEvent(blockedOn, topLevelType, eventSystemFlags, container, nativeEvent)) {
    return;
  } // We need to clear only if we didn't queue because
  // queueing is accummulative.


  clearIfContinuousEvent(topLevelType, nativeEvent); // This is not replayable so we'll invoke it but without a target,
  // in case the event system needs to trace it.

  {
    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, null);
  }
} // Attempt dispatching an event. Returns a SuspenseInstance or Container if it's blocked.

function attemptToDispatchEvent(topLevelType, eventSystemFlags, container, nativeEvent) {
  // TODO: Warn if _enabled is false.
  var nativeEventTarget = getEventTarget(nativeEvent);
  var targetInst = getClosestInstanceFromNode(nativeEventTarget);

  if (targetInst !== null) {
    var nearestMounted = getNearestMountedFiber(targetInst);

    if (nearestMounted === null) {
      // This tree has been unmounted already. Dispatch without a target.
      targetInst = null;
    } else {
      var tag = nearestMounted.tag;

      if (tag === SuspenseComponent) {
        var instance = getSuspenseInstanceFromFiber(nearestMounted);

        if (instance !== null) {
          // Queue the event to be replayed later. Abort dispatching since we
          // don't want this event dispatched twice through the event system.
          // TODO: If this is the first discrete event in the queue. Schedule an increased
          // priority for this boundary.
          return instance;
        } // This shouldn't happen, something went wrong but to avoid blocking
        // the whole system, dispatch the event without a target.
        // TODO: Warn.


        targetInst = null;
      } else if (tag === HostRoot) {
        var root = nearestMounted.stateNode;

        if (root.hydrate) {
          // If this happens during a replay something went wrong and it might block
          // the whole system.
          return getContainerFromFiber(nearestMounted);
        }

        targetInst = null;
      } else if (nearestMounted !== targetInst) {
        // If we get an event (ex: img onload) before committing that
        // component's mount, ignore it for now (that is, treat it as if it was an
        // event on a non-React tree). We might also consider queueing events and
        // dispatching them after the mount.
        targetInst = null;
      }
    }
  }

  {
    dispatchEventForLegacyPluginEventSystem(topLevelType, eventSystemFlags, nativeEvent, targetInst);
  } // We're not blocked on anything.


  return null;
}

// List derived from Gecko source code:
// https://github.com/mozilla/gecko-dev/blob/4e638efc71/layout/style/test/property_database.js
var shorthandToLonghand = {
  animation: ['animationDelay', 'animationDirection', 'animationDuration', 'animationFillMode', 'animationIterationCount', 'animationName', 'animationPlayState', 'animationTimingFunction'],
  background: ['backgroundAttachment', 'backgroundClip', 'backgroundColor', 'backgroundImage', 'backgroundOrigin', 'backgroundPositionX', 'backgroundPositionY', 'backgroundRepeat', 'backgroundSize'],
  backgroundPosition: ['backgroundPositionX', 'backgroundPositionY'],
  border: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth', 'borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth', 'borderLeftColor', 'borderLeftStyle', 'borderLeftWidth', 'borderRightColor', 'borderRightStyle', 'borderRightWidth', 'borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderBlockEnd: ['borderBlockEndColor', 'borderBlockEndStyle', 'borderBlockEndWidth'],
  borderBlockStart: ['borderBlockStartColor', 'borderBlockStartStyle', 'borderBlockStartWidth'],
  borderBottom: ['borderBottomColor', 'borderBottomStyle', 'borderBottomWidth'],
  borderColor: ['borderBottomColor', 'borderLeftColor', 'borderRightColor', 'borderTopColor'],
  borderImage: ['borderImageOutset', 'borderImageRepeat', 'borderImageSlice', 'borderImageSource', 'borderImageWidth'],
  borderInlineEnd: ['borderInlineEndColor', 'borderInlineEndStyle', 'borderInlineEndWidth'],
  borderInlineStart: ['borderInlineStartColor', 'borderInlineStartStyle', 'borderInlineStartWidth'],
  borderLeft: ['borderLeftColor', 'borderLeftStyle', 'borderLeftWidth'],
  borderRadius: ['borderBottomLeftRadius', 'borderBottomRightRadius', 'borderTopLeftRadius', 'borderTopRightRadius'],
  borderRight: ['borderRightColor', 'borderRightStyle', 'borderRightWidth'],
  borderStyle: ['borderBottomStyle', 'borderLeftStyle', 'borderRightStyle', 'borderTopStyle'],
  borderTop: ['borderTopColor', 'borderTopStyle', 'borderTopWidth'],
  borderWidth: ['borderBottomWidth', 'borderLeftWidth', 'borderRightWidth', 'borderTopWidth'],
  columnRule: ['columnRuleColor', 'columnRuleStyle', 'columnRuleWidth'],
  columns: ['columnCount', 'columnWidth'],
  flex: ['flexBasis', 'flexGrow', 'flexShrink'],
  flexFlow: ['flexDirection', 'flexWrap'],
  font: ['fontFamily', 'fontFeatureSettings', 'fontKerning', 'fontLanguageOverride', 'fontSize', 'fontSizeAdjust', 'fontStretch', 'fontStyle', 'fontVariant', 'fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition', 'fontWeight', 'lineHeight'],
  fontVariant: ['fontVariantAlternates', 'fontVariantCaps', 'fontVariantEastAsian', 'fontVariantLigatures', 'fontVariantNumeric', 'fontVariantPosition'],
  gap: ['columnGap', 'rowGap'],
  grid: ['gridAutoColumns', 'gridAutoFlow', 'gridAutoRows', 'gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  gridArea: ['gridColumnEnd', 'gridColumnStart', 'gridRowEnd', 'gridRowStart'],
  gridColumn: ['gridColumnEnd', 'gridColumnStart'],
  gridColumnGap: ['columnGap'],
  gridGap: ['columnGap', 'rowGap'],
  gridRow: ['gridRowEnd', 'gridRowStart'],
  gridRowGap: ['rowGap'],
  gridTemplate: ['gridTemplateAreas', 'gridTemplateColumns', 'gridTemplateRows'],
  listStyle: ['listStyleImage', 'listStylePosition', 'listStyleType'],
  margin: ['marginBottom', 'marginLeft', 'marginRight', 'marginTop'],
  marker: ['markerEnd', 'markerMid', 'markerStart'],
  mask: ['maskClip', 'maskComposite', 'maskImage', 'maskMode', 'maskOrigin', 'maskPositionX', 'maskPositionY', 'maskRepeat', 'maskSize'],
  maskPosition: ['maskPositionX', 'maskPositionY'],
  outline: ['outlineColor', 'outlineStyle', 'outlineWidth'],
  overflow: ['overflowX', 'overflowY'],
  padding: ['paddingBottom', 'paddingLeft', 'paddingRight', 'paddingTop'],
  placeContent: ['alignContent', 'justifyContent'],
  placeItems: ['alignItems', 'justifyItems'],
  placeSelf: ['alignSelf', 'justifySelf'],
  textDecoration: ['textDecorationColor', 'textDecorationLine', 'textDecorationStyle'],
  textEmphasis: ['textEmphasisColor', 'textEmphasisStyle'],
  transition: ['transitionDelay', 'transitionDuration', 'transitionProperty', 'transitionTimingFunction'],
  wordWrap: ['overflowWrap']
};

/**
 * CSS properties which accept numbers but are not in units of "px".
 */
var isUnitlessNumber = {
  animationIterationCount: true,
  borderImageOutset: true,
  borderImageSlice: true,
  borderImageWidth: true,
  boxFlex: true,
  boxFlexGroup: true,
  boxOrdinalGroup: true,
  columnCount: true,
  columns: true,
  flex: true,
  flexGrow: true,
  flexPositive: true,
  flexShrink: true,
  flexNegative: true,
  flexOrder: true,
  gridArea: true,
  gridRow: true,
  gridRowEnd: true,
  gridRowSpan: true,
  gridRowStart: true,
  gridColumn: true,
  gridColumnEnd: true,
  gridColumnSpan: true,
  gridColumnStart: true,
  fontWeight: true,
  lineClamp: true,
  lineHeight: true,
  opacity: true,
  order: true,
  orphans: true,
  tabSize: true,
  widows: true,
  zIndex: true,
  zoom: true,
  // SVG-related properties
  fillOpacity: true,
  floodOpacity: true,
  stopOpacity: true,
  strokeDasharray: true,
  strokeDashoffset: true,
  strokeMiterlimit: true,
  strokeOpacity: true,
  strokeWidth: true
};
/**
 * @param {string} prefix vendor-specific prefix, eg: Webkit
 * @param {string} key style name, eg: transitionDuration
 * @return {string} style name prefixed with `prefix`, properly camelCased, eg:
 * WebkitTransitionDuration
 */

function prefixKey(prefix, key) {
  return prefix + key.charAt(0).toUpperCase() + key.substring(1);
}
/**
 * Support style names that may come passed in prefixed by adding permutations
 * of vendor prefixes.
 */


var prefixes = ['Webkit', 'ms', 'Moz', 'O']; // Using Object.keys here, or else the vanilla for-in loop makes IE8 go into an
// infinite loop, because it iterates over the newly added props too.

Object.keys(isUnitlessNumber).forEach(function (prop) {
  prefixes.forEach(function (prefix) {
    isUnitlessNumber[prefixKey(prefix, prop)] = isUnitlessNumber[prop];
  });
});

/**
 * Convert a value into the proper css writable value. The style name `name`
 * should be logical (no hyphens), as specified
 * in `CSSProperty.isUnitlessNumber`.
 *
 * @param {string} name CSS property name such as `topMargin`.
 * @param {*} value CSS property value such as `10px`.
 * @return {string} Normalized style value with dimensions applied.
 */

function dangerousStyleValue(name, value, isCustomProperty) {
  // Note that we've removed escapeTextForBrowser() calls here since the
  // whole string will be escaped when the attribute is injected into
  // the markup. If you provide unsafe user data here they can inject
  // arbitrary CSS which may be problematic (I couldn't repro this):
  // https://www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet
  // http://www.thespanner.co.uk/2007/11/26/ultimate-xss-css-injection/
  // This is not an XSS hole but instead a potential CSS injection issue
  // which has lead to a greater discussion about how we're going to
  // trust URLs moving forward. See #2115901
  var isEmpty = value == null || typeof value === 'boolean' || value === '';

  if (isEmpty) {
    return '';
  }

  if (!isCustomProperty && typeof value === 'number' && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
    return value + 'px'; // Presumes implicit 'px' suffix for unitless numbers
  }

  return ('' + value).trim();
}

var uppercasePattern = /([A-Z])/g;
var msPattern = /^ms-/;
/**
 * Hyphenates a camelcased CSS property name, for example:
 *
 *   > hyphenateStyleName('backgroundColor')
 *   < "background-color"
 *   > hyphenateStyleName('MozTransition')
 *   < "-moz-transition"
 *   > hyphenateStyleName('msTransition')
 *   < "-ms-transition"
 *
 * As Modernizr suggests (http://modernizr.com/docs/#prefixed), an `ms` prefix
 * is converted to `-ms-`.
 */

function hyphenateStyleName(name) {
  return name.replace(uppercasePattern, '-$1').toLowerCase().replace(msPattern, '-ms-');
}

var warnValidStyle = function () {};

{
  // 'msTransform' is correct, but the other prefixes should be capitalized
  var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
  var msPattern$1 = /^-ms-/;
  var hyphenPattern = /-(.)/g; // style values shouldn't contain a semicolon

  var badStyleValueWithSemicolonPattern = /;\s*$/;
  var warnedStyleNames = {};
  var warnedStyleValues = {};
  var warnedForNaNValue = false;
  var warnedForInfinityValue = false;

  var camelize = function (string) {
    return string.replace(hyphenPattern, function (_, character) {
      return character.toUpperCase();
    });
  };

  var warnHyphenatedStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported style property %s. Did you mean %s?', name, // As Andi Smith suggests
    // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
    // is converted to lowercase `ms`.
    camelize(name.replace(msPattern$1, 'ms-')));
  };

  var warnBadVendoredStyleName = function (name) {
    if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
      return;
    }

    warnedStyleNames[name] = true;

    error('Unsupported vendor-prefixed style property %s. Did you mean %s?', name, name.charAt(0).toUpperCase() + name.slice(1));
  };

  var warnStyleValueWithSemicolon = function (name, value) {
    if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
      return;
    }

    warnedStyleValues[value] = true;

    error("Style property values shouldn't contain a semicolon. " + 'Try "%s: %s" instead.', name, value.replace(badStyleValueWithSemicolonPattern, ''));
  };

  var warnStyleValueIsNaN = function (name, value) {
    if (warnedForNaNValue) {
      return;
    }

    warnedForNaNValue = true;

    error('`NaN` is an invalid value for the `%s` css style property.', name);
  };

  var warnStyleValueIsInfinity = function (name, value) {
    if (warnedForInfinityValue) {
      return;
    }

    warnedForInfinityValue = true;

    error('`Infinity` is an invalid value for the `%s` css style property.', name);
  };

  warnValidStyle = function (name, value) {
    if (name.indexOf('-') > -1) {
      warnHyphenatedStyleName(name);
    } else if (badVendoredStyleNamePattern.test(name)) {
      warnBadVendoredStyleName(name);
    } else if (badStyleValueWithSemicolonPattern.test(value)) {
      warnStyleValueWithSemicolon(name, value);
    }

    if (typeof value === 'number') {
      if (isNaN(value)) {
        warnStyleValueIsNaN(name, value);
      } else if (!isFinite(value)) {
        warnStyleValueIsInfinity(name, value);
      }
    }
  };
}

var warnValidStyle$1 = warnValidStyle;

/**
 * Operations for dealing with CSS properties.
 */

/**
 * This creates a string that is expected to be equivalent to the style
 * attribute generated by server-side rendering. It by-passes warnings and
 * security checks so it's not safe to use this value for anything other than
 * comparison. It is only used in DEV for SSR validation.
 */

function createDangerousStringForStyles(styles) {
  {
    var serialized = '';
    var delimiter = '';

    for (var styleName in styles) {
      if (!styles.hasOwnProperty(styleName)) {
        continue;
      }

      var styleValue = styles[styleName];

      if (styleValue != null) {
        var isCustomProperty = styleName.indexOf('--') === 0;
        serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ':';
        serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
        delimiter = ';';
      }
    }

    return serialized || null;
  }
}
/**
 * Sets the value for multiple styles on a node.  If a value is specified as
 * '' (empty string), the corresponding style property will be unset.
 *
 * @param {DOMElement} node
 * @param {object} styles
 */

function setValueForStyles(node, styles) {
  var style = node.style;

  for (var styleName in styles) {
    if (!styles.hasOwnProperty(styleName)) {
      continue;
    }

    var isCustomProperty = styleName.indexOf('--') === 0;

    {
      if (!isCustomProperty) {
        warnValidStyle$1(styleName, styles[styleName]);
      }
    }

    var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);

    if (styleName === 'float') {
      styleName = 'cssFloat';
    }

    if (isCustomProperty) {
      style.setProperty(styleName, styleValue);
    } else {
      style[styleName] = styleValue;
    }
  }
}

function isValueEmpty(value) {
  return value == null || typeof value === 'boolean' || value === '';
}
/**
 * Given {color: 'red', overflow: 'hidden'} returns {
 *   color: 'color',
 *   overflowX: 'overflow',
 *   overflowY: 'overflow',
 * }. This can be read as "the overflowY property was set by the overflow
 * shorthand". That is, the values are the property that each was derived from.
 */


function expandShorthandMap(styles) {
  var expanded = {};

  for (var key in styles) {
    var longhands = shorthandToLonghand[key] || [key];

    for (var i = 0; i < longhands.length; i++) {
      expanded[longhands[i]] = key;
    }
  }

  return expanded;
}
/**
 * When mixing shorthand and longhand property names, we warn during updates if
 * we expect an incorrect result to occur. In particular, we warn for:
 *
 * Updating a shorthand property (longhand gets overwritten):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'baz', fontVariant: 'bar'}
 *   becomes .style.font = 'baz'
 * Removing a shorthand property (longhand gets lost too):
 *   {font: 'foo', fontVariant: 'bar'} -> {fontVariant: 'bar'}
 *   becomes .style.font = ''
 * Removing a longhand property (should revert to shorthand; doesn't):
 *   {font: 'foo', fontVariant: 'bar'} -> {font: 'foo'}
 *   becomes .style.fontVariant = ''
 */


function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
  {

    if (!nextStyles) {
      return;
    }

    var expandedUpdates = expandShorthandMap(styleUpdates);
    var expandedStyles = expandShorthandMap(nextStyles);
    var warnedAbout = {};

    for (var key in expandedUpdates) {
      var originalKey = expandedUpdates[key];
      var correctOriginalKey = expandedStyles[key];

      if (correctOriginalKey && originalKey !== correctOriginalKey) {
        var warningKey = originalKey + ',' + correctOriginalKey;

        if (warnedAbout[warningKey]) {
          continue;
        }

        warnedAbout[warningKey] = true;

        error('%s a style property during rerender (%s) when a ' + 'conflicting property is set (%s) can lead to styling bugs. To ' + "avoid this, don't mix shorthand and non-shorthand properties " + 'for the same value; instead, replace the shorthand with ' + 'separate values.', isValueEmpty(styleUpdates[originalKey]) ? 'Removing' : 'Updating', originalKey, correctOriginalKey);
      }
    }
  }
}

// For HTML, certain tags should omit their close tag. We keep a whitelist for
// those special-case tags.
var omittedCloseTags = {
  area: true,
  base: true,
  br: true,
  col: true,
  embed: true,
  hr: true,
  img: true,
  input: true,
  keygen: true,
  link: true,
  meta: true,
  param: true,
  source: true,
  track: true,
  wbr: true // NOTE: menuitem's close tag should be omitted, but that causes problems.

};

// `omittedCloseTags` except that `menuitem` should still have its closing tag.

var voidElementTags = _assign({
  menuitem: true
}, omittedCloseTags);

var HTML = '__html';
var ReactDebugCurrentFrame$3 = null;

{
  ReactDebugCurrentFrame$3 = ReactSharedInternals.ReactDebugCurrentFrame;
}

function assertValidProps(tag, props) {
  if (!props) {
    return;
  } // Note the use of `==` which checks for null or undefined.


  if (voidElementTags[tag]) {
    if (!(props.children == null && props.dangerouslySetInnerHTML == null)) {
      {
        throw Error( tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
      }
    }
  }

  if (props.dangerouslySetInnerHTML != null) {
    if (!(props.children == null)) {
      {
        throw Error( "Can only set one of `children` or `props.dangerouslySetInnerHTML`." );
      }
    }

    if (!(typeof props.dangerouslySetInnerHTML === 'object' && HTML in props.dangerouslySetInnerHTML)) {
      {
        throw Error( "`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://fb.me/react-invariant-dangerously-set-inner-html for more information." );
      }
    }
  }

  {
    if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
      error('A component is `contentEditable` and contains `children` managed by ' + 'React. It is now your responsibility to guarantee that none of ' + 'those nodes are unexpectedly modified or duplicated. This is ' + 'probably not intentional.');
    }
  }

  if (!(props.style == null || typeof props.style === 'object')) {
    {
      throw Error( "The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX." + ( ReactDebugCurrentFrame$3.getStackAddendum() ) );
    }
  }
}

function isCustomComponent(tagName, props) {
  if (tagName.indexOf('-') === -1) {
    return typeof props.is === 'string';
  }

  switch (tagName) {
    // These are reserved SVG and MathML elements.
    // We don't mind this whitelist too much because we expect it to never grow.
    // The alternative is to track the namespace in a few places which is convoluted.
    // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
    case 'annotation-xml':
    case 'color-profile':
    case 'font-face':
    case 'font-face-src':
    case 'font-face-uri':
    case 'font-face-format':
    case 'font-face-name':
    case 'missing-glyph':
      return false;

    default:
      return true;
  }
}

// When adding attributes to the HTML or SVG whitelist, be sure to
// also add them to this module to ensure casing and incorrect name
// warnings.
var possibleStandardNames = {
  // HTML
  accept: 'accept',
  acceptcharset: 'acceptCharset',
  'accept-charset': 'acceptCharset',
  accesskey: 'accessKey',
  action: 'action',
  allowfullscreen: 'allowFullScreen',
  alt: 'alt',
  as: 'as',
  async: 'async',
  autocapitalize: 'autoCapitalize',
  autocomplete: 'autoComplete',
  autocorrect: 'autoCorrect',
  autofocus: 'autoFocus',
  autoplay: 'autoPlay',
  autosave: 'autoSave',
  capture: 'capture',
  cellpadding: 'cellPadding',
  cellspacing: 'cellSpacing',
  challenge: 'challenge',
  charset: 'charSet',
  checked: 'checked',
  children: 'children',
  cite: 'cite',
  class: 'className',
  classid: 'classID',
  classname: 'className',
  cols: 'cols',
  colspan: 'colSpan',
  content: 'content',
  contenteditable: 'contentEditable',
  contextmenu: 'contextMenu',
  controls: 'controls',
  controlslist: 'controlsList',
  coords: 'coords',
  crossorigin: 'crossOrigin',
  dangerouslysetinnerhtml: 'dangerouslySetInnerHTML',
  data: 'data',
  datetime: 'dateTime',
  default: 'default',
  defaultchecked: 'defaultChecked',
  defaultvalue: 'defaultValue',
  defer: 'defer',
  dir: 'dir',
  disabled: 'disabled',
  disablepictureinpicture: 'disablePictureInPicture',
  download: 'download',
  draggable: 'draggable',
  enctype: 'encType',
  for: 'htmlFor',
  form: 'form',
  formmethod: 'formMethod',
  formaction: 'formAction',
  formenctype: 'formEncType',
  formnovalidate: 'formNoValidate',
  formtarget: 'formTarget',
  frameborder: 'frameBorder',
  headers: 'headers',
  height: 'height',
  hidden: 'hidden',
  high: 'high',
  href: 'href',
  hreflang: 'hrefLang',
  htmlfor: 'htmlFor',
  httpequiv: 'httpEquiv',
  'http-equiv': 'httpEquiv',
  icon: 'icon',
  id: 'id',
  innerhtml: 'innerHTML',
  inputmode: 'inputMode',
  integrity: 'integrity',
  is: 'is',
  itemid: 'itemID',
  itemprop: 'itemProp',
  itemref: 'itemRef',
  itemscope: 'itemScope',
  itemtype: 'itemType',
  keyparams: 'keyParams',
  keytype: 'keyType',
  kind: 'kind',
  label: 'label',
  lang: 'lang',
  list: 'list',
  loop: 'loop',
  low: 'low',
  manifest: 'manifest',
  marginwidth: 'marginWidth',
  marginheight: 'marginHeight',
  max: 'max',
  maxlength: 'maxLength',
  media: 'media',
  mediagroup: 'mediaGroup',
  method: 'method',
  min: 'min',
  minlength: 'minLength',
  multiple: 'multiple',
  muted: 'muted',
  name: 'name',
  nomodule: 'noModule',
  nonce: 'nonce',
  novalidate: 'noValidate',
  open: 'open',
  optimum: 'optimum',
  pattern: 'pattern',
  placeholder: 'placeholder',
  playsinline: 'playsInline',
  poster: 'poster',
  preload: 'preload',
  profile: 'profile',
  radiogroup: 'radioGroup',
  readonly: 'readOnly',
  referrerpolicy: 'referrerPolicy',
  rel: 'rel',
  required: 'required',
  reversed: 'reversed',
  role: 'role',
  rows: 'rows',
  rowspan: 'rowSpan',
  sandbox: 'sandbox',
  scope: 'scope',
  scoped: 'scoped',
  scrolling: 'scrolling',
  seamless: 'seamless',
  selected: 'selected',
  shape: 'shape',
  size: 'size',
  sizes: 'sizes',
  span: 'span',
  spellcheck: 'spellCheck',
  src: 'src',
  srcdoc: 'srcDoc',
  srclang: 'srcLang',
  srcset: 'srcSet',
  start: 'start',
  step: 'step',
  style: 'style',
  summary: 'summary',
  tabindex: 'tabIndex',
  target: 'target',
  title: 'title',
  type: 'type',
  usemap: 'useMap',
  value: 'value',
  width: 'width',
  wmode: 'wmode',
  wrap: 'wrap',
  // SVG
  about: 'about',
  accentheight: 'accentHeight',
  'accent-height': 'accentHeight',
  accumulate: 'accumulate',
  additive: 'additive',
  alignmentbaseline: 'alignmentBaseline',
  'alignment-baseline': 'alignmentBaseline',
  allowreorder: 'allowReorder',
  alphabetic: 'alphabetic',
  amplitude: 'amplitude',
  arabicform: 'arabicForm',
  'arabic-form': 'arabicForm',
  ascent: 'ascent',
  attributename: 'attributeName',
  attributetype: 'attributeType',
  autoreverse: 'autoReverse',
  azimuth: 'azimuth',
  basefrequency: 'baseFrequency',
  baselineshift: 'baselineShift',
  'baseline-shift': 'baselineShift',
  baseprofile: 'baseProfile',
  bbox: 'bbox',
  begin: 'begin',
  bias: 'bias',
  by: 'by',
  calcmode: 'calcMode',
  capheight: 'capHeight',
  'cap-height': 'capHeight',
  clip: 'clip',
  clippath: 'clipPath',
  'clip-path': 'clipPath',
  clippathunits: 'clipPathUnits',
  cliprule: 'clipRule',
  'clip-rule': 'clipRule',
  color: 'color',
  colorinterpolation: 'colorInterpolation',
  'color-interpolation': 'colorInterpolation',
  colorinterpolationfilters: 'colorInterpolationFilters',
  'color-interpolation-filters': 'colorInterpolationFilters',
  colorprofile: 'colorProfile',
  'color-profile': 'colorProfile',
  colorrendering: 'colorRendering',
  'color-rendering': 'colorRendering',
  contentscripttype: 'contentScriptType',
  contentstyletype: 'contentStyleType',
  cursor: 'cursor',
  cx: 'cx',
  cy: 'cy',
  d: 'd',
  datatype: 'datatype',
  decelerate: 'decelerate',
  descent: 'descent',
  diffuseconstant: 'diffuseConstant',
  direction: 'direction',
  display: 'display',
  divisor: 'divisor',
  dominantbaseline: 'dominantBaseline',
  'dominant-baseline': 'dominantBaseline',
  dur: 'dur',
  dx: 'dx',
  dy: 'dy',
  edgemode: 'edgeMode',
  elevation: 'elevation',
  enablebackground: 'enableBackground',
  'enable-background': 'enableBackground',
  end: 'end',
  exponent: 'exponent',
  externalresourcesrequired: 'externalResourcesRequired',
  fill: 'fill',
  fillopacity: 'fillOpacity',
  'fill-opacity': 'fillOpacity',
  fillrule: 'fillRule',
  'fill-rule': 'fillRule',
  filter: 'filter',
  filterres: 'filterRes',
  filterunits: 'filterUnits',
  floodopacity: 'floodOpacity',
  'flood-opacity': 'floodOpacity',
  floodcolor: 'floodColor',
  'flood-color': 'floodColor',
  focusable: 'focusable',
  fontfamily: 'fontFamily',
  'font-family': 'fontFamily',
  fontsize: 'fontSize',
  'font-size': 'fontSize',
  fontsizeadjust: 'fontSizeAdjust',
  'font-size-adjust': 'fontSizeAdjust',
  fontstretch: 'fontStretch',
  'font-stretch': 'fontStretch',
  fontstyle: 'fontStyle',
  'font-style': 'fontStyle',
  fontvariant: 'fontVariant',
  'font-variant': 'fontVariant',
  fontweight: 'fontWeight',
  'font-weight': 'fontWeight',
  format: 'format',
  from: 'from',
  fx: 'fx',
  fy: 'fy',
  g1: 'g1',
  g2: 'g2',
  glyphname: 'glyphName',
  'glyph-name': 'glyphName',
  glyphorientationhorizontal: 'glyphOrientationHorizontal',
  'glyph-orientation-horizontal': 'glyphOrientationHorizontal',
  glyphorientationvertical: 'glyphOrientationVertical',
  'glyph-orientation-vertical': 'glyphOrientationVertical',
  glyphref: 'glyphRef',
  gradienttransform: 'gradientTransform',
  gradientunits: 'gradientUnits',
  hanging: 'hanging',
  horizadvx: 'horizAdvX',
  'horiz-adv-x': 'horizAdvX',
  horizoriginx: 'horizOriginX',
  'horiz-origin-x': 'horizOriginX',
  ideographic: 'ideographic',
  imagerendering: 'imageRendering',
  'image-rendering': 'imageRendering',
  in2: 'in2',
  in: 'in',
  inlist: 'inlist',
  intercept: 'intercept',
  k1: 'k1',
  k2: 'k2',
  k3: 'k3',
  k4: 'k4',
  k: 'k',
  kernelmatrix: 'kernelMatrix',
  kernelunitlength: 'kernelUnitLength',
  kerning: 'kerning',
  keypoints: 'keyPoints',
  keysplines: 'keySplines',
  keytimes: 'keyTimes',
  lengthadjust: 'lengthAdjust',
  letterspacing: 'letterSpacing',
  'letter-spacing': 'letterSpacing',
  lightingcolor: 'lightingColor',
  'lighting-color': 'lightingColor',
  limitingconeangle: 'limitingConeAngle',
  local: 'local',
  markerend: 'markerEnd',
  'marker-end': 'markerEnd',
  markerheight: 'markerHeight',
  markermid: 'markerMid',
  'marker-mid': 'markerMid',
  markerstart: 'markerStart',
  'marker-start': 'markerStart',
  markerunits: 'markerUnits',
  markerwidth: 'markerWidth',
  mask: 'mask',
  maskcontentunits: 'maskContentUnits',
  maskunits: 'maskUnits',
  mathematical: 'mathematical',
  mode: 'mode',
  numoctaves: 'numOctaves',
  offset: 'offset',
  opacity: 'opacity',
  operator: 'operator',
  order: 'order',
  orient: 'orient',
  orientation: 'orientation',
  origin: 'origin',
  overflow: 'overflow',
  overlineposition: 'overlinePosition',
  'overline-position': 'overlinePosition',
  overlinethickness: 'overlineThickness',
  'overline-thickness': 'overlineThickness',
  paintorder: 'paintOrder',
  'paint-order': 'paintOrder',
  panose1: 'panose1',
  'panose-1': 'panose1',
  pathlength: 'pathLength',
  patterncontentunits: 'patternContentUnits',
  patterntransform: 'patternTransform',
  patternunits: 'patternUnits',
  pointerevents: 'pointerEvents',
  'pointer-events': 'pointerEvents',
  points: 'points',
  pointsatx: 'pointsAtX',
  pointsaty: 'pointsAtY',
  pointsatz: 'pointsAtZ',
  prefix: 'prefix',
  preservealpha: 'preserveAlpha',
  preserveaspectratio: 'preserveAspectRatio',
  primitiveunits: 'primitiveUnits',
  property: 'property',
  r: 'r',
  radius: 'radius',
  refx: 'refX',
  refy: 'refY',
  renderingintent: 'renderingIntent',
  'rendering-intent': 'renderingIntent',
  repeatcount: 'repeatCount',
  repeatdur: 'repeatDur',
  requiredextensions: 'requiredExtensions',
  requiredfeatures: 'requiredFeatures',
  resource: 'resource',
  restart: 'restart',
  result: 'result',
  results: 'results',
  rotate: 'rotate',
  rx: 'rx',
  ry: 'ry',
  scale: 'scale',
  security: 'security',
  seed: 'seed',
  shaperendering: 'shapeRendering',
  'shape-rendering': 'shapeRendering',
  slope: 'slope',
  spacing: 'spacing',
  specularconstant: 'specularConstant',
  specularexponent: 'specularExponent',
  speed: 'speed',
  spreadmethod: 'spreadMethod',
  startoffset: 'startOffset',
  stddeviation: 'stdDeviation',
  stemh: 'stemh',
  stemv: 'stemv',
  stitchtiles: 'stitchTiles',
  stopcolor: 'stopColor',
  'stop-color': 'stopColor',
  stopopacity: 'stopOpacity',
  'stop-opacity': 'stopOpacity',
  strikethroughposition: 'strikethroughPosition',
  'strikethrough-position': 'strikethroughPosition',
  strikethroughthickness: 'strikethroughThickness',
  'strikethrough-thickness': 'strikethroughThickness',
  string: 'string',
  stroke: 'stroke',
  strokedasharray: 'strokeDasharray',
  'stroke-dasharray': 'strokeDasharray',
  strokedashoffset: 'strokeDashoffset',
  'stroke-dashoffset': 'strokeDashoffset',
  strokelinecap: 'strokeLinecap',
  'stroke-linecap': 'strokeLinecap',
  strokelinejoin: 'strokeLinejoin',
  'stroke-linejoin': 'strokeLinejoin',
  strokemiterlimit: 'strokeMiterlimit',
  'stroke-miterlimit': 'strokeMiterlimit',
  strokewidth: 'strokeWidth',
  'stroke-width': 'strokeWidth',
  strokeopacity: 'strokeOpacity',
  'stroke-opacity': 'strokeOpacity',
  suppresscontenteditablewarning: 'suppressContentEditableWarning',
  suppresshydrationwarning: 'suppressHydrationWarning',
  surfacescale: 'surfaceScale',
  systemlanguage: 'systemLanguage',
  tablevalues: 'tableValues',
  targetx: 'targetX',
  targety: 'targetY',
  textanchor: 'textAnchor',
  'text-anchor': 'textAnchor',
  textdecoration: 'textDecoration',
  'text-decoration': 'textDecoration',
  textlength: 'textLength',
  textrendering: 'textRendering',
  'text-rendering': 'textRendering',
  to: 'to',
  transform: 'transform',
  typeof: 'typeof',
  u1: 'u1',
  u2: 'u2',
  underlineposition: 'underlinePosition',
  'underline-position': 'underlinePosition',
  underlinethickness: 'underlineThickness',
  'underline-thickness': 'underlineThickness',
  unicode: 'unicode',
  unicodebidi: 'unicodeBidi',
  'unicode-bidi': 'unicodeBidi',
  unicoderange: 'unicodeRange',
  'unicode-range': 'unicodeRange',
  unitsperem: 'unitsPerEm',
  'units-per-em': 'unitsPerEm',
  unselectable: 'unselectable',
  valphabetic: 'vAlphabetic',
  'v-alphabetic': 'vAlphabetic',
  values: 'values',
  vectoreffect: 'vectorEffect',
  'vector-effect': 'vectorEffect',
  version: 'version',
  vertadvy: 'vertAdvY',
  'vert-adv-y': 'vertAdvY',
  vertoriginx: 'vertOriginX',
  'vert-origin-x': 'vertOriginX',
  vertoriginy: 'vertOriginY',
  'vert-origin-y': 'vertOriginY',
  vhanging: 'vHanging',
  'v-hanging': 'vHanging',
  videographic: 'vIdeographic',
  'v-ideographic': 'vIdeographic',
  viewbox: 'viewBox',
  viewtarget: 'viewTarget',
  visibility: 'visibility',
  vmathematical: 'vMathematical',
  'v-mathematical': 'vMathematical',
  vocab: 'vocab',
  widths: 'widths',
  wordspacing: 'wordSpacing',
  'word-spacing': 'wordSpacing',
  writingmode: 'writingMode',
  'writing-mode': 'writingMode',
  x1: 'x1',
  x2: 'x2',
  x: 'x',
  xchannelselector: 'xChannelSelector',
  xheight: 'xHeight',
  'x-height': 'xHeight',
  xlinkactuate: 'xlinkActuate',
  'xlink:actuate': 'xlinkActuate',
  xlinkarcrole: 'xlinkArcrole',
  'xlink:arcrole': 'xlinkArcrole',
  xlinkhref: 'xlinkHref',
  'xlink:href': 'xlinkHref',
  xlinkrole: 'xlinkRole',
  'xlink:role': 'xlinkRole',
  xlinkshow: 'xlinkShow',
  'xlink:show': 'xlinkShow',
  xlinktitle: 'xlinkTitle',
  'xlink:title': 'xlinkTitle',
  xlinktype: 'xlinkType',
  'xlink:type': 'xlinkType',
  xmlbase: 'xmlBase',
  'xml:base': 'xmlBase',
  xmllang: 'xmlLang',
  'xml:lang': 'xmlLang',
  xmlns: 'xmlns',
  'xml:space': 'xmlSpace',
  xmlnsxlink: 'xmlnsXlink',
  'xmlns:xlink': 'xmlnsXlink',
  xmlspace: 'xmlSpace',
  y1: 'y1',
  y2: 'y2',
  y: 'y',
  ychannelselector: 'yChannelSelector',
  z: 'z',
  zoomandpan: 'zoomAndPan'
};

var ariaProperties = {
  'aria-current': 0,
  // state
  'aria-details': 0,
  'aria-disabled': 0,
  // state
  'aria-hidden': 0,
  // state
  'aria-invalid': 0,
  // state
  'aria-keyshortcuts': 0,
  'aria-label': 0,
  'aria-roledescription': 0,
  // Widget Attributes
  'aria-autocomplete': 0,
  'aria-checked': 0,
  'aria-expanded': 0,
  'aria-haspopup': 0,
  'aria-level': 0,
  'aria-modal': 0,
  'aria-multiline': 0,
  'aria-multiselectable': 0,
  'aria-orientation': 0,
  'aria-placeholder': 0,
  'aria-pressed': 0,
  'aria-readonly': 0,
  'aria-required': 0,
  'aria-selected': 0,
  'aria-sort': 0,
  'aria-valuemax': 0,
  'aria-valuemin': 0,
  'aria-valuenow': 0,
  'aria-valuetext': 0,
  // Live Region Attributes
  'aria-atomic': 0,
  'aria-busy': 0,
  'aria-live': 0,
  'aria-relevant': 0,
  // Drag-and-Drop Attributes
  'aria-dropeffect': 0,
  'aria-grabbed': 0,
  // Relationship Attributes
  'aria-activedescendant': 0,
  'aria-colcount': 0,
  'aria-colindex': 0,
  'aria-colspan': 0,
  'aria-controls': 0,
  'aria-describedby': 0,
  'aria-errormessage': 0,
  'aria-flowto': 0,
  'aria-labelledby': 0,
  'aria-owns': 0,
  'aria-posinset': 0,
  'aria-rowcount': 0,
  'aria-rowindex': 0,
  'aria-rowspan': 0,
  'aria-setsize': 0
};

var warnedProperties = {};
var rARIA = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
var rARIACamel = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');
var hasOwnProperty$1 = Object.prototype.hasOwnProperty;

function validateProperty(tagName, name) {
  {
    if (hasOwnProperty$1.call(warnedProperties, name) && warnedProperties[name]) {
      return true;
    }

    if (rARIACamel.test(name)) {
      var ariaName = 'aria-' + name.slice(4).toLowerCase();
      var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (correctName == null) {
        error('Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.', name);

        warnedProperties[name] = true;
        return true;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== correctName) {
        error('Invalid ARIA attribute `%s`. Did you mean `%s`?', name, correctName);

        warnedProperties[name] = true;
        return true;
      }
    }

    if (rARIA.test(name)) {
      var lowerCasedName = name.toLowerCase();
      var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null; // If this is an aria-* attribute, but is not listed in the known DOM
      // DOM properties, then it is an invalid aria-* attribute.

      if (standardName == null) {
        warnedProperties[name] = true;
        return false;
      } // aria-* attributes should be lowercase; suggest the lowercase version.


      if (name !== standardName) {
        error('Unknown ARIA attribute `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties[name] = true;
        return true;
      }
    }
  }

  return true;
}

function warnInvalidARIAProps(type, props) {
  {
    var invalidProps = [];

    for (var key in props) {
      var isValid = validateProperty(type, key);

      if (!isValid) {
        invalidProps.push(key);
      }
    }

    var unknownPropString = invalidProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (invalidProps.length === 1) {
      error('Invalid aria prop %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
    } else if (invalidProps.length > 1) {
      error('Invalid aria props %s on <%s> tag. ' + 'For details, see https://fb.me/invalid-aria-prop', unknownPropString, type);
    }
  }
}

function validateProperties(type, props) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnInvalidARIAProps(type, props);
}

var didWarnValueNull = false;
function validateProperties$1(type, props) {
  {
    if (type !== 'input' && type !== 'textarea' && type !== 'select') {
      return;
    }

    if (props != null && props.value === null && !didWarnValueNull) {
      didWarnValueNull = true;

      if (type === 'select' && props.multiple) {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty array when `multiple` is set to `true` ' + 'to clear the component or `undefined` for uncontrolled components.', type);
      } else {
        error('`value` prop on `%s` should not be null. ' + 'Consider using an empty string to clear the component or `undefined` ' + 'for uncontrolled components.', type);
      }
    }
  }
}

var validateProperty$1 = function () {};

{
  var warnedProperties$1 = {};
  var _hasOwnProperty = Object.prototype.hasOwnProperty;
  var EVENT_NAME_REGEX = /^on./;
  var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
  var rARIA$1 = new RegExp('^(aria)-[' + ATTRIBUTE_NAME_CHAR + ']*$');
  var rARIACamel$1 = new RegExp('^(aria)[A-Z][' + ATTRIBUTE_NAME_CHAR + ']*$');

  validateProperty$1 = function (tagName, name, value, canUseEventSystem) {
    if (_hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
      return true;
    }

    var lowerCasedName = name.toLowerCase();

    if (lowerCasedName === 'onfocusin' || lowerCasedName === 'onfocusout') {
      error('React uses onFocus and onBlur instead of onFocusIn and onFocusOut. ' + 'All React events are normalized to bubble, so onFocusIn and onFocusOut ' + 'are not needed/supported by React.');

      warnedProperties$1[name] = true;
      return true;
    } // We can't rely on the event system being injected on the server.


    if (canUseEventSystem) {
      if (registrationNameModules.hasOwnProperty(name)) {
        return true;
      }

      var registrationName = possibleRegistrationNames.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames[lowerCasedName] : null;

      if (registrationName != null) {
        error('Invalid event handler property `%s`. Did you mean `%s`?', name, registrationName);

        warnedProperties$1[name] = true;
        return true;
      }

      if (EVENT_NAME_REGEX.test(name)) {
        error('Unknown event handler property `%s`. It will be ignored.', name);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (EVENT_NAME_REGEX.test(name)) {
      // If no event plugins have been injected, we are in a server environment.
      // So we can't tell if the event name is correct for sure, but we can filter
      // out known bad ones like `onclick`. We can't suggest a specific replacement though.
      if (INVALID_EVENT_NAME_REGEX.test(name)) {
        error('Invalid event handler property `%s`. ' + 'React events use the camelCase naming convention, for example `onClick`.', name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Let the ARIA attribute hook validate ARIA attributes


    if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
      return true;
    }

    if (lowerCasedName === 'innerhtml') {
      error('Directly setting property `innerHTML` is not permitted. ' + 'For more information, lookup documentation on `dangerouslySetInnerHTML`.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'aria') {
      error('The `aria` attribute is reserved for future use in React. ' + 'Pass individual `aria-` attributes instead.');

      warnedProperties$1[name] = true;
      return true;
    }

    if (lowerCasedName === 'is' && value !== null && value !== undefined && typeof value !== 'string') {
      error('Received a `%s` for a string attribute `is`. If this is expected, cast ' + 'the value to a string.', typeof value);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'number' && isNaN(value)) {
      error('Received NaN for the `%s` attribute. If this is expected, cast ' + 'the value to a string.', name);

      warnedProperties$1[name] = true;
      return true;
    }

    var propertyInfo = getPropertyInfo(name);
    var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED; // Known attributes should match the casing specified in the property config.

    if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      var standardName = possibleStandardNames[lowerCasedName];

      if (standardName !== name) {
        error('Invalid DOM property `%s`. Did you mean `%s`?', name, standardName);

        warnedProperties$1[name] = true;
        return true;
      }
    } else if (!isReserved && name !== lowerCasedName) {
      // Unknown attributes should have lowercase casing since that's how they
      // will be cased anyway with server rendering.
      error('React does not recognize the `%s` prop on a DOM element. If you ' + 'intentionally want it to appear in the DOM as a custom ' + 'attribute, spell it as lowercase `%s` instead. ' + 'If you accidentally passed it from a parent component, remove ' + 'it from the DOM element.', name, lowerCasedName);

      warnedProperties$1[name] = true;
      return true;
    }

    if (typeof value === 'boolean' && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      if (value) {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.', value, name, name, value, name);
      } else {
        error('Received `%s` for a non-boolean attribute `%s`.\n\n' + 'If you want to write it to the DOM, pass a string instead: ' + '%s="%s" or %s={value.toString()}.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
      }

      warnedProperties$1[name] = true;
      return true;
    } // Now that we've validated casing, do not validate
    // data types for reserved props


    if (isReserved) {
      return true;
    } // Warn when a known attribute is a bad type


    if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
      warnedProperties$1[name] = true;
      return false;
    } // Warn when passing the strings 'false' or 'true' into a boolean prop


    if ((value === 'false' || value === 'true') && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
      error('Received the string `%s` for the boolean attribute `%s`. ' + '%s ' + 'Did you mean %s={%s}?', value, name, value === 'false' ? 'The browser will interpret it as a truthy value.' : 'Although this works, it will not work as expected if you pass the string "false".', name, value);

      warnedProperties$1[name] = true;
      return true;
    }

    return true;
  };
}

var warnUnknownProperties = function (type, props, canUseEventSystem) {
  {
    var unknownProps = [];

    for (var key in props) {
      var isValid = validateProperty$1(type, key, props[key], canUseEventSystem);

      if (!isValid) {
        unknownProps.push(key);
      }
    }

    var unknownPropString = unknownProps.map(function (prop) {
      return '`' + prop + '`';
    }).join(', ');

    if (unknownProps.length === 1) {
      error('Invalid value for prop %s on <%s> tag. Either remove it from the element, ' + 'or pass a string or number value to keep it in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
    } else if (unknownProps.length > 1) {
      error('Invalid values for props %s on <%s> tag. Either remove them from the element, ' + 'or pass a string or number value to keep them in the DOM. ' + 'For details, see https://fb.me/react-attribute-behavior', unknownPropString, type);
    }
  }
};

function validateProperties$2(type, props, canUseEventSystem) {
  if (isCustomComponent(type, props)) {
    return;
  }

  warnUnknownProperties(type, props, canUseEventSystem);
}

var didWarnInvalidHydration = false;
var DANGEROUSLY_SET_INNER_HTML = 'dangerouslySetInnerHTML';
var SUPPRESS_CONTENT_EDITABLE_WARNING = 'suppressContentEditableWarning';
var SUPPRESS_HYDRATION_WARNING = 'suppressHydrationWarning';
var AUTOFOCUS = 'autoFocus';
var CHILDREN = 'children';
var STYLE = 'style';
var HTML$1 = '__html';
var HTML_NAMESPACE$1 = Namespaces.html;
var warnedUnknownTags;
var suppressHydrationWarning;
var validatePropertiesInDevelopment;
var warnForTextDifference;
var warnForPropDifference;
var warnForExtraAttributes;
var warnForInvalidEventListener;
var canDiffStyleForHydrationWarning;
var normalizeMarkupForTextOrAttribute;
var normalizeHTML;

{
  warnedUnknownTags = {
    // Chrome is the only major browser not shipping <time>. But as of July
    // 2017 it intends to ship it due to widespread usage. We intentionally
    // *don't* warn for <time> even if it's unrecognized by Chrome because
    // it soon will be, and many apps have been using it anyway.
    time: true,
    // There are working polyfills for <dialog>. Let people use it.
    dialog: true,
    // Electron ships a custom <webview> tag to display external web content in
    // an isolated frame and process.
    // This tag is not present in non Electron environments such as JSDom which
    // is often used for testing purposes.
    // @see https://electronjs.org/docs/api/webview-tag
    webview: true
  };

  validatePropertiesInDevelopment = function (type, props) {
    validateProperties(type, props);
    validateProperties$1(type, props);
    validateProperties$2(type, props,
    /* canUseEventSystem */
    true);
  }; // IE 11 parses & normalizes the style attribute as opposed to other
  // browsers. It adds spaces and sorts the properties in some
  // non-alphabetical order. Handling that would require sorting CSS
  // properties in the client & server versions or applying
  // `expectedStyle` to a temporary DOM node to read its `style` attribute
  // normalized. Since it only affects IE, we're skipping style warnings
  // in that browser completely in favor of doing all that work.
  // See https://github.com/facebook/react/issues/11807


  canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode; // HTML parsing normalizes CR and CRLF to LF.
  // It also can turn \u0000 into \uFFFD inside attributes.
  // https://www.w3.org/TR/html5/single-page.html#preprocessing-the-input-stream
  // If we have a mismatch, it might be caused by that.
  // We will still patch up in this case but not fire the warning.

  var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
  var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;

  normalizeMarkupForTextOrAttribute = function (markup) {
    var markupString = typeof markup === 'string' ? markup : '' + markup;
    return markupString.replace(NORMALIZE_NEWLINES_REGEX, '\n').replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, '');
  };

  warnForTextDifference = function (serverText, clientText) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
    var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);

    if (normalizedServerText === normalizedClientText) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
  };

  warnForPropDifference = function (propName, serverValue, clientValue) {
    if (didWarnInvalidHydration) {
      return;
    }

    var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
    var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);

    if (normalizedServerValue === normalizedClientValue) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Prop `%s` did not match. Server: %s Client: %s', propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
  };

  warnForExtraAttributes = function (attributeNames) {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;
    var names = [];
    attributeNames.forEach(function (name) {
      names.push(name);
    });

    error('Extra attributes from the server: %s', names);
  };

  warnForInvalidEventListener = function (registrationName, listener) {
    if (listener === false) {
      error('Expected `%s` listener to be a function, instead got `false`.\n\n' + 'If you used to conditionally omit it with %s={condition && value}, ' + 'pass %s={condition ? value : undefined} instead.', registrationName, registrationName, registrationName);
    } else {
      error('Expected `%s` listener to be a function, instead got a value of `%s` type.', registrationName, typeof listener);
    }
  }; // Parse the HTML and read it back to normalize the HTML string so that it
  // can be used for comparison.


  normalizeHTML = function (parent, html) {
    // We could have created a separate document here to avoid
    // re-initializing custom elements if they exist. But this breaks
    // how <noscript> is being handled. So we use the same document.
    // See the discussion in https://github.com/facebook/react/pull/11157.
    var testElement = parent.namespaceURI === HTML_NAMESPACE$1 ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
    testElement.innerHTML = html;
    return testElement.innerHTML;
  };
}

function ensureListeningTo(rootContainerElement, registrationName) {
  var isDocumentOrFragment = rootContainerElement.nodeType === DOCUMENT_NODE || rootContainerElement.nodeType === DOCUMENT_FRAGMENT_NODE;
  var doc = isDocumentOrFragment ? rootContainerElement : rootContainerElement.ownerDocument;
  legacyListenToEvent(registrationName, doc);
}

function getOwnerDocumentFromRootContainer(rootContainerElement) {
  return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
}

function noop() {}

function trapClickOnNonInteractiveElement(node) {
  // Mobile Safari does not fire properly bubble click events on
  // non-interactive elements, which means delegated click listeners do not
  // fire. The workaround for this bug involves attaching an empty click
  // listener on the target node.
  // http://www.quirksmode.org/blog/archives/2010/09/click_event_del.html
  // Just set it using the onclick property so that we don't have to manage any
  // bookkeeping for it. Not sure if we need to clear it when the listener is
  // removed.
  // TODO: Only do this for the relevant Safaris maybe?
  node.onclick = noop;
}

function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
  for (var propKey in nextProps) {
    if (!nextProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = nextProps[propKey];

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      } // Relies on `updateStylesByID` not mutating `styleUpdates`.


      setValueForStyles(domElement, nextProp);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;

      if (nextHtml != null) {
        setInnerHTML(domElement, nextHtml);
      }
    } else if (propKey === CHILDREN) {
      if (typeof nextProp === 'string') {
        // Avoid setting initial textContent when the text is empty. In IE11 setting
        // textContent on a <textarea> will cause the placeholder to not
        // show within the <textarea> until it has been focused and blurred again.
        // https://github.com/facebook/react/issues/6731#issuecomment-254874553
        var canSetTextContent = tag !== 'textarea' || nextProp !== '';

        if (canSetTextContent) {
          setTextContent(domElement, nextProp);
        }
      } else if (typeof nextProp === 'number') {
        setTextContent(domElement, '' + nextProp);
      }
    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if (nextProp != null) {
      setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
    }
  }
}

function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
  // TODO: Handle wasCustomComponentTag
  for (var i = 0; i < updatePayload.length; i += 2) {
    var propKey = updatePayload[i];
    var propValue = updatePayload[i + 1];

    if (propKey === STYLE) {
      setValueForStyles(domElement, propValue);
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      setInnerHTML(domElement, propValue);
    } else if (propKey === CHILDREN) {
      setTextContent(domElement, propValue);
    } else {
      setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
    }
  }
}

function createElement(type, props, rootContainerElement, parentNamespace) {
  var isCustomComponentTag; // We create tags in the namespace of their parent container, except HTML
  // tags get no namespace.

  var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
  var domElement;
  var namespaceURI = parentNamespace;

  if (namespaceURI === HTML_NAMESPACE$1) {
    namespaceURI = getIntrinsicNamespace(type);
  }

  if (namespaceURI === HTML_NAMESPACE$1) {
    {
      isCustomComponentTag = isCustomComponent(type, props); // Should this check be gated by parent namespace? Not sure we want to
      // allow <SVG> or <mATH>.

      if (!isCustomComponentTag && type !== type.toLowerCase()) {
        error('<%s /> is using incorrect casing. ' + 'Use PascalCase for React components, ' + 'or lowercase for HTML elements.', type);
      }
    }

    if (type === 'script') {
      // Create the script via .innerHTML so its "parser-inserted" flag is
      // set to true and it does not execute
      var div = ownerDocument.createElement('div');

      div.innerHTML = '<script><' + '/script>'; // eslint-disable-line
      // This is guaranteed to yield a script element.

      var firstChild = div.firstChild;
      domElement = div.removeChild(firstChild);
    } else if (typeof props.is === 'string') {
      // $FlowIssue `createElement` should be updated for Web Components
      domElement = ownerDocument.createElement(type, {
        is: props.is
      });
    } else {
      // Separate else branch instead of using `props.is || undefined` above because of a Firefox bug.
      // See discussion in https://github.com/facebook/react/pull/6896
      // and discussion in https://bugzilla.mozilla.org/show_bug.cgi?id=1276240
      domElement = ownerDocument.createElement(type); // Normally attributes are assigned in `setInitialDOMProperties`, however the `multiple` and `size`
      // attributes on `select`s needs to be added before `option`s are inserted.
      // This prevents:
      // - a bug where the `select` does not scroll to the correct option because singular
      //  `select` elements automatically pick the first item #13222
      // - a bug where the `select` set the first item as selected despite the `size` attribute #14239
      // See https://github.com/facebook/react/issues/13222
      // and https://github.com/facebook/react/issues/14239

      if (type === 'select') {
        var node = domElement;

        if (props.multiple) {
          node.multiple = true;
        } else if (props.size) {
          // Setting a size greater than 1 causes a select to behave like `multiple=true`, where
          // it is possible that no option is selected.
          //
          // This is only necessary when a select in "single selection mode".
          node.size = props.size;
        }
      }
    }
  } else {
    domElement = ownerDocument.createElementNS(namespaceURI, type);
  }

  {
    if (namespaceURI === HTML_NAMESPACE$1) {
      if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === '[object HTMLUnknownElement]' && !Object.prototype.hasOwnProperty.call(warnedUnknownTags, type)) {
        warnedUnknownTags[type] = true;

        error('The tag <%s> is unrecognized in this browser. ' + 'If you meant to render a React component, start its name with ' + 'an uppercase letter.', type);
      }
    }
  }

  return domElement;
}
function createTextNode(text, rootContainerElement) {
  return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
}
function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
  var isCustomComponentTag = isCustomComponent(tag, rawProps);

  {
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  var props;

  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      props = rawProps;
      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      props = rawProps;
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      props = rawProps;
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      props = rawProps;
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      props = rawProps;
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      props = getHostProps(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      props = getHostProps$1(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      props = getHostProps$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      props = getHostProps$3(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    default:
      props = rawProps;
  }

  assertValidProps(tag, props);
  setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, false);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'option':
      postMountWrapper$1(domElement, rawProps);
      break;

    case 'select':
      postMountWrapper$2(domElement, rawProps);
      break;

    default:
      if (typeof props.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }
} // Calculate the diff between the two objects.

function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
  {
    validatePropertiesInDevelopment(tag, nextRawProps);
  }

  var updatePayload = null;
  var lastProps;
  var nextProps;

  switch (tag) {
    case 'input':
      lastProps = getHostProps(domElement, lastRawProps);
      nextProps = getHostProps(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'option':
      lastProps = getHostProps$1(domElement, lastRawProps);
      nextProps = getHostProps$1(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'select':
      lastProps = getHostProps$2(domElement, lastRawProps);
      nextProps = getHostProps$2(domElement, nextRawProps);
      updatePayload = [];
      break;

    case 'textarea':
      lastProps = getHostProps$3(domElement, lastRawProps);
      nextProps = getHostProps$3(domElement, nextRawProps);
      updatePayload = [];
      break;

    default:
      lastProps = lastRawProps;
      nextProps = nextRawProps;

      if (typeof lastProps.onClick !== 'function' && typeof nextProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  assertValidProps(tag, nextProps);
  var propKey;
  var styleName;
  var styleUpdates = null;

  for (propKey in lastProps) {
    if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
      continue;
    }

    if (propKey === STYLE) {
      var lastStyle = lastProps[propKey];

      for (styleName in lastStyle) {
        if (lastStyle.hasOwnProperty(styleName)) {
          if (!styleUpdates) {
            styleUpdates = {};
          }

          styleUpdates[styleName] = '';
        }
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (propKey === AUTOFOCUS) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      // This is a special case. If any listener updates we need to ensure
      // that the "current" fiber pointer gets updated so we need a commit
      // to update this element.
      if (!updatePayload) {
        updatePayload = [];
      }
    } else {
      // For all other deleted properties we add it to the queue. We use
      // the whitelist in the commit phase instead.
      (updatePayload = updatePayload || []).push(propKey, null);
    }
  }

  for (propKey in nextProps) {
    var nextProp = nextProps[propKey];
    var lastProp = lastProps != null ? lastProps[propKey] : undefined;

    if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
      continue;
    }

    if (propKey === STYLE) {
      {
        if (nextProp) {
          // Freeze the next style object so that we can assume it won't be
          // mutated. We have already warned for this in the past.
          Object.freeze(nextProp);
        }
      }

      if (lastProp) {
        // Unset styles on `lastProp` but not on `nextProp`.
        for (styleName in lastProp) {
          if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = '';
          }
        } // Update styles that changed since `lastProp`.


        for (styleName in nextProp) {
          if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
            if (!styleUpdates) {
              styleUpdates = {};
            }

            styleUpdates[styleName] = nextProp[styleName];
          }
        }
      } else {
        // Relies on `updateStylesByID` not mutating `styleUpdates`.
        if (!styleUpdates) {
          if (!updatePayload) {
            updatePayload = [];
          }

          updatePayload.push(propKey, styleUpdates);
        }

        styleUpdates = nextProp;
      }
    } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
      var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
      var lastHtml = lastProp ? lastProp[HTML$1] : undefined;

      if (nextHtml != null) {
        if (lastHtml !== nextHtml) {
          (updatePayload = updatePayload || []).push(propKey, nextHtml);
        }
      }
    } else if (propKey === CHILDREN) {
      if (lastProp !== nextProp && (typeof nextProp === 'string' || typeof nextProp === 'number')) {
        (updatePayload = updatePayload || []).push(propKey, '' + nextProp);
      }
    } else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ; else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        // We eagerly listen to this even though we haven't committed yet.
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }

      if (!updatePayload && lastProp !== nextProp) {
        // This is a special case. If any listener updates we need to ensure
        // that the "current" props pointer gets updated so we need a commit
        // to update this element.
        updatePayload = [];
      }
    } else {
      // For any other property we always add it to the queue and then we
      // filter it out using the whitelist during the commit.
      (updatePayload = updatePayload || []).push(propKey, nextProp);
    }
  }

  if (styleUpdates) {
    {
      validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
    }

    (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
  }

  return updatePayload;
} // Apply the diff.

function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
  // Update checked *before* name.
  // In the middle of an update, it is possible to have multiple checked.
  // When a checked radio tries to change name, browser makes another radio's checked false.
  if (tag === 'input' && nextRawProps.type === 'radio' && nextRawProps.name != null) {
    updateChecked(domElement, nextRawProps);
  }

  var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
  var isCustomComponentTag = isCustomComponent(tag, nextRawProps); // Apply the diff.

  updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag); // TODO: Ensure that an update gets scheduled if any of the special props
  // changed.

  switch (tag) {
    case 'input':
      // Update the wrapper around inputs *after* updating props. This has to
      // happen after `updateDOMProperties`. Otherwise HTML5 input validations
      // raise warnings and prevent the new value from being assigned.
      updateWrapper(domElement, nextRawProps);
      break;

    case 'textarea':
      updateWrapper$1(domElement, nextRawProps);
      break;

    case 'select':
      // <select> value update needs to occur after <option> children
      // reconciliation
      postUpdateWrapper(domElement, nextRawProps);
      break;
  }
}

function getPossibleStandardName(propName) {
  {
    var lowerCasedName = propName.toLowerCase();

    if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
      return null;
    }

    return possibleStandardNames[lowerCasedName] || null;
  }
}

function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement) {
  var isCustomComponentTag;
  var extraAttributeNames;

  {
    suppressHydrationWarning = rawProps[SUPPRESS_HYDRATION_WARNING] === true;
    isCustomComponentTag = isCustomComponent(tag, rawProps);
    validatePropertiesInDevelopment(tag, rawProps);
  } // TODO: Make sure that we check isMounted before firing any of these events.


  switch (tag) {
    case 'iframe':
    case 'object':
    case 'embed':
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'video':
    case 'audio':
      // Create listener for each media event
      for (var i = 0; i < mediaEventTypes.length; i++) {
        trapBubbledEvent(mediaEventTypes[i], domElement);
      }

      break;

    case 'source':
      trapBubbledEvent(TOP_ERROR, domElement);
      break;

    case 'img':
    case 'image':
    case 'link':
      trapBubbledEvent(TOP_ERROR, domElement);
      trapBubbledEvent(TOP_LOAD, domElement);
      break;

    case 'form':
      trapBubbledEvent(TOP_RESET, domElement);
      trapBubbledEvent(TOP_SUBMIT, domElement);
      break;

    case 'details':
      trapBubbledEvent(TOP_TOGGLE, domElement);
      break;

    case 'input':
      initWrapperState(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'option':
      validateProps(domElement, rawProps);
      break;

    case 'select':
      initWrapperState$1(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;

    case 'textarea':
      initWrapperState$2(domElement, rawProps);
      trapBubbledEvent(TOP_INVALID, domElement); // For controlled components we always need to ensure we're listening
      // to onChange. Even if there is no listener.

      ensureListeningTo(rootContainerElement, 'onChange');
      break;
  }

  assertValidProps(tag, rawProps);

  {
    extraAttributeNames = new Set();
    var attributes = domElement.attributes;

    for (var _i = 0; _i < attributes.length; _i++) {
      var name = attributes[_i].name.toLowerCase();

      switch (name) {
        // Built-in SSR attribute is whitelisted
        case 'data-reactroot':
          break;
        // Controlled attributes are not validated
        // TODO: Only ignore them on controlled tags.

        case 'value':
          break;

        case 'checked':
          break;

        case 'selected':
          break;

        default:
          // Intentionally use the original name.
          // See discussion in https://github.com/facebook/react/pull/10676.
          extraAttributeNames.add(attributes[_i].name);
      }
    }
  }

  var updatePayload = null;

  for (var propKey in rawProps) {
    if (!rawProps.hasOwnProperty(propKey)) {
      continue;
    }

    var nextProp = rawProps[propKey];

    if (propKey === CHILDREN) {
      // For text content children we compare against textContent. This
      // might match additional HTML that is hidden when we read it using
      // textContent. E.g. "foo" will match "f<span>oo</span>" but that still
      // satisfies our requirement. Our requirement is not to produce perfect
      // HTML and attributes. Ideally we should preserve structure but it's
      // ok not to if the visible content is still enough to indicate what
      // even listeners these nodes might be wired up to.
      // TODO: Warn if there is more than a single textNode as a child.
      // TODO: Should we use domElement.firstChild.nodeValue to compare?
      if (typeof nextProp === 'string') {
        if (domElement.textContent !== nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, nextProp];
        }
      } else if (typeof nextProp === 'number') {
        if (domElement.textContent !== '' + nextProp) {
          if ( !suppressHydrationWarning) {
            warnForTextDifference(domElement.textContent, nextProp);
          }

          updatePayload = [CHILDREN, '' + nextProp];
        }
      }
    } else if (registrationNameModules.hasOwnProperty(propKey)) {
      if (nextProp != null) {
        if ( typeof nextProp !== 'function') {
          warnForInvalidEventListener(propKey, nextProp);
        }

        ensureListeningTo(rootContainerElement, propKey);
      }
    } else if ( // Convince Flow we've calculated it (it's DEV-only in this method.)
    typeof isCustomComponentTag === 'boolean') {
      // Validate that the properties correspond to their expected values.
      var serverValue = void 0;
      var propertyInfo = getPropertyInfo(propKey);

      if (suppressHydrationWarning) ; else if ( propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
      // TODO: Only ignore them on controlled tags.
      propKey === 'value' || propKey === 'checked' || propKey === 'selected') ; else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
        var serverHTML = domElement.innerHTML;
        var nextHtml = nextProp ? nextProp[HTML$1] : undefined;
        var expectedHTML = normalizeHTML(domElement, nextHtml != null ? nextHtml : '');

        if (expectedHTML !== serverHTML) {
          warnForPropDifference(propKey, serverHTML, expectedHTML);
        }
      } else if (propKey === STYLE) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey);

        if (canDiffStyleForHydrationWarning) {
          var expectedStyle = createDangerousStringForStyles(nextProp);
          serverValue = domElement.getAttribute('style');

          if (expectedStyle !== serverValue) {
            warnForPropDifference(propKey, serverValue, expectedStyle);
          }
        }
      } else if (isCustomComponentTag) {
        // $FlowFixMe - Should be inferred as not undefined.
        extraAttributeNames.delete(propKey.toLowerCase());
        serverValue = getValueForAttribute(domElement, propKey, nextProp);

        if (nextProp !== serverValue) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
        var isMismatchDueToBadCasing = false;

        if (propertyInfo !== null) {
          // $FlowFixMe - Should be inferred as not undefined.
          extraAttributeNames.delete(propertyInfo.attributeName);
          serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
        } else {
          var ownNamespace = parentNamespace;

          if (ownNamespace === HTML_NAMESPACE$1) {
            ownNamespace = getIntrinsicNamespace(tag);
          }

          if (ownNamespace === HTML_NAMESPACE$1) {
            // $FlowFixMe - Should be inferred as not undefined.
            extraAttributeNames.delete(propKey.toLowerCase());
          } else {
            var standardName = getPossibleStandardName(propKey);

            if (standardName !== null && standardName !== propKey) {
              // If an SVG prop is supplied with bad casing, it will
              // be successfully parsed from HTML, but will produce a mismatch
              // (and would be incorrectly rendered on the client).
              // However, we already warn about bad casing elsewhere.
              // So we'll skip the misleading extra mismatch warning in this case.
              isMismatchDueToBadCasing = true; // $FlowFixMe - Should be inferred as not undefined.

              extraAttributeNames.delete(standardName);
            } // $FlowFixMe - Should be inferred as not undefined.


            extraAttributeNames.delete(propKey);
          }

          serverValue = getValueForAttribute(domElement, propKey, nextProp);
        }

        if (nextProp !== serverValue && !isMismatchDueToBadCasing) {
          warnForPropDifference(propKey, serverValue, nextProp);
        }
      }
    }
  }

  {
    // $FlowFixMe - Should be inferred as not undefined.
    if (extraAttributeNames.size > 0 && !suppressHydrationWarning) {
      // $FlowFixMe - Should be inferred as not undefined.
      warnForExtraAttributes(extraAttributeNames);
    }
  }

  switch (tag) {
    case 'input':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper(domElement, rawProps, true);
      break;

    case 'textarea':
      // TODO: Make sure we check if this is still unmounted or do any clean
      // up necessary since we never stop tracking anymore.
      track(domElement);
      postMountWrapper$3(domElement);
      break;

    case 'select':
    case 'option':
      // For input and textarea we current always set the value property at
      // post mount to force it to diverge from attributes. However, for
      // option and select we don't quite do the same thing and select
      // is not resilient to the DOM state changing so we don't do that here.
      // TODO: Consider not doing this for input and textarea.
      break;

    default:
      if (typeof rawProps.onClick === 'function') {
        // TODO: This cast may not be sound for SVG, MathML or custom elements.
        trapClickOnNonInteractiveElement(domElement);
      }

      break;
  }

  return updatePayload;
}
function diffHydratedText(textNode, text) {
  var isDifferent = textNode.nodeValue !== text;
  return isDifferent;
}
function warnForUnmatchedText(textNode, text) {
  {
    warnForTextDifference(textNode.nodeValue, text);
  }
}
function warnForDeletedHydratableElement(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain a <%s> in <%s>.', child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
  }
}
function warnForDeletedHydratableText(parentNode, child) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedElement(parentNode, tag, props) {
  {
    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching <%s> in <%s>.', tag, parentNode.nodeName.toLowerCase());
  }
}
function warnForInsertedHydratedText(parentNode, text) {
  {
    if (text === '') {
      // We expect to insert empty text nodes since they're not represented in
      // the HTML.
      // TODO: Remove this special case if we can just avoid inserting empty
      // text nodes.
      return;
    }

    if (didWarnInvalidHydration) {
      return;
    }

    didWarnInvalidHydration = true;

    error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
  }
}
function restoreControlledState$3(domElement, tag, props) {
  switch (tag) {
    case 'input':
      restoreControlledState(domElement, props);
      return;

    case 'textarea':
      restoreControlledState$2(domElement, props);
      return;

    case 'select':
      restoreControlledState$1(domElement, props);
      return;
  }
}

function getActiveElement(doc) {
  doc = doc || (typeof document !== 'undefined' ? document : undefined);

  if (typeof doc === 'undefined') {
    return null;
  }

  try {
    return doc.activeElement || doc.body;
  } catch (e) {
    return doc.body;
  }
}

/**
 * Given any node return the first leaf node without children.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {DOMElement|DOMTextNode}
 */

function getLeafNode(node) {
  while (node && node.firstChild) {
    node = node.firstChild;
  }

  return node;
}
/**
 * Get the next sibling within a container. This will walk up the
 * DOM if a node's siblings have been exhausted.
 *
 * @param {DOMElement|DOMTextNode} node
 * @return {?DOMElement|DOMTextNode}
 */


function getSiblingNode(node) {
  while (node) {
    if (node.nextSibling) {
      return node.nextSibling;
    }

    node = node.parentNode;
  }
}
/**
 * Get object describing the nodes which contain characters at offset.
 *
 * @param {DOMElement|DOMTextNode} root
 * @param {number} offset
 * @return {?object}
 */


function getNodeForCharacterOffset(root, offset) {
  var node = getLeafNode(root);
  var nodeStart = 0;
  var nodeEnd = 0;

  while (node) {
    if (node.nodeType === TEXT_NODE) {
      nodeEnd = nodeStart + node.textContent.length;

      if (nodeStart <= offset && nodeEnd >= offset) {
        return {
          node: node,
          offset: offset - nodeStart
        };
      }

      nodeStart = nodeEnd;
    }

    node = getLeafNode(getSiblingNode(node));
  }
}

/**
 * @param {DOMElement} outerNode
 * @return {?object}
 */

function getOffsets(outerNode) {
  var ownerDocument = outerNode.ownerDocument;
  var win = ownerDocument && ownerDocument.defaultView || window;
  var selection = win.getSelection && win.getSelection();

  if (!selection || selection.rangeCount === 0) {
    return null;
  }

  var anchorNode = selection.anchorNode,
      anchorOffset = selection.anchorOffset,
      focusNode = selection.focusNode,
      focusOffset = selection.focusOffset; // In Firefox, anchorNode and focusNode can be "anonymous divs", e.g. the
  // up/down buttons on an <input type="number">. Anonymous divs do not seem to
  // expose properties, triggering a "Permission denied error" if any of its
  // properties are accessed. The only seemingly possible way to avoid erroring
  // is to access a property that typically works for non-anonymous divs and
  // catch any error that may otherwise arise. See
  // https://bugzilla.mozilla.org/show_bug.cgi?id=208427

  try {
    /* eslint-disable no-unused-expressions */
    anchorNode.nodeType;
    focusNode.nodeType;
    /* eslint-enable no-unused-expressions */
  } catch (e) {
    return null;
  }

  return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
}
/**
 * Returns {start, end} where `start` is the character/codepoint index of
 * (anchorNode, anchorOffset) within the textContent of `outerNode`, and
 * `end` is the index of (focusNode, focusOffset).
 *
 * Returns null if you pass in garbage input but we should probably just crash.
 *
 * Exported only for testing.
 */

function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
  var length = 0;
  var start = -1;
  var end = -1;
  var indexWithinAnchor = 0;
  var indexWithinFocus = 0;
  var node = outerNode;
  var parentNode = null;

  outer: while (true) {
    var next = null;

    while (true) {
      if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
        start = length + anchorOffset;
      }

      if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
        end = length + focusOffset;
      }

      if (node.nodeType === TEXT_NODE) {
        length += node.nodeValue.length;
      }

      if ((next = node.firstChild) === null) {
        break;
      } // Moving from `node` to its first child `next`.


      parentNode = node;
      node = next;
    }

    while (true) {
      if (node === outerNode) {
        // If `outerNode` has children, this is always the second time visiting
        // it. If it has no children, this is still the first loop, and the only
        // valid selection is anchorNode and focusNode both equal to this node
        // and both offsets 0, in which case we will have handled above.
        break outer;
      }

      if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
        start = length;
      }

      if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
        end = length;
      }

      if ((next = node.nextSibling) !== null) {
        break;
      }

      node = parentNode;
      parentNode = node.parentNode;
    } // Moving from `node` to its next sibling `next`.


    node = next;
  }

  if (start === -1 || end === -1) {
    // This should never happen. (Would happen if the anchor/focus nodes aren't
    // actually inside the passed-in node.)
    return null;
  }

  return {
    start: start,
    end: end
  };
}
/**
 * In modern non-IE browsers, we can support both forward and backward
 * selections.
 *
 * Note: IE10+ supports the Selection object, but it does not support
 * the `extend` method, which means that even in modern IE, it's not possible
 * to programmatically create a backward selection. Thus, for all IE
 * versions, we use the old IE API to create our selections.
 *
 * @param {DOMElement|DOMTextNode} node
 * @param {object} offsets
 */

function setOffsets(node, offsets) {
  var doc = node.ownerDocument || document;
  var win = doc && doc.defaultView || window; // Edge fails with "Object expected" in some scenarios.
  // (For instance: TinyMCE editor used in a list component that supports pasting to add more,
  // fails when pasting 100+ items)

  if (!win.getSelection) {
    return;
  }

  var selection = win.getSelection();
  var length = node.textContent.length;
  var start = Math.min(offsets.start, length);
  var end = offsets.end === undefined ? start : Math.min(offsets.end, length); // IE 11 uses modern selection, but doesn't support the extend method.
  // Flip backward selections, so we can set with a single range.

  if (!selection.extend && start > end) {
    var temp = end;
    end = start;
    start = temp;
  }

  var startMarker = getNodeForCharacterOffset(node, start);
  var endMarker = getNodeForCharacterOffset(node, end);

  if (startMarker && endMarker) {
    if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
      return;
    }

    var range = doc.createRange();
    range.setStart(startMarker.node, startMarker.offset);
    selection.removeAllRanges();

    if (start > end) {
      selection.addRange(range);
      selection.extend(endMarker.node, endMarker.offset);
    } else {
      range.setEnd(endMarker.node, endMarker.offset);
      selection.addRange(range);
    }
  }
}

function isTextNode(node) {
  return node && node.nodeType === TEXT_NODE;
}

function containsNode(outerNode, innerNode) {
  if (!outerNode || !innerNode) {
    return false;
  } else if (outerNode === innerNode) {
    return true;
  } else if (isTextNode(outerNode)) {
    return false;
  } else if (isTextNode(innerNode)) {
    return containsNode(outerNode, innerNode.parentNode);
  } else if ('contains' in outerNode) {
    return outerNode.contains(innerNode);
  } else if (outerNode.compareDocumentPosition) {
    return !!(outerNode.compareDocumentPosition(innerNode) & 16);
  } else {
    return false;
  }
}

function isInDocument(node) {
  return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
}

function isSameOriginFrame(iframe) {
  try {
    // Accessing the contentDocument of a HTMLIframeElement can cause the browser
    // to throw, e.g. if it has a cross-origin src attribute.
    // Safari will show an error in the console when the access results in "Blocked a frame with origin". e.g:
    // iframe.contentDocument.defaultView;
    // A safety way is to access one of the cross origin properties: Window or Location
    // Which might result in "SecurityError" DOM Exception and it is compatible to Safari.
    // https://html.spec.whatwg.org/multipage/browsers.html#integration-with-idl
    return typeof iframe.contentWindow.location.href === 'string';
  } catch (err) {
    return false;
  }
}

function getActiveElementDeep() {
  var win = window;
  var element = getActiveElement();

  while (element instanceof win.HTMLIFrameElement) {
    if (isSameOriginFrame(element)) {
      win = element.contentWindow;
    } else {
      return element;
    }

    element = getActiveElement(win.document);
  }

  return element;
}
/**
 * @ReactInputSelection: React input selection module. Based on Selection.js,
 * but modified to be suitable for react and has a couple of bug fixes (doesn't
 * assume buttons have range selections allowed).
 * Input selection module for React.
 */

/**
 * @hasSelectionCapabilities: we get the element types that support selection
 * from https://html.spec.whatwg.org/#do-not-apply, looking at `selectionStart`
 * and `selectionEnd` rows.
 */


function hasSelectionCapabilities(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName && (nodeName === 'input' && (elem.type === 'text' || elem.type === 'search' || elem.type === 'tel' || elem.type === 'url' || elem.type === 'password') || nodeName === 'textarea' || elem.contentEditable === 'true');
}
function getSelectionInformation() {
  var focusedElem = getActiveElementDeep();
  return {
    // Used by Flare
    activeElementDetached: null,
    focusedElem: focusedElem,
    selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
  };
}
/**
 * @restoreSelection: If any selection information was potentially lost,
 * restore it. This is useful when performing operations that could remove dom
 * nodes and place them back in, resulting in focus being lost.
 */

function restoreSelection(priorSelectionInformation) {
  var curFocusedElem = getActiveElementDeep();
  var priorFocusedElem = priorSelectionInformation.focusedElem;
  var priorSelectionRange = priorSelectionInformation.selectionRange;

  if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
    if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
      setSelection(priorFocusedElem, priorSelectionRange);
    } // Focusing a node can change the scroll position, which is undesirable


    var ancestors = [];
    var ancestor = priorFocusedElem;

    while (ancestor = ancestor.parentNode) {
      if (ancestor.nodeType === ELEMENT_NODE) {
        ancestors.push({
          element: ancestor,
          left: ancestor.scrollLeft,
          top: ancestor.scrollTop
        });
      }
    }

    if (typeof priorFocusedElem.focus === 'function') {
      priorFocusedElem.focus();
    }

    for (var i = 0; i < ancestors.length; i++) {
      var info = ancestors[i];
      info.element.scrollLeft = info.left;
      info.element.scrollTop = info.top;
    }
  }
}
/**
 * @getSelection: Gets the selection bounds of a focused textarea, input or
 * contentEditable node.
 * -@input: Look up selection bounds of this input
 * -@return {start: selectionStart, end: selectionEnd}
 */

function getSelection(input) {
  var selection;

  if ('selectionStart' in input) {
    // Modern browser with input or textarea.
    selection = {
      start: input.selectionStart,
      end: input.selectionEnd
    };
  } else {
    // Content editable or old IE textarea.
    selection = getOffsets(input);
  }

  return selection || {
    start: 0,
    end: 0
  };
}
/**
 * @setSelection: Sets the selection bounds of a textarea or input and focuses
 * the input.
 * -@input     Set selection bounds of this input or textarea
 * -@offsets   Object of same form that is returned from get*
 */

function setSelection(input, offsets) {
  var start = offsets.start,
      end = offsets.end;

  if (end === undefined) {
    end = start;
  }

  if ('selectionStart' in input) {
    input.selectionStart = start;
    input.selectionEnd = Math.min(end, input.value.length);
  } else {
    setOffsets(input, offsets);
  }
}

var validateDOMNesting = function () {};

var updatedAncestorInfo = function () {};

{
  // This validation code was written based on the HTML5 parsing spec:
  // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope
  //
  // Note: this does not catch all invalid nesting, nor does it try to (as it's
  // not clear what practical benefit doing so provides); instead, we warn only
  // for cases where the parser will give a parse tree differing from what React
  // intended. For example, <b><div></div></b> is invalid but we don't warn
  // because it still parses correctly; we do warn for other cases like nested
  // <p> tags where the beginning of the second element implicitly closes the
  // first, causing a confusing mess.
  // https://html.spec.whatwg.org/multipage/syntax.html#special
  var specialTags = ['address', 'applet', 'area', 'article', 'aside', 'base', 'basefont', 'bgsound', 'blockquote', 'body', 'br', 'button', 'caption', 'center', 'col', 'colgroup', 'dd', 'details', 'dir', 'div', 'dl', 'dt', 'embed', 'fieldset', 'figcaption', 'figure', 'footer', 'form', 'frame', 'frameset', 'h1', 'h2', 'h3', 'h4', 'h5', 'h6', 'head', 'header', 'hgroup', 'hr', 'html', 'iframe', 'img', 'input', 'isindex', 'li', 'link', 'listing', 'main', 'marquee', 'menu', 'menuitem', 'meta', 'nav', 'noembed', 'noframes', 'noscript', 'object', 'ol', 'p', 'param', 'plaintext', 'pre', 'script', 'section', 'select', 'source', 'style', 'summary', 'table', 'tbody', 'td', 'template', 'textarea', 'tfoot', 'th', 'thead', 'title', 'tr', 'track', 'ul', 'wbr', 'xmp']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-scope

  var inScopeTags = ['applet', 'caption', 'html', 'table', 'td', 'th', 'marquee', 'object', 'template', // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
  // TODO: Distinguish by namespace here -- for <title>, including it here
  // errs on the side of fewer warnings
  'foreignObject', 'desc', 'title']; // https://html.spec.whatwg.org/multipage/syntax.html#has-an-element-in-button-scope

  var buttonScopeTags = inScopeTags.concat(['button']); // https://html.spec.whatwg.org/multipage/syntax.html#generate-implied-end-tags

  var impliedEndTags = ['dd', 'dt', 'li', 'option', 'optgroup', 'p', 'rp', 'rt'];
  var emptyAncestorInfo = {
    current: null,
    formTag: null,
    aTagInScope: null,
    buttonTagInScope: null,
    nobrTagInScope: null,
    pTagInButtonScope: null,
    listItemTagAutoclosing: null,
    dlItemTagAutoclosing: null
  };

  updatedAncestorInfo = function (oldInfo, tag) {
    var ancestorInfo = _assign({}, oldInfo || emptyAncestorInfo);

    var info = {
      tag: tag
    };

    if (inScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.aTagInScope = null;
      ancestorInfo.buttonTagInScope = null;
      ancestorInfo.nobrTagInScope = null;
    }

    if (buttonScopeTags.indexOf(tag) !== -1) {
      ancestorInfo.pTagInButtonScope = null;
    } // See rules for 'li', 'dd', 'dt' start tags in
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    if (specialTags.indexOf(tag) !== -1 && tag !== 'address' && tag !== 'div' && tag !== 'p') {
      ancestorInfo.listItemTagAutoclosing = null;
      ancestorInfo.dlItemTagAutoclosing = null;
    }

    ancestorInfo.current = info;

    if (tag === 'form') {
      ancestorInfo.formTag = info;
    }

    if (tag === 'a') {
      ancestorInfo.aTagInScope = info;
    }

    if (tag === 'button') {
      ancestorInfo.buttonTagInScope = info;
    }

    if (tag === 'nobr') {
      ancestorInfo.nobrTagInScope = info;
    }

    if (tag === 'p') {
      ancestorInfo.pTagInButtonScope = info;
    }

    if (tag === 'li') {
      ancestorInfo.listItemTagAutoclosing = info;
    }

    if (tag === 'dd' || tag === 'dt') {
      ancestorInfo.dlItemTagAutoclosing = info;
    }

    return ancestorInfo;
  };
  /**
   * Returns whether
   */


  var isTagValidWithParent = function (tag, parentTag) {
    // First, let's check if we're in an unusual parsing mode...
    switch (parentTag) {
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
      case 'select':
        return tag === 'option' || tag === 'optgroup' || tag === '#text';

      case 'optgroup':
        return tag === 'option' || tag === '#text';
      // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
      // but

      case 'option':
        return tag === '#text';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
      // No special behavior since these rules fall back to "in body" mode for
      // all except special table nodes which cause bad parsing behavior anyway.
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr

      case 'tr':
        return tag === 'th' || tag === 'td' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody

      case 'tbody':
      case 'thead':
      case 'tfoot':
        return tag === 'tr' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup

      case 'colgroup':
        return tag === 'col' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable

      case 'table':
        return tag === 'caption' || tag === 'colgroup' || tag === 'tbody' || tag === 'tfoot' || tag === 'thead' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead

      case 'head':
        return tag === 'base' || tag === 'basefont' || tag === 'bgsound' || tag === 'link' || tag === 'meta' || tag === 'title' || tag === 'noscript' || tag === 'noframes' || tag === 'style' || tag === 'script' || tag === 'template';
      // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element

      case 'html':
        return tag === 'head' || tag === 'body' || tag === 'frameset';

      case 'frameset':
        return tag === 'frame';

      case '#document':
        return tag === 'html';
    } // Probably in the "in body" parsing mode, so we outlaw only tag combos
    // where the parsing rules cause implicit opens or closes to be added.
    // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inbody


    switch (tag) {
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return parentTag !== 'h1' && parentTag !== 'h2' && parentTag !== 'h3' && parentTag !== 'h4' && parentTag !== 'h5' && parentTag !== 'h6';

      case 'rp':
      case 'rt':
        return impliedEndTags.indexOf(parentTag) === -1;

      case 'body':
      case 'caption':
      case 'col':
      case 'colgroup':
      case 'frameset':
      case 'frame':
      case 'head':
      case 'html':
      case 'tbody':
      case 'td':
      case 'tfoot':
      case 'th':
      case 'thead':
      case 'tr':
        // These tags are only valid with a few parents that have special child
        // parsing rules -- if we're down here, then none of those matched and
        // so we allow it only if we don't know what the parent is, as all other
        // cases are invalid.
        return parentTag == null;
    }

    return true;
  };
  /**
   * Returns whether
   */


  var findInvalidAncestorForTag = function (tag, ancestorInfo) {
    switch (tag) {
      case 'address':
      case 'article':
      case 'aside':
      case 'blockquote':
      case 'center':
      case 'details':
      case 'dialog':
      case 'dir':
      case 'div':
      case 'dl':
      case 'fieldset':
      case 'figcaption':
      case 'figure':
      case 'footer':
      case 'header':
      case 'hgroup':
      case 'main':
      case 'menu':
      case 'nav':
      case 'ol':
      case 'p':
      case 'section':
      case 'summary':
      case 'ul':
      case 'pre':
      case 'listing':
      case 'table':
      case 'hr':
      case 'xmp':
      case 'h1':
      case 'h2':
      case 'h3':
      case 'h4':
      case 'h5':
      case 'h6':
        return ancestorInfo.pTagInButtonScope;

      case 'form':
        return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;

      case 'li':
        return ancestorInfo.listItemTagAutoclosing;

      case 'dd':
      case 'dt':
        return ancestorInfo.dlItemTagAutoclosing;

      case 'button':
        return ancestorInfo.buttonTagInScope;

      case 'a':
        // Spec says something about storing a list of markers, but it sounds
        // equivalent to this check.
        return ancestorInfo.aTagInScope;

      case 'nobr':
        return ancestorInfo.nobrTagInScope;
    }

    return null;
  };

  var didWarn$1 = {};

  validateDOMNesting = function (childTag, childText, ancestorInfo) {
    ancestorInfo = ancestorInfo || emptyAncestorInfo;
    var parentInfo = ancestorInfo.current;
    var parentTag = parentInfo && parentInfo.tag;

    if (childText != null) {
      if (childTag != null) {
        error('validateDOMNesting: when childText is passed, childTag should be null');
      }

      childTag = '#text';
    }

    var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
    var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
    var invalidParentOrAncestor = invalidParent || invalidAncestor;

    if (!invalidParentOrAncestor) {
      return;
    }

    var ancestorTag = invalidParentOrAncestor.tag;
    var addendum = getCurrentFiberStackInDev();
    var warnKey = !!invalidParent + '|' + childTag + '|' + ancestorTag + '|' + addendum;

    if (didWarn$1[warnKey]) {
      return;
    }

    didWarn$1[warnKey] = true;
    var tagDisplayName = childTag;
    var whitespaceInfo = '';

    if (childTag === '#text') {
      if (/\S/.test(childText)) {
        tagDisplayName = 'Text nodes';
      } else {
        tagDisplayName = 'Whitespace text nodes';
        whitespaceInfo = " Make sure you don't have any extra whitespace between tags on " + 'each line of your source code.';
      }
    } else {
      tagDisplayName = '<' + childTag + '>';
    }

    if (invalidParent) {
      var info = '';

      if (ancestorTag === 'table' && childTag === 'tr') {
        info += ' Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by ' + 'the browser.';
      }

      error('validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s', tagDisplayName, ancestorTag, whitespaceInfo, info);
    } else {
      error('validateDOMNesting(...): %s cannot appear as a descendant of ' + '<%s>.', tagDisplayName, ancestorTag);
    }
  };
}

var SUPPRESS_HYDRATION_WARNING$1;

{
  SUPPRESS_HYDRATION_WARNING$1 = 'suppressHydrationWarning';
}

var SUSPENSE_START_DATA = '$';
var SUSPENSE_END_DATA = '/$';
var SUSPENSE_PENDING_START_DATA = '$?';
var SUSPENSE_FALLBACK_START_DATA = '$!';
var STYLE$1 = 'style';
var eventsEnabled = null;
var selectionInformation = null;

function shouldAutoFocusHostComponent(type, props) {
  switch (type) {
    case 'button':
    case 'input':
    case 'select':
    case 'textarea':
      return !!props.autoFocus;
  }

  return false;
}
function getRootHostContext(rootContainerInstance) {
  var type;
  var namespace;
  var nodeType = rootContainerInstance.nodeType;

  switch (nodeType) {
    case DOCUMENT_NODE:
    case DOCUMENT_FRAGMENT_NODE:
      {
        type = nodeType === DOCUMENT_NODE ? '#document' : '#fragment';
        var root = rootContainerInstance.documentElement;
        namespace = root ? root.namespaceURI : getChildNamespace(null, '');
        break;
      }

    default:
      {
        var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
        var ownNamespace = container.namespaceURI || null;
        type = container.tagName;
        namespace = getChildNamespace(ownNamespace, type);
        break;
      }
  }

  {
    var validatedTag = type.toLowerCase();
    var ancestorInfo = updatedAncestorInfo(null, validatedTag);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getChildHostContext(parentHostContext, type, rootContainerInstance) {
  {
    var parentHostContextDev = parentHostContext;
    var namespace = getChildNamespace(parentHostContextDev.namespace, type);
    var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
    return {
      namespace: namespace,
      ancestorInfo: ancestorInfo
    };
  }
}
function getPublicInstance(instance) {
  return instance;
}
function prepareForCommit(containerInfo) {
  eventsEnabled = isEnabled();
  selectionInformation = getSelectionInformation();
  setEnabled(false);
}
function resetAfterCommit(containerInfo) {
  restoreSelection(selectionInformation);
  setEnabled(eventsEnabled);
  eventsEnabled = null;

  selectionInformation = null;
}
function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  var parentNamespace;

  {
    // TODO: take namespace into account when validating.
    var hostContextDev = hostContext;
    validateDOMNesting(type, null, hostContextDev.ancestorInfo);

    if (typeof props.children === 'string' || typeof props.children === 'number') {
      var string = '' + props.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }

    parentNamespace = hostContextDev.namespace;
  }

  var domElement = createElement(type, props, rootContainerInstance, parentNamespace);
  precacheFiberNode(internalInstanceHandle, domElement);
  updateFiberProps(domElement, props);
  return domElement;
}
function appendInitialChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
  setInitialProperties(domElement, type, props, rootContainerInstance);
  return shouldAutoFocusHostComponent(type, props);
}
function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
  {
    var hostContextDev = hostContext;

    if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === 'string' || typeof newProps.children === 'number')) {
      var string = '' + newProps.children;
      var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
      validateDOMNesting(null, string, ownAncestorInfo);
    }
  }

  return diffProperties(domElement, type, oldProps, newProps, rootContainerInstance);
}
function shouldSetTextContent(type, props) {
  return type === 'textarea' || type === 'option' || type === 'noscript' || typeof props.children === 'string' || typeof props.children === 'number' || typeof props.dangerouslySetInnerHTML === 'object' && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
}
function shouldDeprioritizeSubtree(type, props) {
  return !!props.hidden;
}
function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
  {
    var hostContextDev = hostContext;
    validateDOMNesting(null, text, hostContextDev.ancestorInfo);
  }

  var textNode = createTextNode(text, rootContainerInstance);
  precacheFiberNode(internalInstanceHandle, textNode);
  return textNode;
}
// if a component just imports ReactDOM (e.g. for findDOMNode).
// Some environments might not have setTimeout or clearTimeout.

var scheduleTimeout = typeof setTimeout === 'function' ? setTimeout : undefined;
var cancelTimeout = typeof clearTimeout === 'function' ? clearTimeout : undefined;
var noTimeout = -1; // -------------------
function commitMount(domElement, type, newProps, internalInstanceHandle) {
  // Despite the naming that might imply otherwise, this method only
  // fires if there is an `Update` effect scheduled during mounting.
  // This happens if `finalizeInitialChildren` returns `true` (which it
  // does to implement the `autoFocus` attribute on the client). But
  // there are also other cases when this might happen (such as patching
  // up text content during hydration mismatch). So we'll check this again.
  if (shouldAutoFocusHostComponent(type, newProps)) {
    domElement.focus();
  }
}
function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
  // Update the props handle so that we know which props are the ones with
  // with current event handlers.
  updateFiberProps(domElement, newProps); // Apply the diff to the DOM node.

  updateProperties(domElement, updatePayload, type, oldProps, newProps);
}
function resetTextContent(domElement) {
  setTextContent(domElement, '');
}
function commitTextUpdate(textInstance, oldText, newText) {
  textInstance.nodeValue = newText;
}
function appendChild(parentInstance, child) {
  parentInstance.appendChild(child);
}
function appendChildToContainer(container, child) {
  var parentNode;

  if (container.nodeType === COMMENT_NODE) {
    parentNode = container.parentNode;
    parentNode.insertBefore(child, container);
  } else {
    parentNode = container;
    parentNode.appendChild(child);
  } // This container might be used for a portal.
  // If something inside a portal is clicked, that click should bubble
  // through the React tree. However, on Mobile Safari the click would
  // never bubble through the *DOM* tree unless an ancestor with onclick
  // event exists. So we wouldn't see it and dispatch it.
  // This is why we ensure that non React root containers have inline onclick
  // defined.
  // https://github.com/facebook/react/issues/11918


  var reactRootContainer = container._reactRootContainer;

  if ((reactRootContainer === null || reactRootContainer === undefined) && parentNode.onclick === null) {
    // TODO: This cast may not be sound for SVG, MathML or custom elements.
    trapClickOnNonInteractiveElement(parentNode);
  }
}
function insertBefore(parentInstance, child, beforeChild) {
  parentInstance.insertBefore(child, beforeChild);
}
function insertInContainerBefore(container, child, beforeChild) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.insertBefore(child, beforeChild);
  } else {
    container.insertBefore(child, beforeChild);
  }
}
function removeChild(parentInstance, child) {
  parentInstance.removeChild(child);
}
function removeChildFromContainer(container, child) {
  if (container.nodeType === COMMENT_NODE) {
    container.parentNode.removeChild(child);
  } else {
    container.removeChild(child);
  }
}

function hideInstance(instance) {
  // pass host context to this method?


  instance = instance;
  var style = instance.style;

  if (typeof style.setProperty === 'function') {
    style.setProperty('display', 'none', 'important');
  } else {
    style.display = 'none';
  }
}
function hideTextInstance(textInstance) {
  textInstance.nodeValue = '';
}
function unhideInstance(instance, props) {
  instance = instance;
  var styleProp = props[STYLE$1];
  var display = styleProp !== undefined && styleProp !== null && styleProp.hasOwnProperty('display') ? styleProp.display : null;
  instance.style.display = dangerousStyleValue('display', display);
}
function unhideTextInstance(textInstance, text) {
  textInstance.nodeValue = text;
} // -------------------
function canHydrateInstance(instance, type, props) {
  if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
    return null;
  } // This has now been refined to an element node.


  return instance;
}
function canHydrateTextInstance(instance, text) {
  if (text === '' || instance.nodeType !== TEXT_NODE) {
    // Empty strings are not parsed by HTML so there won't be a correct match here.
    return null;
  } // This has now been refined to a text node.


  return instance;
}
function isSuspenseInstancePending(instance) {
  return instance.data === SUSPENSE_PENDING_START_DATA;
}
function isSuspenseInstanceFallback(instance) {
  return instance.data === SUSPENSE_FALLBACK_START_DATA;
}

function getNextHydratable(node) {
  // Skip non-hydratable nodes.
  for (; node != null; node = node.nextSibling) {
    var nodeType = node.nodeType;

    if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
      break;
    }
  }

  return node;
}

function getNextHydratableSibling(instance) {
  return getNextHydratable(instance.nextSibling);
}
function getFirstHydratableChild(parentInstance) {
  return getNextHydratable(parentInstance.firstChild);
}
function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, instance); // TODO: Possibly defer this until the commit phase where all the events
  // get attached.

  updateFiberProps(instance, props);
  var parentNamespace;

  {
    var hostContextDev = hostContext;
    parentNamespace = hostContextDev.namespace;
  }

  return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance);
}
function hydrateTextInstance(textInstance, text, internalInstanceHandle) {
  precacheFiberNode(internalInstanceHandle, textInstance);
  return diffHydratedText(textInstance, text);
}
function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
  var node = suspenseInstance.nextSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_END_DATA) {
        if (depth === 0) {
          return getNextHydratableSibling(node);
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        depth++;
      }
    }

    node = node.nextSibling;
  } // TODO: Warn, we didn't find the end comment boundary.


  return null;
} // Returns the SuspenseInstance if this node is a direct child of a
// SuspenseInstance. I.e. if its previous sibling is a Comment with
// SUSPENSE_x_START_DATA. Otherwise, null.

function getParentSuspenseInstance(targetInstance) {
  var node = targetInstance.previousSibling; // Skip past all nodes within this suspense boundary.
  // There might be nested nodes so we need to keep track of how
  // deep we are and only break out when we're back on top.

  var depth = 0;

  while (node) {
    if (node.nodeType === COMMENT_NODE) {
      var data = node.data;

      if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
        if (depth === 0) {
          return node;
        } else {
          depth--;
        }
      } else if (data === SUSPENSE_END_DATA) {
        depth++;
      }
    }

    node = node.previousSibling;
  }

  return null;
}
function commitHydratedContainer(container) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(container);
}
function commitHydratedSuspenseInstance(suspenseInstance) {
  // Retry if any event replaying was blocked on this.
  retryIfBlockedOn(suspenseInstance);
}
function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text) {
  {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForUnmatchedText(textInstance, text);
  }
}
function didNotHydrateContainerInstance(parentContainer, instance) {
  {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentContainer, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentContainer, instance);
    }
  }
}
function didNotHydrateInstance(parentType, parentProps, parentInstance, instance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    if (instance.nodeType === ELEMENT_NODE) {
      warnForDeletedHydratableElement(parentInstance, instance);
    } else if (instance.nodeType === COMMENT_NODE) ; else {
      warnForDeletedHydratableText(parentInstance, instance);
    }
  }
}
function didNotFindHydratableContainerInstance(parentContainer, type, props) {
  {
    warnForInsertedHydratedElement(parentContainer, type);
  }
}
function didNotFindHydratableContainerTextInstance(parentContainer, text) {
  {
    warnForInsertedHydratedText(parentContainer, text);
  }
}
function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedElement(parentInstance, type);
  }
}
function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
    warnForInsertedHydratedText(parentInstance, text);
  }
}
function didNotFindHydratableSuspenseInstance(parentType, parentProps, parentInstance) {
  if ( parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) ;
}

var randomKey = Math.random().toString(36).slice(2);
var internalInstanceKey = '__reactInternalInstance$' + randomKey;
var internalEventHandlersKey = '__reactEventHandlers$' + randomKey;
var internalContainerInstanceKey = '__reactContainere$' + randomKey;
function precacheFiberNode(hostInst, node) {
  node[internalInstanceKey] = hostInst;
}
function markContainerAsRoot(hostRoot, node) {
  node[internalContainerInstanceKey] = hostRoot;
}
function unmarkContainerAsRoot(node) {
  node[internalContainerInstanceKey] = null;
}
function isContainerMarkedAsRoot(node) {
  return !!node[internalContainerInstanceKey];
} // Given a DOM node, return the closest HostComponent or HostText fiber ancestor.
// If the target node is part of a hydrated or not yet rendered subtree, then
// this may also return a SuspenseComponent or HostRoot to indicate that.
// Conceptually the HostRoot fiber is a child of the Container node. So if you
// pass the Container node as the targetNode, you will not actually get the
// HostRoot back. To get to the HostRoot, you need to pass a child of it.
// The same thing applies to Suspense boundaries.

function getClosestInstanceFromNode(targetNode) {
  var targetInst = targetNode[internalInstanceKey];

  if (targetInst) {
    // Don't return HostRoot or SuspenseComponent here.
    return targetInst;
  } // If the direct event target isn't a React owned DOM node, we need to look
  // to see if one of its parents is a React owned DOM node.


  var parentNode = targetNode.parentNode;

  while (parentNode) {
    // We'll check if this is a container root that could include
    // React nodes in the future. We need to check this first because
    // if we're a child of a dehydrated container, we need to first
    // find that inner container before moving on to finding the parent
    // instance. Note that we don't check this field on  the targetNode
    // itself because the fibers are conceptually between the container
    // node and the first child. It isn't surrounding the container node.
    // If it's not a container, we check if it's an instance.
    targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];

    if (targetInst) {
      // Since this wasn't the direct target of the event, we might have
      // stepped past dehydrated DOM nodes to get here. However they could
      // also have been non-React nodes. We need to answer which one.
      // If we the instance doesn't have any children, then there can't be
      // a nested suspense boundary within it. So we can use this as a fast
      // bailout. Most of the time, when people add non-React children to
      // the tree, it is using a ref to a child-less DOM node.
      // Normally we'd only need to check one of the fibers because if it
      // has ever gone from having children to deleting them or vice versa
      // it would have deleted the dehydrated boundary nested inside already.
      // However, since the HostRoot starts out with an alternate it might
      // have one on the alternate so we need to check in case this was a
      // root.
      var alternate = targetInst.alternate;

      if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
        // Next we need to figure out if the node that skipped past is
        // nested within a dehydrated boundary and if so, which one.
        var suspenseInstance = getParentSuspenseInstance(targetNode);

        while (suspenseInstance !== null) {
          // We found a suspense instance. That means that we haven't
          // hydrated it yet. Even though we leave the comments in the
          // DOM after hydrating, and there are boundaries in the DOM
          // that could already be hydrated, we wouldn't have found them
          // through this pass since if the target is hydrated it would
          // have had an internalInstanceKey on it.
          // Let's get the fiber associated with the SuspenseComponent
          // as the deepest instance.
          var targetSuspenseInst = suspenseInstance[internalInstanceKey];

          if (targetSuspenseInst) {
            return targetSuspenseInst;
          } // If we don't find a Fiber on the comment, it might be because
          // we haven't gotten to hydrate it yet. There might still be a
          // parent boundary that hasn't above this one so we need to find
          // the outer most that is known.


          suspenseInstance = getParentSuspenseInstance(suspenseInstance); // If we don't find one, then that should mean that the parent
          // host component also hasn't hydrated yet. We can return it
          // below since it will bail out on the isMounted check later.
        }
      }

      return targetInst;
    }

    targetNode = parentNode;
    parentNode = targetNode.parentNode;
  }

  return null;
}
/**
 * Given a DOM node, return the ReactDOMComponent or ReactDOMTextComponent
 * instance, or null if the node was not rendered by this React.
 */

function getInstanceFromNode$1(node) {
  var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];

  if (inst) {
    if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
      return inst;
    } else {
      return null;
    }
  }

  return null;
}
/**
 * Given a ReactDOMComponent or ReactDOMTextComponent, return the corresponding
 * DOM node.
 */

function getNodeFromInstance$1(inst) {
  if (inst.tag === HostComponent || inst.tag === HostText) {
    // In Fiber this, is just the state node right now. We assume it will be
    // a host component or host text.
    return inst.stateNode;
  } // Without this first invariant, passing a non-DOM-component triggers the next
  // invariant for a missing parent, which is super confusing.


  {
    {
      throw Error( "getNodeFromInstance: Invalid argument." );
    }
  }
}
function getFiberCurrentPropsFromNode$1(node) {
  return node[internalEventHandlersKey] || null;
}
function updateFiberProps(node, props) {
  node[internalEventHandlersKey] = props;
}

function getParent(inst) {
  do {
    inst = inst.return; // TODO: If this is a HostRoot we might want to bail out.
    // That is depending on if we want nested subtrees (layers) to bubble
    // events to their parent. We could also go through parentNode on the
    // host node but that wouldn't work for React Native and doesn't let us
    // do the portal feature.
  } while (inst && inst.tag !== HostComponent);

  if (inst) {
    return inst;
  }

  return null;
}
/**
 * Return the lowest common ancestor of A and B, or null if they are in
 * different trees.
 */


function getLowestCommonAncestor(instA, instB) {
  var depthA = 0;

  for (var tempA = instA; tempA; tempA = getParent(tempA)) {
    depthA++;
  }

  var depthB = 0;

  for (var tempB = instB; tempB; tempB = getParent(tempB)) {
    depthB++;
  } // If A is deeper, crawl up.


  while (depthA - depthB > 0) {
    instA = getParent(instA);
    depthA--;
  } // If B is deeper, crawl up.


  while (depthB - depthA > 0) {
    instB = getParent(instB);
    depthB--;
  } // Walk in lockstep until we find a match.


  var depth = depthA;

  while (depth--) {
    if (instA === instB || instA === instB.alternate) {
      return instA;
    }

    instA = getParent(instA);
    instB = getParent(instB);
  }

  return null;
}
/**
 * Simulates the traversal of a two-phase, capture/bubble event dispatch.
 */

function traverseTwoPhase(inst, fn, arg) {
  var path = [];

  while (inst) {
    path.push(inst);
    inst = getParent(inst);
  }

  var i;

  for (i = path.length; i-- > 0;) {
    fn(path[i], 'captured', arg);
  }

  for (i = 0; i < path.length; i++) {
    fn(path[i], 'bubbled', arg);
  }
}
/**
 * Traverses the ID hierarchy and invokes the supplied `cb` on any IDs that
 * should would receive a `mouseEnter` or `mouseLeave` event.
 *
 * Does not invoke the callback on the nearest common ancestor because nothing
 * "entered" or "left" that element.
 */

function traverseEnterLeave(from, to, fn, argFrom, argTo) {
  var common = from && to ? getLowestCommonAncestor(from, to) : null;
  var pathFrom = [];

  while (true) {
    if (!from) {
      break;
    }

    if (from === common) {
      break;
    }

    var alternate = from.alternate;

    if (alternate !== null && alternate === common) {
      break;
    }

    pathFrom.push(from);
    from = getParent(from);
  }

  var pathTo = [];

  while (true) {
    if (!to) {
      break;
    }

    if (to === common) {
      break;
    }

    var _alternate = to.alternate;

    if (_alternate !== null && _alternate === common) {
      break;
    }

    pathTo.push(to);
    to = getParent(to);
  }

  for (var i = 0; i < pathFrom.length; i++) {
    fn(pathFrom[i], 'bubbled', argFrom);
  }

  for (var _i = pathTo.length; _i-- > 0;) {
    fn(pathTo[_i], 'captured', argTo);
  }
}

function isInteractive(tag) {
  return tag === 'button' || tag === 'input' || tag === 'select' || tag === 'textarea';
}

function shouldPreventMouseEvent(name, type, props) {
  switch (name) {
    case 'onClick':
    case 'onClickCapture':
    case 'onDoubleClick':
    case 'onDoubleClickCapture':
    case 'onMouseDown':
    case 'onMouseDownCapture':
    case 'onMouseMove':
    case 'onMouseMoveCapture':
    case 'onMouseUp':
    case 'onMouseUpCapture':
    case 'onMouseEnter':
      return !!(props.disabled && isInteractive(type));

    default:
      return false;
  }
}
/**
 * @param {object} inst The instance, which is the source of events.
 * @param {string} registrationName Name of listener (e.g. `onClick`).
 * @return {?function} The stored callback.
 */


function getListener(inst, registrationName) {
  var listener; // TODO: shouldPreventMouseEvent is DOM-specific and definitely should not
  // live here; needs to be moved to a better place soon

  var stateNode = inst.stateNode;

  if (!stateNode) {
    // Work in progress (ex: onload events in incremental mode).
    return null;
  }

  var props = getFiberCurrentPropsFromNode(stateNode);

  if (!props) {
    // Work in progress.
    return null;
  }

  listener = props[registrationName];

  if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
    return null;
  }

  if (!(!listener || typeof listener === 'function')) {
    {
      throw Error( "Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type." );
    }
  }

  return listener;
}

/**
 * Some event types have a notion of different registration names for different
 * "phases" of propagation. This finds listeners by a given phase.
 */
function listenerAtPhase(inst, event, propagationPhase) {
  var registrationName = event.dispatchConfig.phasedRegistrationNames[propagationPhase];
  return getListener(inst, registrationName);
}
/**
 * A small set of propagation patterns, each of which will accept a small amount
 * of information, and generate a set of "dispatch ready event objects" - which
 * are sets of events that have already been annotated with a set of dispatched
 * listener functions/ids. The API is designed this way to discourage these
 * propagation strategies from actually executing the dispatches, since we
 * always want to collect the entire set of dispatches before executing even a
 * single one.
 */

/**
 * Tags a `SyntheticEvent` with dispatched listeners. Creating this function
 * here, allows us to not have to bind or create functions for each event.
 * Mutating the event's members allows us to not have to create a wrapping
 * "dispatch" object that pairs the event with the listener.
 */


function accumulateDirectionalDispatches(inst, phase, event) {
  {
    if (!inst) {
      error('Dispatching inst must not be null');
    }
  }

  var listener = listenerAtPhase(inst, event, phase);

  if (listener) {
    event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
    event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
  }
}
/**
 * Collect dispatches (must be entirely collected before dispatching - see unit
 * tests). Lazily allocate the array to conserve memory.  We must loop through
 * each event and perform the traversal for each one. We cannot perform a
 * single traversal for the entire collection of events because each event may
 * have a different target.
 */


function accumulateTwoPhaseDispatchesSingle(event) {
  if (event && event.dispatchConfig.phasedRegistrationNames) {
    traverseTwoPhase(event._targetInst, accumulateDirectionalDispatches, event);
  }
}
/**
 * Accumulates without regard to direction, does not look for phased
 * registration names. Same as `accumulateDirectDispatchesSingle` but without
 * requiring that the `dispatchMarker` be the same as the dispatched ID.
 */


function accumulateDispatches(inst, ignoredDirection, event) {
  if (inst && event && event.dispatchConfig.registrationName) {
    var registrationName = event.dispatchConfig.registrationName;
    var listener = getListener(inst, registrationName);

    if (listener) {
      event._dispatchListeners = accumulateInto(event._dispatchListeners, listener);
      event._dispatchInstances = accumulateInto(event._dispatchInstances, inst);
    }
  }
}
/**
 * Accumulates dispatches on an `SyntheticEvent`, but only for the
 * `dispatchMarker`.
 * @param {SyntheticEvent} event
 */


function accumulateDirectDispatchesSingle(event) {
  if (event && event.dispatchConfig.registrationName) {
    accumulateDispatches(event._targetInst, null, event);
  }
}

function accumulateTwoPhaseDispatches(events) {
  forEachAccumulated(events, accumulateTwoPhaseDispatchesSingle);
}
function accumulateEnterLeaveDispatches(leave, enter, from, to) {
  traverseEnterLeave(from, to, accumulateDispatches, leave, enter);
}
function accumulateDirectDispatches(events) {
  forEachAccumulated(events, accumulateDirectDispatchesSingle);
}

/**
 * These variables store information about text content of a target node,
 * allowing comparison of content before and after a given event.
 *
 * Identify the node where selection currently begins, then observe
 * both its text content and its current position in the DOM. Since the
 * browser may natively replace the target node during composition, we can
 * use its position to find its replacement.
 *
 *
 */
var root = null;
var startText = null;
var fallbackText = null;
function initialize(nativeEventTarget) {
  root = nativeEventTarget;
  startText = getText();
  return true;
}
function reset() {
  root = null;
  startText = null;
  fallbackText = null;
}
function getData() {
  if (fallbackText) {
    return fallbackText;
  }

  var start;
  var startValue = startText;
  var startLength = startValue.length;
  var end;
  var endValue = getText();
  var endLength = endValue.length;

  for (start = 0; start < startLength; start++) {
    if (startValue[start] !== endValue[start]) {
      break;
    }
  }

  var minEnd = startLength - start;

  for (end = 1; end <= minEnd; end++) {
    if (startValue[startLength - end] !== endValue[endLength - end]) {
      break;
    }
  }

  var sliceTail = end > 1 ? 1 - end : undefined;
  fallbackText = endValue.slice(start, sliceTail);
  return fallbackText;
}
function getText() {
  if ('value' in root) {
    return root.value;
  }

  return root.textContent;
}

var EVENT_POOL_SIZE = 10;
/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var EventInterface = {
  type: null,
  target: null,
  // currentTarget is set when dispatching; no use in copying it here
  currentTarget: function () {
    return null;
  },
  eventPhase: null,
  bubbles: null,
  cancelable: null,
  timeStamp: function (event) {
    return event.timeStamp || Date.now();
  },
  defaultPrevented: null,
  isTrusted: null
};

function functionThatReturnsTrue() {
  return true;
}

function functionThatReturnsFalse() {
  return false;
}
/**
 * Synthetic events are dispatched by event plugins, typically in response to a
 * top-level event delegation handler.
 *
 * These systems should generally use pooling to reduce the frequency of garbage
 * collection. The system should check `isPersistent` to determine whether the
 * event should be released into the pool after being dispatched. Users that
 * need a persisted event should invoke `persist`.
 *
 * Synthetic events (and subclasses) implement the DOM Level 3 Events API by
 * normalizing browser quirks. Subclasses do not necessarily have to implement a
 * DOM interface; custom application-specific events can also subclass this.
 *
 * @param {object} dispatchConfig Configuration used to dispatch this event.
 * @param {*} targetInst Marker identifying the event target.
 * @param {object} nativeEvent Native browser event.
 * @param {DOMEventTarget} nativeEventTarget Target node.
 */


function SyntheticEvent(dispatchConfig, targetInst, nativeEvent, nativeEventTarget) {
  {
    // these have a getter/setter for warnings
    delete this.nativeEvent;
    delete this.preventDefault;
    delete this.stopPropagation;
    delete this.isDefaultPrevented;
    delete this.isPropagationStopped;
  }

  this.dispatchConfig = dispatchConfig;
  this._targetInst = targetInst;
  this.nativeEvent = nativeEvent;
  var Interface = this.constructor.Interface;

  for (var propName in Interface) {
    if (!Interface.hasOwnProperty(propName)) {
      continue;
    }

    {
      delete this[propName]; // this has a getter/setter for warnings
    }

    var normalize = Interface[propName];

    if (normalize) {
      this[propName] = normalize(nativeEvent);
    } else {
      if (propName === 'target') {
        this.target = nativeEventTarget;
      } else {
        this[propName] = nativeEvent[propName];
      }
    }
  }

  var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;

  if (defaultPrevented) {
    this.isDefaultPrevented = functionThatReturnsTrue;
  } else {
    this.isDefaultPrevented = functionThatReturnsFalse;
  }

  this.isPropagationStopped = functionThatReturnsFalse;
  return this;
}

_assign(SyntheticEvent.prototype, {
  preventDefault: function () {
    this.defaultPrevented = true;
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.preventDefault) {
      event.preventDefault();
    } else if (typeof event.returnValue !== 'unknown') {
      event.returnValue = false;
    }

    this.isDefaultPrevented = functionThatReturnsTrue;
  },
  stopPropagation: function () {
    var event = this.nativeEvent;

    if (!event) {
      return;
    }

    if (event.stopPropagation) {
      event.stopPropagation();
    } else if (typeof event.cancelBubble !== 'unknown') {
      // The ChangeEventPlugin registers a "propertychange" event for
      // IE. This event does not support bubbling or cancelling, and
      // any references to cancelBubble throw "Member not found".  A
      // typeof check of "unknown" circumvents this issue (and is also
      // IE specific).
      event.cancelBubble = true;
    }

    this.isPropagationStopped = functionThatReturnsTrue;
  },

  /**
   * We release all dispatched `SyntheticEvent`s after each event loop, adding
   * them back into the pool. This allows a way to hold onto a reference that
   * won't be added back into the pool.
   */
  persist: function () {
    this.isPersistent = functionThatReturnsTrue;
  },

  /**
   * Checks if this event should be released back into the pool.
   *
   * @return {boolean} True if this should not be released, false otherwise.
   */
  isPersistent: functionThatReturnsFalse,

  /**
   * `PooledClass` looks for `destructor` on each instance it releases.
   */
  destructor: function () {
    var Interface = this.constructor.Interface;

    for (var propName in Interface) {
      {
        Object.defineProperty(this, propName, getPooledWarningPropertyDefinition(propName, Interface[propName]));
      }
    }

    this.dispatchConfig = null;
    this._targetInst = null;
    this.nativeEvent = null;
    this.isDefaultPrevented = functionThatReturnsFalse;
    this.isPropagationStopped = functionThatReturnsFalse;
    this._dispatchListeners = null;
    this._dispatchInstances = null;

    {
      Object.defineProperty(this, 'nativeEvent', getPooledWarningPropertyDefinition('nativeEvent', null));
      Object.defineProperty(this, 'isDefaultPrevented', getPooledWarningPropertyDefinition('isDefaultPrevented', functionThatReturnsFalse));
      Object.defineProperty(this, 'isPropagationStopped', getPooledWarningPropertyDefinition('isPropagationStopped', functionThatReturnsFalse));
      Object.defineProperty(this, 'preventDefault', getPooledWarningPropertyDefinition('preventDefault', function () {}));
      Object.defineProperty(this, 'stopPropagation', getPooledWarningPropertyDefinition('stopPropagation', function () {}));
    }
  }
});

SyntheticEvent.Interface = EventInterface;
/**
 * Helper to reduce boilerplate when creating subclasses.
 */

SyntheticEvent.extend = function (Interface) {
  var Super = this;

  var E = function () {};

  E.prototype = Super.prototype;
  var prototype = new E();

  function Class() {
    return Super.apply(this, arguments);
  }

  _assign(prototype, Class.prototype);

  Class.prototype = prototype;
  Class.prototype.constructor = Class;
  Class.Interface = _assign({}, Super.Interface, Interface);
  Class.extend = Super.extend;
  addEventPoolingTo(Class);
  return Class;
};

addEventPoolingTo(SyntheticEvent);
/**
 * Helper to nullify syntheticEvent instance properties when destructing
 *
 * @param {String} propName
 * @param {?object} getVal
 * @return {object} defineProperty object
 */

function getPooledWarningPropertyDefinition(propName, getVal) {
  var isFunction = typeof getVal === 'function';
  return {
    configurable: true,
    set: set,
    get: get
  };

  function set(val) {
    var action = isFunction ? 'setting the method' : 'setting the property';
    warn(action, 'This is effectively a no-op');
    return val;
  }

  function get() {
    var action = isFunction ? 'accessing the method' : 'accessing the property';
    var result = isFunction ? 'This is a no-op function' : 'This is set to null';
    warn(action, result);
    return getVal;
  }

  function warn(action, result) {
    {
      error("This synthetic event is reused for performance reasons. If you're seeing this, " + "you're %s `%s` on a released/nullified synthetic event. %s. " + 'If you must keep the original synthetic event around, use event.persist(). ' + 'See https://fb.me/react-event-pooling for more information.', action, propName, result);
    }
  }
}

function getPooledEvent(dispatchConfig, targetInst, nativeEvent, nativeInst) {
  var EventConstructor = this;

  if (EventConstructor.eventPool.length) {
    var instance = EventConstructor.eventPool.pop();
    EventConstructor.call(instance, dispatchConfig, targetInst, nativeEvent, nativeInst);
    return instance;
  }

  return new EventConstructor(dispatchConfig, targetInst, nativeEvent, nativeInst);
}

function releasePooledEvent(event) {
  var EventConstructor = this;

  if (!(event instanceof EventConstructor)) {
    {
      throw Error( "Trying to release an event instance into a pool of a different type." );
    }
  }

  event.destructor();

  if (EventConstructor.eventPool.length < EVENT_POOL_SIZE) {
    EventConstructor.eventPool.push(event);
  }
}

function addEventPoolingTo(EventConstructor) {
  EventConstructor.eventPool = [];
  EventConstructor.getPooled = getPooledEvent;
  EventConstructor.release = releasePooledEvent;
}

/**
 * @interface Event
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#events-compositionevents
 */

var SyntheticCompositionEvent = SyntheticEvent.extend({
  data: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105
 *      /#events-inputevents
 */

var SyntheticInputEvent = SyntheticEvent.extend({
  data: null
});

var END_KEYCODES = [9, 13, 27, 32]; // Tab, Return, Esc, Space

var START_KEYCODE = 229;
var canUseCompositionEvent = canUseDOM && 'CompositionEvent' in window;
var documentMode = null;

if (canUseDOM && 'documentMode' in document) {
  documentMode = document.documentMode;
} // Webkit offers a very useful `textInput` event that can be used to
// directly represent `beforeInput`. The IE `textinput` event is not as
// useful, so we don't use it.


var canUseTextInputEvent = canUseDOM && 'TextEvent' in window && !documentMode; // In IE9+, we have access to composition events, but the data supplied
// by the native compositionend event may be incorrect. Japanese ideographic
// spaces, for instance (\u3000) are not recorded correctly.

var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
var SPACEBAR_CODE = 32;
var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE); // Events and their corresponding property names.

var eventTypes = {
  beforeInput: {
    phasedRegistrationNames: {
      bubbled: 'onBeforeInput',
      captured: 'onBeforeInputCapture'
    },
    dependencies: [TOP_COMPOSITION_END, TOP_KEY_PRESS, TOP_TEXT_INPUT, TOP_PASTE]
  },
  compositionEnd: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionEnd',
      captured: 'onCompositionEndCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_END, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionStart: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionStart',
      captured: 'onCompositionStartCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_START, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  },
  compositionUpdate: {
    phasedRegistrationNames: {
      bubbled: 'onCompositionUpdate',
      captured: 'onCompositionUpdateCapture'
    },
    dependencies: [TOP_BLUR, TOP_COMPOSITION_UPDATE, TOP_KEY_DOWN, TOP_KEY_PRESS, TOP_KEY_UP, TOP_MOUSE_DOWN]
  }
}; // Track whether we've ever handled a keypress on the space key.

var hasSpaceKeypress = false;
/**
 * Return whether a native keypress event is assumed to be a command.
 * This is required because Firefox fires `keypress` events for key commands
 * (cut, copy, select-all, etc.) even though no character is inserted.
 */

function isKeypressCommand(nativeEvent) {
  return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
  !(nativeEvent.ctrlKey && nativeEvent.altKey);
}
/**
 * Translate native top level events into event types.
 *
 * @param {string} topLevelType
 * @return {object}
 */


function getCompositionEventType(topLevelType) {
  switch (topLevelType) {
    case TOP_COMPOSITION_START:
      return eventTypes.compositionStart;

    case TOP_COMPOSITION_END:
      return eventTypes.compositionEnd;

    case TOP_COMPOSITION_UPDATE:
      return eventTypes.compositionUpdate;
  }
}
/**
 * Does our fallback best-guess model think this event signifies that
 * composition has begun?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionStart(topLevelType, nativeEvent) {
  return topLevelType === TOP_KEY_DOWN && nativeEvent.keyCode === START_KEYCODE;
}
/**
 * Does our fallback mode think that this event is the end of composition?
 *
 * @param {string} topLevelType
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isFallbackCompositionEnd(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_KEY_UP:
      // Command keys insert or clear IME input.
      return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;

    case TOP_KEY_DOWN:
      // Expect IME keyCode on each keydown. If we get any other
      // code we must have exited earlier.
      return nativeEvent.keyCode !== START_KEYCODE;

    case TOP_KEY_PRESS:
    case TOP_MOUSE_DOWN:
    case TOP_BLUR:
      // Events are not possible without cancelling IME.
      return true;

    default:
      return false;
  }
}
/**
 * Google Input Tools provides composition data via a CustomEvent,
 * with the `data` property populated in the `detail` object. If this
 * is available on the event object, use it. If not, this is a plain
 * composition event and we have nothing special to extract.
 *
 * @param {object} nativeEvent
 * @return {?string}
 */


function getDataFromCustomEvent(nativeEvent) {
  var detail = nativeEvent.detail;

  if (typeof detail === 'object' && 'data' in detail) {
    return detail.data;
  }

  return null;
}
/**
 * Check if a composition event was triggered by Korean IME.
 * Our fallback mode does not work well with IE's Korean IME,
 * so just use native composition events when Korean IME is used.
 * Although CompositionEvent.locale property is deprecated,
 * it is available in IE, where our fallback mode is enabled.
 *
 * @param {object} nativeEvent
 * @return {boolean}
 */


function isUsingKoreanIME(nativeEvent) {
  return nativeEvent.locale === 'ko';
} // Track the current IME composition status, if any.


var isComposing = false;
/**
 * @return {?object} A SyntheticCompositionEvent.
 */

function extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var eventType;
  var fallbackData;

  if (canUseCompositionEvent) {
    eventType = getCompositionEventType(topLevelType);
  } else if (!isComposing) {
    if (isFallbackCompositionStart(topLevelType, nativeEvent)) {
      eventType = eventTypes.compositionStart;
    }
  } else if (isFallbackCompositionEnd(topLevelType, nativeEvent)) {
    eventType = eventTypes.compositionEnd;
  }

  if (!eventType) {
    return null;
  }

  if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
    // The current composition is stored statically and must not be
    // overwritten while composition continues.
    if (!isComposing && eventType === eventTypes.compositionStart) {
      isComposing = initialize(nativeEventTarget);
    } else if (eventType === eventTypes.compositionEnd) {
      if (isComposing) {
        fallbackData = getData();
      }
    }
  }

  var event = SyntheticCompositionEvent.getPooled(eventType, targetInst, nativeEvent, nativeEventTarget);

  if (fallbackData) {
    // Inject data generated from fallback path into the synthetic event.
    // This matches the property of native CompositionEventInterface.
    event.data = fallbackData;
  } else {
    var customData = getDataFromCustomEvent(nativeEvent);

    if (customData !== null) {
      event.data = customData;
    }
  }

  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * @param {TopLevelType} topLevelType Number from `TopLevelType`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The string corresponding to this `beforeInput` event.
 */


function getNativeBeforeInputChars(topLevelType, nativeEvent) {
  switch (topLevelType) {
    case TOP_COMPOSITION_END:
      return getDataFromCustomEvent(nativeEvent);

    case TOP_KEY_PRESS:
      /**
       * If native `textInput` events are available, our goal is to make
       * use of them. However, there is a special case: the spacebar key.
       * In Webkit, preventing default on a spacebar `textInput` event
       * cancels character insertion, but it *also* causes the browser
       * to fall back to its default spacebar behavior of scrolling the
       * page.
       *
       * Tracking at:
       * https://code.google.com/p/chromium/issues/detail?id=355103
       *
       * To avoid this issue, use the keypress event as if no `textInput`
       * event is available.
       */
      var which = nativeEvent.which;

      if (which !== SPACEBAR_CODE) {
        return null;
      }

      hasSpaceKeypress = true;
      return SPACEBAR_CHAR;

    case TOP_TEXT_INPUT:
      // Record the characters to be added to the DOM.
      var chars = nativeEvent.data; // If it's a spacebar character, assume that we have already handled
      // it at the keypress level and bail immediately. Android Chrome
      // doesn't give us keycodes, so we need to ignore it.

      if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
        return null;
      }

      return chars;

    default:
      // For other native event types, do nothing.
      return null;
  }
}
/**
 * For browsers that do not provide the `textInput` event, extract the
 * appropriate string to use for SyntheticInputEvent.
 *
 * @param {number} topLevelType Number from `TopLevelEventTypes`.
 * @param {object} nativeEvent Native browser event.
 * @return {?string} The fallback string for this `beforeInput` event.
 */


function getFallbackBeforeInputChars(topLevelType, nativeEvent) {
  // If we are currently composing (IME) and using a fallback to do so,
  // try to extract the composed characters from the fallback object.
  // If composition event is available, we extract a string only at
  // compositionevent, otherwise extract it at fallback events.
  if (isComposing) {
    if (topLevelType === TOP_COMPOSITION_END || !canUseCompositionEvent && isFallbackCompositionEnd(topLevelType, nativeEvent)) {
      var chars = getData();
      reset();
      isComposing = false;
      return chars;
    }

    return null;
  }

  switch (topLevelType) {
    case TOP_PASTE:
      // If a paste event occurs after a keypress, throw out the input
      // chars. Paste events should not lead to BeforeInput events.
      return null;

    case TOP_KEY_PRESS:
      /**
       * As of v27, Firefox may fire keypress events even when no character
       * will be inserted. A few possibilities:
       *
       * - `which` is `0`. Arrow keys, Esc key, etc.
       *
       * - `which` is the pressed key code, but no char is available.
       *   Ex: 'AltGr + d` in Polish. There is no modified character for
       *   this key combination and no character is inserted into the
       *   document, but FF fires the keypress for char code `100` anyway.
       *   No `input` event will occur.
       *
       * - `which` is the pressed key code, but a command combination is
       *   being used. Ex: `Cmd+C`. No character is inserted, and no
       *   `input` event will occur.
       */
      if (!isKeypressCommand(nativeEvent)) {
        // IE fires the `keypress` event when a user types an emoji via
        // Touch keyboard of Windows.  In such a case, the `char` property
        // holds an emoji character like `\uD83D\uDE0A`.  Because its length
        // is 2, the property `which` does not represent an emoji correctly.
        // In such a case, we directly return the `char` property instead of
        // using `which`.
        if (nativeEvent.char && nativeEvent.char.length > 1) {
          return nativeEvent.char;
        } else if (nativeEvent.which) {
          return String.fromCharCode(nativeEvent.which);
        }
      }

      return null;

    case TOP_COMPOSITION_END:
      return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;

    default:
      return null;
  }
}
/**
 * Extract a SyntheticInputEvent for `beforeInput`, based on either native
 * `textInput` or fallback behavior.
 *
 * @return {?object} A SyntheticInputEvent.
 */


function extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget) {
  var chars;

  if (canUseTextInputEvent) {
    chars = getNativeBeforeInputChars(topLevelType, nativeEvent);
  } else {
    chars = getFallbackBeforeInputChars(topLevelType, nativeEvent);
  } // If no characters are being inserted, no BeforeInput event should
  // be fired.


  if (!chars) {
    return null;
  }

  var event = SyntheticInputEvent.getPooled(eventTypes.beforeInput, targetInst, nativeEvent, nativeEventTarget);
  event.data = chars;
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * Create an `onBeforeInput` event to match
 * http://www.w3.org/TR/2013/WD-DOM-Level-3-Events-20131105/#events-inputevents.
 *
 * This event plugin is based on the native `textInput` event
 * available in Chrome, Safari, Opera, and IE. This event fires after
 * `onKeyPress` and `onCompositionEnd`, but before `onInput`.
 *
 * `beforeInput` is spec'd but not implemented in any browsers, and
 * the `input` event does not provide any useful information about what has
 * actually been added, contrary to the spec. Thus, `textInput` is the best
 * available event to identify the characters that have actually been inserted
 * into the target node.
 *
 * This plugin is also responsible for emitting `composition` events, thus
 * allowing us to share composition fallback code for both `beforeInput` and
 * `composition` event types.
 */


var BeforeInputEventPlugin = {
  eventTypes: eventTypes,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var composition = extractCompositionEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);
    var beforeInput = extractBeforeInputEvent(topLevelType, targetInst, nativeEvent, nativeEventTarget);

    if (composition === null) {
      return beforeInput;
    }

    if (beforeInput === null) {
      return composition;
    }

    return [composition, beforeInput];
  }
};

/**
 * @see http://www.whatwg.org/specs/web-apps/current-work/multipage/the-input-element.html#input-type-attr-summary
 */
var supportedInputTypes = {
  color: true,
  date: true,
  datetime: true,
  'datetime-local': true,
  email: true,
  month: true,
  number: true,
  password: true,
  range: true,
  search: true,
  tel: true,
  text: true,
  time: true,
  url: true,
  week: true
};

function isTextInputElement(elem) {
  var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();

  if (nodeName === 'input') {
    return !!supportedInputTypes[elem.type];
  }

  if (nodeName === 'textarea') {
    return true;
  }

  return false;
}

var eventTypes$1 = {
  change: {
    phasedRegistrationNames: {
      bubbled: 'onChange',
      captured: 'onChangeCapture'
    },
    dependencies: [TOP_BLUR, TOP_CHANGE, TOP_CLICK, TOP_FOCUS, TOP_INPUT, TOP_KEY_DOWN, TOP_KEY_UP, TOP_SELECTION_CHANGE]
  }
};

function createAndAccumulateChangeEvent(inst, nativeEvent, target) {
  var event = SyntheticEvent.getPooled(eventTypes$1.change, inst, nativeEvent, target);
  event.type = 'change'; // Flag this event loop as needing state restore.

  enqueueStateRestore(target);
  accumulateTwoPhaseDispatches(event);
  return event;
}
/**
 * For IE shims
 */


var activeElement = null;
var activeElementInst = null;
/**
 * SECTION: handle `change` event
 */

function shouldUseChangeEvent(elem) {
  var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
  return nodeName === 'select' || nodeName === 'input' && elem.type === 'file';
}

function manualDispatchChangeEvent(nativeEvent) {
  var event = createAndAccumulateChangeEvent(activeElementInst, nativeEvent, getEventTarget(nativeEvent)); // If change and propertychange bubbled, we'd just bind to it like all the
  // other events and have it go through ReactBrowserEventEmitter. Since it
  // doesn't, we manually listen for the events and so we have to enqueue and
  // process the abstract event manually.
  //
  // Batching is necessary here in order to ensure that all event handlers run
  // before the next rerender (including event handlers attached to ancestor
  // elements instead of directly on the input). Without this, controlled
  // components don't work properly in conjunction with event bubbling because
  // the component is rerendered and the value reverted before all the event
  // handlers can run. See https://github.com/facebook/react/issues/708.

  batchedUpdates(runEventInBatch, event);
}

function runEventInBatch(event) {
  runEventsInBatch(event);
}

function getInstIfValueChanged(targetInst) {
  var targetNode = getNodeFromInstance$1(targetInst);

  if (updateValueIfChanged(targetNode)) {
    return targetInst;
  }
}

function getTargetInstForChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CHANGE) {
    return targetInst;
  }
}
/**
 * SECTION: handle `input` event
 */


var isInputEventSupported = false;

if (canUseDOM) {
  // IE9 claims to support the input event but fails to trigger it when
  // deleting text, so we ignore its input events.
  isInputEventSupported = isEventSupported('input') && (!document.documentMode || document.documentMode > 9);
}
/**
 * (For IE <=9) Starts tracking propertychange events on the passed-in element
 * and override the value property so that we can distinguish user events from
 * value changes in JS.
 */


function startWatchingForValueChange(target, targetInst) {
  activeElement = target;
  activeElementInst = targetInst;
  activeElement.attachEvent('onpropertychange', handlePropertyChange);
}
/**
 * (For IE <=9) Removes the event listeners from the currently-tracked element,
 * if any exists.
 */


function stopWatchingForValueChange() {
  if (!activeElement) {
    return;
  }

  activeElement.detachEvent('onpropertychange', handlePropertyChange);
  activeElement = null;
  activeElementInst = null;
}
/**
 * (For IE <=9) Handles a propertychange event, sending a `change` event if
 * the value of the active element has changed.
 */


function handlePropertyChange(nativeEvent) {
  if (nativeEvent.propertyName !== 'value') {
    return;
  }

  if (getInstIfValueChanged(activeElementInst)) {
    manualDispatchChangeEvent(nativeEvent);
  }
}

function handleEventsForInputEventPolyfill(topLevelType, target, targetInst) {
  if (topLevelType === TOP_FOCUS) {
    // In IE9, propertychange fires for most input events but is buggy and
    // doesn't fire when text is deleted, but conveniently, selectionchange
    // appears to fire in all of the remaining cases so we catch those and
    // forward the event if the value has changed
    // In either case, we don't want to call the event handler if the value
    // is changed from JS so we redefine a setter for `.value` that updates
    // our activeElementValue variable, allowing us to ignore those changes
    //
    // stopWatching() should be a noop here but we call it just in case we
    // missed a blur event somehow.
    stopWatchingForValueChange();
    startWatchingForValueChange(target, targetInst);
  } else if (topLevelType === TOP_BLUR) {
    stopWatchingForValueChange();
  }
} // For IE8 and IE9.


function getTargetInstForInputEventPolyfill(topLevelType, targetInst) {
  if (topLevelType === TOP_SELECTION_CHANGE || topLevelType === TOP_KEY_UP || topLevelType === TOP_KEY_DOWN) {
    // On the selectionchange event, the target is just document which isn't
    // helpful for us so just check activeElement instead.
    //
    // 99% of the time, keydown and keyup aren't necessary. IE8 fails to fire
    // propertychange on the first input event after setting `value` from a
    // script and fires only keydown, keypress, keyup. Catching keyup usually
    // gets it and catching keydown lets us fire an event for the first
    // keystroke if user does a key repeat (it'll be a little delayed: right
    // before the second keystroke). Other input methods (e.g., paste) seem to
    // fire selectionchange normally.
    return getInstIfValueChanged(activeElementInst);
  }
}
/**
 * SECTION: handle `click` event
 */


function shouldUseClickEvent(elem) {
  // Use the `click` event to detect changes to checkbox and radio inputs.
  // This approach works across all browsers, whereas `change` does not fire
  // until `blur` in IE8.
  var nodeName = elem.nodeName;
  return nodeName && nodeName.toLowerCase() === 'input' && (elem.type === 'checkbox' || elem.type === 'radio');
}

function getTargetInstForClickEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_CLICK) {
    return getInstIfValueChanged(targetInst);
  }
}

function getTargetInstForInputOrChangeEvent(topLevelType, targetInst) {
  if (topLevelType === TOP_INPUT || topLevelType === TOP_CHANGE) {
    return getInstIfValueChanged(targetInst);
  }
}

function handleControlledInputBlur(node) {
  var state = node._wrapperState;

  if (!state || !state.controlled || node.type !== 'number') {
    return;
  }

  {
    // If controlled, assign the value attribute to the current value on blur
    setDefaultValue(node, 'number', node.value);
  }
}
/**
 * This plugin creates an `onChange` event that normalizes change events
 * across form elements. This event fires at a time when it's possible to
 * change the element's value without seeing a flicker.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - select
 */


var ChangeEventPlugin = {
  eventTypes: eventTypes$1,
  _isInputEventSupported: isInputEventSupported,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;
    var getTargetInstFunc, handleEventFunc;

    if (shouldUseChangeEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForChangeEvent;
    } else if (isTextInputElement(targetNode)) {
      if (isInputEventSupported) {
        getTargetInstFunc = getTargetInstForInputOrChangeEvent;
      } else {
        getTargetInstFunc = getTargetInstForInputEventPolyfill;
        handleEventFunc = handleEventsForInputEventPolyfill;
      }
    } else if (shouldUseClickEvent(targetNode)) {
      getTargetInstFunc = getTargetInstForClickEvent;
    }

    if (getTargetInstFunc) {
      var inst = getTargetInstFunc(topLevelType, targetInst);

      if (inst) {
        var event = createAndAccumulateChangeEvent(inst, nativeEvent, nativeEventTarget);
        return event;
      }
    }

    if (handleEventFunc) {
      handleEventFunc(topLevelType, targetNode, targetInst);
    } // When blurring, set the value attribute for number inputs


    if (topLevelType === TOP_BLUR) {
      handleControlledInputBlur(targetNode);
    }
  }
};

var SyntheticUIEvent = SyntheticEvent.extend({
  view: null,
  detail: null
});

/**
 * Translation from modifier key to the associated property in the event.
 * @see http://www.w3.org/TR/DOM-Level-3-Events/#keys-Modifiers
 */
var modifierKeyToProp = {
  Alt: 'altKey',
  Control: 'ctrlKey',
  Meta: 'metaKey',
  Shift: 'shiftKey'
}; // Older browsers (Safari <= 10, iOS Safari <= 10.2) do not support
// getModifierState. If getModifierState is not supported, we map it to a set of
// modifier keys exposed by the event. In this case, Lock-keys are not supported.

function modifierStateGetter(keyArg) {
  var syntheticEvent = this;
  var nativeEvent = syntheticEvent.nativeEvent;

  if (nativeEvent.getModifierState) {
    return nativeEvent.getModifierState(keyArg);
  }

  var keyProp = modifierKeyToProp[keyArg];
  return keyProp ? !!nativeEvent[keyProp] : false;
}

function getEventModifierState(nativeEvent) {
  return modifierStateGetter;
}

var previousScreenX = 0;
var previousScreenY = 0; // Use flags to signal movementX/Y has already been set

var isMovementXSet = false;
var isMovementYSet = false;
/**
 * @interface MouseEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticMouseEvent = SyntheticUIEvent.extend({
  screenX: null,
  screenY: null,
  clientX: null,
  clientY: null,
  pageX: null,
  pageY: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  getModifierState: getEventModifierState,
  button: null,
  buttons: null,
  relatedTarget: function (event) {
    return event.relatedTarget || (event.fromElement === event.srcElement ? event.toElement : event.fromElement);
  },
  movementX: function (event) {
    if ('movementX' in event) {
      return event.movementX;
    }

    var screenX = previousScreenX;
    previousScreenX = event.screenX;

    if (!isMovementXSet) {
      isMovementXSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenX - screenX : 0;
  },
  movementY: function (event) {
    if ('movementY' in event) {
      return event.movementY;
    }

    var screenY = previousScreenY;
    previousScreenY = event.screenY;

    if (!isMovementYSet) {
      isMovementYSet = true;
      return 0;
    }

    return event.type === 'mousemove' ? event.screenY - screenY : 0;
  }
});

/**
 * @interface PointerEvent
 * @see http://www.w3.org/TR/pointerevents/
 */

var SyntheticPointerEvent = SyntheticMouseEvent.extend({
  pointerId: null,
  width: null,
  height: null,
  pressure: null,
  tangentialPressure: null,
  tiltX: null,
  tiltY: null,
  twist: null,
  pointerType: null,
  isPrimary: null
});

var eventTypes$2 = {
  mouseEnter: {
    registrationName: 'onMouseEnter',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  mouseLeave: {
    registrationName: 'onMouseLeave',
    dependencies: [TOP_MOUSE_OUT, TOP_MOUSE_OVER]
  },
  pointerEnter: {
    registrationName: 'onPointerEnter',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  },
  pointerLeave: {
    registrationName: 'onPointerLeave',
    dependencies: [TOP_POINTER_OUT, TOP_POINTER_OVER]
  }
};
var EnterLeaveEventPlugin = {
  eventTypes: eventTypes$2,

  /**
   * For almost every interaction we care about, there will be both a top-level
   * `mouseover` and `mouseout` event that occurs. Only use `mouseout` so that
   * we do not extract duplicate events. However, moving the mouse into the
   * browser from outside will not fire a `mouseout` event. In this case, we use
   * the `mouseover` top-level event.
   */
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var isOverEvent = topLevelType === TOP_MOUSE_OVER || topLevelType === TOP_POINTER_OVER;
    var isOutEvent = topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_POINTER_OUT;

    if (isOverEvent && (eventSystemFlags & IS_REPLAYED) === 0 && (nativeEvent.relatedTarget || nativeEvent.fromElement)) {
      // If this is an over event with a target, then we've already dispatched
      // the event in the out event of the other target. If this is replayed,
      // then it's because we couldn't dispatch against this target previously
      // so we have to do it now instead.
      return null;
    }

    if (!isOutEvent && !isOverEvent) {
      // Must not be a mouse or pointer in or out - ignoring.
      return null;
    }

    var win;

    if (nativeEventTarget.window === nativeEventTarget) {
      // `nativeEventTarget` is probably a window object.
      win = nativeEventTarget;
    } else {
      // TODO: Figure out why `ownerDocument` is sometimes undefined in IE8.
      var doc = nativeEventTarget.ownerDocument;

      if (doc) {
        win = doc.defaultView || doc.parentWindow;
      } else {
        win = window;
      }
    }

    var from;
    var to;

    if (isOutEvent) {
      from = targetInst;
      var related = nativeEvent.relatedTarget || nativeEvent.toElement;
      to = related ? getClosestInstanceFromNode(related) : null;

      if (to !== null) {
        var nearestMounted = getNearestMountedFiber(to);

        if (to !== nearestMounted || to.tag !== HostComponent && to.tag !== HostText) {
          to = null;
        }
      }
    } else {
      // Moving to a node from outside the window.
      from = null;
      to = targetInst;
    }

    if (from === to) {
      // Nothing pertains to our managed components.
      return null;
    }

    var eventInterface, leaveEventType, enterEventType, eventTypePrefix;

    if (topLevelType === TOP_MOUSE_OUT || topLevelType === TOP_MOUSE_OVER) {
      eventInterface = SyntheticMouseEvent;
      leaveEventType = eventTypes$2.mouseLeave;
      enterEventType = eventTypes$2.mouseEnter;
      eventTypePrefix = 'mouse';
    } else if (topLevelType === TOP_POINTER_OUT || topLevelType === TOP_POINTER_OVER) {
      eventInterface = SyntheticPointerEvent;
      leaveEventType = eventTypes$2.pointerLeave;
      enterEventType = eventTypes$2.pointerEnter;
      eventTypePrefix = 'pointer';
    }

    var fromNode = from == null ? win : getNodeFromInstance$1(from);
    var toNode = to == null ? win : getNodeFromInstance$1(to);
    var leave = eventInterface.getPooled(leaveEventType, from, nativeEvent, nativeEventTarget);
    leave.type = eventTypePrefix + 'leave';
    leave.target = fromNode;
    leave.relatedTarget = toNode;
    var enter = eventInterface.getPooled(enterEventType, to, nativeEvent, nativeEventTarget);
    enter.type = eventTypePrefix + 'enter';
    enter.target = toNode;
    enter.relatedTarget = fromNode;
    accumulateEnterLeaveDispatches(leave, enter, from, to); // If we are not processing the first ancestor, then we
    // should not process the same nativeEvent again, as we
    // will have already processed it in the first ancestor.

    if ((eventSystemFlags & IS_FIRST_ANCESTOR) === 0) {
      return [leave];
    }

    return [leave, enter];
  }
};

/**
 * inlined Object.is polyfill to avoid requiring consumers ship their own
 * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
 */
function is(x, y) {
  return x === y && (x !== 0 || 1 / x === 1 / y) || x !== x && y !== y // eslint-disable-line no-self-compare
  ;
}

var objectIs = typeof Object.is === 'function' ? Object.is : is;

var hasOwnProperty$2 = Object.prototype.hasOwnProperty;
/**
 * Performs equality by iterating through keys on an object and returning false
 * when any key has values which are not strictly equal between the arguments.
 * Returns true when the values of all keys are strictly equal.
 */

function shallowEqual(objA, objB) {
  if (objectIs(objA, objB)) {
    return true;
  }

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);

  if (keysA.length !== keysB.length) {
    return false;
  } // Test for A's keys different from B.


  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwnProperty$2.call(objB, keysA[i]) || !objectIs(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

var skipSelectionChangeEvent = canUseDOM && 'documentMode' in document && document.documentMode <= 11;
var eventTypes$3 = {
  select: {
    phasedRegistrationNames: {
      bubbled: 'onSelect',
      captured: 'onSelectCapture'
    },
    dependencies: [TOP_BLUR, TOP_CONTEXT_MENU, TOP_DRAG_END, TOP_FOCUS, TOP_KEY_DOWN, TOP_KEY_UP, TOP_MOUSE_DOWN, TOP_MOUSE_UP, TOP_SELECTION_CHANGE]
  }
};
var activeElement$1 = null;
var activeElementInst$1 = null;
var lastSelection = null;
var mouseDown = false;
/**
 * Get an object which is a unique representation of the current selection.
 *
 * The return value will not be consistent across nodes or browsers, but
 * two identical selections on the same node will return identical objects.
 *
 * @param {DOMElement} node
 * @return {object}
 */

function getSelection$1(node) {
  if ('selectionStart' in node && hasSelectionCapabilities(node)) {
    return {
      start: node.selectionStart,
      end: node.selectionEnd
    };
  } else {
    var win = node.ownerDocument && node.ownerDocument.defaultView || window;
    var selection = win.getSelection();
    return {
      anchorNode: selection.anchorNode,
      anchorOffset: selection.anchorOffset,
      focusNode: selection.focusNode,
      focusOffset: selection.focusOffset
    };
  }
}
/**
 * Get document associated with the event target.
 *
 * @param {object} nativeEventTarget
 * @return {Document}
 */


function getEventTargetDocument(eventTarget) {
  return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
}
/**
 * Poll selection to see whether it's changed.
 *
 * @param {object} nativeEvent
 * @param {object} nativeEventTarget
 * @return {?SyntheticEvent}
 */


function constructSelectEvent(nativeEvent, nativeEventTarget) {
  // Ensure we have the right element, and that the user is not dragging a
  // selection (this matches native `select` event behavior). In HTML5, select
  // fires only on input and textarea thus if there's no focused element we
  // won't dispatch.
  var doc = getEventTargetDocument(nativeEventTarget);

  if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
    return null;
  } // Only fire when selection has actually changed.


  var currentSelection = getSelection$1(activeElement$1);

  if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
    lastSelection = currentSelection;
    var syntheticEvent = SyntheticEvent.getPooled(eventTypes$3.select, activeElementInst$1, nativeEvent, nativeEventTarget);
    syntheticEvent.type = 'select';
    syntheticEvent.target = activeElement$1;
    accumulateTwoPhaseDispatches(syntheticEvent);
    return syntheticEvent;
  }

  return null;
}
/**
 * This plugin creates an `onSelect` event that normalizes select events
 * across form elements.
 *
 * Supported elements are:
 * - input (see `isTextInputElement`)
 * - textarea
 * - contentEditable
 *
 * This differs from native browser implementations in the following ways:
 * - Fires on contentEditable fields as well as inputs.
 * - Fires for collapsed selection.
 * - Fires after user input.
 */


var SelectEventPlugin = {
  eventTypes: eventTypes$3,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, container) {
    var containerOrDoc = container || getEventTargetDocument(nativeEventTarget); // Track whether all listeners exists for this plugin. If none exist, we do
    // not extract events. See #3639.

    if (!containerOrDoc || !isListeningToAllDependencies('onSelect', containerOrDoc)) {
      return null;
    }

    var targetNode = targetInst ? getNodeFromInstance$1(targetInst) : window;

    switch (topLevelType) {
      // Track the input node that has focus.
      case TOP_FOCUS:
        if (isTextInputElement(targetNode) || targetNode.contentEditable === 'true') {
          activeElement$1 = targetNode;
          activeElementInst$1 = targetInst;
          lastSelection = null;
        }

        break;

      case TOP_BLUR:
        activeElement$1 = null;
        activeElementInst$1 = null;
        lastSelection = null;
        break;
      // Don't fire the event while the user is dragging. This matches the
      // semantics of the native select event.

      case TOP_MOUSE_DOWN:
        mouseDown = true;
        break;

      case TOP_CONTEXT_MENU:
      case TOP_MOUSE_UP:
      case TOP_DRAG_END:
        mouseDown = false;
        return constructSelectEvent(nativeEvent, nativeEventTarget);
      // Chrome and IE fire non-standard event when selection is changed (and
      // sometimes when it hasn't). IE's event fires out of order with respect
      // to key and input events on deletion, so we discard it.
      //
      // Firefox doesn't support selectionchange, so check selection status
      // after each key entry. The selection changes after keydown and before
      // keyup, but we check on keydown as well in the case of holding down a
      // key, when multiple keydown events are fired but only one keyup is.
      // This is also our approach for IE handling, for the reason above.

      case TOP_SELECTION_CHANGE:
        if (skipSelectionChangeEvent) {
          break;
        }

      // falls through

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        return constructSelectEvent(nativeEvent, nativeEventTarget);
    }

    return null;
  }
};

/**
 * @interface Event
 * @see http://www.w3.org/TR/css3-animations/#AnimationEvent-interface
 * @see https://developer.mozilla.org/en-US/docs/Web/API/AnimationEvent
 */

var SyntheticAnimationEvent = SyntheticEvent.extend({
  animationName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/clipboard-apis/
 */

var SyntheticClipboardEvent = SyntheticEvent.extend({
  clipboardData: function (event) {
    return 'clipboardData' in event ? event.clipboardData : window.clipboardData;
  }
});

/**
 * @interface FocusEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticFocusEvent = SyntheticUIEvent.extend({
  relatedTarget: null
});

/**
 * `charCode` represents the actual "character code" and is safe to use with
 * `String.fromCharCode`. As such, only keys that correspond to printable
 * characters produce a valid `charCode`, the only exception to this is Enter.
 * The Tab-key is considered non-printable and does not have a `charCode`,
 * presumably because it does not produce a tab-character in browsers.
 *
 * @param {object} nativeEvent Native browser event.
 * @return {number} Normalized `charCode` property.
 */
function getEventCharCode(nativeEvent) {
  var charCode;
  var keyCode = nativeEvent.keyCode;

  if ('charCode' in nativeEvent) {
    charCode = nativeEvent.charCode; // FF does not set `charCode` for the Enter-key, check against `keyCode`.

    if (charCode === 0 && keyCode === 13) {
      charCode = 13;
    }
  } else {
    // IE8 does not implement `charCode`, but `keyCode` has the correct value.
    charCode = keyCode;
  } // IE and Edge (on Windows) and Chrome / Safari (on Windows and Linux)
  // report Enter as charCode 10 when ctrl is pressed.


  if (charCode === 10) {
    charCode = 13;
  } // Some non-printable keys are reported in `charCode`/`keyCode`, discard them.
  // Must not discard the (non-)printable Enter-key.


  if (charCode >= 32 || charCode === 13) {
    return charCode;
  }

  return 0;
}

/**
 * Normalization of deprecated HTML5 `key` values
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var normalizeKey = {
  Esc: 'Escape',
  Spacebar: ' ',
  Left: 'ArrowLeft',
  Up: 'ArrowUp',
  Right: 'ArrowRight',
  Down: 'ArrowDown',
  Del: 'Delete',
  Win: 'OS',
  Menu: 'ContextMenu',
  Apps: 'ContextMenu',
  Scroll: 'ScrollLock',
  MozPrintableKey: 'Unidentified'
};
/**
 * Translation from legacy `keyCode` to HTML5 `key`
 * Only special keys supported, all others depend on keyboard layout or browser
 * @see https://developer.mozilla.org/en-US/docs/Web/API/KeyboardEvent#Key_names
 */

var translateToKey = {
  '8': 'Backspace',
  '9': 'Tab',
  '12': 'Clear',
  '13': 'Enter',
  '16': 'Shift',
  '17': 'Control',
  '18': 'Alt',
  '19': 'Pause',
  '20': 'CapsLock',
  '27': 'Escape',
  '32': ' ',
  '33': 'PageUp',
  '34': 'PageDown',
  '35': 'End',
  '36': 'Home',
  '37': 'ArrowLeft',
  '38': 'ArrowUp',
  '39': 'ArrowRight',
  '40': 'ArrowDown',
  '45': 'Insert',
  '46': 'Delete',
  '112': 'F1',
  '113': 'F2',
  '114': 'F3',
  '115': 'F4',
  '116': 'F5',
  '117': 'F6',
  '118': 'F7',
  '119': 'F8',
  '120': 'F9',
  '121': 'F10',
  '122': 'F11',
  '123': 'F12',
  '144': 'NumLock',
  '145': 'ScrollLock',
  '224': 'Meta'
};
/**
 * @param {object} nativeEvent Native browser event.
 * @return {string} Normalized `key` property.
 */

function getEventKey(nativeEvent) {
  if (nativeEvent.key) {
    // Normalize inconsistent values reported by browsers due to
    // implementations of a working draft specification.
    // FireFox implements `key` but returns `MozPrintableKey` for all
    // printable characters (normalized to `Unidentified`), ignore it.
    var key = normalizeKey[nativeEvent.key] || nativeEvent.key;

    if (key !== 'Unidentified') {
      return key;
    }
  } // Browser does not implement `key`, polyfill as much of it as we can.


  if (nativeEvent.type === 'keypress') {
    var charCode = getEventCharCode(nativeEvent); // The enter-key is technically both printable and non-printable and can
    // thus be captured by `keypress`, no other non-printable key should.

    return charCode === 13 ? 'Enter' : String.fromCharCode(charCode);
  }

  if (nativeEvent.type === 'keydown' || nativeEvent.type === 'keyup') {
    // While user keyboard layout determines the actual meaning of each
    // `keyCode` value, almost all function keys have a universal value.
    return translateToKey[nativeEvent.keyCode] || 'Unidentified';
  }

  return '';
}

/**
 * @interface KeyboardEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticKeyboardEvent = SyntheticUIEvent.extend({
  key: getEventKey,
  location: null,
  ctrlKey: null,
  shiftKey: null,
  altKey: null,
  metaKey: null,
  repeat: null,
  locale: null,
  getModifierState: getEventModifierState,
  // Legacy Interface
  charCode: function (event) {
    // `charCode` is the result of a KeyPress event and represents the value of
    // the actual printable character.
    // KeyPress is deprecated, but its replacement is not yet final and not
    // implemented in any major browser. Only KeyPress has charCode.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    return 0;
  },
  keyCode: function (event) {
    // `keyCode` is the result of a KeyDown/Up event and represents the value of
    // physical keyboard key.
    // The actual meaning of the value depends on the users' keyboard layout
    // which cannot be detected. Assuming that it is a US keyboard layout
    // provides a surprisingly accurate mapping for US and European users.
    // Due to this, it is left to the user to implement at this time.
    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  },
  which: function (event) {
    // `which` is an alias for either `keyCode` or `charCode` depending on the
    // type of the event.
    if (event.type === 'keypress') {
      return getEventCharCode(event);
    }

    if (event.type === 'keydown' || event.type === 'keyup') {
      return event.keyCode;
    }

    return 0;
  }
});

/**
 * @interface DragEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticDragEvent = SyntheticMouseEvent.extend({
  dataTransfer: null
});

/**
 * @interface TouchEvent
 * @see http://www.w3.org/TR/touch-events/
 */

var SyntheticTouchEvent = SyntheticUIEvent.extend({
  touches: null,
  targetTouches: null,
  changedTouches: null,
  altKey: null,
  metaKey: null,
  ctrlKey: null,
  shiftKey: null,
  getModifierState: getEventModifierState
});

/**
 * @interface Event
 * @see http://www.w3.org/TR/2009/WD-css3-transitions-20090320/#transition-events-
 * @see https://developer.mozilla.org/en-US/docs/Web/API/TransitionEvent
 */

var SyntheticTransitionEvent = SyntheticEvent.extend({
  propertyName: null,
  elapsedTime: null,
  pseudoElement: null
});

/**
 * @interface WheelEvent
 * @see http://www.w3.org/TR/DOM-Level-3-Events/
 */

var SyntheticWheelEvent = SyntheticMouseEvent.extend({
  deltaX: function (event) {
    return 'deltaX' in event ? event.deltaX : // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
    'wheelDeltaX' in event ? -event.wheelDeltaX : 0;
  },
  deltaY: function (event) {
    return 'deltaY' in event ? event.deltaY : // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
    'wheelDeltaY' in event ? -event.wheelDeltaY : // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
    'wheelDelta' in event ? -event.wheelDelta : 0;
  },
  deltaZ: null,
  // Browsers without "deltaMode" is reporting in raw wheel delta where one
  // notch on the scroll is always +/- 120, roughly equivalent to pixels.
  // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
  // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
  deltaMode: null
});

var knownHTMLTopLevelTypes = [TOP_ABORT, TOP_CANCEL, TOP_CAN_PLAY, TOP_CAN_PLAY_THROUGH, TOP_CLOSE, TOP_DURATION_CHANGE, TOP_EMPTIED, TOP_ENCRYPTED, TOP_ENDED, TOP_ERROR, TOP_INPUT, TOP_INVALID, TOP_LOAD, TOP_LOADED_DATA, TOP_LOADED_METADATA, TOP_LOAD_START, TOP_PAUSE, TOP_PLAY, TOP_PLAYING, TOP_PROGRESS, TOP_RATE_CHANGE, TOP_RESET, TOP_SEEKED, TOP_SEEKING, TOP_STALLED, TOP_SUBMIT, TOP_SUSPEND, TOP_TIME_UPDATE, TOP_TOGGLE, TOP_VOLUME_CHANGE, TOP_WAITING];
var SimpleEventPlugin = {
  // simpleEventPluginEventTypes gets populated from
  // the DOMEventProperties module.
  eventTypes: simpleEventPluginEventTypes,
  extractEvents: function (topLevelType, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags) {
    var dispatchConfig = topLevelEventsToDispatchConfig.get(topLevelType);

    if (!dispatchConfig) {
      return null;
    }

    var EventConstructor;

    switch (topLevelType) {
      case TOP_KEY_PRESS:
        // Firefox creates a keypress event for function keys too. This removes
        // the unwanted keypress events. Enter is however both printable and
        // non-printable. One would expect Tab to be as well (but it isn't).
        if (getEventCharCode(nativeEvent) === 0) {
          return null;
        }

      /* falls through */

      case TOP_KEY_DOWN:
      case TOP_KEY_UP:
        EventConstructor = SyntheticKeyboardEvent;
        break;

      case TOP_BLUR:
      case TOP_FOCUS:
        EventConstructor = SyntheticFocusEvent;
        break;

      case TOP_CLICK:
        // Firefox creates a click event on right mouse clicks. This removes the
        // unwanted click events.
        if (nativeEvent.button === 2) {
          return null;
        }

      /* falls through */

      case TOP_AUX_CLICK:
      case TOP_DOUBLE_CLICK:
      case TOP_MOUSE_DOWN:
      case TOP_MOUSE_MOVE:
      case TOP_MOUSE_UP: // TODO: Disabled elements should not respond to mouse events

      /* falls through */

      case TOP_MOUSE_OUT:
      case TOP_MOUSE_OVER:
      case TOP_CONTEXT_MENU:
        EventConstructor = SyntheticMouseEvent;
        break;

      case TOP_DRAG:
      case TOP_DRAG_END:
      case TOP_DRAG_ENTER:
      case TOP_DRAG_EXIT:
      case TOP_DRAG_LEAVE:
      case TOP_DRAG_OVER:
      case TOP_DRAG_START:
      case TOP_DROP:
        EventConstructor = SyntheticDragEvent;
        break;

      case TOP_TOUCH_CANCEL:
      case TOP_TOUCH_END:
      case TOP_TOUCH_MOVE:
      case TOP_TOUCH_START:
        EventConstructor = SyntheticTouchEvent;
        break;

      case TOP_ANIMATION_END:
      case TOP_ANIMATION_ITERATION:
      case TOP_ANIMATION_START:
        EventConstructor = SyntheticAnimationEvent;
        break;

      case TOP_TRANSITION_END:
        EventConstructor = SyntheticTransitionEvent;
        break;

      case TOP_SCROLL:
        EventConstructor = SyntheticUIEvent;
        break;

      case TOP_WHEEL:
        EventConstructor = SyntheticWheelEvent;
        break;

      case TOP_COPY:
      case TOP_CUT:
      case TOP_PASTE:
        EventConstructor = SyntheticClipboardEvent;
        break;

      case TOP_GOT_POINTER_CAPTURE:
      case TOP_LOST_POINTER_CAPTURE:
      case TOP_POINTER_CANCEL:
      case TOP_POINTER_DOWN:
      case TOP_POINTER_MOVE:
      case TOP_POINTER_OUT:
      case TOP_POINTER_OVER:
      case TOP_POINTER_UP:
        EventConstructor = SyntheticPointerEvent;
        break;

      default:
        {
          if (knownHTMLTopLevelTypes.indexOf(topLevelType) === -1) {
            error('SimpleEventPlugin: Unhandled event type, `%s`. This warning ' + 'is likely caused by a bug in React. Please file an issue.', topLevelType);
          }
        } // HTML Events
        // @see http://www.w3.org/TR/html5/index.html#events-0


        EventConstructor = SyntheticEvent;
        break;
    }

    var event = EventConstructor.getPooled(dispatchConfig, targetInst, nativeEvent, nativeEventTarget);
    accumulateTwoPhaseDispatches(event);
    return event;
  }
};

/**
 * Specifies a deterministic ordering of `EventPlugin`s. A convenient way to
 * reason about plugins, without having to package every one of them. This
 * is better than having plugins be ordered in the same order that they
 * are injected because that ordering would be influenced by the packaging order.
 * `ResponderEventPlugin` must occur before `SimpleEventPlugin` so that
 * preventing default on events is convenient in `SimpleEventPlugin` handlers.
 */

var DOMEventPluginOrder = ['ResponderEventPlugin', 'SimpleEventPlugin', 'EnterLeaveEventPlugin', 'ChangeEventPlugin', 'SelectEventPlugin', 'BeforeInputEventPlugin'];
/**
 * Inject modules for resolving DOM hierarchy and plugin ordering.
 */

injectEventPluginOrder(DOMEventPluginOrder);
setComponentTree(getFiberCurrentPropsFromNode$1, getInstanceFromNode$1, getNodeFromInstance$1);
/**
 * Some important event plugins included by default (without having to require
 * them).
 */

injectEventPluginsByName({
  SimpleEventPlugin: SimpleEventPlugin,
  EnterLeaveEventPlugin: EnterLeaveEventPlugin,
  ChangeEventPlugin: ChangeEventPlugin,
  SelectEventPlugin: SelectEventPlugin,
  BeforeInputEventPlugin: BeforeInputEventPlugin
});

// Prefix measurements so that it's possible to filter them.
// Longer prefixes are hard to read in DevTools.
var reactEmoji = "\u269B";
var warningEmoji = "\u26D4";
var supportsUserTiming = typeof performance !== 'undefined' && typeof performance.mark === 'function' && typeof performance.clearMarks === 'function' && typeof performance.measure === 'function' && typeof performance.clearMeasures === 'function'; // Keep track of current fiber so that we know the path to unwind on pause.
// TODO: this looks the same as nextUnitOfWork in scheduler. Can we unify them?

var currentFiber = null; // If we're in the middle of user code, which fiber and method is it?
// Reusing `currentFiber` would be confusing for this because user code fiber
// can change during commit phase too, but we don't need to unwind it (since
// lifecycles in the commit phase don't resemble a tree).

var currentPhase = null;
var currentPhaseFiber = null; // Did lifecycle hook schedule an update? This is often a performance problem,
// so we will keep track of it, and include it in the report.
// Track commits caused by cascading updates.

var isCommitting = false;
var hasScheduledUpdateInCurrentCommit = false;
var hasScheduledUpdateInCurrentPhase = false;
var commitCountInCurrentWorkLoop = 0;
var effectCountInCurrentCommit = 0;
// to avoid stretch the commit phase with measurement overhead.

var labelsInCurrentCommit = new Set();

var formatMarkName = function (markName) {
  return reactEmoji + " " + markName;
};

var formatLabel = function (label, warning) {
  var prefix = warning ? warningEmoji + " " : reactEmoji + " ";
  var suffix = warning ? " Warning: " + warning : '';
  return "" + prefix + label + suffix;
};

var beginMark = function (markName) {
  performance.mark(formatMarkName(markName));
};

var clearMark = function (markName) {
  performance.clearMarks(formatMarkName(markName));
};

var endMark = function (label, markName, warning) {
  var formattedMarkName = formatMarkName(markName);
  var formattedLabel = formatLabel(label, warning);

  try {
    performance.measure(formattedLabel, formattedMarkName);
  } catch (err) {} // If previous mark was missing for some reason, this will throw.
  // This could only happen if React crashed in an unexpected place earlier.
  // Don't pile on with more errors.
  // Clear marks immediately to avoid growing buffer.


  performance.clearMarks(formattedMarkName);
  performance.clearMeasures(formattedLabel);
};

var getFiberMarkName = function (label, debugID) {
  return label + " (#" + debugID + ")";
};

var getFiberLabel = function (componentName, isMounted, phase) {
  if (phase === null) {
    // These are composite component total time measurements.
    return componentName + " [" + (isMounted ? 'update' : 'mount') + "]";
  } else {
    // Composite component methods.
    return componentName + "." + phase;
  }
};

var beginFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);

  if (isCommitting && labelsInCurrentCommit.has(label)) {
    // During the commit phase, we don't show duplicate labels because
    // there is a fixed overhead for every measurement, and we don't
    // want to stretch the commit phase beyond necessary.
    return false;
  }

  labelsInCurrentCommit.add(label);
  var markName = getFiberMarkName(label, debugID);
  beginMark(markName);
  return true;
};

var clearFiberMark = function (fiber, phase) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  clearMark(markName);
};

var endFiberMark = function (fiber, phase, warning) {
  var componentName = getComponentName(fiber.type) || 'Unknown';
  var debugID = fiber._debugID;
  var isMounted = fiber.alternate !== null;
  var label = getFiberLabel(componentName, isMounted, phase);
  var markName = getFiberMarkName(label, debugID);
  endMark(label, markName, warning);
};

var shouldIgnoreFiber = function (fiber) {
  // Host components should be skipped in the timeline.
  // We could check typeof fiber.type, but does this work with RN?
  switch (fiber.tag) {
    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case Fragment:
    case ContextProvider:
    case ContextConsumer:
    case Mode:
      return true;

    default:
      return false;
  }
};

var clearPendingPhaseMeasurement = function () {
  if (currentPhase !== null && currentPhaseFiber !== null) {
    clearFiberMark(currentPhaseFiber, currentPhase);
  }

  currentPhaseFiber = null;
  currentPhase = null;
  hasScheduledUpdateInCurrentPhase = false;
};

var pauseTimers = function () {
  // Stops all currently active measurements so that they can be resumed
  // if we continue in a later deferred loop from the same unit of work.
  var fiber = currentFiber;

  while (fiber) {
    if (fiber._debugIsCurrentlyTiming) {
      endFiberMark(fiber, null, null);
    }

    fiber = fiber.return;
  }
};

var resumeTimersRecursively = function (fiber) {
  if (fiber.return !== null) {
    resumeTimersRecursively(fiber.return);
  }

  if (fiber._debugIsCurrentlyTiming) {
    beginFiberMark(fiber, null);
  }
};

var resumeTimers = function () {
  // Resumes all measurements that were active during the last deferred loop.
  if (currentFiber !== null) {
    resumeTimersRecursively(currentFiber);
  }
};

function recordEffect() {
  {
    effectCountInCurrentCommit++;
  }
}
function recordScheduleUpdate() {
  {
    if (isCommitting) {
      hasScheduledUpdateInCurrentCommit = true;
    }

    if (currentPhase !== null && currentPhase !== 'componentWillMount' && currentPhase !== 'componentWillReceiveProps') {
      hasScheduledUpdateInCurrentPhase = true;
    }
  }
}
function startWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, this is the fiber to unwind from.


    currentFiber = fiber;

    if (!beginFiberMark(fiber, null)) {
      return;
    }

    fiber._debugIsCurrentlyTiming = true;
  }
}
function cancelWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // Remember we shouldn't complete measurement for this fiber.
    // Otherwise flamechart will be deep even for small updates.


    fiber._debugIsCurrentlyTiming = false;
    clearFiberMark(fiber, null);
  }
}
function stopWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    endFiberMark(fiber, null, null);
  }
}
function stopFailedWorkTimer(fiber) {
  {
    if (!supportsUserTiming || shouldIgnoreFiber(fiber)) {
      return;
    } // If we pause, its parent is the fiber to unwind from.


    currentFiber = fiber.return;

    if (!fiber._debugIsCurrentlyTiming) {
      return;
    }

    fiber._debugIsCurrentlyTiming = false;
    var warning = fiber.tag === SuspenseComponent ? 'Rendering was suspended' : 'An error was thrown inside this error boundary';
    endFiberMark(fiber, null, warning);
  }
}
function startPhaseTimer(fiber, phase) {
  {
    if (!supportsUserTiming) {
      return;
    }

    clearPendingPhaseMeasurement();

    if (!beginFiberMark(fiber, phase)) {
      return;
    }

    currentPhaseFiber = fiber;
    currentPhase = phase;
  }
}
function stopPhaseTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    if (currentPhase !== null && currentPhaseFiber !== null) {
      var warning = hasScheduledUpdateInCurrentPhase ? 'Scheduled a cascading update' : null;
      endFiberMark(currentPhaseFiber, currentPhase, warning);
    }

    currentPhase = null;
    currentPhaseFiber = null;
  }
}
function startWorkLoopTimer(nextUnitOfWork) {
  {
    currentFiber = nextUnitOfWork;

    if (!supportsUserTiming) {
      return;
    }

    commitCountInCurrentWorkLoop = 0; // This is top level call.
    // Any other measurements are performed within.

    beginMark('(React Tree Reconciliation)'); // Resume any measurements that were in progress during the last loop.

    resumeTimers();
  }
}
function stopWorkLoopTimer(interruptedBy, didCompleteRoot) {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (interruptedBy !== null) {
      if (interruptedBy.tag === HostRoot) {
        warning = 'A top-level update interrupted the previous render';
      } else {
        var componentName = getComponentName(interruptedBy.type) || 'Unknown';
        warning = "An update to " + componentName + " interrupted the previous render";
      }
    } else if (commitCountInCurrentWorkLoop > 1) {
      warning = 'There were cascading updates';
    }

    commitCountInCurrentWorkLoop = 0;
    var label = didCompleteRoot ? '(React Tree Reconciliation: Completed Root)' : '(React Tree Reconciliation: Yielded)'; // Pause any measurements until the next loop.

    pauseTimers();
    endMark(label, '(React Tree Reconciliation)', warning);
  }
}
function startCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    isCommitting = true;
    hasScheduledUpdateInCurrentCommit = false;
    labelsInCurrentCommit.clear();
    beginMark('(Committing Changes)');
  }
}
function stopCommitTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var warning = null;

    if (hasScheduledUpdateInCurrentCommit) {
      warning = 'Lifecycle hook scheduled a cascading update';
    } else if (commitCountInCurrentWorkLoop > 0) {
      warning = 'Caused by a cascading update in earlier commit';
    }

    hasScheduledUpdateInCurrentCommit = false;
    commitCountInCurrentWorkLoop++;
    isCommitting = false;
    labelsInCurrentCommit.clear();
    endMark('(Committing Changes)', '(Committing Changes)', warning);
  }
}
function startCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Snapshot Effects)');
  }
}
function stopCommitSnapshotEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Snapshot Effects: " + count + " Total)", '(Committing Snapshot Effects)', null);
  }
}
function startCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Committing Host Effects)');
  }
}
function stopCommitHostEffectsTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Committing Host Effects: " + count + " Total)", '(Committing Host Effects)', null);
  }
}
function startCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    effectCountInCurrentCommit = 0;
    beginMark('(Calling Lifecycle Methods)');
  }
}
function stopCommitLifeCyclesTimer() {
  {
    if (!supportsUserTiming) {
      return;
    }

    var count = effectCountInCurrentCommit;
    effectCountInCurrentCommit = 0;
    endMark("(Calling Lifecycle Methods: " + count + " Total)", '(Calling Lifecycle Methods)', null);
  }
}

var valueStack = [];
var fiberStack;

{
  fiberStack = [];
}

var index = -1;

function createCursor(defaultValue) {
  return {
    current: defaultValue
  };
}

function pop(cursor, fiber) {
  if (index < 0) {
    {
      error('Unexpected pop.');
    }

    return;
  }

  {
    if (fiber !== fiberStack[index]) {
      error('Unexpected Fiber popped.');
    }
  }

  cursor.current = valueStack[index];
  valueStack[index] = null;

  {
    fiberStack[index] = null;
  }

  index--;
}

function push(cursor, value, fiber) {
  index++;
  valueStack[index] = cursor.current;

  {
    fiberStack[index] = fiber;
  }

  cursor.current = value;
}

var warnedAboutMissingGetChildContext;

{
  warnedAboutMissingGetChildContext = {};
}

var emptyContextObject = {};

{
  Object.freeze(emptyContextObject);
} // A cursor to the current merged context object on the stack.


var contextStackCursor = createCursor(emptyContextObject); // A cursor to a boolean indicating whether the context has changed.

var didPerformWorkStackCursor = createCursor(false); // Keep track of the previous context object that was on the stack.
// We use this to get access to the parent context after we have already
// pushed the next context provider, and now need to merge their contexts.

var previousContext = emptyContextObject;

function getUnmaskedContext(workInProgress, Component, didPushOwnContextIfProvider) {
  {
    if (didPushOwnContextIfProvider && isContextProvider(Component)) {
      // If the fiber is a context provider itself, when we read its context
      // we may have already pushed its own child context on the stack. A context
      // provider should not "see" its own child context. Therefore we read the
      // previous (parent) context instead for a context provider.
      return previousContext;
    }

    return contextStackCursor.current;
  }
}

function cacheContext(workInProgress, unmaskedContext, maskedContext) {
  {
    var instance = workInProgress.stateNode;
    instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
    instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
  }
}

function getMaskedContext(workInProgress, unmaskedContext) {
  {
    var type = workInProgress.type;
    var contextTypes = type.contextTypes;

    if (!contextTypes) {
      return emptyContextObject;
    } // Avoid recreating masked context unless unmasked context has changed.
    // Failing to do this will result in unnecessary calls to componentWillReceiveProps.
    // This may trigger infinite loops if componentWillReceiveProps calls setState.


    var instance = workInProgress.stateNode;

    if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
      return instance.__reactInternalMemoizedMaskedChildContext;
    }

    var context = {};

    for (var key in contextTypes) {
      context[key] = unmaskedContext[key];
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(contextTypes, context, 'context', name, getCurrentFiberStackInDev);
    } // Cache unmasked context so we can avoid recreating masked context unless necessary.
    // Context is created before the class component is instantiated so check for instance.


    if (instance) {
      cacheContext(workInProgress, unmaskedContext, context);
    }

    return context;
  }
}

function hasContextChanged() {
  {
    return didPerformWorkStackCursor.current;
  }
}

function isContextProvider(type) {
  {
    var childContextTypes = type.childContextTypes;
    return childContextTypes !== null && childContextTypes !== undefined;
  }
}

function popContext(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function popTopLevelContextObject(fiber) {
  {
    pop(didPerformWorkStackCursor, fiber);
    pop(contextStackCursor, fiber);
  }
}

function pushTopLevelContextObject(fiber, context, didChange) {
  {
    if (!(contextStackCursor.current === emptyContextObject)) {
      {
        throw Error( "Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    push(contextStackCursor, context, fiber);
    push(didPerformWorkStackCursor, didChange, fiber);
  }
}

function processChildContext(fiber, type, parentContext) {
  {
    var instance = fiber.stateNode;
    var childContextTypes = type.childContextTypes; // TODO (bvaughn) Replace this behavior with an invariant() in the future.
    // It has only been added in Fiber to match the (unintentional) behavior in Stack.

    if (typeof instance.getChildContext !== 'function') {
      {
        var componentName = getComponentName(type) || 'Unknown';

        if (!warnedAboutMissingGetChildContext[componentName]) {
          warnedAboutMissingGetChildContext[componentName] = true;

          error('%s.childContextTypes is specified but there is no getChildContext() method ' + 'on the instance. You can either define getChildContext() on %s or remove ' + 'childContextTypes from it.', componentName, componentName);
        }
      }

      return parentContext;
    }

    var childContext;
    startPhaseTimer(fiber, 'getChildContext');
    childContext = instance.getChildContext();
    stopPhaseTimer();

    for (var contextKey in childContext) {
      if (!(contextKey in childContextTypes)) {
        {
          throw Error( (getComponentName(type) || 'Unknown') + ".getChildContext(): key \"" + contextKey + "\" is not defined in childContextTypes." );
        }
      }
    }

    {
      var name = getComponentName(type) || 'Unknown';
      checkPropTypes(childContextTypes, childContext, 'child context', name, // In practice, there is one case in which we won't get a stack. It's when
      // somebody calls unstable_renderSubtreeIntoContainer() and we process
      // context from the parent component instance. The stack will be missing
      // because it's outside of the reconciliation, and so the pointer has not
      // been set. This is rare and doesn't matter. We'll also remove that API.
      getCurrentFiberStackInDev);
    }

    return _assign({}, parentContext, {}, childContext);
  }
}

function pushContextProvider(workInProgress) {
  {
    var instance = workInProgress.stateNode; // We push the context as early as possible to ensure stack integrity.
    // If the instance does not exist yet, we will push null at first,
    // and replace it on the stack later when invalidating the context.

    var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject; // Remember the parent context so we can merge with it later.
    // Inherit the parent's did-perform-work value to avoid inadvertently blocking updates.

    previousContext = contextStackCursor.current;
    push(contextStackCursor, memoizedMergedChildContext, workInProgress);
    push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress);
    return true;
  }
}

function invalidateContextProvider(workInProgress, type, didChange) {
  {
    var instance = workInProgress.stateNode;

    if (!instance) {
      {
        throw Error( "Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    if (didChange) {
      // Merge parent and own context.
      // Skip this if we're not updating due to sCU.
      // This avoids unnecessarily recomputing memoized values.
      var mergedContext = processChildContext(workInProgress, type, previousContext);
      instance.__reactInternalMemoizedMergedChildContext = mergedContext; // Replace the old (or empty) context with the new one.
      // It is important to unwind the context in the reverse order.

      pop(didPerformWorkStackCursor, workInProgress);
      pop(contextStackCursor, workInProgress); // Now push the new context and mark that it has changed.

      push(contextStackCursor, mergedContext, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    } else {
      pop(didPerformWorkStackCursor, workInProgress);
      push(didPerformWorkStackCursor, didChange, workInProgress);
    }
  }
}

function findCurrentUnmaskedContext(fiber) {
  {
    // Currently this is only used with renderSubtreeIntoContainer; not sure if it
    // makes sense elsewhere
    if (!(isFiberMounted(fiber) && fiber.tag === ClassComponent)) {
      {
        throw Error( "Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    var node = fiber;

    do {
      switch (node.tag) {
        case HostRoot:
          return node.stateNode.context;

        case ClassComponent:
          {
            var Component = node.type;

            if (isContextProvider(Component)) {
              return node.stateNode.__reactInternalMemoizedMergedChildContext;
            }

            break;
          }
      }

      node = node.return;
    } while (node !== null);

    {
      {
        throw Error( "Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue." );
      }
    }
  }
}

var LegacyRoot = 0;
var BlockingRoot = 1;
var ConcurrentRoot = 2;

var Scheduler_runWithPriority = Scheduler.unstable_runWithPriority,
    Scheduler_scheduleCallback = Scheduler.unstable_scheduleCallback,
    Scheduler_cancelCallback = Scheduler.unstable_cancelCallback,
    Scheduler_shouldYield = Scheduler.unstable_shouldYield,
    Scheduler_requestPaint = Scheduler.unstable_requestPaint,
    Scheduler_now = Scheduler.unstable_now,
    Scheduler_getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel,
    Scheduler_ImmediatePriority = Scheduler.unstable_ImmediatePriority,
    Scheduler_UserBlockingPriority = Scheduler.unstable_UserBlockingPriority,
    Scheduler_NormalPriority = Scheduler.unstable_NormalPriority,
    Scheduler_LowPriority = Scheduler.unstable_LowPriority,
    Scheduler_IdlePriority = Scheduler.unstable_IdlePriority;

{
  // Provide explicit error message when production+profiling bundle of e.g.
  // react-dom is used with production (non-profiling) bundle of
  // scheduler/tracing
  if (!(tracing.__interactionsRef != null && tracing.__interactionsRef.current != null)) {
    {
      throw Error( "It is not supported to run the profiling version of a renderer (for example, `react-dom/profiling`) without also replacing the `scheduler/tracing` module with `scheduler/tracing-profiling`. Your bundler might have a setting for aliasing both modules. Learn more at http://fb.me/react-profiling" );
    }
  }
}

var fakeCallbackNode = {}; // Except for NoPriority, these correspond to Scheduler priorities. We use
// ascending numbers so we can compare them like numbers. They start at 90 to
// avoid clashing with Scheduler's priorities.

var ImmediatePriority = 99;
var UserBlockingPriority$1 = 98;
var NormalPriority = 97;
var LowPriority = 96;
var IdlePriority = 95; // NoPriority is the absence of priority. Also React-only.

var NoPriority = 90;
var shouldYield = Scheduler_shouldYield;
var requestPaint = // Fall back gracefully if we're running an older version of Scheduler.
Scheduler_requestPaint !== undefined ? Scheduler_requestPaint : function () {};
var syncQueue = null;
var immediateQueueCallbackNode = null;
var isFlushingSyncQueue = false;
var initialTimeMs = Scheduler_now(); // If the initial timestamp is reasonably small, use Scheduler's `now` directly.
// This will be the case for modern browsers that support `performance.now`. In
// older browsers, Scheduler falls back to `Date.now`, which returns a Unix
// timestamp. In that case, subtract the module initialization time to simulate
// the behavior of performance.now and keep our times small enough to fit
// within 32 bits.
// TODO: Consider lifting this into Scheduler.

var now = initialTimeMs < 10000 ? Scheduler_now : function () {
  return Scheduler_now() - initialTimeMs;
};
function getCurrentPriorityLevel() {
  switch (Scheduler_getCurrentPriorityLevel()) {
    case Scheduler_ImmediatePriority:
      return ImmediatePriority;

    case Scheduler_UserBlockingPriority:
      return UserBlockingPriority$1;

    case Scheduler_NormalPriority:
      return NormalPriority;

    case Scheduler_LowPriority:
      return LowPriority;

    case Scheduler_IdlePriority:
      return IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function reactPriorityToSchedulerPriority(reactPriorityLevel) {
  switch (reactPriorityLevel) {
    case ImmediatePriority:
      return Scheduler_ImmediatePriority;

    case UserBlockingPriority$1:
      return Scheduler_UserBlockingPriority;

    case NormalPriority:
      return Scheduler_NormalPriority;

    case LowPriority:
      return Scheduler_LowPriority;

    case IdlePriority:
      return Scheduler_IdlePriority;

    default:
      {
        {
          throw Error( "Unknown priority level." );
        }
      }

  }
}

function runWithPriority$1(reactPriorityLevel, fn) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_runWithPriority(priorityLevel, fn);
}
function scheduleCallback(reactPriorityLevel, callback, options) {
  var priorityLevel = reactPriorityToSchedulerPriority(reactPriorityLevel);
  return Scheduler_scheduleCallback(priorityLevel, callback, options);
}
function scheduleSyncCallback(callback) {
  // Push this callback into an internal queue. We'll flush these either in
  // the next tick, or earlier if something calls `flushSyncCallbackQueue`.
  if (syncQueue === null) {
    syncQueue = [callback]; // Flush the queue in the next tick, at the earliest.

    immediateQueueCallbackNode = Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueueImpl);
  } else {
    // Push onto existing queue. Don't need to schedule a callback because
    // we already scheduled one when we created the queue.
    syncQueue.push(callback);
  }

  return fakeCallbackNode;
}
function cancelCallback(callbackNode) {
  if (callbackNode !== fakeCallbackNode) {
    Scheduler_cancelCallback(callbackNode);
  }
}
function flushSyncCallbackQueue() {
  if (immediateQueueCallbackNode !== null) {
    var node = immediateQueueCallbackNode;
    immediateQueueCallbackNode = null;
    Scheduler_cancelCallback(node);
  }

  flushSyncCallbackQueueImpl();
}

function flushSyncCallbackQueueImpl() {
  if (!isFlushingSyncQueue && syncQueue !== null) {
    // Prevent re-entrancy.
    isFlushingSyncQueue = true;
    var i = 0;

    try {
      var _isSync = true;
      var queue = syncQueue;
      runWithPriority$1(ImmediatePriority, function () {
        for (; i < queue.length; i++) {
          var callback = queue[i];

          do {
            callback = callback(_isSync);
          } while (callback !== null);
        }
      });
      syncQueue = null;
    } catch (error) {
      // If something throws, leave the remaining callbacks on the queue.
      if (syncQueue !== null) {
        syncQueue = syncQueue.slice(i + 1);
      } // Resume flushing in the next tick


      Scheduler_scheduleCallback(Scheduler_ImmediatePriority, flushSyncCallbackQueue);
      throw error;
    } finally {
      isFlushingSyncQueue = false;
    }
  }
}

var NoMode = 0;
var StrictMode = 1; // TODO: Remove BlockingMode and ConcurrentMode by reading from the root
// tag instead

var BlockingMode = 2;
var ConcurrentMode = 4;
var ProfileMode = 8;

// Max 31 bit integer. The max integer size in V8 for 32-bit systems.
// Math.pow(2, 30) - 1
// 0b111111111111111111111111111111
var MAX_SIGNED_31_BIT_INT = 1073741823;

var NoWork = 0; // TODO: Think of a better name for Never. The key difference with Idle is that
// Never work can be committed in an inconsistent state without tearing the UI.
// The main example is offscreen content, like a hidden subtree. So one possible
// name is Offscreen. However, it also includes dehydrated Suspense boundaries,
// which are inconsistent in the sense that they haven't finished yet, but
// aren't visibly inconsistent because the server rendered HTML matches what the
// hydrated tree would look like.

var Never = 1; // Idle is slightly higher priority than Never. It must completely finish in
// order to be consistent.

var Idle = 2; // Continuous Hydration is slightly higher than Idle and is used to increase
// priority of hover targets.

var ContinuousHydration = 3;
var Sync = MAX_SIGNED_31_BIT_INT;
var Batched = Sync - 1;
var UNIT_SIZE = 10;
var MAGIC_NUMBER_OFFSET = Batched - 1; // 1 unit of expiration time represents 10ms.

function msToExpirationTime(ms) {
  // Always subtract from the offset so that we don't clash with the magic number for NoWork.
  return MAGIC_NUMBER_OFFSET - (ms / UNIT_SIZE | 0);
}
function expirationTimeToMs(expirationTime) {
  return (MAGIC_NUMBER_OFFSET - expirationTime) * UNIT_SIZE;
}

function ceiling(num, precision) {
  return ((num / precision | 0) + 1) * precision;
}

function computeExpirationBucket(currentTime, expirationInMs, bucketSizeMs) {
  return MAGIC_NUMBER_OFFSET - ceiling(MAGIC_NUMBER_OFFSET - currentTime + expirationInMs / UNIT_SIZE, bucketSizeMs / UNIT_SIZE);
} // TODO: This corresponds to Scheduler's NormalPriority, not LowPriority. Update
// the names to reflect.


var LOW_PRIORITY_EXPIRATION = 5000;
var LOW_PRIORITY_BATCH_SIZE = 250;
function computeAsyncExpiration(currentTime) {
  return computeExpirationBucket(currentTime, LOW_PRIORITY_EXPIRATION, LOW_PRIORITY_BATCH_SIZE);
}
function computeSuspenseExpiration(currentTime, timeoutMs) {
  // TODO: Should we warn if timeoutMs is lower than the normal pri expiration time?
  return computeExpirationBucket(currentTime, timeoutMs, LOW_PRIORITY_BATCH_SIZE);
} // We intentionally set a higher expiration time for interactive updates in
// dev than in production.
//
// If the main thread is being blocked so long that you hit the expiration,
// it's a problem that could be solved with better scheduling.
//
// People will be more likely to notice this and fix it with the long
// expiration time in development.
//
// In production we opt for better UX at the risk of masking scheduling
// problems, by expiring fast.

var HIGH_PRIORITY_EXPIRATION =  500 ;
var HIGH_PRIORITY_BATCH_SIZE = 100;
function computeInteractiveExpiration(currentTime) {
  return computeExpirationBucket(currentTime, HIGH_PRIORITY_EXPIRATION, HIGH_PRIORITY_BATCH_SIZE);
}
function inferPriorityFromExpirationTime(currentTime, expirationTime) {
  if (expirationTime === Sync) {
    return ImmediatePriority;
  }

  if (expirationTime === Never || expirationTime === Idle) {
    return IdlePriority;
  }

  var msUntil = expirationTimeToMs(expirationTime) - expirationTimeToMs(currentTime);

  if (msUntil <= 0) {
    return ImmediatePriority;
  }

  if (msUntil <= HIGH_PRIORITY_EXPIRATION + HIGH_PRIORITY_BATCH_SIZE) {
    return UserBlockingPriority$1;
  }

  if (msUntil <= LOW_PRIORITY_EXPIRATION + LOW_PRIORITY_BATCH_SIZE) {
    return NormalPriority;
  } // TODO: Handle LowPriority
  // Assume anything lower has idle priority


  return IdlePriority;
}

var ReactStrictModeWarnings = {
  recordUnsafeLifecycleWarnings: function (fiber, instance) {},
  flushPendingUnsafeLifecycleWarnings: function () {},
  recordLegacyContextWarning: function (fiber, instance) {},
  flushLegacyContextWarning: function () {},
  discardPendingWarnings: function () {}
};

{
  var findStrictRoot = function (fiber) {
    var maybeStrictRoot = null;
    var node = fiber;

    while (node !== null) {
      if (node.mode & StrictMode) {
        maybeStrictRoot = node;
      }

      node = node.return;
    }

    return maybeStrictRoot;
  };

  var setToSortedString = function (set) {
    var array = [];
    set.forEach(function (value) {
      array.push(value);
    });
    return array.sort().join(', ');
  };

  var pendingComponentWillMountWarnings = [];
  var pendingUNSAFE_ComponentWillMountWarnings = [];
  var pendingComponentWillReceivePropsWarnings = [];
  var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
  var pendingComponentWillUpdateWarnings = [];
  var pendingUNSAFE_ComponentWillUpdateWarnings = []; // Tracks components we have already warned about.

  var didWarnAboutUnsafeLifecycles = new Set();

  ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function (fiber, instance) {
    // Dedup strategy: Warn once per component.
    if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
      return;
    }

    if (typeof instance.componentWillMount === 'function' && // Don't warn about react-lifecycles-compat polyfilled components.
    instance.componentWillMount.__suppressDeprecationWarning !== true) {
      pendingComponentWillMountWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillMount === 'function') {
      pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
    }

    if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
      pendingComponentWillReceivePropsWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
    }

    if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
      pendingComponentWillUpdateWarnings.push(fiber);
    }

    if (fiber.mode & StrictMode && typeof instance.UNSAFE_componentWillUpdate === 'function') {
      pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function () {
    // We do an initial pass to gather component names
    var componentWillMountUniqueNames = new Set();

    if (pendingComponentWillMountWarnings.length > 0) {
      pendingComponentWillMountWarnings.forEach(function (fiber) {
        componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillMountWarnings = [];
    }

    var UNSAFE_componentWillMountUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
      pendingUNSAFE_ComponentWillMountWarnings.forEach(function (fiber) {
        UNSAFE_componentWillMountUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillMountWarnings = [];
    }

    var componentWillReceivePropsUniqueNames = new Set();

    if (pendingComponentWillReceivePropsWarnings.length > 0) {
      pendingComponentWillReceivePropsWarnings.forEach(function (fiber) {
        componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillReceivePropsWarnings = [];
    }

    var UNSAFE_componentWillReceivePropsUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
      pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function (fiber) {
        UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    }

    var componentWillUpdateUniqueNames = new Set();

    if (pendingComponentWillUpdateWarnings.length > 0) {
      pendingComponentWillUpdateWarnings.forEach(function (fiber) {
        componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingComponentWillUpdateWarnings = [];
    }

    var UNSAFE_componentWillUpdateUniqueNames = new Set();

    if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
      pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function (fiber) {
        UNSAFE_componentWillUpdateUniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutUnsafeLifecycles.add(fiber.type);
      });
      pendingUNSAFE_ComponentWillUpdateWarnings = [];
    } // Finally, we flush all the warnings
    // UNSAFE_ ones before the deprecated ones, since they'll be 'louder'


    if (UNSAFE_componentWillMountUniqueNames.size > 0) {
      var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);

      error('Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '\nPlease update the following components: %s', sortedNames);
    }

    if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);

      error('Using UNSAFE_componentWillReceiveProps in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, " + 'refactor your code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '\nPlease update the following components: %s', _sortedNames);
    }

    if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);

      error('Using UNSAFE_componentWillUpdate in strict mode is not recommended ' + 'and may indicate bugs in your code. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '\nPlease update the following components: %s', _sortedNames2);
    }

    if (componentWillMountUniqueNames.size > 0) {
      var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);

      warn('componentWillMount has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move code with side effects to componentDidMount, and set initial state in the constructor.\n' + '* Rename componentWillMount to UNSAFE_componentWillMount to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames3);
    }

    if (componentWillReceivePropsUniqueNames.size > 0) {
      var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);

      warn('componentWillReceiveProps has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + "* If you're updating state whenever props change, refactor your " + 'code to use memoization techniques or move it to ' + 'static getDerivedStateFromProps. Learn more at: https://fb.me/react-derived-state\n' + '* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames4);
    }

    if (componentWillUpdateUniqueNames.size > 0) {
      var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);

      warn('componentWillUpdate has been renamed, and is not recommended for use. ' + 'See https://fb.me/react-unsafe-component-lifecycles for details.\n\n' + '* Move data fetching code or side effects to componentDidUpdate.\n' + '* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress ' + 'this warning in non-strict mode. In React 17.x, only the UNSAFE_ name will work. ' + 'To rename all deprecated lifecycles to their new names, you can run ' + '`npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n' + '\nPlease update the following components: %s', _sortedNames5);
    }
  };

  var pendingLegacyContextWarning = new Map(); // Tracks components we have already warned about.

  var didWarnAboutLegacyContext = new Set();

  ReactStrictModeWarnings.recordLegacyContextWarning = function (fiber, instance) {
    var strictRoot = findStrictRoot(fiber);

    if (strictRoot === null) {
      error('Expected to find a StrictMode component in a strict mode tree. ' + 'This error is likely caused by a bug in React. Please file an issue.');

      return;
    } // Dedup strategy: Warn once per component.


    if (didWarnAboutLegacyContext.has(fiber.type)) {
      return;
    }

    var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);

    if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === 'function') {
      if (warningsForRoot === undefined) {
        warningsForRoot = [];
        pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
      }

      warningsForRoot.push(fiber);
    }
  };

  ReactStrictModeWarnings.flushLegacyContextWarning = function () {
    pendingLegacyContextWarning.forEach(function (fiberArray, strictRoot) {
      if (fiberArray.length === 0) {
        return;
      }

      var firstFiber = fiberArray[0];
      var uniqueNames = new Set();
      fiberArray.forEach(function (fiber) {
        uniqueNames.add(getComponentName(fiber.type) || 'Component');
        didWarnAboutLegacyContext.add(fiber.type);
      });
      var sortedNames = setToSortedString(uniqueNames);
      var firstComponentStack = getStackByFiberInDevAndProd(firstFiber);

      error('Legacy context API has been detected within a strict-mode tree.' + '\n\nThe old API will be supported in all 16.x releases, but applications ' + 'using it should migrate to the new version.' + '\n\nPlease update the following components: %s' + '\n\nLearn more about this warning here: https://fb.me/react-legacy-context' + '%s', sortedNames, firstComponentStack);
    });
  };

  ReactStrictModeWarnings.discardPendingWarnings = function () {
    pendingComponentWillMountWarnings = [];
    pendingUNSAFE_ComponentWillMountWarnings = [];
    pendingComponentWillReceivePropsWarnings = [];
    pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
    pendingComponentWillUpdateWarnings = [];
    pendingUNSAFE_ComponentWillUpdateWarnings = [];
    pendingLegacyContextWarning = new Map();
  };
}

var resolveFamily = null; // $FlowFixMe Flow gets confused by a WeakSet feature check below.

var failedBoundaries = null;
var setRefreshHandler = function (handler) {
  {
    resolveFamily = handler;
  }
};
function resolveFunctionForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function resolveClassForHotReloading(type) {
  // No implementation differences.
  return resolveFunctionForHotReloading(type);
}
function resolveForwardRefForHotReloading(type) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return type;
    }

    var family = resolveFamily(type);

    if (family === undefined) {
      // Check if we're dealing with a real forwardRef. Don't want to crash early.
      if (type !== null && type !== undefined && typeof type.render === 'function') {
        // ForwardRef is special because its resolved .type is an object,
        // but it's possible that we only have its inner render function in the map.
        // If that inner render function is different, we'll build a new forwardRef type.
        var currentRender = resolveFunctionForHotReloading(type.render);

        if (type.render !== currentRender) {
          var syntheticType = {
            $$typeof: REACT_FORWARD_REF_TYPE,
            render: currentRender
          };

          if (type.displayName !== undefined) {
            syntheticType.displayName = type.displayName;
          }

          return syntheticType;
        }
      }

      return type;
    } // Use the latest known implementation.


    return family.current;
  }
}
function isCompatibleFamilyForHotReloading(fiber, element) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return false;
    }

    var prevType = fiber.elementType;
    var nextType = element.type; // If we got here, we know types aren't === equal.

    var needsCompareFamilies = false;
    var $$typeofNextType = typeof nextType === 'object' && nextType !== null ? nextType.$$typeof : null;

    switch (fiber.tag) {
      case ClassComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          }

          break;
        }

      case FunctionComponent:
        {
          if (typeof nextType === 'function') {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            // We don't know the inner type yet.
            // We're going to assume that the lazy inner type is stable,
            // and so it is sufficient to avoid reconciling it away.
            // We're not going to unwrap or actually use the new lazy type.
            needsCompareFamilies = true;
          }

          break;
        }

      case ForwardRef:
        {
          if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      case MemoComponent:
      case SimpleMemoComponent:
        {
          if ($$typeofNextType === REACT_MEMO_TYPE) {
            // TODO: if it was but can no longer be simple,
            // we shouldn't set this.
            needsCompareFamilies = true;
          } else if ($$typeofNextType === REACT_LAZY_TYPE) {
            needsCompareFamilies = true;
          }

          break;
        }

      default:
        return false;
    } // Check if both types have a family and it's the same one.


    if (needsCompareFamilies) {
      // Note: memo() and forwardRef() we'll compare outer rather than inner type.
      // This means both of them need to be registered to preserve state.
      // If we unwrapped and compared the inner types for wrappers instead,
      // then we would risk falsely saying two separate memo(Foo)
      // calls are equivalent because they wrap the same Foo function.
      var prevFamily = resolveFamily(prevType);

      if (prevFamily !== undefined && prevFamily === resolveFamily(nextType)) {
        return true;
      }
    }

    return false;
  }
}
function markFailedErrorBoundaryForHotReloading(fiber) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    if (typeof WeakSet !== 'function') {
      return;
    }

    if (failedBoundaries === null) {
      failedBoundaries = new WeakSet();
    }

    failedBoundaries.add(fiber);
  }
}
var scheduleRefresh = function (root, update) {
  {
    if (resolveFamily === null) {
      // Hot reloading is disabled.
      return;
    }

    var staleFamilies = update.staleFamilies,
        updatedFamilies = update.updatedFamilies;
    flushPassiveEffects();
    flushSync(function () {
      scheduleFibersWithFamiliesRecursively(root.current, updatedFamilies, staleFamilies);
    });
  }
};
var scheduleRoot = function (root, element) {
  {
    if (root.context !== emptyContextObject) {
      // Super edge case: root has a legacy _renderSubtree context
      // but we don't know the parentComponent so we can't pass it.
      // Just ignore. We'll delete this with _renderSubtree code path later.
      return;
    }

    flushPassiveEffects();
    syncUpdates(function () {
      updateContainer(element, root, null, null);
    });
  }
};

function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
  {
    var alternate = fiber.alternate,
        child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    if (resolveFamily === null) {
      throw new Error('Expected resolveFamily to be set during hot reload.');
    }

    var needsRender = false;
    var needsRemount = false;

    if (candidateType !== null) {
      var family = resolveFamily(candidateType);

      if (family !== undefined) {
        if (staleFamilies.has(family)) {
          needsRemount = true;
        } else if (updatedFamilies.has(family)) {
          if (tag === ClassComponent) {
            needsRemount = true;
          } else {
            needsRender = true;
          }
        }
      }
    }

    if (failedBoundaries !== null) {
      if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
        needsRemount = true;
      }
    }

    if (needsRemount) {
      fiber._debugNeedsRemount = true;
    }

    if (needsRemount || needsRender) {
      scheduleWork(fiber, Sync);
    }

    if (child !== null && !needsRemount) {
      scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
    }

    if (sibling !== null) {
      scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
    }
  }
}

var findHostInstancesForRefresh = function (root, families) {
  {
    var hostInstances = new Set();
    var types = new Set(families.map(function (family) {
      return family.current;
    }));
    findHostInstancesForMatchingFibersRecursively(root.current, types, hostInstances);
    return hostInstances;
  }
};

function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
  {
    var child = fiber.child,
        sibling = fiber.sibling,
        tag = fiber.tag,
        type = fiber.type;
    var candidateType = null;

    switch (tag) {
      case FunctionComponent:
      case SimpleMemoComponent:
      case ClassComponent:
        candidateType = type;
        break;

      case ForwardRef:
        candidateType = type.render;
        break;
    }

    var didMatch = false;

    if (candidateType !== null) {
      if (types.has(candidateType)) {
        didMatch = true;
      }
    }

    if (didMatch) {
      // We have a match. This only drills down to the closest host components.
      // There's no need to search deeper because for the purpose of giving
      // visual feedback, "flashing" outermost parent rectangles is sufficient.
      findHostInstancesForFiberShallowly(fiber, hostInstances);
    } else {
      // If there's no match, maybe there will be one further down in the child tree.
      if (child !== null) {
        findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
      }
    }

    if (sibling !== null) {
      findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
    }
  }
}

function findHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);

    if (foundHostInstances) {
      return;
    } // If we didn't find any host children, fallback to closest host parent.


    var node = fiber;

    while (true) {
      switch (node.tag) {
        case HostComponent:
          hostInstances.add(node.stateNode);
          return;

        case HostPortal:
          hostInstances.add(node.stateNode.containerInfo);
          return;

        case HostRoot:
          hostInstances.add(node.stateNode.containerInfo);
          return;
      }

      if (node.return === null) {
        throw new Error('Expected to reach root first.');
      }

      node = node.return;
    }
  }
}

function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
  {
    var node = fiber;
    var foundHostInstances = false;

    while (true) {
      if (node.tag === HostComponent) {
        // We got a match.
        foundHostInstances = true;
        hostInstances.add(node.stateNode); // There may still be more, so keep searching.
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === fiber) {
        return foundHostInstances;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === fiber) {
          return foundHostInstances;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }

  return false;
}

function resolveDefaultProps(Component, baseProps) {
  if (Component && Component.defaultProps) {
    // Resolve default props. Taken from ReactElement
    var props = _assign({}, baseProps);

    var defaultProps = Component.defaultProps;

    for (var propName in defaultProps) {
      if (props[propName] === undefined) {
        props[propName] = defaultProps[propName];
      }
    }

    return props;
  }

  return baseProps;
}
function readLazyComponentType(lazyComponent) {
  initializeLazyComponentType(lazyComponent);

  if (lazyComponent._status !== Resolved) {
    throw lazyComponent._result;
  }

  return lazyComponent._result;
}

var valueCursor = createCursor(null);
var rendererSigil;

{
  // Use this to detect multiple renderers using the same context
  rendererSigil = {};
}

var currentlyRenderingFiber = null;
var lastContextDependency = null;
var lastContextWithAllBitsObserved = null;
var isDisallowedContextReadInDEV = false;
function resetContextDependencies() {
  // This is called right before React yields execution, to ensure `readContext`
  // cannot be called outside the render phase.
  currentlyRenderingFiber = null;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;

  {
    isDisallowedContextReadInDEV = false;
  }
}
function enterDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = true;
  }
}
function exitDisallowedContextReadInDEV() {
  {
    isDisallowedContextReadInDEV = false;
  }
}
function pushProvider(providerFiber, nextValue) {
  var context = providerFiber.type._context;

  {
    push(valueCursor, context._currentValue, providerFiber);
    context._currentValue = nextValue;

    {
      if (context._currentRenderer !== undefined && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
        error('Detected multiple renderers concurrently rendering the ' + 'same context provider. This is currently unsupported.');
      }

      context._currentRenderer = rendererSigil;
    }
  }
}
function popProvider(providerFiber) {
  var currentValue = valueCursor.current;
  pop(valueCursor, providerFiber);
  var context = providerFiber.type._context;

  {
    context._currentValue = currentValue;
  }
}
function calculateChangedBits(context, newValue, oldValue) {
  if (objectIs(oldValue, newValue)) {
    // No change
    return 0;
  } else {
    var changedBits = typeof context._calculateChangedBits === 'function' ? context._calculateChangedBits(oldValue, newValue) : MAX_SIGNED_31_BIT_INT;

    {
      if ((changedBits & MAX_SIGNED_31_BIT_INT) !== changedBits) {
        error('calculateChangedBits: Expected the return value to be a ' + '31-bit integer. Instead received: %s', changedBits);
      }
    }

    return changedBits | 0;
  }
}
function scheduleWorkOnParentPath(parent, renderExpirationTime) {
  // Update the child expiration time of all the ancestors, including
  // the alternates.
  var node = parent;

  while (node !== null) {
    var alternate = node.alternate;

    if (node.childExpirationTime < renderExpirationTime) {
      node.childExpirationTime = renderExpirationTime;

      if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
        alternate.childExpirationTime = renderExpirationTime;
      }
    } else if (alternate !== null && alternate.childExpirationTime < renderExpirationTime) {
      alternate.childExpirationTime = renderExpirationTime;
    } else {
      // Neither alternate was updated, which means the rest of the
      // ancestor path already has sufficient priority.
      break;
    }

    node = node.return;
  }
}
function propagateContextChange(workInProgress, context, changedBits, renderExpirationTime) {
  var fiber = workInProgress.child;

  if (fiber !== null) {
    // Set the return pointer of the child to the work-in-progress fiber.
    fiber.return = workInProgress;
  }

  while (fiber !== null) {
    var nextFiber = void 0; // Visit this fiber.

    var list = fiber.dependencies;

    if (list !== null) {
      nextFiber = fiber.child;
      var dependency = list.firstContext;

      while (dependency !== null) {
        // Check if the context matches.
        if (dependency.context === context && (dependency.observedBits & changedBits) !== 0) {
          // Match! Schedule an update on this fiber.
          if (fiber.tag === ClassComponent) {
            // Schedule a force update on the work-in-progress.
            var update = createUpdate(renderExpirationTime, null);
            update.tag = ForceUpdate; // TODO: Because we don't have a work-in-progress, this will add the
            // update to the current fiber, too, which means it will persist even if
            // this render is thrown away. Since it's a race condition, not sure it's
            // worth fixing.

            enqueueUpdate(fiber, update);
          }

          if (fiber.expirationTime < renderExpirationTime) {
            fiber.expirationTime = renderExpirationTime;
          }

          var alternate = fiber.alternate;

          if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
            alternate.expirationTime = renderExpirationTime;
          }

          scheduleWorkOnParentPath(fiber.return, renderExpirationTime); // Mark the expiration time on the list, too.

          if (list.expirationTime < renderExpirationTime) {
            list.expirationTime = renderExpirationTime;
          } // Since we already found a match, we can stop traversing the
          // dependency list.


          break;
        }

        dependency = dependency.next;
      }
    } else if (fiber.tag === ContextProvider) {
      // Don't scan deeper if this is a matching provider
      nextFiber = fiber.type === workInProgress.type ? null : fiber.child;
    } else {
      // Traverse down.
      nextFiber = fiber.child;
    }

    if (nextFiber !== null) {
      // Set the return pointer of the child to the work-in-progress fiber.
      nextFiber.return = fiber;
    } else {
      // No child. Traverse to next sibling.
      nextFiber = fiber;

      while (nextFiber !== null) {
        if (nextFiber === workInProgress) {
          // We're back to the root of this subtree. Exit.
          nextFiber = null;
          break;
        }

        var sibling = nextFiber.sibling;

        if (sibling !== null) {
          // Set the return pointer of the sibling to the work-in-progress fiber.
          sibling.return = nextFiber.return;
          nextFiber = sibling;
          break;
        } // No more siblings. Traverse up.


        nextFiber = nextFiber.return;
      }
    }

    fiber = nextFiber;
  }
}
function prepareToReadContext(workInProgress, renderExpirationTime) {
  currentlyRenderingFiber = workInProgress;
  lastContextDependency = null;
  lastContextWithAllBitsObserved = null;
  var dependencies = workInProgress.dependencies;

  if (dependencies !== null) {
    var firstContext = dependencies.firstContext;

    if (firstContext !== null) {
      if (dependencies.expirationTime >= renderExpirationTime) {
        // Context list has a pending update. Mark that this fiber performed work.
        markWorkInProgressReceivedUpdate();
      } // Reset the work-in-progress list


      dependencies.firstContext = null;
    }
  }
}
function readContext(context, observedBits) {
  {
    // This warning would fire if you read context inside a Hook like useMemo.
    // Unlike the class check below, it's not enforced in production for perf.
    if (isDisallowedContextReadInDEV) {
      error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
    }
  }

  if (lastContextWithAllBitsObserved === context) ; else if (observedBits === false || observedBits === 0) ; else {
    var resolvedObservedBits; // Avoid deopting on observable arguments or heterogeneous types.

    if (typeof observedBits !== 'number' || observedBits === MAX_SIGNED_31_BIT_INT) {
      // Observe all updates.
      lastContextWithAllBitsObserved = context;
      resolvedObservedBits = MAX_SIGNED_31_BIT_INT;
    } else {
      resolvedObservedBits = observedBits;
    }

    var contextItem = {
      context: context,
      observedBits: resolvedObservedBits,
      next: null
    };

    if (lastContextDependency === null) {
      if (!(currentlyRenderingFiber !== null)) {
        {
          throw Error( "Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo()." );
        }
      } // This is the first dependency for this component. Create a new list.


      lastContextDependency = contextItem;
      currentlyRenderingFiber.dependencies = {
        expirationTime: NoWork,
        firstContext: contextItem,
        responders: null
      };
    } else {
      // Append a new context item.
      lastContextDependency = lastContextDependency.next = contextItem;
    }
  }

  return  context._currentValue ;
}

var UpdateState = 0;
var ReplaceState = 1;
var ForceUpdate = 2;
var CaptureUpdate = 3; // Global state that is reset at the beginning of calling `processUpdateQueue`.
// It should only be read right after calling `processUpdateQueue`, via
// `checkHasForceUpdateAfterProcessing`.

var hasForceUpdate = false;
var didWarnUpdateInsideUpdate;
var currentlyProcessingQueue;

{
  didWarnUpdateInsideUpdate = false;
  currentlyProcessingQueue = null;
}

function initializeUpdateQueue(fiber) {
  var queue = {
    baseState: fiber.memoizedState,
    baseQueue: null,
    shared: {
      pending: null
    },
    effects: null
  };
  fiber.updateQueue = queue;
}
function cloneUpdateQueue(current, workInProgress) {
  // Clone the update queue from current. Unless it's already a clone.
  var queue = workInProgress.updateQueue;
  var currentQueue = current.updateQueue;

  if (queue === currentQueue) {
    var clone = {
      baseState: currentQueue.baseState,
      baseQueue: currentQueue.baseQueue,
      shared: currentQueue.shared,
      effects: currentQueue.effects
    };
    workInProgress.updateQueue = clone;
  }
}
function createUpdate(expirationTime, suspenseConfig) {
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    tag: UpdateState,
    payload: null,
    callback: null,
    next: null
  };
  update.next = update;

  {
    update.priority = getCurrentPriorityLevel();
  }

  return update;
}
function enqueueUpdate(fiber, update) {
  var updateQueue = fiber.updateQueue;

  if (updateQueue === null) {
    // Only occurs if the fiber has been unmounted.
    return;
  }

  var sharedQueue = updateQueue.shared;
  var pending = sharedQueue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  sharedQueue.pending = update;

  {
    if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
      error('An update (setState, replaceState, or forceUpdate) was scheduled ' + 'from inside an update function. Update functions should be pure, ' + 'with zero side-effects. Consider using componentDidUpdate or a ' + 'callback.');

      didWarnUpdateInsideUpdate = true;
    }
  }
}
function enqueueCapturedUpdate(workInProgress, update) {
  var current = workInProgress.alternate;

  if (current !== null) {
    // Ensure the work-in-progress queue is a clone
    cloneUpdateQueue(current, workInProgress);
  } // Captured updates go only on the work-in-progress queue.


  var queue = workInProgress.updateQueue; // Append the update to the end of the list.

  var last = queue.baseQueue;

  if (last === null) {
    queue.baseQueue = update.next = update;
    update.next = update;
  } else {
    update.next = last.next;
    last.next = update;
  }
}

function getStateFromUpdate(workInProgress, queue, update, prevState, nextProps, instance) {
  switch (update.tag) {
    case ReplaceState:
      {
        var payload = update.payload;

        if (typeof payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              payload.call(instance, prevState, nextProps);
            }
          }

          var nextState = payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }

          return nextState;
        } // State object


        return payload;
      }

    case CaptureUpdate:
      {
        workInProgress.effectTag = workInProgress.effectTag & ~ShouldCapture | DidCapture;
      }
    // Intentional fallthrough

    case UpdateState:
      {
        var _payload = update.payload;
        var partialState;

        if (typeof _payload === 'function') {
          // Updater function
          {
            enterDisallowedContextReadInDEV();

            if ( workInProgress.mode & StrictMode) {
              _payload.call(instance, prevState, nextProps);
            }
          }

          partialState = _payload.call(instance, prevState, nextProps);

          {
            exitDisallowedContextReadInDEV();
          }
        } else {
          // Partial state object
          partialState = _payload;
        }

        if (partialState === null || partialState === undefined) {
          // Null and undefined are treated as no-ops.
          return prevState;
        } // Merge the partial state and the previous state.


        return _assign({}, prevState, partialState);
      }

    case ForceUpdate:
      {
        hasForceUpdate = true;
        return prevState;
      }
  }

  return prevState;
}

function processUpdateQueue(workInProgress, props, instance, renderExpirationTime) {
  // This is always non-null on a ClassComponent or HostRoot
  var queue = workInProgress.updateQueue;
  hasForceUpdate = false;

  {
    currentlyProcessingQueue = queue.shared;
  } // The last rebase update that is NOT part of the base state.


  var baseQueue = queue.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.shared.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    baseQueue = pendingQueue;
    queue.shared.pending = null; // TODO: Pass `current` as argument

    var current = workInProgress.alternate;

    if (current !== null) {
      var currentQueue = current.updateQueue;

      if (currentQueue !== null) {
        currentQueue.baseQueue = pendingQueue;
      }
    }
  } // These values may change as we process the queue.


  if (baseQueue !== null) {
    var first = baseQueue.next; // Iterate through the list of updates to compute the result.

    var newState = queue.baseState;
    var newExpirationTime = NoWork;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;

    if (first !== null) {
      var update = first;

      do {
        var updateExpirationTime = update.expirationTime;

        if (updateExpirationTime < renderExpirationTime) {
          // Priority is insufficient. Skip this update. If this is the first
          // skipped update, the previous update/state is the new base
          // update/state.
          var clone = {
            expirationTime: update.expirationTime,
            suspenseConfig: update.suspenseConfig,
            tag: update.tag,
            payload: update.payload,
            callback: update.callback,
            next: null
          };

          if (newBaseQueueLast === null) {
            newBaseQueueFirst = newBaseQueueLast = clone;
            newBaseState = newState;
          } else {
            newBaseQueueLast = newBaseQueueLast.next = clone;
          } // Update the remaining priority in the queue.


          if (updateExpirationTime > newExpirationTime) {
            newExpirationTime = updateExpirationTime;
          }
        } else {
          // This update does have sufficient priority.
          if (newBaseQueueLast !== null) {
            var _clone = {
              expirationTime: Sync,
              // This update is going to be committed so we never want uncommit it.
              suspenseConfig: update.suspenseConfig,
              tag: update.tag,
              payload: update.payload,
              callback: update.callback,
              next: null
            };
            newBaseQueueLast = newBaseQueueLast.next = _clone;
          } // Mark the event time of this update as relevant to this render pass.
          // TODO: This should ideally use the true event time of this update rather than
          // its priority which is a derived and not reverseable value.
          // TODO: We should skip this update if it was already committed but currently
          // we have no way of detecting the difference between a committed and suspended
          // update here.


          markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

          newState = getStateFromUpdate(workInProgress, queue, update, newState, props, instance);
          var callback = update.callback;

          if (callback !== null) {
            workInProgress.effectTag |= Callback;
            var effects = queue.effects;

            if (effects === null) {
              queue.effects = [update];
            } else {
              effects.push(update);
            }
          }
        }

        update = update.next;

        if (update === null || update === first) {
          pendingQueue = queue.shared.pending;

          if (pendingQueue === null) {
            break;
          } else {
            // An update was scheduled from inside a reducer. Add the new
            // pending updates to the end of the list and keep processing.
            update = baseQueue.next = pendingQueue.next;
            pendingQueue.next = first;
            queue.baseQueue = baseQueue = pendingQueue;
            queue.shared.pending = null;
          }
        }
      } while (true);
    }

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    }

    queue.baseState = newBaseState;
    queue.baseQueue = newBaseQueueLast; // Set the remaining expiration time to be whatever is remaining in the queue.
    // This should be fine because the only two other things that contribute to
    // expiration time are props and context. We're already in the middle of the
    // begin phase by the time we start processing the queue, so we've already
    // dealt with the props. Context in components that specify
    // shouldComponentUpdate is tricky; but we'll have to account for
    // that regardless.

    markUnprocessedUpdateTime(newExpirationTime);
    workInProgress.expirationTime = newExpirationTime;
    workInProgress.memoizedState = newState;
  }

  {
    currentlyProcessingQueue = null;
  }
}

function callCallback(callback, context) {
  if (!(typeof callback === 'function')) {
    {
      throw Error( "Invalid argument passed as callback. Expected a function. Instead received: " + callback );
    }
  }

  callback.call(context);
}

function resetHasForceUpdateBeforeProcessing() {
  hasForceUpdate = false;
}
function checkHasForceUpdateAfterProcessing() {
  return hasForceUpdate;
}
function commitUpdateQueue(finishedWork, finishedQueue, instance) {
  // Commit the effects
  var effects = finishedQueue.effects;
  finishedQueue.effects = null;

  if (effects !== null) {
    for (var i = 0; i < effects.length; i++) {
      var effect = effects[i];
      var callback = effect.callback;

      if (callback !== null) {
        effect.callback = null;
        callCallback(callback, instance);
      }
    }
  }
}

var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
function requestCurrentSuspenseConfig() {
  return ReactCurrentBatchConfig.suspense;
}

var fakeInternalInstance = {};
var isArray = Array.isArray; // React.Component uses a shared frozen object by default.
// We'll use it to determine whether we need to initialize legacy refs.

var emptyRefsObject = new React.Component().refs;
var didWarnAboutStateAssignmentForComponent;
var didWarnAboutUninitializedState;
var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
var didWarnAboutLegacyLifecyclesAndDerivedState;
var didWarnAboutUndefinedDerivedState;
var warnOnUndefinedDerivedState;
var warnOnInvalidCallback;
var didWarnAboutDirectlyAssigningPropsToState;
var didWarnAboutContextTypeAndContextTypes;
var didWarnAboutInvalidateContextType;

{
  didWarnAboutStateAssignmentForComponent = new Set();
  didWarnAboutUninitializedState = new Set();
  didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = new Set();
  didWarnAboutLegacyLifecyclesAndDerivedState = new Set();
  didWarnAboutDirectlyAssigningPropsToState = new Set();
  didWarnAboutUndefinedDerivedState = new Set();
  didWarnAboutContextTypeAndContextTypes = new Set();
  didWarnAboutInvalidateContextType = new Set();
  var didWarnOnInvalidCallback = new Set();

  warnOnInvalidCallback = function (callback, callerName) {
    if (callback === null || typeof callback === 'function') {
      return;
    }

    var key = callerName + "_" + callback;

    if (!didWarnOnInvalidCallback.has(key)) {
      didWarnOnInvalidCallback.add(key);

      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  };

  warnOnUndefinedDerivedState = function (type, partialState) {
    if (partialState === undefined) {
      var componentName = getComponentName(type) || 'Component';

      if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
        didWarnAboutUndefinedDerivedState.add(componentName);

        error('%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. ' + 'You have returned undefined.', componentName);
      }
    }
  }; // This is so gross but it's at least non-critical and can be removed if
  // it causes problems. This is meant to give a nicer error message for
  // ReactDOM15.unstable_renderSubtreeIntoContainer(reactDOM16Component,
  // ...)) which otherwise throws a "_processChildContext is not a function"
  // exception.


  Object.defineProperty(fakeInternalInstance, '_processChildContext', {
    enumerable: false,
    value: function () {
      {
        {
          throw Error( "_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal)." );
        }
      }
    }
  });
  Object.freeze(fakeInternalInstance);
}

function applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, nextProps) {
  var prevState = workInProgress.memoizedState;

  {
    if ( workInProgress.mode & StrictMode) {
      // Invoke the function an extra time to help detect side-effects.
      getDerivedStateFromProps(nextProps, prevState);
    }
  }

  var partialState = getDerivedStateFromProps(nextProps, prevState);

  {
    warnOnUndefinedDerivedState(ctor, partialState);
  } // Merge the partial state and the previous state.


  var memoizedState = partialState === null || partialState === undefined ? prevState : _assign({}, prevState, partialState);
  workInProgress.memoizedState = memoizedState; // Once the update queue is empty, persist the derived state onto the
  // base state.

  if (workInProgress.expirationTime === NoWork) {
    // Queue is always non-null for classes
    var updateQueue = workInProgress.updateQueue;
    updateQueue.baseState = memoizedState;
  }
}
var classComponentUpdater = {
  isMounted: isMounted,
  enqueueSetState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'setState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueReplaceState: function (inst, payload, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ReplaceState;
    update.payload = payload;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'replaceState');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  },
  enqueueForceUpdate: function (inst, callback) {
    var fiber = get(inst);
    var currentTime = requestCurrentTimeForUpdate();
    var suspenseConfig = requestCurrentSuspenseConfig();
    var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
    var update = createUpdate(expirationTime, suspenseConfig);
    update.tag = ForceUpdate;

    if (callback !== undefined && callback !== null) {
      {
        warnOnInvalidCallback(callback, 'forceUpdate');
      }

      update.callback = callback;
    }

    enqueueUpdate(fiber, update);
    scheduleWork(fiber, expirationTime);
  }
};

function checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext) {
  var instance = workInProgress.stateNode;

  if (typeof instance.shouldComponentUpdate === 'function') {
    {
      if ( workInProgress.mode & StrictMode) {
        // Invoke the function an extra time to help detect side-effects.
        instance.shouldComponentUpdate(newProps, newState, nextContext);
      }
    }

    startPhaseTimer(workInProgress, 'shouldComponentUpdate');
    var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
    stopPhaseTimer();

    {
      if (shouldUpdate === undefined) {
        error('%s.shouldComponentUpdate(): Returned undefined instead of a ' + 'boolean value. Make sure to return true or false.', getComponentName(ctor) || 'Component');
      }
    }

    return shouldUpdate;
  }

  if (ctor.prototype && ctor.prototype.isPureReactComponent) {
    return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
  }

  return true;
}

function checkClassInstance(workInProgress, ctor, newProps) {
  var instance = workInProgress.stateNode;

  {
    var name = getComponentName(ctor) || 'Component';
    var renderPresent = instance.render;

    if (!renderPresent) {
      if (ctor.prototype && typeof ctor.prototype.render === 'function') {
        error('%s(...): No `render` method found on the returned component ' + 'instance: did you accidentally return an object from the constructor?', name);
      } else {
        error('%s(...): No `render` method found on the returned component ' + 'instance: you may have forgotten to define `render`.', name);
      }
    }

    if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
      error('getInitialState was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Did you mean to define a state property instead?', name);
    }

    if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
      error('getDefaultProps was defined on %s, a plain JavaScript class. ' + 'This is only supported for classes created using React.createClass. ' + 'Use a static property to define defaultProps instead.', name);
    }

    if (instance.propTypes) {
      error('propTypes was defined as an instance property on %s. Use a static ' + 'property to define propTypes instead.', name);
    }

    if (instance.contextType) {
      error('contextType was defined as an instance property on %s. Use a static ' + 'property to define contextType instead.', name);
    }

    {
      if (instance.contextTypes) {
        error('contextTypes was defined as an instance property on %s. Use a static ' + 'property to define contextTypes instead.', name);
      }

      if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
        didWarnAboutContextTypeAndContextTypes.add(ctor);

        error('%s declares both contextTypes and contextType static properties. ' + 'The legacy contextTypes property will be ignored.', name);
      }
    }

    if (typeof instance.componentShouldUpdate === 'function') {
      error('%s has a method called ' + 'componentShouldUpdate(). Did you mean shouldComponentUpdate()? ' + 'The name is phrased as a question because the function is ' + 'expected to return a value.', name);
    }

    if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== 'undefined') {
      error('%s has a method called shouldComponentUpdate(). ' + 'shouldComponentUpdate should not be used when extending React.PureComponent. ' + 'Please extend React.Component if shouldComponentUpdate is used.', getComponentName(ctor) || 'A pure component');
    }

    if (typeof instance.componentDidUnmount === 'function') {
      error('%s has a method called ' + 'componentDidUnmount(). But there is no such lifecycle method. ' + 'Did you mean componentWillUnmount()?', name);
    }

    if (typeof instance.componentDidReceiveProps === 'function') {
      error('%s has a method called ' + 'componentDidReceiveProps(). But there is no such lifecycle method. ' + 'If you meant to update the state in response to changing props, ' + 'use componentWillReceiveProps(). If you meant to fetch data or ' + 'run side-effects or mutations after React has updated the UI, use componentDidUpdate().', name);
    }

    if (typeof instance.componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'componentWillRecieveProps(). Did you mean componentWillReceiveProps()?', name);
    }

    if (typeof instance.UNSAFE_componentWillRecieveProps === 'function') {
      error('%s has a method called ' + 'UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?', name);
    }

    var hasMutatedProps = instance.props !== newProps;

    if (instance.props !== undefined && hasMutatedProps) {
      error('%s(...): When calling super() in `%s`, make sure to pass ' + "up the same props that your component's constructor was passed.", name, name);
    }

    if (instance.defaultProps) {
      error('Setting defaultProps as an instance property on %s is not supported and will be ignored.' + ' Instead, define defaultProps as a static property on %s.', name, name);
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function' && typeof instance.componentDidUpdate !== 'function' && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
      didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);

      error('%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). ' + 'This component defines getSnapshotBeforeUpdate() only.', getComponentName(ctor));
    }

    if (typeof instance.getDerivedStateFromProps === 'function') {
      error('%s: getDerivedStateFromProps() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof instance.getDerivedStateFromError === 'function') {
      error('%s: getDerivedStateFromError() is defined as an instance method ' + 'and will be ignored. Instead, declare it as a static method.', name);
    }

    if (typeof ctor.getSnapshotBeforeUpdate === 'function') {
      error('%s: getSnapshotBeforeUpdate() is defined as a static method ' + 'and will be ignored. Instead, declare it as an instance method.', name);
    }

    var _state = instance.state;

    if (_state && (typeof _state !== 'object' || isArray(_state))) {
      error('%s.state: must be set to an object or null', name);
    }

    if (typeof instance.getChildContext === 'function' && typeof ctor.childContextTypes !== 'object') {
      error('%s.getChildContext(): childContextTypes must be defined in order to ' + 'use getChildContext().', name);
    }
  }
}

function adoptClassInstance(workInProgress, instance) {
  instance.updater = classComponentUpdater;
  workInProgress.stateNode = instance; // The instance needs access to the fiber so that it can schedule updates

  set(instance, workInProgress);

  {
    instance._reactInternalInstance = fakeInternalInstance;
  }
}

function constructClassInstance(workInProgress, ctor, props) {
  var isLegacyContextConsumer = false;
  var unmaskedContext = emptyContextObject;
  var context = emptyContextObject;
  var contextType = ctor.contextType;

  {
    if ('contextType' in ctor) {
      var isValid = // Allow null for conditional declaration
      contextType === null || contextType !== undefined && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === undefined; // Not a <Context.Consumer>

      if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
        didWarnAboutInvalidateContextType.add(ctor);
        var addendum = '';

        if (contextType === undefined) {
          addendum = ' However, it is set to undefined. ' + 'This can be caused by a typo or by mixing up named and default imports. ' + 'This can also happen due to a circular dependency, so ' + 'try moving the createContext() call to a separate file.';
        } else if (typeof contextType !== 'object') {
          addendum = ' However, it is set to a ' + typeof contextType + '.';
        } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
          addendum = ' Did you accidentally pass the Context.Provider instead?';
        } else if (contextType._context !== undefined) {
          // <Context.Consumer>
          addendum = ' Did you accidentally pass the Context.Consumer instead?';
        } else {
          addendum = ' However, it is set to an object with keys {' + Object.keys(contextType).join(', ') + '}.';
        }

        error('%s defines an invalid contextType. ' + 'contextType should point to the Context object returned by React.createContext().%s', getComponentName(ctor) || 'Component', addendum);
      }
    }
  }

  if (typeof contextType === 'object' && contextType !== null) {
    context = readContext(contextType);
  } else {
    unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    var contextTypes = ctor.contextTypes;
    isLegacyContextConsumer = contextTypes !== null && contextTypes !== undefined;
    context = isLegacyContextConsumer ? getMaskedContext(workInProgress, unmaskedContext) : emptyContextObject;
  } // Instantiate twice to help detect side-effects.


  {
    if ( workInProgress.mode & StrictMode) {
      new ctor(props, context); // eslint-disable-line no-new
    }
  }

  var instance = new ctor(props, context);
  var state = workInProgress.memoizedState = instance.state !== null && instance.state !== undefined ? instance.state : null;
  adoptClassInstance(workInProgress, instance);

  {
    if (typeof ctor.getDerivedStateFromProps === 'function' && state === null) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutUninitializedState.has(componentName)) {
        didWarnAboutUninitializedState.add(componentName);

        error('`%s` uses `getDerivedStateFromProps` but its initial state is ' + '%s. This is not recommended. Instead, define the initial state by ' + 'assigning an object to `this.state` in the constructor of `%s`. ' + 'This ensures that `getDerivedStateFromProps` arguments have a consistent shape.', componentName, instance.state === null ? 'null' : 'undefined', componentName);
      }
    } // If new component APIs are defined, "unsafe" lifecycles won't be called.
    // Warn about these lifecycles if they are present.
    // Don't warn about react-lifecycles-compat polyfilled methods though.


    if (typeof ctor.getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function') {
      var foundWillMountName = null;
      var foundWillReceivePropsName = null;
      var foundWillUpdateName = null;

      if (typeof instance.componentWillMount === 'function' && instance.componentWillMount.__suppressDeprecationWarning !== true) {
        foundWillMountName = 'componentWillMount';
      } else if (typeof instance.UNSAFE_componentWillMount === 'function') {
        foundWillMountName = 'UNSAFE_componentWillMount';
      }

      if (typeof instance.componentWillReceiveProps === 'function' && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
        foundWillReceivePropsName = 'componentWillReceiveProps';
      } else if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
        foundWillReceivePropsName = 'UNSAFE_componentWillReceiveProps';
      }

      if (typeof instance.componentWillUpdate === 'function' && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
        foundWillUpdateName = 'componentWillUpdate';
      } else if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        foundWillUpdateName = 'UNSAFE_componentWillUpdate';
      }

      if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
        var _componentName = getComponentName(ctor) || 'Component';

        var newApiName = typeof ctor.getDerivedStateFromProps === 'function' ? 'getDerivedStateFromProps()' : 'getSnapshotBeforeUpdate()';

        if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
          didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);

          error('Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n' + '%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\n' + 'The above lifecycles should be removed. Learn more about this warning here:\n' + 'https://fb.me/react-unsafe-component-lifecycles', _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : '', foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : '', foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : '');
        }
      }
    }
  } // Cache unmasked context so we can avoid recreating masked context unless necessary.
  // ReactFiberContext usually updates this cache but can't for newly-created instances.


  if (isLegacyContextConsumer) {
    cacheContext(workInProgress, unmaskedContext, context);
  }

  return instance;
}

function callComponentWillMount(workInProgress, instance) {
  startPhaseTimer(workInProgress, 'componentWillMount');
  var oldState = instance.state;

  if (typeof instance.componentWillMount === 'function') {
    instance.componentWillMount();
  }

  if (typeof instance.UNSAFE_componentWillMount === 'function') {
    instance.UNSAFE_componentWillMount();
  }

  stopPhaseTimer();

  if (oldState !== instance.state) {
    {
      error('%s.componentWillMount(): Assigning directly to this.state is ' + "deprecated (except inside a component's " + 'constructor). Use setState instead.', getComponentName(workInProgress.type) || 'Component');
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
}

function callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext) {
  var oldState = instance.state;
  startPhaseTimer(workInProgress, 'componentWillReceiveProps');

  if (typeof instance.componentWillReceiveProps === 'function') {
    instance.componentWillReceiveProps(newProps, nextContext);
  }

  if (typeof instance.UNSAFE_componentWillReceiveProps === 'function') {
    instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
  }

  stopPhaseTimer();

  if (instance.state !== oldState) {
    {
      var componentName = getComponentName(workInProgress.type) || 'Component';

      if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
        didWarnAboutStateAssignmentForComponent.add(componentName);

        error('%s.componentWillReceiveProps(): Assigning directly to ' + "this.state is deprecated (except inside a component's " + 'constructor). Use setState instead.', componentName);
      }
    }

    classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
  }
} // Invokes the mount life-cycles on a previously never rendered instance.


function mountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  {
    checkClassInstance(workInProgress, ctor, newProps);
  }

  var instance = workInProgress.stateNode;
  instance.props = newProps;
  instance.state = workInProgress.memoizedState;
  instance.refs = emptyRefsObject;
  initializeUpdateQueue(workInProgress);
  var contextType = ctor.contextType;

  if (typeof contextType === 'object' && contextType !== null) {
    instance.context = readContext(contextType);
  } else {
    var unmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    instance.context = getMaskedContext(workInProgress, unmaskedContext);
  }

  {
    if (instance.state === newProps) {
      var componentName = getComponentName(ctor) || 'Component';

      if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
        didWarnAboutDirectlyAssigningPropsToState.add(componentName);

        error('%s: It is not recommended to assign props directly to state ' + "because updates to props won't be reflected in state. " + 'In most cases, it is better to use props directly.', componentName);
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, instance);
    }

    {
      ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress, instance);
    }
  }

  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  instance.state = workInProgress.memoizedState;
  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    instance.state = workInProgress.memoizedState;
  } // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.


  if (typeof ctor.getDerivedStateFromProps !== 'function' && typeof instance.getSnapshotBeforeUpdate !== 'function' && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
    callComponentWillMount(workInProgress, instance); // If we had additional state updates during this life-cycle, let's
    // process them now.

    processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
    instance.state = workInProgress.memoizedState;
  }

  if (typeof instance.componentDidMount === 'function') {
    workInProgress.effectTag |= Update;
  }
}

function resumeMountClassInstance(workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  var oldProps = workInProgress.memoizedProps;
  instance.props = oldProps;
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextLegacyUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === 'function' || typeof instance.componentWillMount === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillMount');

      if (typeof instance.componentWillMount === 'function') {
        instance.componentWillMount();
      }

      if (typeof instance.UNSAFE_componentWillMount === 'function') {
        instance.UNSAFE_componentWillMount();
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidMount === 'function') {
      workInProgress.effectTag |= Update;
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
} // Invokes the update life-cycles and returns false if it shouldn't rerender.


function updateClassInstance(current, workInProgress, ctor, newProps, renderExpirationTime) {
  var instance = workInProgress.stateNode;
  cloneUpdateQueue(current, workInProgress);
  var oldProps = workInProgress.memoizedProps;
  instance.props = workInProgress.type === workInProgress.elementType ? oldProps : resolveDefaultProps(workInProgress.type, oldProps);
  var oldContext = instance.context;
  var contextType = ctor.contextType;
  var nextContext = emptyContextObject;

  if (typeof contextType === 'object' && contextType !== null) {
    nextContext = readContext(contextType);
  } else {
    var nextUnmaskedContext = getUnmaskedContext(workInProgress, ctor, true);
    nextContext = getMaskedContext(workInProgress, nextUnmaskedContext);
  }

  var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
  var hasNewLifecycles = typeof getDerivedStateFromProps === 'function' || typeof instance.getSnapshotBeforeUpdate === 'function'; // Note: During these life-cycles, instance.props/instance.state are what
  // ever the previously attempted to render - not the "current". However,
  // during componentDidUpdate we pass the "current" props.
  // In order to support react-lifecycles-compat polyfilled components,
  // Unsafe lifecycles should not be invoked for components using the new APIs.

  if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === 'function' || typeof instance.componentWillReceiveProps === 'function')) {
    if (oldProps !== newProps || oldContext !== nextContext) {
      callComponentWillReceiveProps(workInProgress, instance, newProps, nextContext);
    }
  }

  resetHasForceUpdateBeforeProcessing();
  var oldState = workInProgress.memoizedState;
  var newState = instance.state = oldState;
  processUpdateQueue(workInProgress, newProps, instance, renderExpirationTime);
  newState = workInProgress.memoizedState;

  if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    }

    return false;
  }

  if (typeof getDerivedStateFromProps === 'function') {
    applyDerivedStateFromProps(workInProgress, ctor, getDerivedStateFromProps, newProps);
    newState = workInProgress.memoizedState;
  }

  var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress, ctor, oldProps, newProps, oldState, newState, nextContext);

  if (shouldUpdate) {
    // In order to support react-lifecycles-compat polyfilled components,
    // Unsafe lifecycles should not be invoked for components using the new APIs.
    if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === 'function' || typeof instance.componentWillUpdate === 'function')) {
      startPhaseTimer(workInProgress, 'componentWillUpdate');

      if (typeof instance.componentWillUpdate === 'function') {
        instance.componentWillUpdate(newProps, newState, nextContext);
      }

      if (typeof instance.UNSAFE_componentWillUpdate === 'function') {
        instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
      }

      stopPhaseTimer();
    }

    if (typeof instance.componentDidUpdate === 'function') {
      workInProgress.effectTag |= Update;
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      workInProgress.effectTag |= Snapshot;
    }
  } else {
    // If an update was already in progress, we should schedule an Update
    // effect even though we're bailing out, so that cWU/cDU are called.
    if (typeof instance.componentDidUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Update;
      }
    }

    if (typeof instance.getSnapshotBeforeUpdate === 'function') {
      if (oldProps !== current.memoizedProps || oldState !== current.memoizedState) {
        workInProgress.effectTag |= Snapshot;
      }
    } // If shouldComponentUpdate returned false, we should still update the
    // memoized props/state to indicate that this work can be reused.


    workInProgress.memoizedProps = newProps;
    workInProgress.memoizedState = newState;
  } // Update the existing instance's state, props, and context pointers even
  // if shouldComponentUpdate returns false.


  instance.props = newProps;
  instance.state = newState;
  instance.context = nextContext;
  return shouldUpdate;
}

var didWarnAboutMaps;
var didWarnAboutGenerators;
var didWarnAboutStringRefs;
var ownerHasKeyUseWarning;
var ownerHasFunctionTypeWarning;

var warnForMissingKey = function (child) {};

{
  didWarnAboutMaps = false;
  didWarnAboutGenerators = false;
  didWarnAboutStringRefs = {};
  /**
   * Warn if there's no key explicitly set on dynamic arrays of children or
   * object keys are not valid. This allows us to keep track of children between
   * updates.
   */

  ownerHasKeyUseWarning = {};
  ownerHasFunctionTypeWarning = {};

  warnForMissingKey = function (child) {
    if (child === null || typeof child !== 'object') {
      return;
    }

    if (!child._store || child._store.validated || child.key != null) {
      return;
    }

    if (!(typeof child._store === 'object')) {
      {
        throw Error( "React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    child._store.validated = true;
    var currentComponentErrorInfo = 'Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.' + getCurrentFiberStackInDev();

    if (ownerHasKeyUseWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasKeyUseWarning[currentComponentErrorInfo] = true;

    error('Each child in a list should have a unique ' + '"key" prop. See https://fb.me/react-warning-keys for ' + 'more information.');
  };
}

var isArray$1 = Array.isArray;

function coerceRef(returnFiber, current, element) {
  var mixedRef = element.ref;

  if (mixedRef !== null && typeof mixedRef !== 'function' && typeof mixedRef !== 'object') {
    {
      // TODO: Clean this up once we turn on the string ref warning for
      // everyone, because the strict mode case will no longer be relevant
      if ((returnFiber.mode & StrictMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
      // because these cannot be automatically converted to an arrow function
      // using a codemod. Therefore, we don't have to warn about string refs again.
      !(element._owner && element._self && element._owner.stateNode !== element._self)) {
        var componentName = getComponentName(returnFiber.type) || 'Component';

        if (!didWarnAboutStringRefs[componentName]) {
          {
            error('A string ref, "%s", has been found within a strict mode tree. ' + 'String refs are a source of potential bugs and should be avoided. ' + 'We recommend using useRef() or createRef() instead. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-string-ref%s', mixedRef, getStackByFiberInDevAndProd(returnFiber));
          }

          didWarnAboutStringRefs[componentName] = true;
        }
      }
    }

    if (element._owner) {
      var owner = element._owner;
      var inst;

      if (owner) {
        var ownerFiber = owner;

        if (!(ownerFiber.tag === ClassComponent)) {
          {
            throw Error( "Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://fb.me/react-strict-mode-string-ref" );
          }
        }

        inst = ownerFiber.stateNode;
      }

      if (!inst) {
        {
          throw Error( "Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue." );
        }
      }

      var stringRef = '' + mixedRef; // Check if previous string ref matches new string ref

      if (current !== null && current.ref !== null && typeof current.ref === 'function' && current.ref._stringRef === stringRef) {
        return current.ref;
      }

      var ref = function (value) {
        var refs = inst.refs;

        if (refs === emptyRefsObject) {
          // This is a lazy pooled frozen object, so we need to initialize.
          refs = inst.refs = {};
        }

        if (value === null) {
          delete refs[stringRef];
        } else {
          refs[stringRef] = value;
        }
      };

      ref._stringRef = stringRef;
      return ref;
    } else {
      if (!(typeof mixedRef === 'string')) {
        {
          throw Error( "Expected ref to be a function, a string, an object returned by React.createRef(), or null." );
        }
      }

      if (!element._owner) {
        {
          throw Error( "Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://fb.me/react-refs-must-have-owner for more information." );
        }
      }
    }
  }

  return mixedRef;
}

function throwOnInvalidObjectType(returnFiber, newChild) {
  if (returnFiber.type !== 'textarea') {
    var addendum = '';

    {
      addendum = ' If you meant to render a collection of children, use an array ' + 'instead.' + getCurrentFiberStackInDev();
    }

    {
      {
        throw Error( "Objects are not valid as a React child (found: " + (Object.prototype.toString.call(newChild) === '[object Object]' ? 'object with keys {' + Object.keys(newChild).join(', ') + '}' : newChild) + ")." + addendum );
      }
    }
  }
}

function warnOnFunctionType() {
  {
    var currentComponentErrorInfo = 'Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.' + getCurrentFiberStackInDev();

    if (ownerHasFunctionTypeWarning[currentComponentErrorInfo]) {
      return;
    }

    ownerHasFunctionTypeWarning[currentComponentErrorInfo] = true;

    error('Functions are not valid as a React child. This may happen if ' + 'you return a Component instead of <Component /> from render. ' + 'Or maybe you meant to call this function rather than return it.');
  }
} // This wrapper function exists because I expect to clone the code in each path
// to be able to optimize each path individually by branching early. This needs
// a compiler or we can do it manually. Helpers that don't need this branching
// live outside of this function.


function ChildReconciler(shouldTrackSideEffects) {
  function deleteChild(returnFiber, childToDelete) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return;
    } // Deletions are added in reversed order so we add it to the front.
    // At this point, the return fiber's effect list is empty except for
    // deletions, so we can just append the deletion to the list. The remaining
    // effects aren't added until the complete phase. Once we implement
    // resuming, this may not be true.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = childToDelete;
      returnFiber.lastEffect = childToDelete;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
    }

    childToDelete.nextEffect = null;
    childToDelete.effectTag = Deletion;
  }

  function deleteRemainingChildren(returnFiber, currentFirstChild) {
    if (!shouldTrackSideEffects) {
      // Noop.
      return null;
    } // TODO: For the shouldClone case, this could be micro-optimized a bit by
    // assuming that after the first child we've already added everything.


    var childToDelete = currentFirstChild;

    while (childToDelete !== null) {
      deleteChild(returnFiber, childToDelete);
      childToDelete = childToDelete.sibling;
    }

    return null;
  }

  function mapRemainingChildren(returnFiber, currentFirstChild) {
    // Add the remaining children to a temporary map so that we can find them by
    // keys quickly. Implicit (null) keys get added to this set with their index
    // instead.
    var existingChildren = new Map();
    var existingChild = currentFirstChild;

    while (existingChild !== null) {
      if (existingChild.key !== null) {
        existingChildren.set(existingChild.key, existingChild);
      } else {
        existingChildren.set(existingChild.index, existingChild);
      }

      existingChild = existingChild.sibling;
    }

    return existingChildren;
  }

  function useFiber(fiber, pendingProps) {
    // We currently set sibling to null and index to 0 here because it is easy
    // to forget to do before returning it. E.g. for the single child case.
    var clone = createWorkInProgress(fiber, pendingProps);
    clone.index = 0;
    clone.sibling = null;
    return clone;
  }

  function placeChild(newFiber, lastPlacedIndex, newIndex) {
    newFiber.index = newIndex;

    if (!shouldTrackSideEffects) {
      // Noop.
      return lastPlacedIndex;
    }

    var current = newFiber.alternate;

    if (current !== null) {
      var oldIndex = current.index;

      if (oldIndex < lastPlacedIndex) {
        // This is a move.
        newFiber.effectTag = Placement;
        return lastPlacedIndex;
      } else {
        // This item can stay in place.
        return oldIndex;
      }
    } else {
      // This is an insertion.
      newFiber.effectTag = Placement;
      return lastPlacedIndex;
    }
  }

  function placeSingleChild(newFiber) {
    // This is simpler for the single child case. We only need to do a
    // placement for inserting new children.
    if (shouldTrackSideEffects && newFiber.alternate === null) {
      newFiber.effectTag = Placement;
    }

    return newFiber;
  }

  function updateTextNode(returnFiber, current, textContent, expirationTime) {
    if (current === null || current.tag !== HostText) {
      // Insert
      var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, textContent);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateElement(returnFiber, current, element, expirationTime) {
    if (current !== null) {
      if (current.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
       isCompatibleFamilyForHotReloading(current, element) )) {
        // Move based on index
        var existing = useFiber(current, element.props);
        existing.ref = coerceRef(returnFiber, current, element);
        existing.return = returnFiber;

        {
          existing._debugSource = element._source;
          existing._debugOwner = element._owner;
        }

        return existing;
      }
    } // Insert


    var created = createFiberFromElement(element, returnFiber.mode, expirationTime);
    created.ref = coerceRef(returnFiber, current, element);
    created.return = returnFiber;
    return created;
  }

  function updatePortal(returnFiber, current, portal, expirationTime) {
    if (current === null || current.tag !== HostPortal || current.stateNode.containerInfo !== portal.containerInfo || current.stateNode.implementation !== portal.implementation) {
      // Insert
      var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, portal.children || []);
      existing.return = returnFiber;
      return existing;
    }
  }

  function updateFragment(returnFiber, current, fragment, expirationTime, key) {
    if (current === null || current.tag !== Fragment) {
      // Insert
      var created = createFiberFromFragment(fragment, returnFiber.mode, expirationTime, key);
      created.return = returnFiber;
      return created;
    } else {
      // Update
      var existing = useFiber(current, fragment);
      existing.return = returnFiber;
      return existing;
    }
  }

  function createChild(returnFiber, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      var created = createFiberFromText('' + newChild, returnFiber.mode, expirationTime);
      created.return = returnFiber;
      return created;
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _created = createFiberFromElement(newChild, returnFiber.mode, expirationTime);

            _created.ref = coerceRef(returnFiber, null, newChild);
            _created.return = returnFiber;
            return _created;
          }

        case REACT_PORTAL_TYPE:
          {
            var _created2 = createFiberFromPortal(newChild, returnFiber.mode, expirationTime);

            _created2.return = returnFiber;
            return _created2;
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _created3 = createFiberFromFragment(newChild, returnFiber.mode, expirationTime, null);

        _created3.return = returnFiber;
        return _created3;
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateSlot(returnFiber, oldFiber, newChild, expirationTime) {
    // Update the fiber if the keys match, otherwise return null.
    var key = oldFiber !== null ? oldFiber.key : null;

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys. If the previous node is implicitly keyed
      // we can continue to replace it without aborting even if it is not a text
      // node.
      if (key !== null) {
        return null;
      }

      return updateTextNode(returnFiber, oldFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            if (newChild.key === key) {
              if (newChild.type === REACT_FRAGMENT_TYPE) {
                return updateFragment(returnFiber, oldFiber, newChild.props.children, expirationTime, key);
              }

              return updateElement(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }

        case REACT_PORTAL_TYPE:
          {
            if (newChild.key === key) {
              return updatePortal(returnFiber, oldFiber, newChild, expirationTime);
            } else {
              return null;
            }
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        if (key !== null) {
          return null;
        }

        return updateFragment(returnFiber, oldFiber, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }

  function updateFromMap(existingChildren, returnFiber, newIdx, newChild, expirationTime) {
    if (typeof newChild === 'string' || typeof newChild === 'number') {
      // Text nodes don't have keys, so we neither have to check the old nor
      // new node for the key. If both are text nodes, they match.
      var matchedFiber = existingChildren.get(newIdx) || null;
      return updateTextNode(returnFiber, matchedFiber, '' + newChild, expirationTime);
    }

    if (typeof newChild === 'object' && newChild !== null) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          {
            var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            if (newChild.type === REACT_FRAGMENT_TYPE) {
              return updateFragment(returnFiber, _matchedFiber, newChild.props.children, expirationTime, newChild.key);
            }

            return updateElement(returnFiber, _matchedFiber, newChild, expirationTime);
          }

        case REACT_PORTAL_TYPE:
          {
            var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;

            return updatePortal(returnFiber, _matchedFiber2, newChild, expirationTime);
          }
      }

      if (isArray$1(newChild) || getIteratorFn(newChild)) {
        var _matchedFiber3 = existingChildren.get(newIdx) || null;

        return updateFragment(returnFiber, _matchedFiber3, newChild, expirationTime, null);
      }

      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    return null;
  }
  /**
   * Warns if there is a duplicate or missing key
   */


  function warnOnInvalidKey(child, knownKeys) {
    {
      if (typeof child !== 'object' || child === null) {
        return knownKeys;
      }

      switch (child.$$typeof) {
        case REACT_ELEMENT_TYPE:
        case REACT_PORTAL_TYPE:
          warnForMissingKey(child);
          var key = child.key;

          if (typeof key !== 'string') {
            break;
          }

          if (knownKeys === null) {
            knownKeys = new Set();
            knownKeys.add(key);
            break;
          }

          if (!knownKeys.has(key)) {
            knownKeys.add(key);
            break;
          }

          error('Encountered two children with the same key, `%s`. ' + 'Keys should be unique so that components maintain their identity ' + 'across updates. Non-unique keys may cause children to be ' + 'duplicated and/or omitted — the behavior is unsupported and ' + 'could change in a future version.', key);

          break;
      }
    }

    return knownKeys;
  }

  function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, expirationTime) {
    // This algorithm can't optimize by searching from both ends since we
    // don't have backpointers on fibers. I'm trying to see how far we can get
    // with that model. If it ends up not being worth the tradeoffs, we can
    // add it later.
    // Even with a two ended optimization, we'd want to optimize for the case
    // where there are few changes and brute force the comparison instead of
    // going for the Map. It'd like to explore hitting that path first in
    // forward-only mode and only go for the Map once we notice that we need
    // lots of look ahead. This doesn't handle reversal as well as two ended
    // search but that's unusual. Besides, for the two ended optimization to
    // work on Iterables, we'd need to copy the whole set.
    // In this first iteration, we'll just live with hitting the bad case
    // (adding everything to a Map) in for every insert/move.
    // If you change this code, also update reconcileChildrenIterator() which
    // uses the same algorithm.
    {
      // First, validate keys.
      var knownKeys = null;

      for (var i = 0; i < newChildren.length; i++) {
        var child = newChildren[i];
        knownKeys = warnOnInvalidKey(child, knownKeys);
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;

    for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (newIdx === newChildren.length) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; newIdx < newChildren.length; newIdx++) {
        var _newFiber = createChild(returnFiber, newChildren[newIdx], expirationTime);

        if (_newFiber === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber;
        } else {
          previousNewFiber.sibling = _newFiber;
        }

        previousNewFiber = _newFiber;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; newIdx < newChildren.length; newIdx++) {
      var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], expirationTime);

      if (_newFiber2 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber2.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber2;
        } else {
          previousNewFiber.sibling = _newFiber2;
        }

        previousNewFiber = _newFiber2;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, expirationTime) {
    // This is the same implementation as reconcileChildrenArray(),
    // but using the iterator instead.
    var iteratorFn = getIteratorFn(newChildrenIterable);

    if (!(typeof iteratorFn === 'function')) {
      {
        throw Error( "An object is not an iterable. This error is likely caused by a bug in React. Please file an issue." );
      }
    }

    {
      // We don't support rendering Generators because it's a mutation.
      // See https://github.com/facebook/react/issues/12995
      if (typeof Symbol === 'function' && // $FlowFixMe Flow doesn't know about toStringTag
      newChildrenIterable[Symbol.toStringTag] === 'Generator') {
        if (!didWarnAboutGenerators) {
          error('Using Generators as children is unsupported and will likely yield ' + 'unexpected results because enumerating a generator mutates it. ' + 'You may convert it to an array with `Array.from()` or the ' + '`[...spread]` operator before rendering. Keep in mind ' + 'you might need to polyfill these features for older browsers.');
        }

        didWarnAboutGenerators = true;
      } // Warn about using Maps as children


      if (newChildrenIterable.entries === iteratorFn) {
        if (!didWarnAboutMaps) {
          error('Using Maps as children is unsupported and will likely yield ' + 'unexpected results. Convert it to a sequence/iterable of keyed ' + 'ReactElements instead.');
        }

        didWarnAboutMaps = true;
      } // First, validate keys.
      // We'll get a different iterator later for the main pass.


      var _newChildren = iteratorFn.call(newChildrenIterable);

      if (_newChildren) {
        var knownKeys = null;

        var _step = _newChildren.next();

        for (; !_step.done; _step = _newChildren.next()) {
          var child = _step.value;
          knownKeys = warnOnInvalidKey(child, knownKeys);
        }
      }
    }

    var newChildren = iteratorFn.call(newChildrenIterable);

    if (!(newChildren != null)) {
      {
        throw Error( "An iterable object provided no iterator." );
      }
    }

    var resultingFirstChild = null;
    var previousNewFiber = null;
    var oldFiber = currentFirstChild;
    var lastPlacedIndex = 0;
    var newIdx = 0;
    var nextOldFiber = null;
    var step = newChildren.next();

    for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
      if (oldFiber.index > newIdx) {
        nextOldFiber = oldFiber;
        oldFiber = null;
      } else {
        nextOldFiber = oldFiber.sibling;
      }

      var newFiber = updateSlot(returnFiber, oldFiber, step.value, expirationTime);

      if (newFiber === null) {
        // TODO: This breaks on empty slots like null children. That's
        // unfortunate because it triggers the slow path all the time. We need
        // a better way to communicate whether this was a miss or null,
        // boolean, undefined, etc.
        if (oldFiber === null) {
          oldFiber = nextOldFiber;
        }

        break;
      }

      if (shouldTrackSideEffects) {
        if (oldFiber && newFiber.alternate === null) {
          // We matched the slot, but we didn't reuse the existing fiber, so we
          // need to delete the existing child.
          deleteChild(returnFiber, oldFiber);
        }
      }

      lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);

      if (previousNewFiber === null) {
        // TODO: Move out of the loop. This only happens for the first run.
        resultingFirstChild = newFiber;
      } else {
        // TODO: Defer siblings if we're not at the right index for this slot.
        // I.e. if we had null values before, then we want to defer this
        // for each null value. However, we also don't want to call updateSlot
        // with the previous one.
        previousNewFiber.sibling = newFiber;
      }

      previousNewFiber = newFiber;
      oldFiber = nextOldFiber;
    }

    if (step.done) {
      // We've reached the end of the new children. We can delete the rest.
      deleteRemainingChildren(returnFiber, oldFiber);
      return resultingFirstChild;
    }

    if (oldFiber === null) {
      // If we don't have any more existing children we can choose a fast path
      // since the rest will all be insertions.
      for (; !step.done; newIdx++, step = newChildren.next()) {
        var _newFiber3 = createChild(returnFiber, step.value, expirationTime);

        if (_newFiber3 === null) {
          continue;
        }

        lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          // TODO: Move out of the loop. This only happens for the first run.
          resultingFirstChild = _newFiber3;
        } else {
          previousNewFiber.sibling = _newFiber3;
        }

        previousNewFiber = _newFiber3;
      }

      return resultingFirstChild;
    } // Add all children to a key map for quick lookups.


    var existingChildren = mapRemainingChildren(returnFiber, oldFiber); // Keep scanning and use the map to restore deleted items as moves.

    for (; !step.done; newIdx++, step = newChildren.next()) {
      var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, expirationTime);

      if (_newFiber4 !== null) {
        if (shouldTrackSideEffects) {
          if (_newFiber4.alternate !== null) {
            // The new fiber is a work in progress, but if there exists a
            // current, that means that we reused the fiber. We need to delete
            // it from the child list so that we don't add it to the deletion
            // list.
            existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
          }
        }

        lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);

        if (previousNewFiber === null) {
          resultingFirstChild = _newFiber4;
        } else {
          previousNewFiber.sibling = _newFiber4;
        }

        previousNewFiber = _newFiber4;
      }
    }

    if (shouldTrackSideEffects) {
      // Any existing children that weren't consumed above were deleted. We need
      // to add them to the deletion list.
      existingChildren.forEach(function (child) {
        return deleteChild(returnFiber, child);
      });
    }

    return resultingFirstChild;
  }

  function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, expirationTime) {
    // There's no need to check for keys on text nodes since we don't have a
    // way to define them.
    if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
      // We already have an existing node so let's just update it and delete
      // the rest.
      deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
      var existing = useFiber(currentFirstChild, textContent);
      existing.return = returnFiber;
      return existing;
    } // The existing first child is not a text node so we need to create one
    // and delete the existing ones.


    deleteRemainingChildren(returnFiber, currentFirstChild);
    var created = createFiberFromText(textContent, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  }

  function reconcileSingleElement(returnFiber, currentFirstChild, element, expirationTime) {
    var key = element.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        switch (child.tag) {
          case Fragment:
            {
              if (element.type === REACT_FRAGMENT_TYPE) {
                deleteRemainingChildren(returnFiber, child.sibling);
                var existing = useFiber(child, element.props.children);
                existing.return = returnFiber;

                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }

                return existing;
              }

              break;
            }

          case Block:

          // We intentionally fallthrough here if enableBlocksAPI is not on.
          // eslint-disable-next-lined no-fallthrough

          default:
            {
              if (child.elementType === element.type || ( // Keep this check inline so it only runs on the false path:
               isCompatibleFamilyForHotReloading(child, element) )) {
                deleteRemainingChildren(returnFiber, child.sibling);

                var _existing3 = useFiber(child, element.props);

                _existing3.ref = coerceRef(returnFiber, child, element);
                _existing3.return = returnFiber;

                {
                  _existing3._debugSource = element._source;
                  _existing3._debugOwner = element._owner;
                }

                return _existing3;
              }

              break;
            }
        } // Didn't match.


        deleteRemainingChildren(returnFiber, child);
        break;
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    if (element.type === REACT_FRAGMENT_TYPE) {
      var created = createFiberFromFragment(element.props.children, returnFiber.mode, expirationTime, element.key);
      created.return = returnFiber;
      return created;
    } else {
      var _created4 = createFiberFromElement(element, returnFiber.mode, expirationTime);

      _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
      _created4.return = returnFiber;
      return _created4;
    }
  }

  function reconcileSinglePortal(returnFiber, currentFirstChild, portal, expirationTime) {
    var key = portal.key;
    var child = currentFirstChild;

    while (child !== null) {
      // TODO: If key === null and child.key === null, then this only applies to
      // the first item in the list.
      if (child.key === key) {
        if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
          deleteRemainingChildren(returnFiber, child.sibling);
          var existing = useFiber(child, portal.children || []);
          existing.return = returnFiber;
          return existing;
        } else {
          deleteRemainingChildren(returnFiber, child);
          break;
        }
      } else {
        deleteChild(returnFiber, child);
      }

      child = child.sibling;
    }

    var created = createFiberFromPortal(portal, returnFiber.mode, expirationTime);
    created.return = returnFiber;
    return created;
  } // This API will tag the children with the side-effect of the reconciliation
  // itself. They will be added to the side-effect list as we pass through the
  // children and the parent.


  function reconcileChildFibers(returnFiber, currentFirstChild, newChild, expirationTime) {
    // This function is not recursive.
    // If the top level item is an array, we treat it as a set of children,
    // not as a fragment. Nested arrays on the other hand will be treated as
    // fragment nodes. Recursion happens at the normal flow.
    // Handle top level unkeyed fragments as if they were arrays.
    // This leads to an ambiguity between <>{[...]}</> and <>...</>.
    // We treat the ambiguous cases above the same.
    var isUnkeyedTopLevelFragment = typeof newChild === 'object' && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;

    if (isUnkeyedTopLevelFragment) {
      newChild = newChild.props.children;
    } // Handle object types


    var isObject = typeof newChild === 'object' && newChild !== null;

    if (isObject) {
      switch (newChild.$$typeof) {
        case REACT_ELEMENT_TYPE:
          return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, expirationTime));

        case REACT_PORTAL_TYPE:
          return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, expirationTime));
      }
    }

    if (typeof newChild === 'string' || typeof newChild === 'number') {
      return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, '' + newChild, expirationTime));
    }

    if (isArray$1(newChild)) {
      return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (getIteratorFn(newChild)) {
      return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, expirationTime);
    }

    if (isObject) {
      throwOnInvalidObjectType(returnFiber, newChild);
    }

    {
      if (typeof newChild === 'function') {
        warnOnFunctionType();
      }
    }

    if (typeof newChild === 'undefined' && !isUnkeyedTopLevelFragment) {
      // If the new child is undefined, and the return fiber is a composite
      // component, throw an error. If Fiber return types are disabled,
      // we already threw above.
      switch (returnFiber.tag) {
        case ClassComponent:
          {
            {
              var instance = returnFiber.stateNode;

              if (instance.render._isMockFunction) {
                // We allow auto-mocks to proceed as if they're returning null.
                break;
              }
            }
          }
        // Intentionally fall through to the next case, which handles both
        // functions and classes
        // eslint-disable-next-lined no-fallthrough

        case FunctionComponent:
          {
            var Component = returnFiber.type;

            {
              {
                throw Error( (Component.displayName || Component.name || 'Component') + "(...): Nothing was returned from render. This usually means a return statement is missing. Or, to render nothing, return null." );
              }
            }
          }
      }
    } // Remaining cases are all treated as empty.


    return deleteRemainingChildren(returnFiber, currentFirstChild);
  }

  return reconcileChildFibers;
}

var reconcileChildFibers = ChildReconciler(true);
var mountChildFibers = ChildReconciler(false);
function cloneChildFibers(current, workInProgress) {
  if (!(current === null || workInProgress.child === current.child)) {
    {
      throw Error( "Resuming work not yet implemented." );
    }
  }

  if (workInProgress.child === null) {
    return;
  }

  var currentChild = workInProgress.child;
  var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
  workInProgress.child = newChild;
  newChild.return = workInProgress;

  while (currentChild.sibling !== null) {
    currentChild = currentChild.sibling;
    newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
    newChild.return = workInProgress;
  }

  newChild.sibling = null;
} // Reset a workInProgress child set to prepare it for a second pass.

function resetChildFibers(workInProgress, renderExpirationTime) {
  var child = workInProgress.child;

  while (child !== null) {
    resetWorkInProgress(child, renderExpirationTime);
    child = child.sibling;
  }
}

var NO_CONTEXT = {};
var contextStackCursor$1 = createCursor(NO_CONTEXT);
var contextFiberStackCursor = createCursor(NO_CONTEXT);
var rootInstanceStackCursor = createCursor(NO_CONTEXT);

function requiredContext(c) {
  if (!(c !== NO_CONTEXT)) {
    {
      throw Error( "Expected host context to exist. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return c;
}

function getRootHostContainer() {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  return rootInstance;
}

function pushHostContainer(fiber, nextRootInstance) {
  // Push current root instance onto the stack;
  // This allows us to reset root when portals are popped.
  push(rootInstanceStackCursor, nextRootInstance, fiber); // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.

  push(contextFiberStackCursor, fiber, fiber); // Finally, we need to push the host context to the stack.
  // However, we can't just call getRootHostContext() and push it because
  // we'd have a different number of entries on the stack depending on
  // whether getRootHostContext() throws somewhere in renderer code or not.
  // So we push an empty value first. This lets us safely unwind on errors.

  push(contextStackCursor$1, NO_CONTEXT, fiber);
  var nextRootContext = getRootHostContext(nextRootInstance); // Now that we know this function doesn't throw, replace it.

  pop(contextStackCursor$1, fiber);
  push(contextStackCursor$1, nextRootContext, fiber);
}

function popHostContainer(fiber) {
  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
  pop(rootInstanceStackCursor, fiber);
}

function getHostContext() {
  var context = requiredContext(contextStackCursor$1.current);
  return context;
}

function pushHostContext(fiber) {
  var rootInstance = requiredContext(rootInstanceStackCursor.current);
  var context = requiredContext(contextStackCursor$1.current);
  var nextContext = getChildHostContext(context, fiber.type); // Don't push this Fiber's context unless it's unique.

  if (context === nextContext) {
    return;
  } // Track the context and the Fiber that provided it.
  // This enables us to pop only Fibers that provide unique contexts.


  push(contextFiberStackCursor, fiber, fiber);
  push(contextStackCursor$1, nextContext, fiber);
}

function popHostContext(fiber) {
  // Do not pop unless this Fiber provided the current context.
  // pushHostContext() only pushes Fibers that provide unique contexts.
  if (contextFiberStackCursor.current !== fiber) {
    return;
  }

  pop(contextStackCursor$1, fiber);
  pop(contextFiberStackCursor, fiber);
}

var DefaultSuspenseContext = 0; // The Suspense Context is split into two parts. The lower bits is
// inherited deeply down the subtree. The upper bits only affect
// this immediate suspense boundary and gets reset each new
// boundary or suspense list.

var SubtreeSuspenseContextMask = 1; // Subtree Flags:
// InvisibleParentSuspenseContext indicates that one of our parent Suspense
// boundaries is not currently showing visible main content.
// Either because it is already showing a fallback or is not mounted at all.
// We can use this to determine if it is desirable to trigger a fallback at
// the parent. If not, then we might need to trigger undesirable boundaries
// and/or suspend the commit to avoid hiding the parent content.

var InvisibleParentSuspenseContext = 1; // Shallow Flags:
// ForceSuspenseFallback can be used by SuspenseList to force newly added
// items into their fallback state during one of the render passes.

var ForceSuspenseFallback = 2;
var suspenseStackCursor = createCursor(DefaultSuspenseContext);
function hasSuspenseContext(parentContext, flag) {
  return (parentContext & flag) !== 0;
}
function setDefaultShallowSuspenseContext(parentContext) {
  return parentContext & SubtreeSuspenseContextMask;
}
function setShallowSuspenseContext(parentContext, shallowContext) {
  return parentContext & SubtreeSuspenseContextMask | shallowContext;
}
function addSubtreeSuspenseContext(parentContext, subtreeContext) {
  return parentContext | subtreeContext;
}
function pushSuspenseContext(fiber, newContext) {
  push(suspenseStackCursor, newContext, fiber);
}
function popSuspenseContext(fiber) {
  pop(suspenseStackCursor, fiber);
}

function shouldCaptureSuspense(workInProgress, hasInvisibleParent) {
  // If it was the primary children that just suspended, capture and render the
  // fallback. Otherwise, don't capture and bubble to the next boundary.
  var nextState = workInProgress.memoizedState;

  if (nextState !== null) {
    if (nextState.dehydrated !== null) {
      // A dehydrated boundary always captures.
      return true;
    }

    return false;
  }

  var props = workInProgress.memoizedProps; // In order to capture, the Suspense component must have a fallback prop.

  if (props.fallback === undefined) {
    return false;
  } // Regular boundaries always capture.


  if (props.unstable_avoidThisFallback !== true) {
    return true;
  } // If it's a boundary we should avoid, then we prefer to bubble up to the
  // parent boundary if it is currently invisible.


  if (hasInvisibleParent) {
    return false;
  } // If the parent is not able to handle it, we must handle it.


  return true;
}
function findFirstSuspended(row) {
  var node = row;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        var dehydrated = state.dehydrated;

        if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
          return node;
        }
      }
    } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
    // keep track of whether it suspended or not.
    node.memoizedProps.revealOrder !== undefined) {
      var didSuspend = (node.effectTag & DidCapture) !== NoEffect;

      if (didSuspend) {
        return node;
      }
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === row) {
      return null;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === row) {
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }

  return null;
}

function createDeprecatedResponderListener(responder, props) {
  var eventResponderListener = {
    responder: responder,
    props: props
  };

  {
    Object.freeze(eventResponderListener);
  }

  return eventResponderListener;
}

var HasEffect =
/* */
1; // Represents the phase in which the effect (not the clean-up) fires.

var Layout =
/*    */
2;
var Passive$1 =
/*   */
4;

var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
var didWarnAboutMismatchedHooksForComponent;

{
  didWarnAboutMismatchedHooksForComponent = new Set();
}

// These are set right before calling the component.
var renderExpirationTime = NoWork; // The work-in-progress fiber. I've named it differently to distinguish it from
// the work-in-progress hook.

var currentlyRenderingFiber$1 = null; // Hooks are stored as a linked list on the fiber's memoizedState field. The
// current hook list is the list that belongs to the current fiber. The
// work-in-progress hook list is a new list that will be added to the
// work-in-progress fiber.

var currentHook = null;
var workInProgressHook = null; // Whether an update was scheduled at any point during the render phase. This
// does not get reset if we do another render pass; only when we're completely
// finished evaluating this component. This is an optimization so we know
// whether we need to clear render phase updates after a throw.

var didScheduleRenderPhaseUpdate = false;
var RE_RENDER_LIMIT = 25; // In DEV, this is the name of the currently executing primitive hook

var currentHookNameInDev = null; // In DEV, this list ensures that hooks are called in the same order between renders.
// The list stores the order of hooks used during the initial render (mount).
// Subsequent renders (updates) reference this list.

var hookTypesDev = null;
var hookTypesUpdateIndexDev = -1; // In DEV, this tracks whether currently rendering component needs to ignore
// the dependencies for Hooks that need them (e.g. useEffect or useMemo).
// When true, such Hooks will always be "remounted". Only used during hot reload.

var ignorePreviousDependencies = false;

function mountHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev === null) {
      hookTypesDev = [hookName];
    } else {
      hookTypesDev.push(hookName);
    }
  }
}

function updateHookTypesDev() {
  {
    var hookName = currentHookNameInDev;

    if (hookTypesDev !== null) {
      hookTypesUpdateIndexDev++;

      if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
        warnOnHookMismatchInDev(hookName);
      }
    }
  }
}

function checkDepsAreArrayDev(deps) {
  {
    if (deps !== undefined && deps !== null && !Array.isArray(deps)) {
      // Verify deps, but only on mount to avoid extra checks.
      // It's unlikely their type would change as usually you define them inline.
      error('%s received a final argument that is not an array (instead, received `%s`). When ' + 'specified, the final argument must be an array.', currentHookNameInDev, typeof deps);
    }
  }
}

function warnOnHookMismatchInDev(currentHookName) {
  {
    var componentName = getComponentName(currentlyRenderingFiber$1.type);

    if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
      didWarnAboutMismatchedHooksForComponent.add(componentName);

      if (hookTypesDev !== null) {
        var table = '';
        var secondColumnStart = 30;

        for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
          var oldHookName = hookTypesDev[i];
          var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
          var row = i + 1 + ". " + oldHookName; // Extra space so second column lines up
          // lol @ IE not supporting String#repeat

          while (row.length < secondColumnStart) {
            row += ' ';
          }

          row += newHookName + '\n';
          table += row;
        }

        error('React has detected a change in the order of Hooks called by %s. ' + 'This will lead to bugs and errors if not fixed. ' + 'For more information, read the Rules of Hooks: https://fb.me/rules-of-hooks\n\n' + '   Previous render            Next render\n' + '   ------------------------------------------------------\n' + '%s' + '   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n', componentName, table);
      }
    }
  }
}

function throwInvalidHookError() {
  {
    {
      throw Error( "Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://fb.me/react-invalid-hook-call for tips about how to debug and fix this problem." );
    }
  }
}

function areHookInputsEqual(nextDeps, prevDeps) {
  {
    if (ignorePreviousDependencies) {
      // Only true when this component is being hot reloaded.
      return false;
    }
  }

  if (prevDeps === null) {
    {
      error('%s received a final argument during this render, but not during ' + 'the previous render. Even though the final argument is optional, ' + 'its type cannot change between renders.', currentHookNameInDev);
    }

    return false;
  }

  {
    // Don't bother comparing lengths in prod because these arrays should be
    // passed inline.
    if (nextDeps.length !== prevDeps.length) {
      error('The final argument passed to %s changed size between renders. The ' + 'order and size of this array must remain constant.\n\n' + 'Previous: %s\n' + 'Incoming: %s', currentHookNameInDev, "[" + prevDeps.join(', ') + "]", "[" + nextDeps.join(', ') + "]");
    }
  }

  for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
    if (objectIs(nextDeps[i], prevDeps[i])) {
      continue;
    }

    return false;
  }

  return true;
}

function renderWithHooks(current, workInProgress, Component, props, secondArg, nextRenderExpirationTime) {
  renderExpirationTime = nextRenderExpirationTime;
  currentlyRenderingFiber$1 = workInProgress;

  {
    hookTypesDev = current !== null ? current._debugHookTypes : null;
    hookTypesUpdateIndexDev = -1; // Used for hot reloading:

    ignorePreviousDependencies = current !== null && current.type !== workInProgress.type;
  }

  workInProgress.memoizedState = null;
  workInProgress.updateQueue = null;
  workInProgress.expirationTime = NoWork; // The following should have already been reset
  // currentHook = null;
  // workInProgressHook = null;
  // didScheduleRenderPhaseUpdate = false;
  // TODO Warn if no hooks are used at all during mount, then some are used during update.
  // Currently we will identify the update render as a mount because memoizedState === null.
  // This is tricky because it's valid for certain types of components (e.g. React.lazy)
  // Using memoizedState to differentiate between mount/update only works if at least one stateful hook is used.
  // Non-stateful hooks (e.g. context) don't get added to memoizedState,
  // so memoizedState would be null during updates and mounts.

  {
    if (current !== null && current.memoizedState !== null) {
      ReactCurrentDispatcher.current = HooksDispatcherOnUpdateInDEV;
    } else if (hookTypesDev !== null) {
      // This dispatcher handles an edge case where a component is updating,
      // but no stateful hooks have been used.
      // We want to match the production code behavior (which will use HooksDispatcherOnMount),
      // but with the extra DEV validation to ensure hooks ordering hasn't changed.
      // This dispatcher does that.
      ReactCurrentDispatcher.current = HooksDispatcherOnMountWithHookTypesInDEV;
    } else {
      ReactCurrentDispatcher.current = HooksDispatcherOnMountInDEV;
    }
  }

  var children = Component(props, secondArg); // Check if there was a render phase update

  if (workInProgress.expirationTime === renderExpirationTime) {
    // Keep rendering in a loop for as long as render phase updates continue to
    // be scheduled. Use a counter to prevent infinite loops.
    var numberOfReRenders = 0;

    do {
      workInProgress.expirationTime = NoWork;

      if (!(numberOfReRenders < RE_RENDER_LIMIT)) {
        {
          throw Error( "Too many re-renders. React limits the number of renders to prevent an infinite loop." );
        }
      }

      numberOfReRenders += 1;

      {
        // Even when hot reloading, allow dependencies to stabilize
        // after first render to prevent infinite render phase updates.
        ignorePreviousDependencies = false;
      } // Start over from the beginning of the list


      currentHook = null;
      workInProgressHook = null;
      workInProgress.updateQueue = null;

      {
        // Also validate hook order for cascading updates.
        hookTypesUpdateIndexDev = -1;
      }

      ReactCurrentDispatcher.current =  HooksDispatcherOnRerenderInDEV ;
      children = Component(props, secondArg);
    } while (workInProgress.expirationTime === renderExpirationTime);
  } // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.


  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  {
    workInProgress._debugHookTypes = hookTypesDev;
  } // This check uses currentHook so that it works the same in DEV and prod bundles.
  // hookTypesDev could catch more cases (e.g. context) but only in DEV bundles.


  var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    currentHookNameInDev = null;
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
  }

  didScheduleRenderPhaseUpdate = false;

  if (!!didRenderTooFewHooks) {
    {
      throw Error( "Rendered fewer hooks than expected. This may be caused by an accidental early return statement." );
    }
  }

  return children;
}
function bailoutHooks(current, workInProgress, expirationTime) {
  workInProgress.updateQueue = current.updateQueue;
  workInProgress.effectTag &= ~(Passive | Update);

  if (current.expirationTime <= expirationTime) {
    current.expirationTime = NoWork;
  }
}
function resetHooksAfterThrow() {
  // We can assume the previous dispatcher is always this one, since we set it
  // at the beginning of the render phase and there's no re-entrancy.
  ReactCurrentDispatcher.current = ContextOnlyDispatcher;

  if (didScheduleRenderPhaseUpdate) {
    // There were render phase updates. These are only valid for this render
    // phase, which we are now aborting. Remove the updates from the queues so
    // they do not persist to the next render. Do not remove updates from hooks
    // that weren't processed.
    //
    // Only reset the updates from the queue if it has a clone. If it does
    // not have a clone, that means it wasn't processed, and the updates were
    // scheduled before we entered the render phase.
    var hook = currentlyRenderingFiber$1.memoizedState;

    while (hook !== null) {
      var queue = hook.queue;

      if (queue !== null) {
        queue.pending = null;
      }

      hook = hook.next;
    }
  }

  renderExpirationTime = NoWork;
  currentlyRenderingFiber$1 = null;
  currentHook = null;
  workInProgressHook = null;

  {
    hookTypesDev = null;
    hookTypesUpdateIndexDev = -1;
    currentHookNameInDev = null;
  }

  didScheduleRenderPhaseUpdate = false;
}

function mountWorkInProgressHook() {
  var hook = {
    memoizedState: null,
    baseState: null,
    baseQueue: null,
    queue: null,
    next: null
  };

  if (workInProgressHook === null) {
    // This is the first hook in the list
    currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
  } else {
    // Append to the end of the list
    workInProgressHook = workInProgressHook.next = hook;
  }

  return workInProgressHook;
}

function updateWorkInProgressHook() {
  // This function is used both for updates and for re-renders triggered by a
  // render phase update. It assumes there is either a current hook we can
  // clone, or a work-in-progress hook from a previous render pass that we can
  // use as a base. When we reach the end of the base list, we must switch to
  // the dispatcher used for mounts.
  var nextCurrentHook;

  if (currentHook === null) {
    var current = currentlyRenderingFiber$1.alternate;

    if (current !== null) {
      nextCurrentHook = current.memoizedState;
    } else {
      nextCurrentHook = null;
    }
  } else {
    nextCurrentHook = currentHook.next;
  }

  var nextWorkInProgressHook;

  if (workInProgressHook === null) {
    nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
  } else {
    nextWorkInProgressHook = workInProgressHook.next;
  }

  if (nextWorkInProgressHook !== null) {
    // There's already a work-in-progress. Reuse it.
    workInProgressHook = nextWorkInProgressHook;
    nextWorkInProgressHook = workInProgressHook.next;
    currentHook = nextCurrentHook;
  } else {
    // Clone from the current hook.
    if (!(nextCurrentHook !== null)) {
      {
        throw Error( "Rendered more hooks than during the previous render." );
      }
    }

    currentHook = nextCurrentHook;
    var newHook = {
      memoizedState: currentHook.memoizedState,
      baseState: currentHook.baseState,
      baseQueue: currentHook.baseQueue,
      queue: currentHook.queue,
      next: null
    };

    if (workInProgressHook === null) {
      // This is the first hook in the list.
      currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
    } else {
      // Append to the end of the list.
      workInProgressHook = workInProgressHook.next = newHook;
    }
  }

  return workInProgressHook;
}

function createFunctionComponentUpdateQueue() {
  return {
    lastEffect: null
  };
}

function basicStateReducer(state, action) {
  // $FlowFixMe: Flow doesn't like mixed types
  return typeof action === 'function' ? action(state) : action;
}

function mountReducer(reducer, initialArg, init) {
  var hook = mountWorkInProgressHook();
  var initialState;

  if (init !== undefined) {
    initialState = init(initialArg);
  } else {
    initialState = initialArg;
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: reducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer;
  var current = currentHook; // The last rebase update that is NOT part of the base state.

  var baseQueue = current.baseQueue; // The last pending update that hasn't been processed yet.

  var pendingQueue = queue.pending;

  if (pendingQueue !== null) {
    // We have new updates that haven't been processed yet.
    // We'll add them to the base queue.
    if (baseQueue !== null) {
      // Merge the pending queue and the base queue.
      var baseFirst = baseQueue.next;
      var pendingFirst = pendingQueue.next;
      baseQueue.next = pendingFirst;
      pendingQueue.next = baseFirst;
    }

    current.baseQueue = baseQueue = pendingQueue;
    queue.pending = null;
  }

  if (baseQueue !== null) {
    // We have a queue to process.
    var first = baseQueue.next;
    var newState = current.baseState;
    var newBaseState = null;
    var newBaseQueueFirst = null;
    var newBaseQueueLast = null;
    var update = first;

    do {
      var updateExpirationTime = update.expirationTime;

      if (updateExpirationTime < renderExpirationTime) {
        // Priority is insufficient. Skip this update. If this is the first
        // skipped update, the previous update/state is the new base
        // update/state.
        var clone = {
          expirationTime: update.expirationTime,
          suspenseConfig: update.suspenseConfig,
          action: update.action,
          eagerReducer: update.eagerReducer,
          eagerState: update.eagerState,
          next: null
        };

        if (newBaseQueueLast === null) {
          newBaseQueueFirst = newBaseQueueLast = clone;
          newBaseState = newState;
        } else {
          newBaseQueueLast = newBaseQueueLast.next = clone;
        } // Update the remaining priority in the queue.


        if (updateExpirationTime > currentlyRenderingFiber$1.expirationTime) {
          currentlyRenderingFiber$1.expirationTime = updateExpirationTime;
          markUnprocessedUpdateTime(updateExpirationTime);
        }
      } else {
        // This update does have sufficient priority.
        if (newBaseQueueLast !== null) {
          var _clone = {
            expirationTime: Sync,
            // This update is going to be committed so we never want uncommit it.
            suspenseConfig: update.suspenseConfig,
            action: update.action,
            eagerReducer: update.eagerReducer,
            eagerState: update.eagerState,
            next: null
          };
          newBaseQueueLast = newBaseQueueLast.next = _clone;
        } // Mark the event time of this update as relevant to this render pass.
        // TODO: This should ideally use the true event time of this update rather than
        // its priority which is a derived and not reverseable value.
        // TODO: We should skip this update if it was already committed but currently
        // we have no way of detecting the difference between a committed and suspended
        // update here.


        markRenderEventTimeAndConfig(updateExpirationTime, update.suspenseConfig); // Process this update.

        if (update.eagerReducer === reducer) {
          // If this update was processed eagerly, and its reducer matches the
          // current reducer, we can use the eagerly computed state.
          newState = update.eagerState;
        } else {
          var action = update.action;
          newState = reducer(newState, action);
        }
      }

      update = update.next;
    } while (update !== null && update !== first);

    if (newBaseQueueLast === null) {
      newBaseState = newState;
    } else {
      newBaseQueueLast.next = newBaseQueueFirst;
    } // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState;
    hook.baseState = newBaseState;
    hook.baseQueue = newBaseQueueLast;
    queue.lastRenderedState = newState;
  }

  var dispatch = queue.dispatch;
  return [hook.memoizedState, dispatch];
}

function rerenderReducer(reducer, initialArg, init) {
  var hook = updateWorkInProgressHook();
  var queue = hook.queue;

  if (!(queue !== null)) {
    {
      throw Error( "Should have a queue. This is likely a bug in React. Please file an issue." );
    }
  }

  queue.lastRenderedReducer = reducer; // This is a re-render. Apply the new render phase updates to the previous
  // work-in-progress hook.

  var dispatch = queue.dispatch;
  var lastRenderPhaseUpdate = queue.pending;
  var newState = hook.memoizedState;

  if (lastRenderPhaseUpdate !== null) {
    // The queue doesn't persist past this render pass.
    queue.pending = null;
    var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
    var update = firstRenderPhaseUpdate;

    do {
      // Process this render phase update. We don't have to check the
      // priority because it will always be the same as the current
      // render's.
      var action = update.action;
      newState = reducer(newState, action);
      update = update.next;
    } while (update !== firstRenderPhaseUpdate); // Mark that the fiber performed work, but only if the new state is
    // different from the current state.


    if (!objectIs(newState, hook.memoizedState)) {
      markWorkInProgressReceivedUpdate();
    }

    hook.memoizedState = newState; // Don't persist the state accumulated from the render phase updates to
    // the base state unless the queue is empty.
    // TODO: Not sure if this is the desired semantics, but it's what we
    // do for gDSFP. I can't remember why.

    if (hook.baseQueue === null) {
      hook.baseState = newState;
    }

    queue.lastRenderedState = newState;
  }

  return [newState, dispatch];
}

function mountState(initialState) {
  var hook = mountWorkInProgressHook();

  if (typeof initialState === 'function') {
    // $FlowFixMe: Flow doesn't like mixed types
    initialState = initialState();
  }

  hook.memoizedState = hook.baseState = initialState;
  var queue = hook.queue = {
    pending: null,
    dispatch: null,
    lastRenderedReducer: basicStateReducer,
    lastRenderedState: initialState
  };
  var dispatch = queue.dispatch = dispatchAction.bind(null, currentlyRenderingFiber$1, queue);
  return [hook.memoizedState, dispatch];
}

function updateState(initialState) {
  return updateReducer(basicStateReducer);
}

function rerenderState(initialState) {
  return rerenderReducer(basicStateReducer);
}

function pushEffect(tag, create, destroy, deps) {
  var effect = {
    tag: tag,
    create: create,
    destroy: destroy,
    deps: deps,
    // Circular
    next: null
  };
  var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;

  if (componentUpdateQueue === null) {
    componentUpdateQueue = createFunctionComponentUpdateQueue();
    currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
    componentUpdateQueue.lastEffect = effect.next = effect;
  } else {
    var lastEffect = componentUpdateQueue.lastEffect;

    if (lastEffect === null) {
      componentUpdateQueue.lastEffect = effect.next = effect;
    } else {
      var firstEffect = lastEffect.next;
      lastEffect.next = effect;
      effect.next = firstEffect;
      componentUpdateQueue.lastEffect = effect;
    }
  }

  return effect;
}

function mountRef(initialValue) {
  var hook = mountWorkInProgressHook();
  var ref = {
    current: initialValue
  };

  {
    Object.seal(ref);
  }

  hook.memoizedState = ref;
  return ref;
}

function updateRef(initialValue) {
  var hook = updateWorkInProgressHook();
  return hook.memoizedState;
}

function mountEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, undefined, nextDeps);
}

function updateEffectImpl(fiberEffectTag, hookEffectTag, create, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var destroy = undefined;

  if (currentHook !== null) {
    var prevEffect = currentHook.memoizedState;
    destroy = prevEffect.destroy;

    if (nextDeps !== null) {
      var prevDeps = prevEffect.deps;

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        pushEffect(hookEffectTag, create, destroy, nextDeps);
        return;
      }
    }
  }

  currentlyRenderingFiber$1.effectTag |= fiberEffectTag;
  hook.memoizedState = pushEffect(HasEffect | hookEffectTag, create, destroy, nextDeps);
}

function mountEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return mountEffectImpl(Update | Passive, Passive$1, create, deps);
}

function updateEffect(create, deps) {
  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfNotCurrentlyActingEffectsInDEV(currentlyRenderingFiber$1);
    }
  }

  return updateEffectImpl(Update | Passive, Passive$1, create, deps);
}

function mountLayoutEffect(create, deps) {
  return mountEffectImpl(Update, Layout, create, deps);
}

function updateLayoutEffect(create, deps) {
  return updateEffectImpl(Update, Layout, create, deps);
}

function imperativeHandleEffect(create, ref) {
  if (typeof ref === 'function') {
    var refCallback = ref;

    var _inst = create();

    refCallback(_inst);
    return function () {
      refCallback(null);
    };
  } else if (ref !== null && ref !== undefined) {
    var refObject = ref;

    {
      if (!refObject.hasOwnProperty('current')) {
        error('Expected useImperativeHandle() first argument to either be a ' + 'ref callback or React.createRef() object. Instead received: %s.', 'an object with keys {' + Object.keys(refObject).join(', ') + '}');
      }
    }

    var _inst2 = create();

    refObject.current = _inst2;
    return function () {
      refObject.current = null;
    };
  }
}

function mountImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return mountEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function updateImperativeHandle(ref, create, deps) {
  {
    if (typeof create !== 'function') {
      error('Expected useImperativeHandle() second argument to be a function ' + 'that creates a handle. Instead received: %s.', create !== null ? typeof create : 'null');
    }
  } // TODO: If deps are provided, should we skip comparing the ref itself?


  var effectDeps = deps !== null && deps !== undefined ? deps.concat([ref]) : null;
  return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
}

function mountDebugValue(value, formatterFn) {// This hook is normally a no-op.
  // The react-debug-hooks package injects its own implementation
  // so that e.g. DevTools can display custom hook values.
}

var updateDebugValue = mountDebugValue;

function mountCallback(callback, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function updateCallback(callback, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  hook.memoizedState = [callback, nextDeps];
  return callback;
}

function mountMemo(nextCreate, deps) {
  var hook = mountWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function updateMemo(nextCreate, deps) {
  var hook = updateWorkInProgressHook();
  var nextDeps = deps === undefined ? null : deps;
  var prevState = hook.memoizedState;

  if (prevState !== null) {
    // Assume these are defined. If they're not, areHookInputsEqual will warn.
    if (nextDeps !== null) {
      var prevDeps = prevState[1];

      if (areHookInputsEqual(nextDeps, prevDeps)) {
        return prevState[0];
      }
    }
  }

  var nextValue = nextCreate();
  hook.memoizedState = [nextValue, nextDeps];
  return nextValue;
}

function mountDeferredValue(value, config) {
  var _mountState = mountState(value),
      prevValue = _mountState[0],
      setValue = _mountState[1];

  mountEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function updateDeferredValue(value, config) {
  var _updateState = updateState(),
      prevValue = _updateState[0],
      setValue = _updateState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function rerenderDeferredValue(value, config) {
  var _rerenderState = rerenderState(),
      prevValue = _rerenderState[0],
      setValue = _rerenderState[1];

  updateEffect(function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setValue(value);
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  }, [value, config]);
  return prevValue;
}

function startTransition(setPending, config, callback) {
  var priorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(priorityLevel < UserBlockingPriority$1 ? UserBlockingPriority$1 : priorityLevel, function () {
    setPending(true);
  });
  runWithPriority$1(priorityLevel > NormalPriority ? NormalPriority : priorityLevel, function () {
    var previousConfig = ReactCurrentBatchConfig$1.suspense;
    ReactCurrentBatchConfig$1.suspense = config === undefined ? null : config;

    try {
      setPending(false);
      callback();
    } finally {
      ReactCurrentBatchConfig$1.suspense = previousConfig;
    }
  });
}

function mountTransition(config) {
  var _mountState2 = mountState(false),
      isPending = _mountState2[0],
      setPending = _mountState2[1];

  var start = mountCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function updateTransition(config) {
  var _updateState2 = updateState(),
      isPending = _updateState2[0],
      setPending = _updateState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function rerenderTransition(config) {
  var _rerenderState2 = rerenderState(),
      isPending = _rerenderState2[0],
      setPending = _rerenderState2[1];

  var start = updateCallback(startTransition.bind(null, setPending, config), [setPending, config]);
  return [start, isPending];
}

function dispatchAction(fiber, queue, action) {
  {
    if (typeof arguments[3] === 'function') {
      error("State updates from the useState() and useReducer() Hooks don't support the " + 'second callback argument. To execute a side effect after ' + 'rendering, declare it in the component body with useEffect().');
    }
  }

  var currentTime = requestCurrentTimeForUpdate();
  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, fiber, suspenseConfig);
  var update = {
    expirationTime: expirationTime,
    suspenseConfig: suspenseConfig,
    action: action,
    eagerReducer: null,
    eagerState: null,
    next: null
  };

  {
    update.priority = getCurrentPriorityLevel();
  } // Append the update to the end of the list.


  var pending = queue.pending;

  if (pending === null) {
    // This is the first update. Create a circular list.
    update.next = update;
  } else {
    update.next = pending.next;
    pending.next = update;
  }

  queue.pending = update;
  var alternate = fiber.alternate;

  if (fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1) {
    // This is a render phase update. Stash it in a lazily-created map of
    // queue -> linked list of updates. After this render pass, we'll restart
    // and apply the stashed updates on top of the work-in-progress hook.
    didScheduleRenderPhaseUpdate = true;
    update.expirationTime = renderExpirationTime;
    currentlyRenderingFiber$1.expirationTime = renderExpirationTime;
  } else {
    if (fiber.expirationTime === NoWork && (alternate === null || alternate.expirationTime === NoWork)) {
      // The queue is currently empty, which means we can eagerly compute the
      // next state before entering the render phase. If the new state is the
      // same as the current state, we may be able to bail out entirely.
      var lastRenderedReducer = queue.lastRenderedReducer;

      if (lastRenderedReducer !== null) {
        var prevDispatcher;

        {
          prevDispatcher = ReactCurrentDispatcher.current;
          ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
        }

        try {
          var currentState = queue.lastRenderedState;
          var eagerState = lastRenderedReducer(currentState, action); // Stash the eagerly computed state, and the reducer used to compute
          // it, on the update object. If the reducer hasn't changed by the
          // time we enter the render phase, then the eager state can be used
          // without calling the reducer again.

          update.eagerReducer = lastRenderedReducer;
          update.eagerState = eagerState;

          if (objectIs(eagerState, currentState)) {
            // Fast path. We can bail out without scheduling React to re-render.
            // It's still possible that we'll need to rebase this update later,
            // if the component re-renders for a different reason and by that
            // time the reducer has changed.
            return;
          }
        } catch (error) {// Suppress the error. It will throw again in the render phase.
        } finally {
          {
            ReactCurrentDispatcher.current = prevDispatcher;
          }
        }
      }
    }

    {
      // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
      if ('undefined' !== typeof jest) {
        warnIfNotScopedWithMatchingAct(fiber);
        warnIfNotCurrentlyActingUpdatesInDev(fiber);
      }
    }

    scheduleWork(fiber, expirationTime);
  }
}

var ContextOnlyDispatcher = {
  readContext: readContext,
  useCallback: throwInvalidHookError,
  useContext: throwInvalidHookError,
  useEffect: throwInvalidHookError,
  useImperativeHandle: throwInvalidHookError,
  useLayoutEffect: throwInvalidHookError,
  useMemo: throwInvalidHookError,
  useReducer: throwInvalidHookError,
  useRef: throwInvalidHookError,
  useState: throwInvalidHookError,
  useDebugValue: throwInvalidHookError,
  useResponder: throwInvalidHookError,
  useDeferredValue: throwInvalidHookError,
  useTransition: throwInvalidHookError
};
var HooksDispatcherOnMountInDEV = null;
var HooksDispatcherOnMountWithHookTypesInDEV = null;
var HooksDispatcherOnUpdateInDEV = null;
var HooksDispatcherOnRerenderInDEV = null;
var InvalidNestedHooksDispatcherOnMountInDEV = null;
var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
var InvalidNestedHooksDispatcherOnRerenderInDEV = null;

{
  var warnInvalidContextAccess = function () {
    error('Context can only be read while React is rendering. ' + 'In classes, you can read it in the render method or getDerivedStateFromProps. ' + 'In function components, you can read it directly in the function body, but not ' + 'inside Hooks like useReducer() or useMemo().');
  };

  var warnInvalidHookAccess = function () {
    error('Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. ' + 'You can only call Hooks at the top level of your React function. ' + 'For more information, see ' + 'https://fb.me/rules-of-hooks');
  };

  HooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      mountHookTypesDev();
      checkDepsAreArrayDev(deps);
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnMountWithHookTypesInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return mountTransition(config);
    }
  };
  HooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  HooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnRerenderInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnMountInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountRef(initialValue);
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      mountHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnMountInDEV;

      try {
        return mountState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      mountHookTypesDev();
      return mountTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnUpdateInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateTransition(config);
    }
  };
  InvalidNestedHooksDispatcherOnRerenderInDEV = {
    readContext: function (context, observedBits) {
      warnInvalidContextAccess();
      return readContext(context, observedBits);
    },
    useCallback: function (callback, deps) {
      currentHookNameInDev = 'useCallback';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateCallback(callback, deps);
    },
    useContext: function (context, observedBits) {
      currentHookNameInDev = 'useContext';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return readContext(context, observedBits);
    },
    useEffect: function (create, deps) {
      currentHookNameInDev = 'useEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateEffect(create, deps);
    },
    useImperativeHandle: function (ref, create, deps) {
      currentHookNameInDev = 'useImperativeHandle';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateImperativeHandle(ref, create, deps);
    },
    useLayoutEffect: function (create, deps) {
      currentHookNameInDev = 'useLayoutEffect';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateLayoutEffect(create, deps);
    },
    useMemo: function (create, deps) {
      currentHookNameInDev = 'useMemo';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return updateMemo(create, deps);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useReducer: function (reducer, initialArg, init) {
      currentHookNameInDev = 'useReducer';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderReducer(reducer, initialArg, init);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useRef: function (initialValue) {
      currentHookNameInDev = 'useRef';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateRef();
    },
    useState: function (initialState) {
      currentHookNameInDev = 'useState';
      warnInvalidHookAccess();
      updateHookTypesDev();
      var prevDispatcher = ReactCurrentDispatcher.current;
      ReactCurrentDispatcher.current = InvalidNestedHooksDispatcherOnUpdateInDEV;

      try {
        return rerenderState(initialState);
      } finally {
        ReactCurrentDispatcher.current = prevDispatcher;
      }
    },
    useDebugValue: function (value, formatterFn) {
      currentHookNameInDev = 'useDebugValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return updateDebugValue();
    },
    useResponder: function (responder, props) {
      currentHookNameInDev = 'useResponder';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return createDeprecatedResponderListener(responder, props);
    },
    useDeferredValue: function (value, config) {
      currentHookNameInDev = 'useDeferredValue';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderDeferredValue(value, config);
    },
    useTransition: function (config) {
      currentHookNameInDev = 'useTransition';
      warnInvalidHookAccess();
      updateHookTypesDev();
      return rerenderTransition(config);
    }
  };
}

var now$1 = Scheduler.unstable_now;
var commitTime = 0;
var profilerStartTime = -1;

function getCommitTime() {
  return commitTime;
}

function recordCommitTime() {

  commitTime = now$1();
}

function startProfilerTimer(fiber) {

  profilerStartTime = now$1();

  if (fiber.actualStartTime < 0) {
    fiber.actualStartTime = now$1();
  }
}

function stopProfilerTimerIfRunning(fiber) {

  profilerStartTime = -1;
}

function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {

  if (profilerStartTime >= 0) {
    var elapsedTime = now$1() - profilerStartTime;
    fiber.actualDuration += elapsedTime;

    if (overrideBaseTime) {
      fiber.selfBaseDuration = elapsedTime;
    }

    profilerStartTime = -1;
  }
}

// This may have been an insertion or a hydration.

var hydrationParentFiber = null;
var nextHydratableInstance = null;
var isHydrating = false;

function enterHydrationState(fiber) {

  var parentInstance = fiber.stateNode.containerInfo;
  nextHydratableInstance = getFirstHydratableChild(parentInstance);
  hydrationParentFiber = fiber;
  isHydrating = true;
  return true;
}

function deleteHydratableInstance(returnFiber, instance) {
  {
    switch (returnFiber.tag) {
      case HostRoot:
        didNotHydrateContainerInstance(returnFiber.stateNode.containerInfo, instance);
        break;

      case HostComponent:
        didNotHydrateInstance(returnFiber.type, returnFiber.memoizedProps, returnFiber.stateNode, instance);
        break;
    }
  }

  var childToDelete = createFiberFromHostInstanceForDeletion();
  childToDelete.stateNode = instance;
  childToDelete.return = returnFiber;
  childToDelete.effectTag = Deletion; // This might seem like it belongs on progressedFirstDeletion. However,
  // these children are not part of the reconciliation list of children.
  // Even if we abort and rereconcile the children, that will try to hydrate
  // again and the nodes are still in the host tree so these will be
  // recreated.

  if (returnFiber.lastEffect !== null) {
    returnFiber.lastEffect.nextEffect = childToDelete;
    returnFiber.lastEffect = childToDelete;
  } else {
    returnFiber.firstEffect = returnFiber.lastEffect = childToDelete;
  }
}

function insertNonHydratedInstance(returnFiber, fiber) {
  fiber.effectTag = fiber.effectTag & ~Hydrating | Placement;

  {
    switch (returnFiber.tag) {
      case HostRoot:
        {
          var parentContainer = returnFiber.stateNode.containerInfo;

          switch (fiber.tag) {
            case HostComponent:
              var type = fiber.type;
              var props = fiber.pendingProps;
              didNotFindHydratableContainerInstance(parentContainer, type);
              break;

            case HostText:
              var text = fiber.pendingProps;
              didNotFindHydratableContainerTextInstance(parentContainer, text);
              break;
          }

          break;
        }

      case HostComponent:
        {
          var parentType = returnFiber.type;
          var parentProps = returnFiber.memoizedProps;
          var parentInstance = returnFiber.stateNode;

          switch (fiber.tag) {
            case HostComponent:
              var _type = fiber.type;
              var _props = fiber.pendingProps;
              didNotFindHydratableInstance(parentType, parentProps, parentInstance, _type);
              break;

            case HostText:
              var _text = fiber.pendingProps;
              didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, _text);
              break;

            case SuspenseComponent:
              didNotFindHydratableSuspenseInstance(parentType, parentProps);
              break;
          }

          break;
        }

      default:
        return;
    }
  }
}

function tryHydrate(fiber, nextInstance) {
  switch (fiber.tag) {
    case HostComponent:
      {
        var type = fiber.type;
        var props = fiber.pendingProps;
        var instance = canHydrateInstance(nextInstance, type);

        if (instance !== null) {
          fiber.stateNode = instance;
          return true;
        }

        return false;
      }

    case HostText:
      {
        var text = fiber.pendingProps;
        var textInstance = canHydrateTextInstance(nextInstance, text);

        if (textInstance !== null) {
          fiber.stateNode = textInstance;
          return true;
        }

        return false;
      }

    case SuspenseComponent:
      {

        return false;
      }

    default:
      return false;
  }
}

function tryToClaimNextHydratableInstance(fiber) {
  if (!isHydrating) {
    return;
  }

  var nextInstance = nextHydratableInstance;

  if (!nextInstance) {
    // Nothing to hydrate. Make it an insertion.
    insertNonHydratedInstance(hydrationParentFiber, fiber);
    isHydrating = false;
    hydrationParentFiber = fiber;
    return;
  }

  var firstAttemptedInstance = nextInstance;

  if (!tryHydrate(fiber, nextInstance)) {
    // If we can't hydrate this instance let's try the next one.
    // We use this as a heuristic. It's based on intuition and not data so it
    // might be flawed or unnecessary.
    nextInstance = getNextHydratableSibling(firstAttemptedInstance);

    if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
      // Nothing to hydrate. Make it an insertion.
      insertNonHydratedInstance(hydrationParentFiber, fiber);
      isHydrating = false;
      hydrationParentFiber = fiber;
      return;
    } // We matched the next one, we'll now assume that the first one was
    // superfluous and we'll delete it. Since we can't eagerly delete it
    // we'll have to schedule a deletion. To do that, this node needs a dummy
    // fiber associated with it.


    deleteHydratableInstance(hydrationParentFiber, firstAttemptedInstance);
  }

  hydrationParentFiber = fiber;
  nextHydratableInstance = getFirstHydratableChild(nextInstance);
}

function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {

  var instance = fiber.stateNode;
  var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber); // TODO: Type this specific to this type of component.

  fiber.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
  // is a new ref we mark this as an update.

  if (updatePayload !== null) {
    return true;
  }

  return false;
}

function prepareToHydrateHostTextInstance(fiber) {

  var textInstance = fiber.stateNode;
  var textContent = fiber.memoizedProps;
  var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);

  {
    if (shouldUpdate) {
      // We assume that prepareToHydrateHostTextInstance is called in a context where the
      // hydration parent is the parent host component of this host text.
      var returnFiber = hydrationParentFiber;

      if (returnFiber !== null) {
        switch (returnFiber.tag) {
          case HostRoot:
            {
              var parentContainer = returnFiber.stateNode.containerInfo;
              didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, textContent);
              break;
            }

          case HostComponent:
            {
              var parentType = returnFiber.type;
              var parentProps = returnFiber.memoizedProps;
              var parentInstance = returnFiber.stateNode;
              didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, textContent);
              break;
            }
        }
      }
    }
  }

  return shouldUpdate;
}

function skipPastDehydratedSuspenseInstance(fiber) {

  var suspenseState = fiber.memoizedState;
  var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;

  if (!suspenseInstance) {
    {
      throw Error( "Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
}

function popToNextHostParent(fiber) {
  var parent = fiber.return;

  while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
    parent = parent.return;
  }

  hydrationParentFiber = parent;
}

function popHydrationState(fiber) {

  if (fiber !== hydrationParentFiber) {
    // We're deeper than the current hydration context, inside an inserted
    // tree.
    return false;
  }

  if (!isHydrating) {
    // If we're not currently hydrating but we're in a hydration context, then
    // we were an insertion and now need to pop up reenter hydration of our
    // siblings.
    popToNextHostParent(fiber);
    isHydrating = true;
    return false;
  }

  var type = fiber.type; // If we have any remaining hydratable nodes, we need to delete them now.
  // We only do this deeper than head and body since they tend to have random
  // other nodes in them. We also ignore components with pure text content in
  // side of them.
  // TODO: Better heuristic.

  if (fiber.tag !== HostComponent || type !== 'head' && type !== 'body' && !shouldSetTextContent(type, fiber.memoizedProps)) {
    var nextInstance = nextHydratableInstance;

    while (nextInstance) {
      deleteHydratableInstance(fiber, nextInstance);
      nextInstance = getNextHydratableSibling(nextInstance);
    }
  }

  popToNextHostParent(fiber);

  if (fiber.tag === SuspenseComponent) {
    nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
  } else {
    nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
  }

  return true;
}

function resetHydrationState() {

  hydrationParentFiber = null;
  nextHydratableInstance = null;
  isHydrating = false;
}

var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
var didReceiveUpdate = false;
var didWarnAboutBadClass;
var didWarnAboutModulePatternComponent;
var didWarnAboutContextTypeOnFunctionComponent;
var didWarnAboutGetDerivedStateOnFunctionComponent;
var didWarnAboutFunctionRefs;
var didWarnAboutReassigningProps;
var didWarnAboutRevealOrder;
var didWarnAboutTailOptions;

{
  didWarnAboutBadClass = {};
  didWarnAboutModulePatternComponent = {};
  didWarnAboutContextTypeOnFunctionComponent = {};
  didWarnAboutGetDerivedStateOnFunctionComponent = {};
  didWarnAboutFunctionRefs = {};
  didWarnAboutReassigningProps = false;
  didWarnAboutRevealOrder = {};
  didWarnAboutTailOptions = {};
}

function reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime) {
  if (current === null) {
    // If this is a fresh new component that hasn't been rendered yet, we
    // won't update its child set by applying minimal side-effects. Instead,
    // we will add them all to the child before it gets rendered. That means
    // we can optimize this reconciliation pass by not tracking side-effects.
    workInProgress.child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    // If the current child is the same as the work in progress, it means that
    // we haven't yet started any work on these children. Therefore, we use
    // the clone algorithm to create a copy of all the current children.
    // If we had any progressed work already, that is invalid at this point so
    // let's throw it out.
    workInProgress.child = reconcileChildFibers(workInProgress, current.child, nextChildren, renderExpirationTime);
  }
}

function forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime) {
  // This function is fork of reconcileChildren. It's used in cases where we
  // want to reconcile without matching against the existing set. This has the
  // effect of all current children being unmounted; even if the type and key
  // are the same, the old child is unmounted and a new child is created.
  //
  // To do this, we're going to go through the reconcile algorithm twice. In
  // the first pass, we schedule a deletion for all the current children by
  // passing null.
  workInProgress.child = reconcileChildFibers(workInProgress, current.child, null, renderExpirationTime); // In the second pass, we mount the new children. The trick here is that we
  // pass null in place of where we usually pass the current child set. This has
  // the effect of remounting all children regardless of whether their
  // identities match.

  workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
}

function updateForwardRef(current, workInProgress, Component, nextProps, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens after the first render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var render = Component.render;
  var ref = workInProgress.ref; // The rest is a fork of updateFunctionComponent

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, render, nextProps, ref, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  if (current === null) {
    var type = Component.type;

    if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
    Component.defaultProps === undefined) {
      var resolvedType = type;

      {
        resolvedType = resolveFunctionForHotReloading(type);
      } // If this is a plain function component without default props,
      // and with only the default shallow comparison, we upgrade it
      // to a SimpleMemoComponent to allow fast path updates.


      workInProgress.tag = SimpleMemoComponent;
      workInProgress.type = resolvedType;

      {
        validateFunctionComponentInDev(workInProgress, type);
      }

      return updateSimpleMemoComponent(current, workInProgress, resolvedType, nextProps, updateExpirationTime, renderExpirationTime);
    }

    {
      var innerPropTypes = type.propTypes;

      if (innerPropTypes) {
        // Inner memo component props aren't currently validated in createElement.
        // We could move it there, but we'd still need this for lazy code path.
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(type), getCurrentFiberStackInDev);
      }
    }

    var child = createFiberFromTypeAndProps(Component.type, null, nextProps, null, workInProgress.mode, renderExpirationTime);
    child.ref = workInProgress.ref;
    child.return = workInProgress;
    workInProgress.child = child;
    return child;
  }

  {
    var _type = Component.type;
    var _innerPropTypes = _type.propTypes;

    if (_innerPropTypes) {
      // Inner memo component props aren't currently validated in createElement.
      // We could move it there, but we'd still need this for lazy code path.
      checkPropTypes(_innerPropTypes, nextProps, // Resolved props
      'prop', getComponentName(_type), getCurrentFiberStackInDev);
    }
  }

  var currentChild = current.child; // This is always exactly one child

  if (updateExpirationTime < renderExpirationTime) {
    // This will be the props with resolved defaultProps,
    // unlike current.memoizedProps which will be the unresolved ones.
    var prevProps = currentChild.memoizedProps; // Default to shallow comparison

    var compare = Component.compare;
    compare = compare !== null ? compare : shallowEqual;

    if (compare(prevProps, nextProps) && current.ref === workInProgress.ref) {
      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  var newChild = createWorkInProgress(currentChild, nextProps);
  newChild.ref = workInProgress.ref;
  newChild.return = workInProgress;
  workInProgress.child = newChild;
  return newChild;
}

function updateSimpleMemoComponent(current, workInProgress, Component, nextProps, updateExpirationTime, renderExpirationTime) {
  // TODO: current can be non-null here even if the component
  // hasn't yet mounted. This happens when the inner render suspends.
  // We'll need to figure out if this is fine or can cause issues.
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var outerMemoType = workInProgress.elementType;

      if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
        // We warn when you define propTypes on lazy()
        // so let's just skip over it to find memo() outer wrapper.
        // Inner props for memo are validated later.
        outerMemoType = refineResolvedLazyComponent(outerMemoType);
      }

      var outerPropTypes = outerMemoType && outerMemoType.propTypes;

      if (outerPropTypes) {
        checkPropTypes(outerPropTypes, nextProps, // Resolved (SimpleMemoComponent has no defaultProps)
        'prop', getComponentName(outerMemoType), getCurrentFiberStackInDev);
      } // Inner propTypes will be validated in the function component path.

    }
  }

  if (current !== null) {
    var prevProps = current.memoizedProps;

    if (shallowEqual(prevProps, nextProps) && current.ref === workInProgress.ref && ( // Prevent bailout if the implementation changed due to hot reload.
     workInProgress.type === current.type )) {
      didReceiveUpdate = false;

      if (updateExpirationTime < renderExpirationTime) {
        // The pending update priority was cleared at the beginning of
        // beginWork. We're about to bail out, but there might be additional
        // updates at a lower priority. Usually, the priority level of the
        // remaining updates is accumlated during the evaluation of the
        // component (i.e. when processing the update queue). But since since
        // we're bailing out early *without* evaluating the component, we need
        // to account for it here, too. Reset to the value of the current fiber.
        // NOTE: This only applies to SimpleMemoComponent, not MemoComponent,
        // because a MemoComponent fiber does not have hooks or an update queue;
        // rather, it wraps around an inner component, which may or may not
        // contains hooks.
        // TODO: Move the reset at in beginWork out of the common path so that
        // this is no longer necessary.
        workInProgress.expirationTime = current.expirationTime;
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    }
  }

  return updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime);
}

function updateFragment(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateMode(current, workInProgress, renderExpirationTime) {
  var nextChildren = workInProgress.pendingProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateProfiler(current, workInProgress, renderExpirationTime) {
  {
    workInProgress.effectTag |= Update;
  }

  var nextProps = workInProgress.pendingProps;
  var nextChildren = nextProps.children;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function markRef(current, workInProgress) {
  var ref = workInProgress.ref;

  if (current === null && ref !== null || current !== null && current.ref !== ref) {
    // Schedule a Ref effect
    workInProgress.effectTag |= Ref;
  }
}

function updateFunctionComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  }

  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, true);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  var nextChildren;
  prepareToReadContext(workInProgress, renderExpirationTime);

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);

    if ( workInProgress.mode & StrictMode) {
      // Only double-render components with Hooks
      if (workInProgress.memoizedState !== null) {
        nextChildren = renderWithHooks(current, workInProgress, Component, nextProps, context, renderExpirationTime);
      }
    }

    setIsRendering(false);
  }

  if (current !== null && !didReceiveUpdate) {
    bailoutHooks(current, workInProgress, renderExpirationTime);
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateClassComponent(current, workInProgress, Component, nextProps, renderExpirationTime) {
  {
    if (workInProgress.type !== workInProgress.elementType) {
      // Lazy component props can't be validated in createElement
      // because they're only guaranteed to be resolved here.
      var innerPropTypes = Component.propTypes;

      if (innerPropTypes) {
        checkPropTypes(innerPropTypes, nextProps, // Resolved props
        'prop', getComponentName(Component), getCurrentFiberStackInDev);
      }
    }
  } // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.


  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var instance = workInProgress.stateNode;
  var shouldUpdate;

  if (instance === null) {
    if (current !== null) {
      // A class component without an instance only mounts if it suspended
      // inside a non-concurrent tree, in an inconsistent state. We want to
      // treat it like a new mount, even though an empty version of it already
      // committed. Disconnect the alternate pointers.
      current.alternate = null;
      workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

      workInProgress.effectTag |= Placement;
    } // In the initial pass we might need to construct the instance.


    constructClassInstance(workInProgress, Component, nextProps);
    mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
    shouldUpdate = true;
  } else if (current === null) {
    // In a resume, we'll already have an instance we can reuse.
    shouldUpdate = resumeMountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  } else {
    shouldUpdate = updateClassInstance(current, workInProgress, Component, nextProps, renderExpirationTime);
  }

  var nextUnitOfWork = finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime);

  {
    var inst = workInProgress.stateNode;

    if (inst.props !== nextProps) {
      if (!didWarnAboutReassigningProps) {
        error('It looks like %s is reassigning its own `this.props` while rendering. ' + 'This is not supported and can lead to confusing bugs.', getComponentName(workInProgress.type) || 'a component');
      }

      didWarnAboutReassigningProps = true;
    }
  }

  return nextUnitOfWork;
}

function finishClassComponent(current, workInProgress, Component, shouldUpdate, hasContext, renderExpirationTime) {
  // Refs should update even if shouldComponentUpdate returns false
  markRef(current, workInProgress);
  var didCaptureError = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (!shouldUpdate && !didCaptureError) {
    // Context providers should defer to sCU for rendering
    if (hasContext) {
      invalidateContextProvider(workInProgress, Component, false);
    }

    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var instance = workInProgress.stateNode; // Rerender

  ReactCurrentOwner$1.current = workInProgress;
  var nextChildren;

  if (didCaptureError && typeof Component.getDerivedStateFromError !== 'function') {
    // If we captured an error, but getDerivedStateFromError is not defined,
    // unmount all the children. componentDidCatch will schedule an update to
    // re-render a fallback. This is temporary until we migrate everyone to
    // the new API.
    // TODO: Warn in a future release.
    nextChildren = null;

    {
      stopProfilerTimerIfRunning();
    }
  } else {
    {
      setIsRendering(true);
      nextChildren = instance.render();

      if ( workInProgress.mode & StrictMode) {
        instance.render();
      }

      setIsRendering(false);
    }
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (current !== null && didCaptureError) {
    // If we're recovering from an error, reconcile without reusing any of
    // the existing children. Conceptually, the normal children and the children
    // that are shown on error are two different sets, so we shouldn't reuse
    // normal children even if their identities match.
    forceUnmountCurrentAndReconcile(current, workInProgress, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  } // Memoize state using the values we just used to render.
  // TODO: Restructure so we never read values from the instance.


  workInProgress.memoizedState = instance.state; // The context might have changed so we need to recalculate it.

  if (hasContext) {
    invalidateContextProvider(workInProgress, Component, true);
  }

  return workInProgress.child;
}

function pushHostRootContext(workInProgress) {
  var root = workInProgress.stateNode;

  if (root.pendingContext) {
    pushTopLevelContextObject(workInProgress, root.pendingContext, root.pendingContext !== root.context);
  } else if (root.context) {
    // Should always be set
    pushTopLevelContextObject(workInProgress, root.context, false);
  }

  pushHostContainer(workInProgress, root.containerInfo);
}

function updateHostRoot(current, workInProgress, renderExpirationTime) {
  pushHostRootContext(workInProgress);
  var updateQueue = workInProgress.updateQueue;

  if (!(current !== null && updateQueue !== null)) {
    {
      throw Error( "If the root does not have an updateQueue, we should have already bailed out. This error is likely caused by a bug in React. Please file an issue." );
    }
  }

  var nextProps = workInProgress.pendingProps;
  var prevState = workInProgress.memoizedState;
  var prevChildren = prevState !== null ? prevState.element : null;
  cloneUpdateQueue(current, workInProgress);
  processUpdateQueue(workInProgress, nextProps, null, renderExpirationTime);
  var nextState = workInProgress.memoizedState; // Caution: React DevTools currently depends on this property
  // being called "element".

  var nextChildren = nextState.element;

  if (nextChildren === prevChildren) {
    // If the state is the same as before, that's a bailout because we had
    // no work that expires at this time.
    resetHydrationState();
    return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
  }

  var root = workInProgress.stateNode;

  if (root.hydrate && enterHydrationState(workInProgress)) {
    // If we don't have any current children this might be the first pass.
    // We always try to hydrate. If this isn't a hydration pass there won't
    // be any children to hydrate which is effectively the same thing as
    // not hydrating.
    var child = mountChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
    workInProgress.child = child;
    var node = child;

    while (node) {
      // Mark each child as hydrating. This is a fast path to know whether this
      // tree is part of a hydrating tree. This is used to determine if a child
      // node has fully mounted yet, and for scheduling event replaying.
      // Conceptually this is similar to Placement in that a new subtree is
      // inserted into the React tree here. It just happens to not need DOM
      // mutations because it already exists.
      node.effectTag = node.effectTag & ~Placement | Hydrating;
      node = node.sibling;
    }
  } else {
    // Otherwise reset hydration state in case we aborted and resumed another
    // root.
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
    resetHydrationState();
  }

  return workInProgress.child;
}

function updateHostComponent(current, workInProgress, renderExpirationTime) {
  pushHostContext(workInProgress);

  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  }

  var type = workInProgress.type;
  var nextProps = workInProgress.pendingProps;
  var prevProps = current !== null ? current.memoizedProps : null;
  var nextChildren = nextProps.children;
  var isDirectTextChild = shouldSetTextContent(type, nextProps);

  if (isDirectTextChild) {
    // We special case a direct text child of a host node. This is a common
    // case. We won't handle it as a reified child. We will instead handle
    // this in the host environment that also has access to this prop. That
    // avoids allocating another HostText fiber and traversing it.
    nextChildren = null;
  } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
    // If we're switching from a direct text child to a normal child, or to
    // empty, we need to schedule the text content to be reset.
    workInProgress.effectTag |= ContentReset;
  }

  markRef(current, workInProgress); // Check the host config to see if the children are offscreen/hidden.

  if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(type, nextProps)) {
    {
      markSpawnedWork(Never);
    } // Schedule this fiber to re-render at offscreen priority. Then bailout.


    workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
    return null;
  }

  reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  return workInProgress.child;
}

function updateHostText(current, workInProgress) {
  if (current === null) {
    tryToClaimNextHydratableInstance(workInProgress);
  } // Nothing to do here. This is terminal. We'll do the completion step
  // immediately after.


  return null;
}

function mountLazyComponent(_current, workInProgress, elementType, updateExpirationTime, renderExpirationTime) {
  if (_current !== null) {
    // A lazy component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps; // We can't start a User Timing measurement with correct label yet.
  // Cancel and resume right after we know the tag.

  cancelWorkTimer(workInProgress);
  var Component = readLazyComponentType(elementType); // Store the unwrapped component in the type.

  workInProgress.type = Component;
  var resolvedTag = workInProgress.tag = resolveLazyComponentTag(Component);
  startWorkTimer(workInProgress);
  var resolvedProps = resolveDefaultProps(Component, props);
  var child;

  switch (resolvedTag) {
    case FunctionComponent:
      {
        {
          validateFunctionComponentInDev(workInProgress, Component);
          workInProgress.type = Component = resolveFunctionForHotReloading(Component);
        }

        child = updateFunctionComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ClassComponent:
      {
        {
          workInProgress.type = Component = resolveClassForHotReloading(Component);
        }

        child = updateClassComponent(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case ForwardRef:
      {
        {
          workInProgress.type = Component = resolveForwardRefForHotReloading(Component);
        }

        child = updateForwardRef(null, workInProgress, Component, resolvedProps, renderExpirationTime);
        return child;
      }

    case MemoComponent:
      {
        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = Component.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, resolvedProps, // Resolved for outer only
              'prop', getComponentName(Component), getCurrentFiberStackInDev);
            }
          }
        }

        child = updateMemoComponent(null, workInProgress, Component, resolveDefaultProps(Component.type, resolvedProps), // The inner type can have defaults too
        updateExpirationTime, renderExpirationTime);
        return child;
      }
  }

  var hint = '';

  {
    if (Component !== null && typeof Component === 'object' && Component.$$typeof === REACT_LAZY_TYPE) {
      hint = ' Did you wrap a component in React.lazy() more than once?';
    }
  } // This message intentionally doesn't mention ForwardRef or MemoComponent
  // because the fact that it's a separate type of work is an
  // implementation detail.


  {
    {
      throw Error( "Element type is invalid. Received a promise that resolves to: " + Component + ". Lazy element type must resolve to a class or function." + hint );
    }
  }
}

function mountIncompleteClassComponent(_current, workInProgress, Component, nextProps, renderExpirationTime) {
  if (_current !== null) {
    // An incomplete component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  } // Promote the fiber to a class and try rendering again.


  workInProgress.tag = ClassComponent; // The rest of this function is a fork of `updateClassComponent`
  // Push context providers early to prevent context stack mismatches.
  // During mounting we don't know the child context yet as the instance doesn't exist.
  // We will invalidate the child context in finishClassComponent() right after rendering.

  var hasContext;

  if (isContextProvider(Component)) {
    hasContext = true;
    pushContextProvider(workInProgress);
  } else {
    hasContext = false;
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  constructClassInstance(workInProgress, Component, nextProps);
  mountClassInstance(workInProgress, Component, nextProps, renderExpirationTime);
  return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
}

function mountIndeterminateComponent(_current, workInProgress, Component, renderExpirationTime) {
  if (_current !== null) {
    // An indeterminate component only mounts if it suspended inside a non-
    // concurrent tree, in an inconsistent state. We want to treat it like
    // a new mount, even though an empty version of it already committed.
    // Disconnect the alternate pointers.
    _current.alternate = null;
    workInProgress.alternate = null; // Since this is conceptually a new fiber, schedule a Placement effect

    workInProgress.effectTag |= Placement;
  }

  var props = workInProgress.pendingProps;
  var context;

  {
    var unmaskedContext = getUnmaskedContext(workInProgress, Component, false);
    context = getMaskedContext(workInProgress, unmaskedContext);
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var value;

  {
    if (Component.prototype && typeof Component.prototype.render === 'function') {
      var componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutBadClass[componentName]) {
        error("The <%s /> component appears to have a render method, but doesn't extend React.Component. " + 'This is likely to cause errors. Change %s to extend React.Component instead.', componentName, componentName);

        didWarnAboutBadClass[componentName] = true;
      }
    }

    if (workInProgress.mode & StrictMode) {
      ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress, null);
    }

    setIsRendering(true);
    ReactCurrentOwner$1.current = workInProgress;
    value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;

  if (typeof value === 'object' && value !== null && typeof value.render === 'function' && value.$$typeof === undefined) {
    {
      var _componentName = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutModulePatternComponent[_componentName]) {
        error('The <%s /> component appears to be a function component that returns a class instance. ' + 'Change %s to a class that extends React.Component instead. ' + "If you can't use a class try assigning the prototype on the function as a workaround. " + "`%s.prototype = React.Component.prototype`. Don't use an arrow function since it " + 'cannot be called with `new` by React.', _componentName, _componentName, _componentName);

        didWarnAboutModulePatternComponent[_componentName] = true;
      }
    } // Proceed under the assumption that this is a class instance


    workInProgress.tag = ClassComponent; // Throw out any hooks that were used.

    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null; // Push context providers early to prevent context stack mismatches.
    // During mounting we don't know the child context yet as the instance doesn't exist.
    // We will invalidate the child context in finishClassComponent() right after rendering.

    var hasContext = false;

    if (isContextProvider(Component)) {
      hasContext = true;
      pushContextProvider(workInProgress);
    } else {
      hasContext = false;
    }

    workInProgress.memoizedState = value.state !== null && value.state !== undefined ? value.state : null;
    initializeUpdateQueue(workInProgress);
    var getDerivedStateFromProps = Component.getDerivedStateFromProps;

    if (typeof getDerivedStateFromProps === 'function') {
      applyDerivedStateFromProps(workInProgress, Component, getDerivedStateFromProps, props);
    }

    adoptClassInstance(workInProgress, value);
    mountClassInstance(workInProgress, Component, props, renderExpirationTime);
    return finishClassComponent(null, workInProgress, Component, true, hasContext, renderExpirationTime);
  } else {
    // Proceed under the assumption that this is a function component
    workInProgress.tag = FunctionComponent;

    {

      if ( workInProgress.mode & StrictMode) {
        // Only double-render components with Hooks
        if (workInProgress.memoizedState !== null) {
          value = renderWithHooks(null, workInProgress, Component, props, context, renderExpirationTime);
        }
      }
    }

    reconcileChildren(null, workInProgress, value, renderExpirationTime);

    {
      validateFunctionComponentInDev(workInProgress, Component);
    }

    return workInProgress.child;
  }
}

function validateFunctionComponentInDev(workInProgress, Component) {
  {
    if (Component) {
      if (Component.childContextTypes) {
        error('%s(...): childContextTypes cannot be defined on a function component.', Component.displayName || Component.name || 'Component');
      }
    }

    if (workInProgress.ref !== null) {
      var info = '';
      var ownerName = getCurrentFiberOwnerNameInDevOrNull();

      if (ownerName) {
        info += '\n\nCheck the render method of `' + ownerName + '`.';
      }

      var warningKey = ownerName || workInProgress._debugID || '';
      var debugSource = workInProgress._debugSource;

      if (debugSource) {
        warningKey = debugSource.fileName + ':' + debugSource.lineNumber;
      }

      if (!didWarnAboutFunctionRefs[warningKey]) {
        didWarnAboutFunctionRefs[warningKey] = true;

        error('Function components cannot be given refs. ' + 'Attempts to access this ref will fail. ' + 'Did you mean to use React.forwardRef()?%s', info);
      }
    }

    if (typeof Component.getDerivedStateFromProps === 'function') {
      var _componentName2 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2]) {
        error('%s: Function components do not support getDerivedStateFromProps.', _componentName2);

        didWarnAboutGetDerivedStateOnFunctionComponent[_componentName2] = true;
      }
    }

    if (typeof Component.contextType === 'object' && Component.contextType !== null) {
      var _componentName3 = getComponentName(Component) || 'Unknown';

      if (!didWarnAboutContextTypeOnFunctionComponent[_componentName3]) {
        error('%s: Function components do not support contextType.', _componentName3);

        didWarnAboutContextTypeOnFunctionComponent[_componentName3] = true;
      }
    }
  }
}

var SUSPENDED_MARKER = {
  dehydrated: null,
  retryTime: NoWork
};

function shouldRemainOnFallback(suspenseContext, current, workInProgress) {
  // If the context is telling us that we should show a fallback, and we're not
  // already showing content, then we should show the fallback instead.
  return hasSuspenseContext(suspenseContext, ForceSuspenseFallback) && (current === null || current.memoizedState !== null);
}

function updateSuspenseComponent(current, workInProgress, renderExpirationTime) {
  var mode = workInProgress.mode;
  var nextProps = workInProgress.pendingProps; // This is used by DevTools to force a boundary to suspend.

  {
    if (shouldSuspend(workInProgress)) {
      workInProgress.effectTag |= DidCapture;
    }
  }

  var suspenseContext = suspenseStackCursor.current;
  var nextDidTimeout = false;
  var didSuspend = (workInProgress.effectTag & DidCapture) !== NoEffect;

  if (didSuspend || shouldRemainOnFallback(suspenseContext, current)) {
    // Something in this boundary's subtree already suspended. Switch to
    // rendering the fallback children.
    nextDidTimeout = true;
    workInProgress.effectTag &= ~DidCapture;
  } else {
    // Attempting the main content
    if (current === null || current.memoizedState !== null) {
      // This is a new mount or this boundary is already showing a fallback state.
      // Mark this subtree context as having at least one invisible parent that could
      // handle the fallback state.
      // Boundaries without fallbacks or should be avoided are not considered since
      // they cannot handle preferred fallback states.
      if (nextProps.fallback !== undefined && nextProps.unstable_avoidThisFallback !== true) {
        suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
      }
    }
  }

  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  pushSuspenseContext(workInProgress, suspenseContext); // This next part is a bit confusing. If the children timeout, we switch to
  // showing the fallback children in place of the "primary" children.
  // However, we don't want to delete the primary children because then their
  // state will be lost (both the React state and the host state, e.g.
  // uncontrolled form inputs). Instead we keep them mounted and hide them.
  // Both the fallback children AND the primary children are rendered at the
  // same time. Once the primary children are un-suspended, we can delete
  // the fallback children — don't need to preserve their state.
  //
  // The two sets of children are siblings in the host environment, but
  // semantically, for purposes of reconciliation, they are two separate sets.
  // So we store them using two fragment fibers.
  //
  // However, we want to avoid allocating extra fibers for every placeholder.
  // They're only necessary when the children time out, because that's the
  // only time when both sets are mounted.
  //
  // So, the extra fragment fibers are only used if the children time out.
  // Otherwise, we render the primary children directly. This requires some
  // custom reconciliation logic to preserve the state of the primary
  // children. It's essentially a very basic form of re-parenting.

  if (current === null) {
    // If we're currently hydrating, try to hydrate this boundary.
    // But only if this has a fallback.
    if (nextProps.fallback !== undefined) {
      tryToClaimNextHydratableInstance(workInProgress); // This could've been a dehydrated suspense component.
    } // This is the initial mount. This branch is pretty simple because there's
    // no previous state that needs to be preserved.


    if (nextDidTimeout) {
      // Mount separate fragments for primary and fallback children.
      var nextFallbackChildren = nextProps.fallback;
      var primaryChildFragment = createFiberFromFragment(null, mode, NoWork, null);
      primaryChildFragment.return = workInProgress;

      if ((workInProgress.mode & BlockingMode) === NoMode) {
        // Outside of blocking mode, we commit the effects from the
        // partially completed, timed-out tree, too.
        var progressedState = workInProgress.memoizedState;
        var progressedPrimaryChild = progressedState !== null ? workInProgress.child.child : workInProgress.child;
        primaryChildFragment.child = progressedPrimaryChild;
        var progressedChild = progressedPrimaryChild;

        while (progressedChild !== null) {
          progressedChild.return = primaryChildFragment;
          progressedChild = progressedChild.sibling;
        }
      }

      var fallbackChildFragment = createFiberFromFragment(nextFallbackChildren, mode, renderExpirationTime, null);
      fallbackChildFragment.return = workInProgress;
      primaryChildFragment.sibling = fallbackChildFragment; // Skip the primary children, and continue working on the
      // fallback children.

      workInProgress.memoizedState = SUSPENDED_MARKER;
      workInProgress.child = primaryChildFragment;
      return fallbackChildFragment;
    } else {
      // Mount the primary children without an intermediate fragment fiber.
      var nextPrimaryChildren = nextProps.children;
      workInProgress.memoizedState = null;
      return workInProgress.child = mountChildFibers(workInProgress, null, nextPrimaryChildren, renderExpirationTime);
    }
  } else {
    // This is an update. This branch is more complicated because we need to
    // ensure the state of the primary children is preserved.
    var prevState = current.memoizedState;

    if (prevState !== null) {
      // wrapped in a fragment fiber.


      var currentPrimaryChildFragment = current.child;
      var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;

      if (nextDidTimeout) {
        // Still timed out. Reuse the current primary children by cloning
        // its fragment. We're going to skip over these entirely.
        var _nextFallbackChildren2 = nextProps.fallback;

        var _primaryChildFragment2 = createWorkInProgress(currentPrimaryChildFragment, currentPrimaryChildFragment.pendingProps);

        _primaryChildFragment2.return = workInProgress;

        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState = workInProgress.memoizedState;

          var _progressedPrimaryChild = _progressedState !== null ? workInProgress.child.child : workInProgress.child;

          if (_progressedPrimaryChild !== currentPrimaryChildFragment.child) {
            _primaryChildFragment2.child = _progressedPrimaryChild;
            var _progressedChild2 = _progressedPrimaryChild;

            while (_progressedChild2 !== null) {
              _progressedChild2.return = _primaryChildFragment2;
              _progressedChild2 = _progressedChild2.sibling;
            }
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration = 0;
          var _hiddenChild = _primaryChildFragment2.child;

          while (_hiddenChild !== null) {
            _treeBaseDuration += _hiddenChild.treeBaseDuration;
            _hiddenChild = _hiddenChild.sibling;
          }

          _primaryChildFragment2.treeBaseDuration = _treeBaseDuration;
        } // Clone the fallback child fragment, too. These we'll continue
        // working on.


        var _fallbackChildFragment2 = createWorkInProgress(currentFallbackChildFragment, _nextFallbackChildren2);

        _fallbackChildFragment2.return = workInProgress;
        _primaryChildFragment2.sibling = _fallbackChildFragment2;
        _primaryChildFragment2.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment2;
        return _fallbackChildFragment2;
      } else {
        // No longer suspended. Switch back to showing the primary children,
        // and remove the intermediate fragment fiber.
        var _nextPrimaryChildren = nextProps.children;
        var currentPrimaryChild = currentPrimaryChildFragment.child;
        var primaryChild = reconcileChildFibers(workInProgress, currentPrimaryChild, _nextPrimaryChildren, renderExpirationTime); // If this render doesn't suspend, we need to delete the fallback
        // children. Wait until the complete phase, after we've confirmed the
        // fallback is no longer needed.
        // TODO: Would it be better to store the fallback fragment on
        // the stateNode?
        // Continue rendering the children, like we normally do.

        workInProgress.memoizedState = null;
        return workInProgress.child = primaryChild;
      }
    } else {
      // The current tree has not already timed out. That means the primary
      // children are not wrapped in a fragment fiber.
      var _currentPrimaryChild = current.child;

      if (nextDidTimeout) {
        // Timed out. Wrap the children in a fragment fiber to keep them
        // separate from the fallback children.
        var _nextFallbackChildren3 = nextProps.fallback;

        var _primaryChildFragment3 = createFiberFromFragment( // It shouldn't matter what the pending props are because we aren't
        // going to render this fragment.
        null, mode, NoWork, null);

        _primaryChildFragment3.return = workInProgress;
        _primaryChildFragment3.child = _currentPrimaryChild;

        if (_currentPrimaryChild !== null) {
          _currentPrimaryChild.return = _primaryChildFragment3;
        } // Even though we're creating a new fiber, there are no new children,
        // because we're reusing an already mounted tree. So we don't need to
        // schedule a placement.
        // primaryChildFragment.effectTag |= Placement;


        if ((workInProgress.mode & BlockingMode) === NoMode) {
          // Outside of blocking mode, we commit the effects from the
          // partially completed, timed-out tree, too.
          var _progressedState2 = workInProgress.memoizedState;

          var _progressedPrimaryChild2 = _progressedState2 !== null ? workInProgress.child.child : workInProgress.child;

          _primaryChildFragment3.child = _progressedPrimaryChild2;
          var _progressedChild3 = _progressedPrimaryChild2;

          while (_progressedChild3 !== null) {
            _progressedChild3.return = _primaryChildFragment3;
            _progressedChild3 = _progressedChild3.sibling;
          }
        } // Because primaryChildFragment is a new fiber that we're inserting as the
        // parent of a new tree, we need to set its treeBaseDuration.


        if ( workInProgress.mode & ProfileMode) {
          // treeBaseDuration is the sum of all the child tree base durations.
          var _treeBaseDuration2 = 0;
          var _hiddenChild2 = _primaryChildFragment3.child;

          while (_hiddenChild2 !== null) {
            _treeBaseDuration2 += _hiddenChild2.treeBaseDuration;
            _hiddenChild2 = _hiddenChild2.sibling;
          }

          _primaryChildFragment3.treeBaseDuration = _treeBaseDuration2;
        } // Create a fragment from the fallback children, too.


        var _fallbackChildFragment3 = createFiberFromFragment(_nextFallbackChildren3, mode, renderExpirationTime, null);

        _fallbackChildFragment3.return = workInProgress;
        _primaryChildFragment3.sibling = _fallbackChildFragment3;
        _fallbackChildFragment3.effectTag |= Placement;
        _primaryChildFragment3.childExpirationTime = NoWork; // Skip the primary children, and continue working on the
        // fallback children.

        workInProgress.memoizedState = SUSPENDED_MARKER;
        workInProgress.child = _primaryChildFragment3;
        return _fallbackChildFragment3;
      } else {
        // Still haven't timed out. Continue rendering the children, like we
        // normally do.
        workInProgress.memoizedState = null;
        var _nextPrimaryChildren2 = nextProps.children;
        return workInProgress.child = reconcileChildFibers(workInProgress, _currentPrimaryChild, _nextPrimaryChildren2, renderExpirationTime);
      }
    }
  }
}

function scheduleWorkOnFiber(fiber, renderExpirationTime) {
  if (fiber.expirationTime < renderExpirationTime) {
    fiber.expirationTime = renderExpirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < renderExpirationTime) {
    alternate.expirationTime = renderExpirationTime;
  }

  scheduleWorkOnParentPath(fiber.return, renderExpirationTime);
}

function propagateSuspenseContextChange(workInProgress, firstChild, renderExpirationTime) {
  // Mark any Suspense boundaries with fallbacks as having work to do.
  // If they were previously forced into fallbacks, they may now be able
  // to unblock.
  var node = firstChild;

  while (node !== null) {
    if (node.tag === SuspenseComponent) {
      var state = node.memoizedState;

      if (state !== null) {
        scheduleWorkOnFiber(node, renderExpirationTime);
      }
    } else if (node.tag === SuspenseListComponent) {
      // If the tail is hidden there might not be an Suspense boundaries
      // to schedule work on. In this case we have to schedule it on the
      // list itself.
      // We don't have to traverse to the children of the list since
      // the list will propagate the change when it rerenders.
      scheduleWorkOnFiber(node, renderExpirationTime);
    } else if (node.child !== null) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === workInProgress) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === workInProgress) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function findLastContentRow(firstChild) {
  // This is going to find the last row among these children that is already
  // showing content on the screen, as opposed to being in fallback state or
  // new. If a row has multiple Suspense boundaries, any of them being in the
  // fallback state, counts as the whole row being in a fallback state.
  // Note that the "rows" will be workInProgress, but any nested children
  // will still be current since we haven't rendered them yet. The mounted
  // order may not be the same as the new order. We use the new order.
  var row = firstChild;
  var lastContentRow = null;

  while (row !== null) {
    var currentRow = row.alternate; // New rows can't be content rows.

    if (currentRow !== null && findFirstSuspended(currentRow) === null) {
      lastContentRow = row;
    }

    row = row.sibling;
  }

  return lastContentRow;
}

function validateRevealOrder(revealOrder) {
  {
    if (revealOrder !== undefined && revealOrder !== 'forwards' && revealOrder !== 'backwards' && revealOrder !== 'together' && !didWarnAboutRevealOrder[revealOrder]) {
      didWarnAboutRevealOrder[revealOrder] = true;

      if (typeof revealOrder === 'string') {
        switch (revealOrder.toLowerCase()) {
          case 'together':
          case 'forwards':
          case 'backwards':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          case 'forward':
          case 'backward':
            {
              error('"%s" is not a valid value for revealOrder on <SuspenseList />. ' + 'React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());

              break;
            }

          default:
            error('"%s" is not a supported revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);

            break;
        }
      } else {
        error('%s is not a supported value for revealOrder on <SuspenseList />. ' + 'Did you mean "together", "forwards" or "backwards"?', revealOrder);
      }
    }
  }
}

function validateTailOptions(tailMode, revealOrder) {
  {
    if (tailMode !== undefined && !didWarnAboutTailOptions[tailMode]) {
      if (tailMode !== 'collapsed' && tailMode !== 'hidden') {
        didWarnAboutTailOptions[tailMode] = true;

        error('"%s" is not a supported value for tail on <SuspenseList />. ' + 'Did you mean "collapsed" or "hidden"?', tailMode);
      } else if (revealOrder !== 'forwards' && revealOrder !== 'backwards') {
        didWarnAboutTailOptions[tailMode] = true;

        error('<SuspenseList tail="%s" /> is only valid if revealOrder is ' + '"forwards" or "backwards". ' + 'Did you mean to specify revealOrder="forwards"?', tailMode);
      }
    }
  }
}

function validateSuspenseListNestedChild(childSlot, index) {
  {
    var isArray = Array.isArray(childSlot);
    var isIterable = !isArray && typeof getIteratorFn(childSlot) === 'function';

    if (isArray || isIterable) {
      var type = isArray ? 'array' : 'iterable';

      error('A nested %s was passed to row #%s in <SuspenseList />. Wrap it in ' + 'an additional SuspenseList to configure its revealOrder: ' + '<SuspenseList revealOrder=...> ... ' + '<SuspenseList revealOrder=...>{%s}</SuspenseList> ... ' + '</SuspenseList>', type, index, type);

      return false;
    }
  }

  return true;
}

function validateSuspenseListChildren(children, revealOrder) {
  {
    if ((revealOrder === 'forwards' || revealOrder === 'backwards') && children !== undefined && children !== null && children !== false) {
      if (Array.isArray(children)) {
        for (var i = 0; i < children.length; i++) {
          if (!validateSuspenseListNestedChild(children[i], i)) {
            return;
          }
        }
      } else {
        var iteratorFn = getIteratorFn(children);

        if (typeof iteratorFn === 'function') {
          var childrenIterator = iteratorFn.call(children);

          if (childrenIterator) {
            var step = childrenIterator.next();
            var _i = 0;

            for (; !step.done; step = childrenIterator.next()) {
              if (!validateSuspenseListNestedChild(step.value, _i)) {
                return;
              }

              _i++;
            }
          }
        } else {
          error('A single row was passed to a <SuspenseList revealOrder="%s" />. ' + 'This is not useful since it needs multiple rows. ' + 'Did you mean to pass multiple children or an array?', revealOrder);
        }
      }
    }
  }
}

function initSuspenseListRenderState(workInProgress, isBackwards, tail, lastContentRow, tailMode, lastEffectBeforeRendering) {
  var renderState = workInProgress.memoizedState;

  if (renderState === null) {
    workInProgress.memoizedState = {
      isBackwards: isBackwards,
      rendering: null,
      renderingStartTime: 0,
      last: lastContentRow,
      tail: tail,
      tailExpiration: 0,
      tailMode: tailMode,
      lastEffect: lastEffectBeforeRendering
    };
  } else {
    // We can reuse the existing object from previous renders.
    renderState.isBackwards = isBackwards;
    renderState.rendering = null;
    renderState.renderingStartTime = 0;
    renderState.last = lastContentRow;
    renderState.tail = tail;
    renderState.tailExpiration = 0;
    renderState.tailMode = tailMode;
    renderState.lastEffect = lastEffectBeforeRendering;
  }
} // This can end up rendering this component multiple passes.
// The first pass splits the children fibers into two sets. A head and tail.
// We first render the head. If anything is in fallback state, we do another
// pass through beginWork to rerender all children (including the tail) with
// the force suspend context. If the first render didn't have anything in
// in fallback state. Then we render each row in the tail one-by-one.
// That happens in the completeWork phase without going back to beginWork.


function updateSuspenseListComponent(current, workInProgress, renderExpirationTime) {
  var nextProps = workInProgress.pendingProps;
  var revealOrder = nextProps.revealOrder;
  var tailMode = nextProps.tail;
  var newChildren = nextProps.children;
  validateRevealOrder(revealOrder);
  validateTailOptions(tailMode, revealOrder);
  validateSuspenseListChildren(newChildren, revealOrder);
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  var suspenseContext = suspenseStackCursor.current;
  var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);

  if (shouldForceFallback) {
    suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
    workInProgress.effectTag |= DidCapture;
  } else {
    var didSuspendBefore = current !== null && (current.effectTag & DidCapture) !== NoEffect;

    if (didSuspendBefore) {
      // If we previously forced a fallback, we need to schedule work
      // on any nested boundaries to let them know to try to render
      // again. This is the same as context updating.
      propagateSuspenseContextChange(workInProgress, workInProgress.child, renderExpirationTime);
    }

    suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
  }

  pushSuspenseContext(workInProgress, suspenseContext);

  if ((workInProgress.mode & BlockingMode) === NoMode) {
    // Outside of blocking mode, SuspenseList doesn't work so we just
    // use make it a noop by treating it as the default revealOrder.
    workInProgress.memoizedState = null;
  } else {
    switch (revealOrder) {
      case 'forwards':
        {
          var lastContentRow = findLastContentRow(workInProgress.child);
          var tail;

          if (lastContentRow === null) {
            // The whole list is part of the tail.
            // TODO: We could fast path by just rendering the tail now.
            tail = workInProgress.child;
            workInProgress.child = null;
          } else {
            // Disconnect the tail rows after the content row.
            // We're going to render them separately later.
            tail = lastContentRow.sibling;
            lastContentRow.sibling = null;
          }

          initSuspenseListRenderState(workInProgress, false, // isBackwards
          tail, lastContentRow, tailMode, workInProgress.lastEffect);
          break;
        }

      case 'backwards':
        {
          // We're going to find the first row that has existing content.
          // At the same time we're going to reverse the list of everything
          // we pass in the meantime. That's going to be our tail in reverse
          // order.
          var _tail = null;
          var row = workInProgress.child;
          workInProgress.child = null;

          while (row !== null) {
            var currentRow = row.alternate; // New rows can't be content rows.

            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              // This is the beginning of the main content.
              workInProgress.child = row;
              break;
            }

            var nextRow = row.sibling;
            row.sibling = _tail;
            _tail = row;
            row = nextRow;
          } // TODO: If workInProgress.child is null, we can continue on the tail immediately.


          initSuspenseListRenderState(workInProgress, true, // isBackwards
          _tail, null, // last
          tailMode, workInProgress.lastEffect);
          break;
        }

      case 'together':
        {
          initSuspenseListRenderState(workInProgress, false, // isBackwards
          null, // tail
          null, // last
          undefined, workInProgress.lastEffect);
          break;
        }

      default:
        {
          // The default reveal order is the same as not having
          // a boundary.
          workInProgress.memoizedState = null;
        }
    }
  }

  return workInProgress.child;
}

function updatePortalComponent(current, workInProgress, renderExpirationTime) {
  pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
  var nextChildren = workInProgress.pendingProps;

  if (current === null) {
    // Portals are special because we don't append the children during mount
    // but at commit. Therefore we need to track insertions which the normal
    // flow doesn't do during mount. This doesn't happen at the root because
    // the root always starts with a "current" with a null child.
    // TODO: Consider unifying this with how the root works.
    workInProgress.child = reconcileChildFibers(workInProgress, null, nextChildren, renderExpirationTime);
  } else {
    reconcileChildren(current, workInProgress, nextChildren, renderExpirationTime);
  }

  return workInProgress.child;
}

function updateContextProvider(current, workInProgress, renderExpirationTime) {
  var providerType = workInProgress.type;
  var context = providerType._context;
  var newProps = workInProgress.pendingProps;
  var oldProps = workInProgress.memoizedProps;
  var newValue = newProps.value;

  {
    var providerPropTypes = workInProgress.type.propTypes;

    if (providerPropTypes) {
      checkPropTypes(providerPropTypes, newProps, 'prop', 'Context.Provider', getCurrentFiberStackInDev);
    }
  }

  pushProvider(workInProgress, newValue);

  if (oldProps !== null) {
    var oldValue = oldProps.value;
    var changedBits = calculateChangedBits(context, newValue, oldValue);

    if (changedBits === 0) {
      // No change. Bailout early if children are the same.
      if (oldProps.children === newProps.children && !hasContextChanged()) {
        return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
      }
    } else {
      // The context value changed. Search for matching consumers and schedule
      // them to update.
      propagateContextChange(workInProgress, context, changedBits, renderExpirationTime);
    }
  }

  var newChildren = newProps.children;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

var hasWarnedAboutUsingContextAsConsumer = false;

function updateContextConsumer(current, workInProgress, renderExpirationTime) {
  var context = workInProgress.type; // The logic below for Context differs depending on PROD or DEV mode. In
  // DEV mode, we create a separate object for Context.Consumer that acts
  // like a proxy to Context. This proxy object adds unnecessary code in PROD
  // so we use the old behaviour (Context.Consumer references Context) to
  // reduce size and overhead. The separate object references context via
  // a property called "_context", which also gives us the ability to check
  // in DEV mode if this property exists or not and warn if it does not.

  {
    if (context._context === undefined) {
      // This may be because it's a Context (rather than a Consumer).
      // Or it may be because it's older React where they're the same thing.
      // We only want to warn if we're sure it's a new React.
      if (context !== context.Consumer) {
        if (!hasWarnedAboutUsingContextAsConsumer) {
          hasWarnedAboutUsingContextAsConsumer = true;

          error('Rendering <Context> directly is not supported and will be removed in ' + 'a future major release. Did you mean to render <Context.Consumer> instead?');
        }
      }
    } else {
      context = context._context;
    }
  }

  var newProps = workInProgress.pendingProps;
  var render = newProps.children;

  {
    if (typeof render !== 'function') {
      error('A context consumer was rendered with multiple children, or a child ' + "that isn't a function. A context consumer expects a single child " + 'that is a function. If you did pass a function, make sure there ' + 'is no trailing or leading whitespace around it.');
    }
  }

  prepareToReadContext(workInProgress, renderExpirationTime);
  var newValue = readContext(context, newProps.unstable_observedBits);
  var newChildren;

  {
    ReactCurrentOwner$1.current = workInProgress;
    setIsRendering(true);
    newChildren = render(newValue);
    setIsRendering(false);
  } // React DevTools reads this flag.


  workInProgress.effectTag |= PerformedWork;
  reconcileChildren(current, workInProgress, newChildren, renderExpirationTime);
  return workInProgress.child;
}

function markWorkInProgressReceivedUpdate() {
  didReceiveUpdate = true;
}

function bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime) {
  cancelWorkTimer(workInProgress);

  if (current !== null) {
    // Reuse previous dependencies
    workInProgress.dependencies = current.dependencies;
  }

  {
    // Don't update "base" render times for bailouts.
    stopProfilerTimerIfRunning();
  }

  var updateExpirationTime = workInProgress.expirationTime;

  if (updateExpirationTime !== NoWork) {
    markUnprocessedUpdateTime(updateExpirationTime);
  } // Check if the children have any pending work.


  var childExpirationTime = workInProgress.childExpirationTime;

  if (childExpirationTime < renderExpirationTime) {
    // The children don't have any work either. We can skip them.
    // TODO: Once we add back resuming, we should check if the children are
    // a work-in-progress set. If so, we need to transfer their effects.
    return null;
  } else {
    // This fiber doesn't have work, but its subtree does. Clone the child
    // fibers and continue.
    cloneChildFibers(current, workInProgress);
    return workInProgress.child;
  }
}

function remountFiber(current, oldWorkInProgress, newWorkInProgress) {
  {
    var returnFiber = oldWorkInProgress.return;

    if (returnFiber === null) {
      throw new Error('Cannot swap the root fiber.');
    } // Disconnect from the old current.
    // It will get deleted.


    current.alternate = null;
    oldWorkInProgress.alternate = null; // Connect to the new tree.

    newWorkInProgress.index = oldWorkInProgress.index;
    newWorkInProgress.sibling = oldWorkInProgress.sibling;
    newWorkInProgress.return = oldWorkInProgress.return;
    newWorkInProgress.ref = oldWorkInProgress.ref; // Replace the child/sibling pointers above it.

    if (oldWorkInProgress === returnFiber.child) {
      returnFiber.child = newWorkInProgress;
    } else {
      var prevSibling = returnFiber.child;

      if (prevSibling === null) {
        throw new Error('Expected parent to have a child.');
      }

      while (prevSibling.sibling !== oldWorkInProgress) {
        prevSibling = prevSibling.sibling;

        if (prevSibling === null) {
          throw new Error('Expected to find the previous sibling.');
        }
      }

      prevSibling.sibling = newWorkInProgress;
    } // Delete the old fiber and place the new one.
    // Since the old fiber is disconnected, we have to schedule it manually.


    var last = returnFiber.lastEffect;

    if (last !== null) {
      last.nextEffect = current;
      returnFiber.lastEffect = current;
    } else {
      returnFiber.firstEffect = returnFiber.lastEffect = current;
    }

    current.nextEffect = null;
    current.effectTag = Deletion;
    newWorkInProgress.effectTag |= Placement; // Restart work from the new fiber.

    return newWorkInProgress;
  }
}

function beginWork(current, workInProgress, renderExpirationTime) {
  var updateExpirationTime = workInProgress.expirationTime;

  {
    if (workInProgress._debugNeedsRemount && current !== null) {
      // This will restart the begin phase with a new fiber.
      return remountFiber(current, workInProgress, createFiberFromTypeAndProps(workInProgress.type, workInProgress.key, workInProgress.pendingProps, workInProgress._debugOwner || null, workInProgress.mode, workInProgress.expirationTime));
    }
  }

  if (current !== null) {
    var oldProps = current.memoizedProps;
    var newProps = workInProgress.pendingProps;

    if (oldProps !== newProps || hasContextChanged() || ( // Force a re-render if the implementation changed due to hot reload:
     workInProgress.type !== current.type )) {
      // If props or context changed, mark the fiber as having performed work.
      // This may be unset if the props are determined to be equal later (memo).
      didReceiveUpdate = true;
    } else if (updateExpirationTime < renderExpirationTime) {
      didReceiveUpdate = false; // This fiber does not have any pending work. Bailout without entering
      // the begin phase. There's still some bookkeeping we that needs to be done
      // in this optimized path, mostly pushing stuff onto the stack.

      switch (workInProgress.tag) {
        case HostRoot:
          pushHostRootContext(workInProgress);
          resetHydrationState();
          break;

        case HostComponent:
          pushHostContext(workInProgress);

          if (workInProgress.mode & ConcurrentMode && renderExpirationTime !== Never && shouldDeprioritizeSubtree(workInProgress.type, newProps)) {
            {
              markSpawnedWork(Never);
            } // Schedule this fiber to re-render at offscreen priority. Then bailout.


            workInProgress.expirationTime = workInProgress.childExpirationTime = Never;
            return null;
          }

          break;

        case ClassComponent:
          {
            var Component = workInProgress.type;

            if (isContextProvider(Component)) {
              pushContextProvider(workInProgress);
            }

            break;
          }

        case HostPortal:
          pushHostContainer(workInProgress, workInProgress.stateNode.containerInfo);
          break;

        case ContextProvider:
          {
            var newValue = workInProgress.memoizedProps.value;
            pushProvider(workInProgress, newValue);
            break;
          }

        case Profiler:
          {
            // Profiler should only call onRender when one of its descendants actually rendered.
            var hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (hasChildWork) {
              workInProgress.effectTag |= Update;
            }
          }

          break;

        case SuspenseComponent:
          {
            var state = workInProgress.memoizedState;

            if (state !== null) {
              // whether to retry the primary children, or to skip over it and
              // go straight to the fallback. Check the priority of the primary
              // child fragment.


              var primaryChildFragment = workInProgress.child;
              var primaryChildExpirationTime = primaryChildFragment.childExpirationTime;

              if (primaryChildExpirationTime !== NoWork && primaryChildExpirationTime >= renderExpirationTime) {
                // The primary children have pending work. Use the normal path
                // to attempt to render the primary children again.
                return updateSuspenseComponent(current, workInProgress, renderExpirationTime);
              } else {
                pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current)); // The primary children do not have pending work with sufficient
                // priority. Bailout.

                var child = bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);

                if (child !== null) {
                  // The fallback children have pending work. Skip over the
                  // primary children and work on the fallback.
                  return child.sibling;
                } else {
                  return null;
                }
              }
            } else {
              pushSuspenseContext(workInProgress, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
            }

            break;
          }

        case SuspenseListComponent:
          {
            var didSuspendBefore = (current.effectTag & DidCapture) !== NoEffect;

            var _hasChildWork = workInProgress.childExpirationTime >= renderExpirationTime;

            if (didSuspendBefore) {
              if (_hasChildWork) {
                // If something was in fallback state last time, and we have all the
                // same children then we're still in progressive loading state.
                // Something might get unblocked by state updates or retries in the
                // tree which will affect the tail. So we need to use the normal
                // path to compute the correct tail.
                return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
              } // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.


              workInProgress.effectTag |= DidCapture;
            } // If nothing suspended before and we're rendering the same children,
            // then the tail doesn't matter. Anything new that suspends will work
            // in the "together" mode, so we can continue from the state we had.


            var renderState = workInProgress.memoizedState;

            if (renderState !== null) {
              // Reset to the "together" mode in case we've started a different
              // update in the past but didn't complete it.
              renderState.rendering = null;
              renderState.tail = null;
            }

            pushSuspenseContext(workInProgress, suspenseStackCursor.current);

            if (_hasChildWork) {
              break;
            } else {
              // If none of the children had any work, that means that none of
              // them got retried so they'll still be blocked in the same way
              // as before. We can fast bail out.
              return null;
            }
          }
      }

      return bailoutOnAlreadyFinishedWork(current, workInProgress, renderExpirationTime);
    } else {
      // An update was scheduled on this fiber, but there are no new props
      // nor legacy context. Set this to false. If an update queue or context
      // consumer produces a changed value, it will set this to true. Otherwise,
      // the component will assume the children have not changed and bail out.
      didReceiveUpdate = false;
    }
  } else {
    didReceiveUpdate = false;
  } // Before entering the begin phase, clear pending update priority.
  // TODO: This assumes that we're about to evaluate the component and process
  // the update queue. However, there's an exception: SimpleMemoComponent
  // sometimes bails out later in the begin phase. This indicates that we should
  // move this assignment out of the common path and into each branch.


  workInProgress.expirationTime = NoWork;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
      {
        return mountIndeterminateComponent(current, workInProgress, workInProgress.type, renderExpirationTime);
      }

    case LazyComponent:
      {
        var elementType = workInProgress.elementType;
        return mountLazyComponent(current, workInProgress, elementType, updateExpirationTime, renderExpirationTime);
      }

    case FunctionComponent:
      {
        var _Component = workInProgress.type;
        var unresolvedProps = workInProgress.pendingProps;
        var resolvedProps = workInProgress.elementType === _Component ? unresolvedProps : resolveDefaultProps(_Component, unresolvedProps);
        return updateFunctionComponent(current, workInProgress, _Component, resolvedProps, renderExpirationTime);
      }

    case ClassComponent:
      {
        var _Component2 = workInProgress.type;
        var _unresolvedProps = workInProgress.pendingProps;

        var _resolvedProps = workInProgress.elementType === _Component2 ? _unresolvedProps : resolveDefaultProps(_Component2, _unresolvedProps);

        return updateClassComponent(current, workInProgress, _Component2, _resolvedProps, renderExpirationTime);
      }

    case HostRoot:
      return updateHostRoot(current, workInProgress, renderExpirationTime);

    case HostComponent:
      return updateHostComponent(current, workInProgress, renderExpirationTime);

    case HostText:
      return updateHostText(current, workInProgress);

    case SuspenseComponent:
      return updateSuspenseComponent(current, workInProgress, renderExpirationTime);

    case HostPortal:
      return updatePortalComponent(current, workInProgress, renderExpirationTime);

    case ForwardRef:
      {
        var type = workInProgress.type;
        var _unresolvedProps2 = workInProgress.pendingProps;

        var _resolvedProps2 = workInProgress.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);

        return updateForwardRef(current, workInProgress, type, _resolvedProps2, renderExpirationTime);
      }

    case Fragment:
      return updateFragment(current, workInProgress, renderExpirationTime);

    case Mode:
      return updateMode(current, workInProgress, renderExpirationTime);

    case Profiler:
      return updateProfiler(current, workInProgress, renderExpirationTime);

    case ContextProvider:
      return updateContextProvider(current, workInProgress, renderExpirationTime);

    case ContextConsumer:
      return updateContextConsumer(current, workInProgress, renderExpirationTime);

    case MemoComponent:
      {
        var _type2 = workInProgress.type;
        var _unresolvedProps3 = workInProgress.pendingProps; // Resolve outer props first, then resolve inner props.

        var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);

        {
          if (workInProgress.type !== workInProgress.elementType) {
            var outerPropTypes = _type2.propTypes;

            if (outerPropTypes) {
              checkPropTypes(outerPropTypes, _resolvedProps3, // Resolved for outer only
              'prop', getComponentName(_type2), getCurrentFiberStackInDev);
            }
          }
        }

        _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
        return updateMemoComponent(current, workInProgress, _type2, _resolvedProps3, updateExpirationTime, renderExpirationTime);
      }

    case SimpleMemoComponent:
      {
        return updateSimpleMemoComponent(current, workInProgress, workInProgress.type, workInProgress.pendingProps, updateExpirationTime, renderExpirationTime);
      }

    case IncompleteClassComponent:
      {
        var _Component3 = workInProgress.type;
        var _unresolvedProps4 = workInProgress.pendingProps;

        var _resolvedProps4 = workInProgress.elementType === _Component3 ? _unresolvedProps4 : resolveDefaultProps(_Component3, _unresolvedProps4);

        return mountIncompleteClassComponent(current, workInProgress, _Component3, _resolvedProps4, renderExpirationTime);
      }

    case SuspenseListComponent:
      {
        return updateSuspenseListComponent(current, workInProgress, renderExpirationTime);
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function markUpdate(workInProgress) {
  // Tag the fiber with an update effect. This turns a Placement into
  // a PlacementAndUpdate.
  workInProgress.effectTag |= Update;
}

function markRef$1(workInProgress) {
  workInProgress.effectTag |= Ref;
}

var appendAllChildren;
var updateHostContainer;
var updateHostComponent$1;
var updateHostText$1;

{
  // Mutation mode
  appendAllChildren = function (parent, workInProgress, needsVisibilityToggle, isHidden) {
    // We only have the top Fiber that was created but we need recurse down its
    // children to find all the terminal nodes.
    var node = workInProgress.child;

    while (node !== null) {
      if (node.tag === HostComponent || node.tag === HostText) {
        appendInitialChild(parent, node.stateNode);
      } else if (node.tag === HostPortal) ; else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === workInProgress) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === workInProgress) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  };

  updateHostContainer = function (workInProgress) {// Noop
  };

  updateHostComponent$1 = function (current, workInProgress, type, newProps, rootContainerInstance) {
    // If we have an alternate, that means this is an update and we need to
    // schedule a side-effect to do the updates.
    var oldProps = current.memoizedProps;

    if (oldProps === newProps) {
      // In mutation mode, this is sufficient for a bailout because
      // we won't touch this node even if children changed.
      return;
    } // If we get updated because one of our children updated, we don't
    // have newProps so we'll have to reuse them.
    // TODO: Split the update API as separate for the props vs. children.
    // Even better would be if children weren't special cased at all tho.


    var instance = workInProgress.stateNode;
    var currentHostContext = getHostContext(); // TODO: Experiencing an error where oldProps is null. Suggests a host
    // component is hitting the resume path. Figure out why. Possibly
    // related to `hidden`.

    var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext); // TODO: Type this specific to this type of component.

    workInProgress.updateQueue = updatePayload; // If the update payload indicates that there is a change or if there
    // is a new ref we mark this as an update. All the work is done in commitWork.

    if (updatePayload) {
      markUpdate(workInProgress);
    }
  };

  updateHostText$1 = function (current, workInProgress, oldText, newText) {
    // If the text differs, mark it as an update. All the work in done in commitWork.
    if (oldText !== newText) {
      markUpdate(workInProgress);
    }
  };
}

function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
  switch (renderState.tailMode) {
    case 'hidden':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var tailNode = renderState.tail;
        var lastTailNode = null;

        while (tailNode !== null) {
          if (tailNode.alternate !== null) {
            lastTailNode = tailNode;
          }

          tailNode = tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (lastTailNode === null) {
          // All remaining items in the tail are insertions.
          renderState.tail = null;
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          lastTailNode.sibling = null;
        }

        break;
      }

    case 'collapsed':
      {
        // Any insertions at the end of the tail list after this point
        // should be invisible. If there are already mounted boundaries
        // anything before them are not considered for collapsing.
        // Therefore we need to go through the whole tail to find if
        // there are any.
        var _tailNode = renderState.tail;
        var _lastTailNode = null;

        while (_tailNode !== null) {
          if (_tailNode.alternate !== null) {
            _lastTailNode = _tailNode;
          }

          _tailNode = _tailNode.sibling;
        } // Next we're simply going to delete all insertions after the
        // last rendered item.


        if (_lastTailNode === null) {
          // All remaining items in the tail are insertions.
          if (!hasRenderedATailFallback && renderState.tail !== null) {
            // We suspended during the head. We want to show at least one
            // row at the tail. So we'll keep on and cut off the rest.
            renderState.tail.sibling = null;
          } else {
            renderState.tail = null;
          }
        } else {
          // Detach the insertion after the last node that was already
          // inserted.
          _lastTailNode.sibling = null;
        }

        break;
      }
  }
}

function completeWork(current, workInProgress, renderExpirationTime) {
  var newProps = workInProgress.pendingProps;

  switch (workInProgress.tag) {
    case IndeterminateComponent:
    case LazyComponent:
    case SimpleMemoComponent:
    case FunctionComponent:
    case ForwardRef:
    case Fragment:
    case Mode:
    case Profiler:
    case ContextConsumer:
    case MemoComponent:
      return null;

    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var fiberRoot = workInProgress.stateNode;

        if (fiberRoot.pendingContext) {
          fiberRoot.context = fiberRoot.pendingContext;
          fiberRoot.pendingContext = null;
        }

        if (current === null || current.child === null) {
          // If we hydrated, pop so that we can delete any remaining children
          // that weren't hydrated.
          var wasHydrated = popHydrationState(workInProgress);

          if (wasHydrated) {
            // If we hydrated, then we'll need to schedule an update for
            // the commit side-effects on the root.
            markUpdate(workInProgress);
          }
        }

        updateHostContainer(workInProgress);
        return null;
      }

    case HostComponent:
      {
        popHostContext(workInProgress);
        var rootContainerInstance = getRootHostContainer();
        var type = workInProgress.type;

        if (current !== null && workInProgress.stateNode != null) {
          updateHostComponent$1(current, workInProgress, type, newProps, rootContainerInstance);

          if (current.ref !== workInProgress.ref) {
            markRef$1(workInProgress);
          }
        } else {
          if (!newProps) {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.


            return null;
          }

          var currentHostContext = getHostContext(); // TODO: Move createInstance to beginWork and keep it on a context
          // "stack" as the parent. Then append children as we go in beginWork
          // or completeWork depending on whether we want to add them top->down or
          // bottom->up. Top->down is faster in IE11.

          var _wasHydrated = popHydrationState(workInProgress);

          if (_wasHydrated) {
            // TODO: Move this and createInstance step into the beginPhase
            // to consolidate.
            if (prepareToHydrateHostInstance(workInProgress, rootContainerInstance, currentHostContext)) {
              // If changes to the hydrated node need to be applied at the
              // commit-phase we mark this as such.
              markUpdate(workInProgress);
            }
          } else {
            var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress);
            appendAllChildren(instance, workInProgress, false, false); // This needs to be set before we mount Flare event listeners

            workInProgress.stateNode = instance;
            // (eg DOM renderer supports auto-focus for certain elements).
            // Make sure such renderers get scheduled for later work.


            if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
              markUpdate(workInProgress);
            }
          }

          if (workInProgress.ref !== null) {
            // If there is a ref on a host node we need to schedule a callback
            markRef$1(workInProgress);
          }
        }

        return null;
      }

    case HostText:
      {
        var newText = newProps;

        if (current && workInProgress.stateNode != null) {
          var oldText = current.memoizedProps; // If we have an alternate, that means this is an update and we need
          // to schedule a side-effect to do the updates.

          updateHostText$1(current, workInProgress, oldText, newText);
        } else {
          if (typeof newText !== 'string') {
            if (!(workInProgress.stateNode !== null)) {
              {
                throw Error( "We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue." );
              }
            } // This can happen when we abort work.

          }

          var _rootContainerInstance = getRootHostContainer();

          var _currentHostContext = getHostContext();

          var _wasHydrated2 = popHydrationState(workInProgress);

          if (_wasHydrated2) {
            if (prepareToHydrateHostTextInstance(workInProgress)) {
              markUpdate(workInProgress);
            }
          } else {
            workInProgress.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress);
          }
        }

        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);
        var nextState = workInProgress.memoizedState;

        if ((workInProgress.effectTag & DidCapture) !== NoEffect) {
          // Something suspended. Re-render with the fallback children.
          workInProgress.expirationTime = renderExpirationTime; // Do not reset the effect list.

          return workInProgress;
        }

        var nextDidTimeout = nextState !== null;
        var prevDidTimeout = false;

        if (current === null) {
          if (workInProgress.memoizedProps.fallback !== undefined) {
            popHydrationState(workInProgress);
          }
        } else {
          var prevState = current.memoizedState;
          prevDidTimeout = prevState !== null;

          if (!nextDidTimeout && prevState !== null) {
            // We just switched from the fallback to the normal children.
            // Delete the fallback.
            // TODO: Would it be better to store the fallback fragment on
            // the stateNode during the begin phase?
            var currentFallbackChild = current.child.sibling;

            if (currentFallbackChild !== null) {
              // Deletions go at the beginning of the return fiber's effect list
              var first = workInProgress.firstEffect;

              if (first !== null) {
                workInProgress.firstEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = first;
              } else {
                workInProgress.firstEffect = workInProgress.lastEffect = currentFallbackChild;
                currentFallbackChild.nextEffect = null;
              }

              currentFallbackChild.effectTag = Deletion;
            }
          }
        }

        if (nextDidTimeout && !prevDidTimeout) {
          // If this subtreee is running in blocking mode we can suspend,
          // otherwise we won't suspend.
          // TODO: This will still suspend a synchronous tree if anything
          // in the concurrent tree already suspended during this render.
          // This is a known bug.
          if ((workInProgress.mode & BlockingMode) !== NoMode) {
            // TODO: Move this back to throwException because this is too late
            // if this is a large tree which is common for initial loads. We
            // don't know if we should restart a render or not until we get
            // this marker, and this is too late.
            // If this render already had a ping or lower pri updates,
            // and this is the first time we know we're going to suspend we
            // should be able to immediately restart from within throwException.
            var hasInvisibleChildContext = current === null && workInProgress.memoizedProps.unstable_avoidThisFallback !== true;

            if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
              // If this was in an invisible tree or a new render, then showing
              // this boundary is ok.
              renderDidSuspend();
            } else {
              // Otherwise, we're going to have to hide content so we should
              // suspend for longer if possible.
              renderDidSuspendDelayIfPossible();
            }
          }
        }

        {
          // TODO: Only schedule updates if these values are non equal, i.e. it changed.
          if (nextDidTimeout || prevDidTimeout) {
            // If this boundary just timed out, schedule an effect to attach a
            // retry listener to the promise. This flag is also used to hide the
            // primary children. In mutation mode, we also need the flag to
            // *unhide* children that were previously hidden, so check if this
            // is currently timed out, too.
            workInProgress.effectTag |= Update;
          }
        }

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      updateHostContainer(workInProgress);
      return null;

    case ContextProvider:
      // Pop provider fiber
      popProvider(workInProgress);
      return null;

    case IncompleteClassComponent:
      {
        // Same as class component case. I put it down here so that the tags are
        // sequential to ensure this switch is compiled to a jump table.
        var _Component = workInProgress.type;

        if (isContextProvider(_Component)) {
          popContext(workInProgress);
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress);
        var renderState = workInProgress.memoizedState;

        if (renderState === null) {
          // We're running in the default, "independent" mode.
          // We don't do anything in this mode.
          return null;
        }

        var didSuspendAlready = (workInProgress.effectTag & DidCapture) !== NoEffect;
        var renderedTail = renderState.rendering;

        if (renderedTail === null) {
          // We just rendered the head.
          if (!didSuspendAlready) {
            // This is the first pass. We need to figure out if anything is still
            // suspended in the rendered set.
            // If new content unsuspended, but there's still some content that
            // didn't. Then we need to do a second pass that forces everything
            // to keep showing their fallbacks.
            // We might be suspended if something in this render pass suspended, or
            // something in the previous committed pass suspended. Otherwise,
            // there's no chance so we can skip the expensive call to
            // findFirstSuspended.
            var cannotBeSuspended = renderHasNotSuspendedYet() && (current === null || (current.effectTag & DidCapture) === NoEffect);

            if (!cannotBeSuspended) {
              var row = workInProgress.child;

              while (row !== null) {
                var suspended = findFirstSuspended(row);

                if (suspended !== null) {
                  didSuspendAlready = true;
                  workInProgress.effectTag |= DidCapture;
                  cutOffTailIfNeeded(renderState, false); // If this is a newly suspended tree, it might not get committed as
                  // part of the second pass. In that case nothing will subscribe to
                  // its thennables. Instead, we'll transfer its thennables to the
                  // SuspenseList so that it can retry if they resolve.
                  // There might be multiple of these in the list but since we're
                  // going to wait for all of them anyway, it doesn't really matter
                  // which ones gets to ping. In theory we could get clever and keep
                  // track of how many dependencies remain but it gets tricky because
                  // in the meantime, we can add/remove/change items and dependencies.
                  // We might bail out of the loop before finding any but that
                  // doesn't matter since that means that the other boundaries that
                  // we did find already has their listeners attached.

                  var newThennables = suspended.updateQueue;

                  if (newThennables !== null) {
                    workInProgress.updateQueue = newThennables;
                    workInProgress.effectTag |= Update;
                  } // Rerender the whole list, but this time, we'll force fallbacks
                  // to stay in place.
                  // Reset the effect list before doing the second pass since that's now invalid.


                  if (renderState.lastEffect === null) {
                    workInProgress.firstEffect = null;
                  }

                  workInProgress.lastEffect = renderState.lastEffect; // Reset the child fibers to their original state.

                  resetChildFibers(workInProgress, renderExpirationTime); // Set up the Suspense Context to force suspense and immediately
                  // rerender the children.

                  pushSuspenseContext(workInProgress, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                  return workInProgress.child;
                }

                row = row.sibling;
              }
            }
          } else {
            cutOffTailIfNeeded(renderState, false);
          } // Next we're going to render the tail.

        } else {
          // Append the rendered row to the child list.
          if (!didSuspendAlready) {
            var _suspended = findFirstSuspended(renderedTail);

            if (_suspended !== null) {
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true; // Ensure we transfer the update queue to the parent so that it doesn't
              // get lost if this row ends up dropped during a second pass.

              var _newThennables = _suspended.updateQueue;

              if (_newThennables !== null) {
                workInProgress.updateQueue = _newThennables;
                workInProgress.effectTag |= Update;
              }

              cutOffTailIfNeeded(renderState, true); // This might have been modified.

              if (renderState.tail === null && renderState.tailMode === 'hidden' && !renderedTail.alternate) {
                // We need to delete the row we just rendered.
                // Reset the effect list to what it was before we rendered this
                // child. The nested children have already appended themselves.
                var lastEffect = workInProgress.lastEffect = renderState.lastEffect; // Remove any effects that were appended after this point.

                if (lastEffect !== null) {
                  lastEffect.nextEffect = null;
                } // We're done.


                return null;
              }
            } else if ( // The time it took to render last row is greater than time until
            // the expiration.
            now() * 2 - renderState.renderingStartTime > renderState.tailExpiration && renderExpirationTime > Never) {
              // We have now passed our CPU deadline and we'll just give up further
              // attempts to render the main content and only render fallbacks.
              // The assumption is that this is usually faster.
              workInProgress.effectTag |= DidCapture;
              didSuspendAlready = true;
              cutOffTailIfNeeded(renderState, false); // Since nothing actually suspended, there will nothing to ping this
              // to get it started back up to attempt the next item. If we can show
              // them, then they really have the same priority as this render.
              // So we'll pick it back up the very next render pass once we've had
              // an opportunity to yield for paint.

              var nextPriority = renderExpirationTime - 1;
              workInProgress.expirationTime = workInProgress.childExpirationTime = nextPriority;

              {
                markSpawnedWork(nextPriority);
              }
            }
          }

          if (renderState.isBackwards) {
            // The effect list of the backwards tail will have been added
            // to the end. This breaks the guarantee that life-cycles fire in
            // sibling order but that isn't a strong guarantee promised by React.
            // Especially since these might also just pop in during future commits.
            // Append to the beginning of the list.
            renderedTail.sibling = workInProgress.child;
            workInProgress.child = renderedTail;
          } else {
            var previousSibling = renderState.last;

            if (previousSibling !== null) {
              previousSibling.sibling = renderedTail;
            } else {
              workInProgress.child = renderedTail;
            }

            renderState.last = renderedTail;
          }
        }

        if (renderState.tail !== null) {
          // We still have tail rows to render.
          if (renderState.tailExpiration === 0) {
            // Heuristic for how long we're willing to spend rendering rows
            // until we just give up and show what we have so far.
            var TAIL_EXPIRATION_TIMEOUT_MS = 500;
            renderState.tailExpiration = now() + TAIL_EXPIRATION_TIMEOUT_MS; // TODO: This is meant to mimic the train model or JND but this
            // is a per component value. It should really be since the start
            // of the total render or last commit. Consider using something like
            // globalMostRecentFallbackTime. That doesn't account for being
            // suspended for part of the time or when it's a new render.
            // It should probably use a global start time value instead.
          } // Pop a row.


          var next = renderState.tail;
          renderState.rendering = next;
          renderState.tail = next.sibling;
          renderState.lastEffect = workInProgress.lastEffect;
          renderState.renderingStartTime = now();
          next.sibling = null; // Restore the context.
          // TODO: We can probably just avoid popping it instead and only
          // setting it the first time we go from not suspended to suspended.

          var suspenseContext = suspenseStackCursor.current;

          if (didSuspendAlready) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
          } else {
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }

          pushSuspenseContext(workInProgress, suspenseContext); // Do a pass over the next row.

          return next;
        }

        return null;
      }
  }

  {
    {
      throw Error( "Unknown unit of work tag (" + workInProgress.tag + "). This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function unwindWork(workInProgress, renderExpirationTime) {
  switch (workInProgress.tag) {
    case ClassComponent:
      {
        var Component = workInProgress.type;

        if (isContextProvider(Component)) {
          popContext(workInProgress);
        }

        var effectTag = workInProgress.effectTag;

        if (effectTag & ShouldCapture) {
          workInProgress.effectTag = effectTag & ~ShouldCapture | DidCapture;
          return workInProgress;
        }

        return null;
      }

    case HostRoot:
      {
        popHostContainer(workInProgress);
        popTopLevelContextObject(workInProgress);
        var _effectTag = workInProgress.effectTag;

        if (!((_effectTag & DidCapture) === NoEffect)) {
          {
            throw Error( "The root failed to unmount after an error. This is likely a bug in React. Please file an issue." );
          }
        }

        workInProgress.effectTag = _effectTag & ~ShouldCapture | DidCapture;
        return workInProgress;
      }

    case HostComponent:
      {
        // TODO: popHydrationState
        popHostContext(workInProgress);
        return null;
      }

    case SuspenseComponent:
      {
        popSuspenseContext(workInProgress);

        var _effectTag2 = workInProgress.effectTag;

        if (_effectTag2 & ShouldCapture) {
          workInProgress.effectTag = _effectTag2 & ~ShouldCapture | DidCapture; // Captured a suspense effect. Re-render the boundary.

          return workInProgress;
        }

        return null;
      }

    case SuspenseListComponent:
      {
        popSuspenseContext(workInProgress); // SuspenseList doesn't actually catch anything. It should've been
        // caught by a nested boundary. If not, it should bubble through.

        return null;
      }

    case HostPortal:
      popHostContainer(workInProgress);
      return null;

    case ContextProvider:
      popProvider(workInProgress);
      return null;

    default:
      return null;
  }
}

function unwindInterruptedWork(interruptedWork) {
  switch (interruptedWork.tag) {
    case ClassComponent:
      {
        var childContextTypes = interruptedWork.type.childContextTypes;

        if (childContextTypes !== null && childContextTypes !== undefined) {
          popContext(interruptedWork);
        }

        break;
      }

    case HostRoot:
      {
        popHostContainer(interruptedWork);
        popTopLevelContextObject(interruptedWork);
        break;
      }

    case HostComponent:
      {
        popHostContext(interruptedWork);
        break;
      }

    case HostPortal:
      popHostContainer(interruptedWork);
      break;

    case SuspenseComponent:
      popSuspenseContext(interruptedWork);
      break;

    case SuspenseListComponent:
      popSuspenseContext(interruptedWork);
      break;

    case ContextProvider:
      popProvider(interruptedWork);
      break;
  }
}

function createCapturedValue(value, source) {
  // If the value is an error, call this function immediately after it is thrown
  // so the stack is accurate.
  return {
    value: value,
    source: source,
    stack: getStackByFiberInDevAndProd(source)
  };
}

function logCapturedError(capturedError) {

  var error = capturedError.error;

  {
    var componentName = capturedError.componentName,
        componentStack = capturedError.componentStack,
        errorBoundaryName = capturedError.errorBoundaryName,
        errorBoundaryFound = capturedError.errorBoundaryFound,
        willRetry = capturedError.willRetry; // Browsers support silencing uncaught errors by calling
    // `preventDefault()` in window `error` handler.
    // We record this information as an expando on the error.

    if (error != null && error._suppressLogging) {
      if (errorBoundaryFound && willRetry) {
        // The error is recoverable and was silenced.
        // Ignore it and don't print the stack addendum.
        // This is handy for testing error boundaries without noise.
        return;
      } // The error is fatal. Since the silencing might have
      // been accidental, we'll surface it anyway.
      // However, the browser would have silenced the original error
      // so we'll print it first, and then print the stack addendum.


      console['error'](error); // Don't transform to our wrapper
      // For a more detailed description of this block, see:
      // https://github.com/facebook/react/pull/13384
    }

    var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : 'The above error occurred in one of your React components:';
    var errorBoundaryMessage; // errorBoundaryFound check is sufficient; errorBoundaryName check is to satisfy Flow.

    if (errorBoundaryFound && errorBoundaryName) {
      if (willRetry) {
        errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
      } else {
        errorBoundaryMessage = "This error was initially handled by the error boundary " + errorBoundaryName + ".\n" + "Recreating the tree from scratch failed so React will unmount the tree.";
      }
    } else {
      errorBoundaryMessage = 'Consider adding an error boundary to your tree to customize error handling behavior.\n' + 'Visit https://fb.me/react-error-boundaries to learn more about error boundaries.';
    }

    var combinedMessage = "" + componentNameMessage + componentStack + "\n\n" + ("" + errorBoundaryMessage); // In development, we provide our own message with just the component stack.
    // We don't include the original error message and JS stack because the browser
    // has already printed it. Even if the application swallows the error, it is still
    // displayed by the browser thanks to the DEV-only fake event trick in ReactErrorUtils.

    console['error'](combinedMessage); // Don't transform to our wrapper
  }
}

var didWarnAboutUndefinedSnapshotBeforeUpdate = null;

{
  didWarnAboutUndefinedSnapshotBeforeUpdate = new Set();
}

var PossiblyWeakSet = typeof WeakSet === 'function' ? WeakSet : Set;
function logError(boundary, errorInfo) {
  var source = errorInfo.source;
  var stack = errorInfo.stack;

  if (stack === null && source !== null) {
    stack = getStackByFiberInDevAndProd(source);
  }

  var capturedError = {
    componentName: source !== null ? getComponentName(source.type) : null,
    componentStack: stack !== null ? stack : '',
    error: errorInfo.value,
    errorBoundary: null,
    errorBoundaryName: null,
    errorBoundaryFound: false,
    willRetry: false
  };

  if (boundary !== null && boundary.tag === ClassComponent) {
    capturedError.errorBoundary = boundary.stateNode;
    capturedError.errorBoundaryName = getComponentName(boundary.type);
    capturedError.errorBoundaryFound = true;
    capturedError.willRetry = true;
  }

  try {
    logCapturedError(capturedError);
  } catch (e) {
    // This method must not throw, or React internal state will get messed up.
    // If console.error is overridden, or logCapturedError() shows a dialog that throws,
    // we want to report this error outside of the normal stack as a last resort.
    // https://github.com/facebook/react/issues/13188
    setTimeout(function () {
      throw e;
    });
  }
}

var callComponentWillUnmountWithTimer = function (current, instance) {
  startPhaseTimer(current, 'componentWillUnmount');
  instance.props = current.memoizedProps;
  instance.state = current.memoizedState;
  instance.componentWillUnmount();
  stopPhaseTimer();
}; // Capture errors so they don't interrupt unmounting.


function safelyCallComponentWillUnmount(current, instance) {
  {
    invokeGuardedCallback(null, callComponentWillUnmountWithTimer, null, current, instance);

    if (hasCaughtError()) {
      var unmountError = clearCaughtError();
      captureCommitPhaseError(current, unmountError);
    }
  }
}

function safelyDetachRef(current) {
  var ref = current.ref;

  if (ref !== null) {
    if (typeof ref === 'function') {
      {
        invokeGuardedCallback(null, ref, null, null);

        if (hasCaughtError()) {
          var refError = clearCaughtError();
          captureCommitPhaseError(current, refError);
        }
      }
    } else {
      ref.current = null;
    }
  }
}

function safelyCallDestroy(current, destroy) {
  {
    invokeGuardedCallback(null, destroy, null);

    if (hasCaughtError()) {
      var error = clearCaughtError();
      captureCommitPhaseError(current, error);
    }
  }
}

function commitBeforeMutationLifeCycles(current, finishedWork) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        return;
      }

    case ClassComponent:
      {
        if (finishedWork.effectTag & Snapshot) {
          if (current !== null) {
            var prevProps = current.memoizedProps;
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'getSnapshotBeforeUpdate');
            var instance = finishedWork.stateNode; // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'getSnapshotBeforeUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);

            {
              var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;

              if (snapshot === undefined && !didWarnSet.has(finishedWork.type)) {
                didWarnSet.add(finishedWork.type);

                error('%s.getSnapshotBeforeUpdate(): A snapshot value (or null) ' + 'must be returned. You have returned undefined.', getComponentName(finishedWork.type));
              }
            }

            instance.__reactInternalSnapshotBeforeUpdate = snapshot;
            stopPhaseTimer();
          }
        }

        return;
      }

    case HostRoot:
    case HostComponent:
    case HostText:
    case HostPortal:
    case IncompleteClassComponent:
      // Nothing to do for these component types
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitHookEffectListUnmount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Unmount
        var destroy = effect.destroy;
        effect.destroy = undefined;

        if (destroy !== undefined) {
          destroy();
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitHookEffectListMount(tag, finishedWork) {
  var updateQueue = finishedWork.updateQueue;
  var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;

  if (lastEffect !== null) {
    var firstEffect = lastEffect.next;
    var effect = firstEffect;

    do {
      if ((effect.tag & tag) === tag) {
        // Mount
        var create = effect.create;
        effect.destroy = create();

        {
          var destroy = effect.destroy;

          if (destroy !== undefined && typeof destroy !== 'function') {
            var addendum = void 0;

            if (destroy === null) {
              addendum = ' You returned null. If your effect does not require clean ' + 'up, return undefined (or nothing).';
            } else if (typeof destroy.then === 'function') {
              addendum = '\n\nIt looks like you wrote useEffect(async () => ...) or returned a Promise. ' + 'Instead, write the async function inside your effect ' + 'and call it immediately:\n\n' + 'useEffect(() => {\n' + '  async function fetchData() {\n' + '    // You can await here\n' + '    const response = await MyAPI.getData(someId);\n' + '    // ...\n' + '  }\n' + '  fetchData();\n' + "}, [someId]); // Or [] if effect doesn't need props or state\n\n" + 'Learn more about data fetching with Hooks: https://fb.me/react-hooks-data-fetching';
            } else {
              addendum = ' You returned: ' + destroy;
            }

            error('An effect function must not return anything besides a function, ' + 'which is used for clean-up.%s%s', addendum, getStackByFiberInDevAndProd(finishedWork));
          }
        }
      }

      effect = effect.next;
    } while (effect !== firstEffect);
  }
}

function commitPassiveHookEffects(finishedWork) {
  if ((finishedWork.effectTag & Passive) !== NoEffect) {
    switch (finishedWork.tag) {
      case FunctionComponent:
      case ForwardRef:
      case SimpleMemoComponent:
      case Block:
        {
          // TODO (#17945) We should call all passive destroy functions (for all fibers)
          // before calling any create functions. The current approach only serializes
          // these for a single fiber.
          commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork);
          commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
          break;
        }
    }
  }
}

function commitLifeCycles(finishedRoot, current, finishedWork, committedExpirationTime) {
  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case SimpleMemoComponent:
    case Block:
      {
        // At this point layout effects have already been destroyed (during mutation phase).
        // This is done to prevent sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListMount(Layout | HasEffect, finishedWork);

        return;
      }

    case ClassComponent:
      {
        var instance = finishedWork.stateNode;

        if (finishedWork.effectTag & Update) {
          if (current === null) {
            startPhaseTimer(finishedWork, 'componentDidMount'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidMount. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidMount();
            stopPhaseTimer();
          } else {
            var prevProps = finishedWork.elementType === finishedWork.type ? current.memoizedProps : resolveDefaultProps(finishedWork.type, current.memoizedProps);
            var prevState = current.memoizedState;
            startPhaseTimer(finishedWork, 'componentDidUpdate'); // We could update instance props and state here,
            // but instead we rely on them being set during last render.
            // TODO: revisit this when we implement resuming.

            {
              if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                if (instance.props !== finishedWork.memoizedProps) {
                  error('Expected %s props to match memoized props before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }

                if (instance.state !== finishedWork.memoizedState) {
                  error('Expected %s state to match memoized state before ' + 'componentDidUpdate. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
                }
              }
            }

            instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
            stopPhaseTimer();
          }
        }

        var updateQueue = finishedWork.updateQueue;

        if (updateQueue !== null) {
          {
            if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
              if (instance.props !== finishedWork.memoizedProps) {
                error('Expected %s props to match memoized props before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }

              if (instance.state !== finishedWork.memoizedState) {
                error('Expected %s state to match memoized state before ' + 'processing the update queue. ' + 'This might either be because of a bug in React, or because ' + 'a component reassigns its own `this.props`. ' + 'Please file an issue.', getComponentName(finishedWork.type) || 'instance');
              }
            }
          } // We could update instance props and state here,
          // but instead we rely on them being set during last render.
          // TODO: revisit this when we implement resuming.


          commitUpdateQueue(finishedWork, updateQueue, instance);
        }

        return;
      }

    case HostRoot:
      {
        var _updateQueue = finishedWork.updateQueue;

        if (_updateQueue !== null) {
          var _instance = null;

          if (finishedWork.child !== null) {
            switch (finishedWork.child.tag) {
              case HostComponent:
                _instance = getPublicInstance(finishedWork.child.stateNode);
                break;

              case ClassComponent:
                _instance = finishedWork.child.stateNode;
                break;
            }
          }

          commitUpdateQueue(finishedWork, _updateQueue, _instance);
        }

        return;
      }

    case HostComponent:
      {
        var _instance2 = finishedWork.stateNode; // Renderers may schedule work to be done after host components are mounted
        // (eg DOM renderer may schedule auto-focus for inputs and form controls).
        // These effects should only be committed when components are first mounted,
        // aka when there is no current/alternate.

        if (current === null && finishedWork.effectTag & Update) {
          var type = finishedWork.type;
          var props = finishedWork.memoizedProps;
          commitMount(_instance2, type, props);
        }

        return;
      }

    case HostText:
      {
        // We have no life-cycles associated with text.
        return;
      }

    case HostPortal:
      {
        // We have no life-cycles associated with portals.
        return;
      }

    case Profiler:
      {
        {
          var onRender = finishedWork.memoizedProps.onRender;

          if (typeof onRender === 'function') {
            {
              onRender(finishedWork.memoizedProps.id, current === null ? 'mount' : 'update', finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, getCommitTime(), finishedRoot.memoizedInteractions);
            }
          }
        }

        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
        return;
      }

    case SuspenseListComponent:
    case IncompleteClassComponent:
    case FundamentalComponent:
    case ScopeComponent:
      return;
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function hideOrUnhideAllChildren(finishedWork, isHidden) {
  {
    // We only have the top Fiber that was inserted but we need to recurse down its
    // children to find all the terminal nodes.
    var node = finishedWork;

    while (true) {
      if (node.tag === HostComponent) {
        var instance = node.stateNode;

        if (isHidden) {
          hideInstance(instance);
        } else {
          unhideInstance(node.stateNode, node.memoizedProps);
        }
      } else if (node.tag === HostText) {
        var _instance3 = node.stateNode;

        if (isHidden) {
          hideTextInstance(_instance3);
        } else {
          unhideTextInstance(_instance3, node.memoizedProps);
        }
      } else if (node.tag === SuspenseComponent && node.memoizedState !== null && node.memoizedState.dehydrated === null) {
        // Found a nested Suspense component that timed out. Skip over the
        // primary child fragment, which should remain hidden.
        var fallbackChildFragment = node.child.sibling;
        fallbackChildFragment.return = node;
        node = fallbackChildFragment;
        continue;
      } else if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }

      if (node === finishedWork) {
        return;
      }

      while (node.sibling === null) {
        if (node.return === null || node.return === finishedWork) {
          return;
        }

        node = node.return;
      }

      node.sibling.return = node.return;
      node = node.sibling;
    }
  }
}

function commitAttachRef(finishedWork) {
  var ref = finishedWork.ref;

  if (ref !== null) {
    var instance = finishedWork.stateNode;
    var instanceToUse;

    switch (finishedWork.tag) {
      case HostComponent:
        instanceToUse = getPublicInstance(instance);
        break;

      default:
        instanceToUse = instance;
    } // Moved outside to ensure DCE works with this flag

    if (typeof ref === 'function') {
      ref(instanceToUse);
    } else {
      {
        if (!ref.hasOwnProperty('current')) {
          error('Unexpected ref object provided for %s. ' + 'Use either a ref-setter function or React.createRef().%s', getComponentName(finishedWork.type), getStackByFiberInDevAndProd(finishedWork));
        }
      }

      ref.current = instanceToUse;
    }
  }
}

function commitDetachRef(current) {
  var currentRef = current.ref;

  if (currentRef !== null) {
    if (typeof currentRef === 'function') {
      currentRef(null);
    } else {
      currentRef.current = null;
    }
  }
} // User-originating errors (lifecycles and refs) should not interrupt
// deletion, so don't let them throw. Host-originating errors should
// interrupt deletion, so it's okay


function commitUnmount(finishedRoot, current, renderPriorityLevel) {
  onCommitUnmount(current);

  switch (current.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        var updateQueue = current.updateQueue;

        if (updateQueue !== null) {
          var lastEffect = updateQueue.lastEffect;

          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;

            {
              // When the owner fiber is deleted, the destroy function of a passive
              // effect hook is called during the synchronous commit phase. This is
              // a concession to implementation complexity. Calling it in the
              // passive effect phase (like they usually are, when dependencies
              // change during an update) would require either traversing the
              // children of the deleted fiber again, or including unmount effects
              // as part of the fiber effect list.
              //
              // Because this is during the sync commit phase, we need to change
              // the priority.
              //
              // TODO: Reconsider this implementation trade off.
              var priorityLevel = renderPriorityLevel > NormalPriority ? NormalPriority : renderPriorityLevel;
              runWithPriority$1(priorityLevel, function () {
                var effect = firstEffect;

                do {
                  var _destroy = effect.destroy;

                  if (_destroy !== undefined) {
                    safelyCallDestroy(current, _destroy);
                  }

                  effect = effect.next;
                } while (effect !== firstEffect);
              });
            }
          }
        }

        return;
      }

    case ClassComponent:
      {
        safelyDetachRef(current);
        var instance = current.stateNode;

        if (typeof instance.componentWillUnmount === 'function') {
          safelyCallComponentWillUnmount(current, instance);
        }

        return;
      }

    case HostComponent:
      {

        safelyDetachRef(current);
        return;
      }

    case HostPortal:
      {
        // TODO: this is recursive.
        // We are also not using this parent because
        // the portal will get pushed immediately.
        {
          unmountHostComponents(finishedRoot, current, renderPriorityLevel);
        }

        return;
      }

    case FundamentalComponent:
      {

        return;
      }

    case DehydratedFragment:
      {

        return;
      }

    case ScopeComponent:
      {

        return;
      }
  }
}

function commitNestedUnmounts(finishedRoot, root, renderPriorityLevel) {
  // While we're inside a removed host node we don't want to call
  // removeChild on the inner nodes because they're removed by the top
  // call anyway. We also want to call componentWillUnmount on all
  // composites before this host node is removed from the tree. Therefore
  // we do an inner loop while we're still inside the host node.
  var node = root;

  while (true) {
    commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because they may contain more composite or host nodes.
    // Skip portals because commitUnmount() currently visits them recursively.

    if (node.child !== null && ( // If we use mutation we drill down into portals using commitUnmount above.
    // If we don't use mutation we drill down into portals here instead.
     node.tag !== HostPortal)) {
      node.child.return = node;
      node = node.child;
      continue;
    }

    if (node === root) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === root) {
        return;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function detachFiber(current) {
  var alternate = current.alternate; // Cut off the return pointers to disconnect it from the tree. Ideally, we
  // should clear the child pointer of the parent alternate to let this
  // get GC:ed but we don't know which for sure which parent is the current
  // one so we'll settle for GC:ing the subtree of this child. This child
  // itself will be GC:ed when the parent updates the next time.

  current.return = null;
  current.child = null;
  current.memoizedState = null;
  current.updateQueue = null;
  current.dependencies = null;
  current.alternate = null;
  current.firstEffect = null;
  current.lastEffect = null;
  current.pendingProps = null;
  current.memoizedProps = null;
  current.stateNode = null;

  if (alternate !== null) {
    detachFiber(alternate);
  }
}

function getHostParentFiber(fiber) {
  var parent = fiber.return;

  while (parent !== null) {
    if (isHostParent(parent)) {
      return parent;
    }

    parent = parent.return;
  }

  {
    {
      throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function isHostParent(fiber) {
  return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
}

function getHostSibling(fiber) {
  // We're going to search forward into the tree until we find a sibling host
  // node. Unfortunately, if multiple insertions are done in a row we have to
  // search past them. This leads to exponential search for the next sibling.
  // TODO: Find a more efficient way to do this.
  var node = fiber;

  siblings: while (true) {
    // If we didn't find anything, let's try the next sibling.
    while (node.sibling === null) {
      if (node.return === null || isHostParent(node.return)) {
        // If we pop out of the root or hit the parent the fiber we are the
        // last sibling.
        return null;
      }

      node = node.return;
    }

    node.sibling.return = node.return;
    node = node.sibling;

    while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
      // If it is not host node and, we might have a host node inside it.
      // Try to search down until we find one.
      if (node.effectTag & Placement) {
        // If we don't have a child, try the siblings instead.
        continue siblings;
      } // If we don't have a child, try the siblings instead.
      // We also skip portals because they are not part of this host tree.


      if (node.child === null || node.tag === HostPortal) {
        continue siblings;
      } else {
        node.child.return = node;
        node = node.child;
      }
    } // Check if this host node is stable or about to be placed.


    if (!(node.effectTag & Placement)) {
      // Found it!
      return node.stateNode;
    }
  }
}

function commitPlacement(finishedWork) {


  var parentFiber = getHostParentFiber(finishedWork); // Note: these two variables *must* always be updated together.

  var parent;
  var isContainer;
  var parentStateNode = parentFiber.stateNode;

  switch (parentFiber.tag) {
    case HostComponent:
      parent = parentStateNode;
      isContainer = false;
      break;

    case HostRoot:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case HostPortal:
      parent = parentStateNode.containerInfo;
      isContainer = true;
      break;

    case FundamentalComponent:

    // eslint-disable-next-line-no-fallthrough

    default:
      {
        {
          throw Error( "Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue." );
        }
      }

  }

  if (parentFiber.effectTag & ContentReset) {
    // Reset the text content of the parent before doing any insertions
    resetTextContent(parent); // Clear ContentReset from the effect tag

    parentFiber.effectTag &= ~ContentReset;
  }

  var before = getHostSibling(finishedWork); // We only have the top Fiber that was inserted but we need to recurse down its
  // children to find all the terminal nodes.

  if (isContainer) {
    insertOrAppendPlacementNodeIntoContainer(finishedWork, before, parent);
  } else {
    insertOrAppendPlacementNode(finishedWork, before, parent);
  }
}

function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertInContainerBefore(parent, stateNode, before);
    } else {
      appendChildToContainer(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNodeIntoContainer(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function insertOrAppendPlacementNode(node, before, parent) {
  var tag = node.tag;
  var isHost = tag === HostComponent || tag === HostText;

  if (isHost || enableFundamentalAPI ) {
    var stateNode = isHost ? node.stateNode : node.stateNode.instance;

    if (before) {
      insertBefore(parent, stateNode, before);
    } else {
      appendChild(parent, stateNode);
    }
  } else if (tag === HostPortal) ; else {
    var child = node.child;

    if (child !== null) {
      insertOrAppendPlacementNode(child, before, parent);
      var sibling = child.sibling;

      while (sibling !== null) {
        insertOrAppendPlacementNode(sibling, before, parent);
        sibling = sibling.sibling;
      }
    }
  }
}

function unmountHostComponents(finishedRoot, current, renderPriorityLevel) {
  // We only have the top Fiber that was deleted but we need to recurse down its
  // children to find all the terminal nodes.
  var node = current; // Each iteration, currentParent is populated with node's host parent if not
  // currentParentIsValid.

  var currentParentIsValid = false; // Note: these two variables *must* always be updated together.

  var currentParent;
  var currentParentIsContainer;

  while (true) {
    if (!currentParentIsValid) {
      var parent = node.return;

      findParent: while (true) {
        if (!(parent !== null)) {
          {
            throw Error( "Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var parentStateNode = parent.stateNode;

        switch (parent.tag) {
          case HostComponent:
            currentParent = parentStateNode;
            currentParentIsContainer = false;
            break findParent;

          case HostRoot:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

          case HostPortal:
            currentParent = parentStateNode.containerInfo;
            currentParentIsContainer = true;
            break findParent;

        }

        parent = parent.return;
      }

      currentParentIsValid = true;
    }

    if (node.tag === HostComponent || node.tag === HostText) {
      commitNestedUnmounts(finishedRoot, node, renderPriorityLevel); // After all the children have unmounted, it is now safe to remove the
      // node from the tree.

      if (currentParentIsContainer) {
        removeChildFromContainer(currentParent, node.stateNode);
      } else {
        removeChild(currentParent, node.stateNode);
      } // Don't visit children because we already visited them.

    } else if (node.tag === HostPortal) {
      if (node.child !== null) {
        // When we go into a portal, it becomes the parent to remove from.
        // We will reassign it back when we pop the portal on the way up.
        currentParent = node.stateNode.containerInfo;
        currentParentIsContainer = true; // Visit children because portals might contain host components.

        node.child.return = node;
        node = node.child;
        continue;
      }
    } else {
      commitUnmount(finishedRoot, node, renderPriorityLevel); // Visit children because we may find more host components below.

      if (node.child !== null) {
        node.child.return = node;
        node = node.child;
        continue;
      }
    }

    if (node === current) {
      return;
    }

    while (node.sibling === null) {
      if (node.return === null || node.return === current) {
        return;
      }

      node = node.return;

      if (node.tag === HostPortal) {
        // When we go out of the portal, we need to restore the parent.
        // Since we don't keep a stack of them, we will search for it.
        currentParentIsValid = false;
      }
    }

    node.sibling.return = node.return;
    node = node.sibling;
  }
}

function commitDeletion(finishedRoot, current, renderPriorityLevel) {
  {
    // Recursively delete all host nodes from the parent.
    // Detach refs and call componentWillUnmount() on the whole subtree.
    unmountHostComponents(finishedRoot, current, renderPriorityLevel);
  }

  detachFiber(current);
}

function commitWork(current, finishedWork) {

  switch (finishedWork.tag) {
    case FunctionComponent:
    case ForwardRef:
    case MemoComponent:
    case SimpleMemoComponent:
    case Block:
      {
        // Layout effects are destroyed during the mutation phase so that all
        // destroy functions for all fibers are called before any create functions.
        // This prevents sibling component effects from interfering with each other,
        // e.g. a destroy function in one component should never override a ref set
        // by a create function in another component during the same commit.
        commitHookEffectListUnmount(Layout | HasEffect, finishedWork);
        return;
      }

    case ClassComponent:
      {
        return;
      }

    case HostComponent:
      {
        var instance = finishedWork.stateNode;

        if (instance != null) {
          // Commit the work prepared earlier.
          var newProps = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
          // as the newProps. The updatePayload will contain the real change in
          // this case.

          var oldProps = current !== null ? current.memoizedProps : newProps;
          var type = finishedWork.type; // TODO: Type the updateQueue to be specific to host components.

          var updatePayload = finishedWork.updateQueue;
          finishedWork.updateQueue = null;

          if (updatePayload !== null) {
            commitUpdate(instance, updatePayload, type, oldProps, newProps);
          }
        }

        return;
      }

    case HostText:
      {
        if (!(finishedWork.stateNode !== null)) {
          {
            throw Error( "This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue." );
          }
        }

        var textInstance = finishedWork.stateNode;
        var newText = finishedWork.memoizedProps; // For hydration we reuse the update path but we treat the oldProps
        // as the newProps. The updatePayload will contain the real change in
        // this case.

        var oldText = current !== null ? current.memoizedProps : newText;
        commitTextUpdate(textInstance, oldText, newText);
        return;
      }

    case HostRoot:
      {
        {
          var _root = finishedWork.stateNode;

          if (_root.hydrate) {
            // We've just hydrated. No need to hydrate again.
            _root.hydrate = false;
            commitHydratedContainer(_root.containerInfo);
          }
        }

        return;
      }

    case Profiler:
      {
        return;
      }

    case SuspenseComponent:
      {
        commitSuspenseComponent(finishedWork);
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case SuspenseListComponent:
      {
        attachSuspenseRetryListeners(finishedWork);
        return;
      }

    case IncompleteClassComponent:
      {
        return;
      }
  }

  {
    {
      throw Error( "This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue." );
    }
  }
}

function commitSuspenseComponent(finishedWork) {
  var newState = finishedWork.memoizedState;
  var newDidTimeout;
  var primaryChildParent = finishedWork;

  if (newState === null) {
    newDidTimeout = false;
  } else {
    newDidTimeout = true;
    primaryChildParent = finishedWork.child;
    markCommitTimeOfFallback();
  }

  if ( primaryChildParent !== null) {
    hideOrUnhideAllChildren(primaryChildParent, newDidTimeout);
  }
}

function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {

  var newState = finishedWork.memoizedState;

  if (newState === null) {
    var current = finishedWork.alternate;

    if (current !== null) {
      var prevState = current.memoizedState;

      if (prevState !== null) {
        var suspenseInstance = prevState.dehydrated;

        if (suspenseInstance !== null) {
          commitHydratedSuspenseInstance(suspenseInstance);
        }
      }
    }
  }
}

function attachSuspenseRetryListeners(finishedWork) {
  // If this boundary just timed out, then it will have a set of thenables.
  // For each thenable, attach a listener so that when it resolves, React
  // attempts to re-render the boundary in the primary (pre-timeout) state.
  var thenables = finishedWork.updateQueue;

  if (thenables !== null) {
    finishedWork.updateQueue = null;
    var retryCache = finishedWork.stateNode;

    if (retryCache === null) {
      retryCache = finishedWork.stateNode = new PossiblyWeakSet();
    }

    thenables.forEach(function (thenable) {
      // Memoize using the boundary fiber to prevent redundant listeners.
      var retry = resolveRetryThenable.bind(null, finishedWork, thenable);

      if (!retryCache.has(thenable)) {
        {
          if (thenable.__reactDoNotTraceInteractions !== true) {
            retry = tracing.unstable_wrap(retry);
          }
        }

        retryCache.add(thenable);
        thenable.then(retry, retry);
      }
    });
  }
}

function commitResetTextContent(current) {

  resetTextContent(current.stateNode);
}

var PossiblyWeakMap$1 = typeof WeakMap === 'function' ? WeakMap : Map;

function createRootErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null); // Unmount the root by rendering null.

  update.tag = CaptureUpdate; // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: null
  };
  var error = errorInfo.value;

  update.callback = function () {
    onUncaughtError(error);
    logError(fiber, errorInfo);
  };

  return update;
}

function createClassErrorUpdate(fiber, errorInfo, expirationTime) {
  var update = createUpdate(expirationTime, null);
  update.tag = CaptureUpdate;
  var getDerivedStateFromError = fiber.type.getDerivedStateFromError;

  if (typeof getDerivedStateFromError === 'function') {
    var error$1 = errorInfo.value;

    update.payload = function () {
      logError(fiber, errorInfo);
      return getDerivedStateFromError(error$1);
    };
  }

  var inst = fiber.stateNode;

  if (inst !== null && typeof inst.componentDidCatch === 'function') {
    update.callback = function callback() {
      {
        markFailedErrorBoundaryForHotReloading(fiber);
      }

      if (typeof getDerivedStateFromError !== 'function') {
        // To preserve the preexisting retry behavior of error boundaries,
        // we keep track of which ones already failed during this batch.
        // This gets reset before we yield back to the browser.
        // TODO: Warn in strict mode if getDerivedStateFromError is
        // not defined.
        markLegacyErrorBoundaryAsFailed(this); // Only log here if componentDidCatch is the only error boundary method defined

        logError(fiber, errorInfo);
      }

      var error$1 = errorInfo.value;
      var stack = errorInfo.stack;
      this.componentDidCatch(error$1, {
        componentStack: stack !== null ? stack : ''
      });

      {
        if (typeof getDerivedStateFromError !== 'function') {
          // If componentDidCatch is the only error boundary method defined,
          // then it needs to call setState to recover from errors.
          // If no state update is scheduled then the boundary will swallow the error.
          if (fiber.expirationTime !== Sync) {
            error('%s: Error boundaries should implement getDerivedStateFromError(). ' + 'In that method, return a state update to display an error message or fallback UI.', getComponentName(fiber.type) || 'Unknown');
          }
        }
      }
    };
  } else {
    update.callback = function () {
      markFailedErrorBoundaryForHotReloading(fiber);
    };
  }

  return update;
}

function attachPingListener(root, renderExpirationTime, thenable) {
  // Attach a listener to the promise to "ping" the root and retry. But
  // only if one does not already exist for the current render expiration
  // time (which acts like a "thread ID" here).
  var pingCache = root.pingCache;
  var threadIDs;

  if (pingCache === null) {
    pingCache = root.pingCache = new PossiblyWeakMap$1();
    threadIDs = new Set();
    pingCache.set(thenable, threadIDs);
  } else {
    threadIDs = pingCache.get(thenable);

    if (threadIDs === undefined) {
      threadIDs = new Set();
      pingCache.set(thenable, threadIDs);
    }
  }

  if (!threadIDs.has(renderExpirationTime)) {
    // Memoize using the thread ID to prevent redundant listeners.
    threadIDs.add(renderExpirationTime);
    var ping = pingSuspendedRoot.bind(null, root, thenable, renderExpirationTime);
    thenable.then(ping, ping);
  }
}

function throwException(root, returnFiber, sourceFiber, value, renderExpirationTime) {
  // The source fiber did not complete.
  sourceFiber.effectTag |= Incomplete; // Its effect list is no longer valid.

  sourceFiber.firstEffect = sourceFiber.lastEffect = null;

  if (value !== null && typeof value === 'object' && typeof value.then === 'function') {
    // This is a thenable.
    var thenable = value;

    if ((sourceFiber.mode & BlockingMode) === NoMode) {
      // Reset the memoizedState to what it was before we attempted
      // to render it.
      var currentSource = sourceFiber.alternate;

      if (currentSource) {
        sourceFiber.updateQueue = currentSource.updateQueue;
        sourceFiber.memoizedState = currentSource.memoizedState;
        sourceFiber.expirationTime = currentSource.expirationTime;
      } else {
        sourceFiber.updateQueue = null;
        sourceFiber.memoizedState = null;
      }
    }

    var hasInvisibleParentBoundary = hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext); // Schedule the nearest Suspense to re-render the timed out view.

    var _workInProgress = returnFiber;

    do {
      if (_workInProgress.tag === SuspenseComponent && shouldCaptureSuspense(_workInProgress, hasInvisibleParentBoundary)) {
        // Found the nearest boundary.
        // Stash the promise on the boundary fiber. If the boundary times out, we'll
        // attach another listener to flip the boundary back to its normal state.
        var thenables = _workInProgress.updateQueue;

        if (thenables === null) {
          var updateQueue = new Set();
          updateQueue.add(thenable);
          _workInProgress.updateQueue = updateQueue;
        } else {
          thenables.add(thenable);
        } // If the boundary is outside of blocking mode, we should *not*
        // suspend the commit. Pretend as if the suspended component rendered
        // null and keep rendering. In the commit phase, we'll schedule a
        // subsequent synchronous update to re-render the Suspense.
        //
        // Note: It doesn't matter whether the component that suspended was
        // inside a blocking mode tree. If the Suspense is outside of it, we
        // should *not* suspend the commit.


        if ((_workInProgress.mode & BlockingMode) === NoMode) {
          _workInProgress.effectTag |= DidCapture; // We're going to commit this fiber even though it didn't complete.
          // But we shouldn't call any lifecycle methods or callbacks. Remove
          // all lifecycle effect tags.

          sourceFiber.effectTag &= ~(LifecycleEffectMask | Incomplete);

          if (sourceFiber.tag === ClassComponent) {
            var currentSourceFiber = sourceFiber.alternate;

            if (currentSourceFiber === null) {
              // This is a new mount. Change the tag so it's not mistaken for a
              // completed class component. For example, we should not call
              // componentWillUnmount if it is deleted.
              sourceFiber.tag = IncompleteClassComponent;
            } else {
              // When we try rendering again, we should not reuse the current fiber,
              // since it's known to be in an inconsistent state. Use a force update to
              // prevent a bail out.
              var update = createUpdate(Sync, null);
              update.tag = ForceUpdate;
              enqueueUpdate(sourceFiber, update);
            }
          } // The source fiber did not complete. Mark it with Sync priority to
          // indicate that it still has pending work.


          sourceFiber.expirationTime = Sync; // Exit without suspending.

          return;
        } // Confirmed that the boundary is in a concurrent mode tree. Continue
        // with the normal suspend path.
        //
        // After this we'll use a set of heuristics to determine whether this
        // render pass will run to completion or restart or "suspend" the commit.
        // The actual logic for this is spread out in different places.
        //
        // This first principle is that if we're going to suspend when we complete
        // a root, then we should also restart if we get an update or ping that
        // might unsuspend it, and vice versa. The only reason to suspend is
        // because you think you might want to restart before committing. However,
        // it doesn't make sense to restart only while in the period we're suspended.
        //
        // Restarting too aggressively is also not good because it starves out any
        // intermediate loading state. So we use heuristics to determine when.
        // Suspense Heuristics
        //
        // If nothing threw a Promise or all the same fallbacks are already showing,
        // then don't suspend/restart.
        //
        // If this is an initial render of a new tree of Suspense boundaries and
        // those trigger a fallback, then don't suspend/restart. We want to ensure
        // that we can show the initial loading state as quickly as possible.
        //
        // If we hit a "Delayed" case, such as when we'd switch from content back into
        // a fallback, then we should always suspend/restart. SuspenseConfig applies to
        // this case. If none is defined, JND is used instead.
        //
        // If we're already showing a fallback and it gets "retried", allowing us to show
        // another level, but there's still an inner boundary that would show a fallback,
        // then we suspend/restart for 500ms since the last time we showed a fallback
        // anywhere in the tree. This effectively throttles progressive loading into a
        // consistent train of commits. This also gives us an opportunity to restart to
        // get to the completed state slightly earlier.
        //
        // If there's ambiguity due to batching it's resolved in preference of:
        // 1) "delayed", 2) "initial render", 3) "retry".
        //
        // We want to ensure that a "busy" state doesn't get force committed. We want to
        // ensure that new initial loading states can commit as soon as possible.


        attachPingListener(root, renderExpirationTime, thenable);
        _workInProgress.effectTag |= ShouldCapture;
        _workInProgress.expirationTime = renderExpirationTime;
        return;
      } // This boundary already captured during this render. Continue to the next
      // boundary.


      _workInProgress = _workInProgress.return;
    } while (_workInProgress !== null); // No boundary was found. Fallthrough to error mode.
    // TODO: Use invariant so the message is stripped in prod?


    value = new Error((getComponentName(sourceFiber.type) || 'A React component') + ' suspended while rendering, but no fallback UI was specified.\n' + '\n' + 'Add a <Suspense fallback=...> component higher in the tree to ' + 'provide a loading indicator or placeholder to display.' + getStackByFiberInDevAndProd(sourceFiber));
  } // We didn't find a boundary that could handle this type of exception. Start
  // over and traverse parent path again, this time treating the exception
  // as an error.


  renderDidError();
  value = createCapturedValue(value, sourceFiber);
  var workInProgress = returnFiber;

  do {
    switch (workInProgress.tag) {
      case HostRoot:
        {
          var _errorInfo = value;
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime;

          var _update = createRootErrorUpdate(workInProgress, _errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update);
          return;
        }

      case ClassComponent:
        // Capture and retry
        var errorInfo = value;
        var ctor = workInProgress.type;
        var instance = workInProgress.stateNode;

        if ((workInProgress.effectTag & DidCapture) === NoEffect && (typeof ctor.getDerivedStateFromError === 'function' || instance !== null && typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance))) {
          workInProgress.effectTag |= ShouldCapture;
          workInProgress.expirationTime = renderExpirationTime; // Schedule the error boundary to re-render using updated state

          var _update2 = createClassErrorUpdate(workInProgress, errorInfo, renderExpirationTime);

          enqueueCapturedUpdate(workInProgress, _update2);
          return;
        }

        break;
    }

    workInProgress = workInProgress.return;
  } while (workInProgress !== null);
}

var ceil = Math.ceil;
var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher,
    ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner,
    IsSomeRendererActing = ReactSharedInternals.IsSomeRendererActing;
var NoContext =
/*                    */
0;
var BatchedContext =
/*               */
1;
var EventContext =
/*                 */
2;
var DiscreteEventContext =
/*         */
4;
var LegacyUnbatchedContext =
/*       */
8;
var RenderContext =
/*                */
16;
var CommitContext =
/*                */
32;
var RootIncomplete = 0;
var RootFatalErrored = 1;
var RootErrored = 2;
var RootSuspended = 3;
var RootSuspendedWithDelay = 4;
var RootCompleted = 5;
// Describes where we are in the React execution stack
var executionContext = NoContext; // The root we're working on

var workInProgressRoot = null; // The fiber we're working on

var workInProgress = null; // The expiration time we're rendering

var renderExpirationTime$1 = NoWork; // Whether to root completed, errored, suspended, etc.

var workInProgressRootExitStatus = RootIncomplete; // A fatal error, if one is thrown

var workInProgressRootFatalError = null; // Most recent event time among processed updates during this render.
// This is conceptually a time stamp but expressed in terms of an ExpirationTime
// because we deal mostly with expiration times in the hot path, so this avoids
// the conversion happening in the hot path.

var workInProgressRootLatestProcessedExpirationTime = Sync;
var workInProgressRootLatestSuspenseTimeout = Sync;
var workInProgressRootCanSuspendUsingConfig = null; // The work left over by components that were visited during this render. Only
// includes unprocessed updates, not work in bailed out children.

var workInProgressRootNextUnprocessedUpdateTime = NoWork; // If we're pinged while rendering we don't always restart immediately.
// This flag determines if it might be worthwhile to restart if an opportunity
// happens latere.

var workInProgressRootHasPendingPing = false; // The most recent time we committed a fallback. This lets us ensure a train
// model where we don't commit new loading states in too quick succession.

var globalMostRecentFallbackTime = 0;
var FALLBACK_THROTTLE_MS = 500;
var nextEffect = null;
var hasUncaughtError = false;
var firstUncaughtError = null;
var legacyErrorBoundariesThatAlreadyFailed = null;
var rootDoesHavePassiveEffects = false;
var rootWithPendingPassiveEffects = null;
var pendingPassiveEffectsRenderPriority = NoPriority;
var pendingPassiveEffectsExpirationTime = NoWork;
var rootsWithPendingDiscreteUpdates = null; // Use these to prevent an infinite loop of nested updates

var NESTED_UPDATE_LIMIT = 50;
var nestedUpdateCount = 0;
var rootWithNestedUpdates = null;
var NESTED_PASSIVE_UPDATE_LIMIT = 50;
var nestedPassiveUpdateCount = 0;
var interruptedBy = null; // Marks the need to reschedule pending interactions at these expiration times
// during the commit phase. This enables them to be traced across components
// that spawn new work during render. E.g. hidden boundaries, suspended SSR
// hydration or SuspenseList.

var spawnedWorkDuringRender = null; // Expiration times are computed by adding to the current time (the start
// time). However, if two updates are scheduled within the same event, we
// should treat their start times as simultaneous, even if the actual clock
// time has advanced between the first and second call.
// In other words, because expiration times determine how updates are batched,
// we want all updates of like priority that occur within the same event to
// receive the same expiration time. Otherwise we get tearing.

var currentEventTime = NoWork;
function requestCurrentTimeForUpdate() {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    // We're inside React, so it's fine to read the actual time.
    return msToExpirationTime(now());
  } // We're not inside React, so we may be in the middle of a browser event.


  if (currentEventTime !== NoWork) {
    // Use the same start time for all updates until we enter React again.
    return currentEventTime;
  } // This is the first update since React yielded. Compute a new start time.


  currentEventTime = msToExpirationTime(now());
  return currentEventTime;
}
function getCurrentTime() {
  return msToExpirationTime(now());
}
function computeExpirationForFiber(currentTime, fiber, suspenseConfig) {
  var mode = fiber.mode;

  if ((mode & BlockingMode) === NoMode) {
    return Sync;
  }

  var priorityLevel = getCurrentPriorityLevel();

  if ((mode & ConcurrentMode) === NoMode) {
    return priorityLevel === ImmediatePriority ? Sync : Batched;
  }

  if ((executionContext & RenderContext) !== NoContext) {
    // Use whatever time we're already rendering
    // TODO: Should there be a way to opt out, like with `runWithPriority`?
    return renderExpirationTime$1;
  }

  var expirationTime;

  if (suspenseConfig !== null) {
    // Compute an expiration time based on the Suspense timeout.
    expirationTime = computeSuspenseExpiration(currentTime, suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
  } else {
    // Compute an expiration time based on the Scheduler priority.
    switch (priorityLevel) {
      case ImmediatePriority:
        expirationTime = Sync;
        break;

      case UserBlockingPriority$1:
        // TODO: Rename this to computeUserBlockingExpiration
        expirationTime = computeInteractiveExpiration(currentTime);
        break;

      case NormalPriority:
      case LowPriority:
        // TODO: Handle LowPriority
        // TODO: Rename this to... something better.
        expirationTime = computeAsyncExpiration(currentTime);
        break;

      case IdlePriority:
        expirationTime = Idle;
        break;

      default:
        {
          {
            throw Error( "Expected a valid priority level" );
          }
        }

    }
  } // If we're in the middle of rendering a tree, do not update at the same
  // expiration time that is already rendering.
  // TODO: We shouldn't have to do this if the update is on a different root.
  // Refactor computeExpirationForFiber + scheduleUpdate so we have access to
  // the root when we check for this condition.


  if (workInProgressRoot !== null && expirationTime === renderExpirationTime$1) {
    // This is a trick to move this update into a separate batch
    expirationTime -= 1;
  }

  return expirationTime;
}
function scheduleUpdateOnFiber(fiber, expirationTime) {
  checkForNestedUpdates();
  warnAboutRenderPhaseUpdatesInDEV(fiber);
  var root = markUpdateTimeFromFiberToRoot(fiber, expirationTime);

  if (root === null) {
    warnAboutUpdateOnUnmountedFiberInDEV(fiber);
    return;
  }

  checkForInterruption(fiber, expirationTime);
  recordScheduleUpdate(); // TODO: computeExpirationForFiber also reads the priority. Pass the
  // priority as an argument to that function and this one.

  var priorityLevel = getCurrentPriorityLevel();

  if (expirationTime === Sync) {
    if ( // Check if we're inside unbatchedUpdates
    (executionContext & LegacyUnbatchedContext) !== NoContext && // Check if we're not already rendering
    (executionContext & (RenderContext | CommitContext)) === NoContext) {
      // Register pending interactions on the root to avoid losing traced interaction data.
      schedulePendingInteractions(root, expirationTime); // This is a legacy edge case. The initial mount of a ReactDOM.render-ed
      // root inside of batchedUpdates should be synchronous, but layout updates
      // should be deferred until the end of the batch.

      performSyncWorkOnRoot(root);
    } else {
      ensureRootIsScheduled(root);
      schedulePendingInteractions(root, expirationTime);

      if (executionContext === NoContext) {
        // Flush the synchronous work now, unless we're already working or inside
        // a batch. This is intentionally inside scheduleUpdateOnFiber instead of
        // scheduleCallbackForFiber to preserve the ability to schedule a callback
        // without immediately flushing it. We only do this for user-initiated
        // updates, to preserve historical behavior of legacy mode.
        flushSyncCallbackQueue();
      }
    }
  } else {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, expirationTime);
  }

  if ((executionContext & DiscreteEventContext) !== NoContext && ( // Only updates at user-blocking priority or greater are considered
  // discrete, even inside a discrete event.
  priorityLevel === UserBlockingPriority$1 || priorityLevel === ImmediatePriority)) {
    // This is the result of a discrete event. Track the lowest priority
    // discrete update per root so we can flush them early, if needed.
    if (rootsWithPendingDiscreteUpdates === null) {
      rootsWithPendingDiscreteUpdates = new Map([[root, expirationTime]]);
    } else {
      var lastDiscreteTime = rootsWithPendingDiscreteUpdates.get(root);

      if (lastDiscreteTime === undefined || lastDiscreteTime > expirationTime) {
        rootsWithPendingDiscreteUpdates.set(root, expirationTime);
      }
    }
  }
}
var scheduleWork = scheduleUpdateOnFiber; // This is split into a separate function so we can mark a fiber with pending
// work without treating it as a typical update that originates from an event;
// e.g. retrying a Suspense boundary isn't an update, but it does schedule work
// on a fiber.

function markUpdateTimeFromFiberToRoot(fiber, expirationTime) {
  // Update the source fiber's expiration time
  if (fiber.expirationTime < expirationTime) {
    fiber.expirationTime = expirationTime;
  }

  var alternate = fiber.alternate;

  if (alternate !== null && alternate.expirationTime < expirationTime) {
    alternate.expirationTime = expirationTime;
  } // Walk the parent path to the root and update the child expiration time.


  var node = fiber.return;
  var root = null;

  if (node === null && fiber.tag === HostRoot) {
    root = fiber.stateNode;
  } else {
    while (node !== null) {
      alternate = node.alternate;

      if (node.childExpirationTime < expirationTime) {
        node.childExpirationTime = expirationTime;

        if (alternate !== null && alternate.childExpirationTime < expirationTime) {
          alternate.childExpirationTime = expirationTime;
        }
      } else if (alternate !== null && alternate.childExpirationTime < expirationTime) {
        alternate.childExpirationTime = expirationTime;
      }

      if (node.return === null && node.tag === HostRoot) {
        root = node.stateNode;
        break;
      }

      node = node.return;
    }
  }

  if (root !== null) {
    if (workInProgressRoot === root) {
      // Received an update to a tree that's in the middle of rendering. Mark
      // that's unprocessed work on this root.
      markUnprocessedUpdateTime(expirationTime);

      if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
        // The root already suspended with a delay, which means this render
        // definitely won't finish. Since we have a new update, let's mark it as
        // suspended now, right before marking the incoming update. This has the
        // effect of interrupting the current render and switching to the update.
        // TODO: This happens to work when receiving an update during the render
        // phase, because of the trick inside computeExpirationForFiber to
        // subtract 1 from `renderExpirationTime` to move it into a
        // separate bucket. But we should probably model it with an exception,
        // using the same mechanism we use to force hydration of a subtree.
        // TODO: This does not account for low pri updates that were already
        // scheduled before the root started rendering. Need to track the next
        // pending expiration time (perhaps by backtracking the return path) and
        // then trigger a restart in the `renderDidSuspendDelayIfPossible` path.
        markRootSuspendedAtTime(root, renderExpirationTime$1);
      }
    } // Mark that the root has a pending update.


    markRootUpdatedAtTime(root, expirationTime);
  }

  return root;
}

function getNextRootExpirationTimeToWorkOn(root) {
  // Determines the next expiration time that the root should render, taking
  // into account levels that may be suspended, or levels that may have
  // received a ping.
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    return lastExpiredTime;
  } // "Pending" refers to any update that hasn't committed yet, including if it
  // suspended. The "suspended" range is therefore a subset.


  var firstPendingTime = root.firstPendingTime;

  if (!isRootSuspendedAtTime(root, firstPendingTime)) {
    // The highest priority pending time is not suspended. Let's work on that.
    return firstPendingTime;
  } // If the first pending time is suspended, check if there's a lower priority
  // pending level that we know about. Or check if we received a ping. Work
  // on whichever is higher priority.


  var lastPingedTime = root.lastPingedTime;
  var nextKnownPendingLevel = root.nextKnownPendingLevel;
  var nextLevel = lastPingedTime > nextKnownPendingLevel ? lastPingedTime : nextKnownPendingLevel;

  if ( nextLevel <= Idle && firstPendingTime !== nextLevel) {
    // Don't work on Idle/Never priority unless everything else is committed.
    return NoWork;
  }

  return nextLevel;
} // Use this function to schedule a task for a root. There's only one task per
// root; if a task was already scheduled, we'll check to make sure the
// expiration time of the existing task is the same as the expiration time of
// the next level that the root has work on. This function is called on every
// update, and right before exiting a task.


function ensureRootIsScheduled(root) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime !== NoWork) {
    // Special case: Expired work should flush synchronously.
    root.callbackExpirationTime = Sync;
    root.callbackPriority = ImmediatePriority;
    root.callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
    return;
  }

  var expirationTime = getNextRootExpirationTimeToWorkOn(root);
  var existingCallbackNode = root.callbackNode;

  if (expirationTime === NoWork) {
    // There's nothing to work on.
    if (existingCallbackNode !== null) {
      root.callbackNode = null;
      root.callbackExpirationTime = NoWork;
      root.callbackPriority = NoPriority;
    }

    return;
  } // TODO: If this is an update, we already read the current time. Pass the
  // time as an argument.


  var currentTime = requestCurrentTimeForUpdate();
  var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime); // If there's an existing render task, confirm it has the correct priority and
  // expiration time. Otherwise, we'll cancel it and schedule a new one.

  if (existingCallbackNode !== null) {
    var existingCallbackPriority = root.callbackPriority;
    var existingCallbackExpirationTime = root.callbackExpirationTime;

    if ( // Callback must have the exact same expiration time.
    existingCallbackExpirationTime === expirationTime && // Callback must have greater or equal priority.
    existingCallbackPriority >= priorityLevel) {
      // Existing callback is sufficient.
      return;
    } // Need to schedule a new task.
    // TODO: Instead of scheduling a new task, we should be able to change the
    // priority of the existing one.


    cancelCallback(existingCallbackNode);
  }

  root.callbackExpirationTime = expirationTime;
  root.callbackPriority = priorityLevel;
  var callbackNode;

  if (expirationTime === Sync) {
    // Sync React callbacks are scheduled on a special internal queue
    callbackNode = scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root));
  } else {
    callbackNode = scheduleCallback(priorityLevel, performConcurrentWorkOnRoot.bind(null, root), // Compute a task timeout based on the expiration time. This also affects
    // ordering because tasks are processed in timeout order.
    {
      timeout: expirationTimeToMs(expirationTime) - now()
    });
  }

  root.callbackNode = callbackNode;
} // This is the entry point for every concurrent task, i.e. anything that
// goes through Scheduler.


function performConcurrentWorkOnRoot(root, didTimeout) {
  // Since we know we're in a React event, we can clear the current
  // event time. The next update will compute a new event time.
  currentEventTime = NoWork;

  if (didTimeout) {
    // The render task took too long to complete. Mark the current time as
    // expired to synchronously render all expired work in a single batch.
    var currentTime = requestCurrentTimeForUpdate();
    markRootExpiredAtTime(root, currentTime); // This will schedule a synchronous callback.

    ensureRootIsScheduled(root);
    return null;
  } // Determine the next expiration time to work on, using the fields stored
  // on the root.


  var expirationTime = getNextRootExpirationTimeToWorkOn(root);

  if (expirationTime !== NoWork) {
    var originalCallbackNode = root.callbackNode;

    if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
      {
        throw Error( "Should not already be working." );
      }
    }

    flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
    // and prepare a fresh one. Otherwise we'll continue where we left off.

    if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
      prepareFreshStack(root, expirationTime);
      startWorkOnPendingInteractions(root, expirationTime);
    } // If we have a work-in-progress fiber, it means there's still work to do
    // in this root.


    if (workInProgress !== null) {
      var prevExecutionContext = executionContext;
      executionContext |= RenderContext;
      var prevDispatcher = pushDispatcher();
      var prevInteractions = pushInteractions(root);
      startWorkLoopTimer(workInProgress);

      do {
        try {
          workLoopConcurrent();
          break;
        } catch (thrownValue) {
          handleError(root, thrownValue);
        }
      } while (true);

      resetContextDependencies();
      executionContext = prevExecutionContext;
      popDispatcher(prevDispatcher);

      {
        popInteractions(prevInteractions);
      }

      if (workInProgressRootExitStatus === RootFatalErrored) {
        var fatalError = workInProgressRootFatalError;
        stopInterruptedWorkLoopTimer();
        prepareFreshStack(root, expirationTime);
        markRootSuspendedAtTime(root, expirationTime);
        ensureRootIsScheduled(root);
        throw fatalError;
      }

      if (workInProgress !== null) {
        // There's still work left over. Exit without committing.
        stopInterruptedWorkLoopTimer();
      } else {
        // We now have a consistent tree. The next step is either to commit it,
        // or, if something suspended, wait to commit it after a timeout.
        stopFinishedWorkLoopTimer();
        var finishedWork = root.finishedWork = root.current.alternate;
        root.finishedExpirationTime = expirationTime;
        finishConcurrentRender(root, finishedWork, workInProgressRootExitStatus, expirationTime);
      }

      ensureRootIsScheduled(root);

      if (root.callbackNode === originalCallbackNode) {
        // The task node scheduled for this root is the same one that's
        // currently executed. Need to return a continuation.
        return performConcurrentWorkOnRoot.bind(null, root);
      }
    }
  }

  return null;
}

function finishConcurrentRender(root, finishedWork, exitStatus, expirationTime) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;

  switch (exitStatus) {
    case RootIncomplete:
    case RootFatalErrored:
      {
        {
          {
            throw Error( "Root did not complete. This is a bug in React." );
          }
        }
      }
    // Flow knows about invariant, so it complains if I add a break
    // statement, but eslint doesn't know about invariant, so it complains
    // if I do. eslint-disable-next-line no-fallthrough

    case RootErrored:
      {
        // If this was an async render, the error may have happened due to
        // a mutation in a concurrent event. Try rendering one more time,
        // synchronously, to see if the error goes away. If there are
        // lower priority updates, let's include those, too, in case they
        // fix the inconsistency. Render at Idle to include all updates.
        // If it was Idle or Never or some not-yet-invented time, render
        // at that time.
        markRootExpiredAtTime(root, expirationTime > Idle ? Idle : expirationTime); // We assume that this second render pass will be synchronous
        // and therefore not hit this path again.

        break;
      }

    case RootSuspended:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        } // We have an acceptable loading state. We need to figure out if we
        // should immediately commit it or wait a bit.
        // If we have processed new updates during this render, we may now
        // have a new loading state ready. We want to ensure that we commit
        // that as soon as possible.


        var hasNotProcessedNewUpdates = workInProgressRootLatestProcessedExpirationTime === Sync;

        if (hasNotProcessedNewUpdates && // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // If we have not processed any new updates during this pass, then
          // this is either a retry of an existing fallback state or a
          // hidden tree. Hidden trees shouldn't be batched with other work
          // and after that's fixed it can only be a retry. We're going to
          // throttle committing retries so that we don't show too many
          // loading states too quickly.
          var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now(); // Don't bother with a very short suspense time.

          if (msUntilTimeout > 10) {
            if (workInProgressRootHasPendingPing) {
              var lastPingedTime = root.lastPingedTime;

              if (lastPingedTime === NoWork || lastPingedTime >= expirationTime) {
                // This render was pinged but we didn't get to restart
                // earlier so try restarting now instead.
                root.lastPingedTime = expirationTime;
                prepareFreshStack(root, expirationTime);
                break;
              }
            }

            var nextTime = getNextRootExpirationTimeToWorkOn(root);

            if (nextTime !== NoWork && nextTime !== expirationTime) {
              // There's additional work on this root.
              break;
            }

            if (lastSuspendedTime !== NoWork && lastSuspendedTime !== expirationTime) {
              // We should prefer to render the fallback of at the last
              // suspended level. Ping the last suspended level to try
              // rendering it again.
              root.lastPingedTime = lastSuspendedTime;
              break;
            } // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.


            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootSuspendedWithDelay:
      {
        markRootSuspendedAtTime(root, expirationTime);
        var _lastSuspendedTime = root.lastSuspendedTime;

        if (expirationTime === _lastSuspendedTime) {
          root.nextKnownPendingLevel = getRemainingExpirationTime(finishedWork);
        }

        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current)) {
          // We're suspended in a state that should be avoided. We'll try to
          // avoid committing it for as long as the timeouts let us.
          if (workInProgressRootHasPendingPing) {
            var _lastPingedTime = root.lastPingedTime;

            if (_lastPingedTime === NoWork || _lastPingedTime >= expirationTime) {
              // This render was pinged but we didn't get to restart earlier
              // so try restarting now instead.
              root.lastPingedTime = expirationTime;
              prepareFreshStack(root, expirationTime);
              break;
            }
          }

          var _nextTime = getNextRootExpirationTimeToWorkOn(root);

          if (_nextTime !== NoWork && _nextTime !== expirationTime) {
            // There's additional work on this root.
            break;
          }

          if (_lastSuspendedTime !== NoWork && _lastSuspendedTime !== expirationTime) {
            // We should prefer to render the fallback of at the last
            // suspended level. Ping the last suspended level to try
            // rendering it again.
            root.lastPingedTime = _lastSuspendedTime;
            break;
          }

          var _msUntilTimeout;

          if (workInProgressRootLatestSuspenseTimeout !== Sync) {
            // We have processed a suspense config whose expiration time we
            // can use as the timeout.
            _msUntilTimeout = expirationTimeToMs(workInProgressRootLatestSuspenseTimeout) - now();
          } else if (workInProgressRootLatestProcessedExpirationTime === Sync) {
            // This should never normally happen because only new updates
            // cause delayed states, so we should have processed something.
            // However, this could also happen in an offscreen tree.
            _msUntilTimeout = 0;
          } else {
            // If we don't have a suspense config, we're going to use a
            // heuristic to determine how long we can suspend.
            var eventTimeMs = inferTimeFromExpirationTime(workInProgressRootLatestProcessedExpirationTime);
            var currentTimeMs = now();
            var timeUntilExpirationMs = expirationTimeToMs(expirationTime) - currentTimeMs;
            var timeElapsed = currentTimeMs - eventTimeMs;

            if (timeElapsed < 0) {
              // We get this wrong some time since we estimate the time.
              timeElapsed = 0;
            }

            _msUntilTimeout = jnd(timeElapsed) - timeElapsed; // Clamp the timeout to the expiration time. TODO: Once the
            // event time is exact instead of inferred from expiration time
            // we don't need this.

            if (timeUntilExpirationMs < _msUntilTimeout) {
              _msUntilTimeout = timeUntilExpirationMs;
            }
          } // Don't bother with a very short suspense time.


          if (_msUntilTimeout > 10) {
            // The render is suspended, it hasn't timed out, and there's no
            // lower priority work to do. Instead of committing the fallback
            // immediately, wait for more data to arrive.
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout);
            break;
          }
        } // The work expired. Commit immediately.


        commitRoot(root);
        break;
      }

    case RootCompleted:
      {
        // The work completed. Ready to commit.
        if ( // do not delay if we're inside an act() scope
        !( IsThisRendererActing.current) && workInProgressRootLatestProcessedExpirationTime !== Sync && workInProgressRootCanSuspendUsingConfig !== null) {
          // If we have exceeded the minimum loading delay, which probably
          // means we have shown a spinner already, we might have to suspend
          // a bit longer to ensure that the spinner is shown for
          // enough time.
          var _msUntilTimeout2 = computeMsUntilSuspenseLoadingDelay(workInProgressRootLatestProcessedExpirationTime, expirationTime, workInProgressRootCanSuspendUsingConfig);

          if (_msUntilTimeout2 > 10) {
            markRootSuspendedAtTime(root, expirationTime);
            root.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root), _msUntilTimeout2);
            break;
          }
        }

        commitRoot(root);
        break;
      }

    default:
      {
        {
          {
            throw Error( "Unknown root exit status." );
          }
        }
      }
  }
} // This is the entry point for synchronous tasks that don't go
// through Scheduler


function performSyncWorkOnRoot(root) {
  // Check if there's expired work on this root. Otherwise, render at Sync.
  var lastExpiredTime = root.lastExpiredTime;
  var expirationTime = lastExpiredTime !== NoWork ? lastExpiredTime : Sync;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  flushPassiveEffects(); // If the root or expiration time have changed, throw out the existing stack
  // and prepare a fresh one. Otherwise we'll continue where we left off.

  if (root !== workInProgressRoot || expirationTime !== renderExpirationTime$1) {
    prepareFreshStack(root, expirationTime);
    startWorkOnPendingInteractions(root, expirationTime);
  } // If we have a work-in-progress fiber, it means there's still work to do
  // in this root.


  if (workInProgress !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= RenderContext;
    var prevDispatcher = pushDispatcher();
    var prevInteractions = pushInteractions(root);
    startWorkLoopTimer(workInProgress);

    do {
      try {
        workLoopSync();
        break;
      } catch (thrownValue) {
        handleError(root, thrownValue);
      }
    } while (true);

    resetContextDependencies();
    executionContext = prevExecutionContext;
    popDispatcher(prevDispatcher);

    {
      popInteractions(prevInteractions);
    }

    if (workInProgressRootExitStatus === RootFatalErrored) {
      var fatalError = workInProgressRootFatalError;
      stopInterruptedWorkLoopTimer();
      prepareFreshStack(root, expirationTime);
      markRootSuspendedAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
      throw fatalError;
    }

    if (workInProgress !== null) {
      // This is a sync render, so we should have finished the whole tree.
      {
        {
          throw Error( "Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue." );
        }
      }
    } else {
      // We now have a consistent tree. Because this is a sync render, we
      // will commit it even if something suspended.
      stopFinishedWorkLoopTimer();
      root.finishedWork = root.current.alternate;
      root.finishedExpirationTime = expirationTime;
      finishSyncRender(root);
    } // Before exiting, make sure there's a callback scheduled for the next
    // pending level.


    ensureRootIsScheduled(root);
  }

  return null;
}

function finishSyncRender(root) {
  // Set this to null to indicate there's no in-progress render.
  workInProgressRoot = null;
  commitRoot(root);
}
function flushDiscreteUpdates() {
  // TODO: Should be able to flush inside batchedUpdates, but not inside `act`.
  // However, `act` uses `batchedUpdates`, so there's no way to distinguish
  // those two cases. Need to fix this before exposing flushDiscreteUpdates
  // as a public API.
  if ((executionContext & (BatchedContext | RenderContext | CommitContext)) !== NoContext) {
    {
      if ((executionContext & RenderContext) !== NoContext) {
        error('unstable_flushDiscreteUpdates: Cannot flush updates when React is ' + 'already rendering.');
      }
    } // We're already rendering, so we can't synchronously flush pending work.
    // This is probably a nested event dispatch triggered by a lifecycle/effect,
    // like `el.focus()`. Exit.


    return;
  }

  flushPendingDiscreteUpdates(); // If the discrete updates scheduled passive effects, flush them now so that
  // they fire before the next serial event.

  flushPassiveEffects();
}
function syncUpdates(fn, a, b, c) {
  return runWithPriority$1(ImmediatePriority, fn.bind(null, a, b, c));
}

function flushPendingDiscreteUpdates() {
  if (rootsWithPendingDiscreteUpdates !== null) {
    // For each root with pending discrete updates, schedule a callback to
    // immediately flush them.
    var roots = rootsWithPendingDiscreteUpdates;
    rootsWithPendingDiscreteUpdates = null;
    roots.forEach(function (expirationTime, root) {
      markRootExpiredAtTime(root, expirationTime);
      ensureRootIsScheduled(root);
    }); // Now flush the immediate queue.

    flushSyncCallbackQueue();
  }
}

function batchedUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function batchedEventUpdates$1(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext |= EventContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function discreteUpdates$1(fn, a, b, c, d) {
  var prevExecutionContext = executionContext;
  executionContext |= DiscreteEventContext;

  try {
    // Should this
    return runWithPriority$1(UserBlockingPriority$1, fn.bind(null, a, b, c, d));
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function unbatchedUpdates(fn, a) {
  var prevExecutionContext = executionContext;
  executionContext &= ~BatchedContext;
  executionContext |= LegacyUnbatchedContext;

  try {
    return fn(a);
  } finally {
    executionContext = prevExecutionContext;

    if (executionContext === NoContext) {
      // Flush the immediate callbacks that were scheduled during this batch
      flushSyncCallbackQueue();
    }
  }
}
function flushSync(fn, a) {
  if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
    {
      {
        throw Error( "flushSync was called from inside a lifecycle method. It cannot be called when React is already rendering." );
      }
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= BatchedContext;

  try {
    return runWithPriority$1(ImmediatePriority, fn.bind(null, a));
  } finally {
    executionContext = prevExecutionContext; // Flush the immediate callbacks that were scheduled during this batch.
    // Note that this will happen even if batchedUpdates is higher up
    // the stack.

    flushSyncCallbackQueue();
  }
}

function prepareFreshStack(root, expirationTime) {
  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;
  var timeoutHandle = root.timeoutHandle;

  if (timeoutHandle !== noTimeout) {
    // The root previous suspended and scheduled a timeout to commit a fallback
    // state. Now that we have additional work, cancel the timeout.
    root.timeoutHandle = noTimeout; // $FlowFixMe Complains noTimeout is not a TimeoutID, despite the check above

    cancelTimeout(timeoutHandle);
  }

  if (workInProgress !== null) {
    var interruptedWork = workInProgress.return;

    while (interruptedWork !== null) {
      unwindInterruptedWork(interruptedWork);
      interruptedWork = interruptedWork.return;
    }
  }

  workInProgressRoot = root;
  workInProgress = createWorkInProgress(root.current, null);
  renderExpirationTime$1 = expirationTime;
  workInProgressRootExitStatus = RootIncomplete;
  workInProgressRootFatalError = null;
  workInProgressRootLatestProcessedExpirationTime = Sync;
  workInProgressRootLatestSuspenseTimeout = Sync;
  workInProgressRootCanSuspendUsingConfig = null;
  workInProgressRootNextUnprocessedUpdateTime = NoWork;
  workInProgressRootHasPendingPing = false;

  {
    spawnedWorkDuringRender = null;
  }

  {
    ReactStrictModeWarnings.discardPendingWarnings();
  }
}

function handleError(root, thrownValue) {
  do {
    try {
      // Reset module-level state that was set during the render phase.
      resetContextDependencies();
      resetHooksAfterThrow();
      resetCurrentFiber();

      if (workInProgress === null || workInProgress.return === null) {
        // Expected to be working on a non-root fiber. This is a fatal error
        // because there's no ancestor that can handle it; the root is
        // supposed to capture all errors that weren't caught by an error
        // boundary.
        workInProgressRootExitStatus = RootFatalErrored;
        workInProgressRootFatalError = thrownValue; // Set `workInProgress` to null. This represents advancing to the next
        // sibling, or the parent if there are no siblings. But since the root
        // has no siblings nor a parent, we set it to null. Usually this is
        // handled by `completeUnitOfWork` or `unwindWork`, but since we're
        // interntionally not calling those, we need set it here.
        // TODO: Consider calling `unwindWork` to pop the contexts.

        workInProgress = null;
        return null;
      }

      if (enableProfilerTimer && workInProgress.mode & ProfileMode) {
        // Record the time spent rendering before an error was thrown. This
        // avoids inaccurate Profiler durations in the case of a
        // suspended render.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, true);
      }

      throwException(root, workInProgress.return, workInProgress, thrownValue, renderExpirationTime$1);
      workInProgress = completeUnitOfWork(workInProgress);
    } catch (yetAnotherThrownValue) {
      // Something in the return path also threw.
      thrownValue = yetAnotherThrownValue;
      continue;
    } // Return to the normal work loop.


    return;
  } while (true);
}

function pushDispatcher(root) {
  var prevDispatcher = ReactCurrentDispatcher$1.current;
  ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;

  if (prevDispatcher === null) {
    // The React isomorphic package does not include a default dispatcher.
    // Instead the first renderer will lazily attach one, in order to give
    // nicer error messages.
    return ContextOnlyDispatcher;
  } else {
    return prevDispatcher;
  }
}

function popDispatcher(prevDispatcher) {
  ReactCurrentDispatcher$1.current = prevDispatcher;
}

function pushInteractions(root) {
  {
    var prevInteractions = tracing.__interactionsRef.current;
    tracing.__interactionsRef.current = root.memoizedInteractions;
    return prevInteractions;
  }
}

function popInteractions(prevInteractions) {
  {
    tracing.__interactionsRef.current = prevInteractions;
  }
}

function markCommitTimeOfFallback() {
  globalMostRecentFallbackTime = now();
}
function markRenderEventTimeAndConfig(expirationTime, suspenseConfig) {
  if (expirationTime < workInProgressRootLatestProcessedExpirationTime && expirationTime > Idle) {
    workInProgressRootLatestProcessedExpirationTime = expirationTime;
  }

  if (suspenseConfig !== null) {
    if (expirationTime < workInProgressRootLatestSuspenseTimeout && expirationTime > Idle) {
      workInProgressRootLatestSuspenseTimeout = expirationTime; // Most of the time we only have one config and getting wrong is not bad.

      workInProgressRootCanSuspendUsingConfig = suspenseConfig;
    }
  }
}
function markUnprocessedUpdateTime(expirationTime) {
  if (expirationTime > workInProgressRootNextUnprocessedUpdateTime) {
    workInProgressRootNextUnprocessedUpdateTime = expirationTime;
  }
}
function renderDidSuspend() {
  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootSuspended;
  }
}
function renderDidSuspendDelayIfPossible() {
  if (workInProgressRootExitStatus === RootIncomplete || workInProgressRootExitStatus === RootSuspended) {
    workInProgressRootExitStatus = RootSuspendedWithDelay;
  } // Check if there's a lower priority update somewhere else in the tree.


  if (workInProgressRootNextUnprocessedUpdateTime !== NoWork && workInProgressRoot !== null) {
    // Mark the current render as suspended, and then mark that there's a
    // pending update.
    // TODO: This should immediately interrupt the current render, instead
    // of waiting until the next time we yield.
    markRootSuspendedAtTime(workInProgressRoot, renderExpirationTime$1);
    markRootUpdatedAtTime(workInProgressRoot, workInProgressRootNextUnprocessedUpdateTime);
  }
}
function renderDidError() {
  if (workInProgressRootExitStatus !== RootCompleted) {
    workInProgressRootExitStatus = RootErrored;
  }
} // Called during render to determine if anything has suspended.
// Returns false if we're not sure.

function renderHasNotSuspendedYet() {
  // If something errored or completed, we can't really be sure,
  // so those are false.
  return workInProgressRootExitStatus === RootIncomplete;
}

function inferTimeFromExpirationTime(expirationTime) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - LOW_PRIORITY_EXPIRATION;
}

function inferTimeFromExpirationTimeWithSuspenseConfig(expirationTime, suspenseConfig) {
  // We don't know exactly when the update was scheduled, but we can infer an
  // approximate start time from the expiration time by subtracting the timeout
  // that was added to the event time.
  var earliestExpirationTimeMs = expirationTimeToMs(expirationTime);
  return earliestExpirationTimeMs - (suspenseConfig.timeoutMs | 0 || LOW_PRIORITY_EXPIRATION);
} // The work loop is an extremely hot path. Tell Closure not to inline it.

/** @noinline */


function workLoopSync() {
  // Already timed out, so perform work without checking if we need to yield.
  while (workInProgress !== null) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}
/** @noinline */


function workLoopConcurrent() {
  // Perform work until Scheduler asks us to yield
  while (workInProgress !== null && !shouldYield()) {
    workInProgress = performUnitOfWork(workInProgress);
  }
}

function performUnitOfWork(unitOfWork) {
  // The current, flushed, state of this fiber is the alternate. Ideally
  // nothing should rely on this, but relying on it here means that we don't
  // need an additional field on the work in progress.
  var current = unitOfWork.alternate;
  startWorkTimer(unitOfWork);
  setCurrentFiber(unitOfWork);
  var next;

  if ( (unitOfWork.mode & ProfileMode) !== NoMode) {
    startProfilerTimer(unitOfWork);
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
    stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
  } else {
    next = beginWork$1(current, unitOfWork, renderExpirationTime$1);
  }

  resetCurrentFiber();
  unitOfWork.memoizedProps = unitOfWork.pendingProps;

  if (next === null) {
    // If this doesn't spawn new work, complete the current work.
    next = completeUnitOfWork(unitOfWork);
  }

  ReactCurrentOwner$2.current = null;
  return next;
}

function completeUnitOfWork(unitOfWork) {
  // Attempt to complete the current unit of work, then move to the next
  // sibling. If there are no more siblings, return to the parent fiber.
  workInProgress = unitOfWork;

  do {
    // The current, flushed, state of this fiber is the alternate. Ideally
    // nothing should rely on this, but relying on it here means that we don't
    // need an additional field on the work in progress.
    var current = workInProgress.alternate;
    var returnFiber = workInProgress.return; // Check if the work completed or if something threw.

    if ((workInProgress.effectTag & Incomplete) === NoEffect) {
      setCurrentFiber(workInProgress);
      var next = void 0;

      if ( (workInProgress.mode & ProfileMode) === NoMode) {
        next = completeWork(current, workInProgress, renderExpirationTime$1);
      } else {
        startProfilerTimer(workInProgress);
        next = completeWork(current, workInProgress, renderExpirationTime$1); // Update render duration assuming we didn't error.

        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false);
      }

      stopWorkTimer(workInProgress);
      resetCurrentFiber();
      resetChildExpirationTime(workInProgress);

      if (next !== null) {
        // Completing this fiber spawned new work. Work on that next.
        return next;
      }

      if (returnFiber !== null && // Do not append effects to parents if a sibling failed to complete
      (returnFiber.effectTag & Incomplete) === NoEffect) {
        // Append all the effects of the subtree and this fiber onto the effect
        // list of the parent. The completion order of the children affects the
        // side-effect order.
        if (returnFiber.firstEffect === null) {
          returnFiber.firstEffect = workInProgress.firstEffect;
        }

        if (workInProgress.lastEffect !== null) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress.firstEffect;
          }

          returnFiber.lastEffect = workInProgress.lastEffect;
        } // If this fiber had side-effects, we append it AFTER the children's
        // side-effects. We can perform certain side-effects earlier if needed,
        // by doing multiple passes over the effect list. We don't want to
        // schedule our own side-effect on our own list because if end up
        // reusing children we'll schedule this effect onto itself since we're
        // at the end.


        var effectTag = workInProgress.effectTag; // Skip both NoWork and PerformedWork tags when creating the effect
        // list. PerformedWork effect is read by React DevTools but shouldn't be
        // committed.

        if (effectTag > PerformedWork) {
          if (returnFiber.lastEffect !== null) {
            returnFiber.lastEffect.nextEffect = workInProgress;
          } else {
            returnFiber.firstEffect = workInProgress;
          }

          returnFiber.lastEffect = workInProgress;
        }
      }
    } else {
      // This fiber did not complete because something threw. Pop values off
      // the stack without entering the complete phase. If this is a boundary,
      // capture values if possible.
      var _next = unwindWork(workInProgress); // Because this fiber did not complete, don't reset its expiration time.


      if ( (workInProgress.mode & ProfileMode) !== NoMode) {
        // Record the render duration for the fiber that errored.
        stopProfilerTimerIfRunningAndRecordDelta(workInProgress, false); // Include the time spent working on failed children before continuing.

        var actualDuration = workInProgress.actualDuration;
        var child = workInProgress.child;

        while (child !== null) {
          actualDuration += child.actualDuration;
          child = child.sibling;
        }

        workInProgress.actualDuration = actualDuration;
      }

      if (_next !== null) {
        // If completing this work spawned new work, do that next. We'll come
        // back here again.
        // Since we're restarting, remove anything that is not a host effect
        // from the effect tag.
        // TODO: The name stopFailedWorkTimer is misleading because Suspense
        // also captures and restarts.
        stopFailedWorkTimer(workInProgress);
        _next.effectTag &= HostEffectMask;
        return _next;
      }

      stopWorkTimer(workInProgress);

      if (returnFiber !== null) {
        // Mark the parent fiber as incomplete and clear its effect list.
        returnFiber.firstEffect = returnFiber.lastEffect = null;
        returnFiber.effectTag |= Incomplete;
      }
    }

    var siblingFiber = workInProgress.sibling;

    if (siblingFiber !== null) {
      // If there is more work to do in this returnFiber, do that next.
      return siblingFiber;
    } // Otherwise, return to the parent


    workInProgress = returnFiber;
  } while (workInProgress !== null); // We've reached the root.


  if (workInProgressRootExitStatus === RootIncomplete) {
    workInProgressRootExitStatus = RootCompleted;
  }

  return null;
}

function getRemainingExpirationTime(fiber) {
  var updateExpirationTime = fiber.expirationTime;
  var childExpirationTime = fiber.childExpirationTime;
  return updateExpirationTime > childExpirationTime ? updateExpirationTime : childExpirationTime;
}

function resetChildExpirationTime(completedWork) {
  if (renderExpirationTime$1 !== Never && completedWork.childExpirationTime === Never) {
    // The children of this component are hidden. Don't bubble their
    // expiration times.
    return;
  }

  var newChildExpirationTime = NoWork; // Bubble up the earliest expiration time.

  if ( (completedWork.mode & ProfileMode) !== NoMode) {
    // In profiling mode, resetChildExpirationTime is also used to reset
    // profiler durations.
    var actualDuration = completedWork.actualDuration;
    var treeBaseDuration = completedWork.selfBaseDuration; // When a fiber is cloned, its actualDuration is reset to 0. This value will
    // only be updated if work is done on the fiber (i.e. it doesn't bailout).
    // When work is done, it should bubble to the parent's actualDuration. If
    // the fiber has not been cloned though, (meaning no work was done), then
    // this value will reflect the amount of time spent working on a previous
    // render. In that case it should not bubble. We determine whether it was
    // cloned by comparing the child pointer.

    var shouldBubbleActualDurations = completedWork.alternate === null || completedWork.child !== completedWork.alternate.child;
    var child = completedWork.child;

    while (child !== null) {
      var childUpdateExpirationTime = child.expirationTime;
      var childChildExpirationTime = child.childExpirationTime;

      if (childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childUpdateExpirationTime;
      }

      if (childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = childChildExpirationTime;
      }

      if (shouldBubbleActualDurations) {
        actualDuration += child.actualDuration;
      }

      treeBaseDuration += child.treeBaseDuration;
      child = child.sibling;
    }

    completedWork.actualDuration = actualDuration;
    completedWork.treeBaseDuration = treeBaseDuration;
  } else {
    var _child = completedWork.child;

    while (_child !== null) {
      var _childUpdateExpirationTime = _child.expirationTime;
      var _childChildExpirationTime = _child.childExpirationTime;

      if (_childUpdateExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childUpdateExpirationTime;
      }

      if (_childChildExpirationTime > newChildExpirationTime) {
        newChildExpirationTime = _childChildExpirationTime;
      }

      _child = _child.sibling;
    }
  }

  completedWork.childExpirationTime = newChildExpirationTime;
}

function commitRoot(root) {
  var renderPriorityLevel = getCurrentPriorityLevel();
  runWithPriority$1(ImmediatePriority, commitRootImpl.bind(null, root, renderPriorityLevel));
  return null;
}

function commitRootImpl(root, renderPriorityLevel) {
  do {
    // `flushPassiveEffects` will call `flushSyncUpdateQueue` at the end, which
    // means `flushPassiveEffects` will sometimes result in additional
    // passive effects. So we need to keep flushing in a loop until there are
    // no more pending effects.
    // TODO: Might be better if `flushPassiveEffects` did not automatically
    // flush synchronous work at the end, to avoid factoring hazards like this.
    flushPassiveEffects();
  } while (rootWithPendingPassiveEffects !== null);

  flushRenderPhaseStrictModeWarningsInDEV();

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Should not already be working." );
    }
  }

  var finishedWork = root.finishedWork;
  var expirationTime = root.finishedExpirationTime;

  if (finishedWork === null) {
    return null;
  }

  root.finishedWork = null;
  root.finishedExpirationTime = NoWork;

  if (!(finishedWork !== root.current)) {
    {
      throw Error( "Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue." );
    }
  } // commitRoot never returns a continuation; it always finishes synchronously.
  // So we can clear these now to allow a new callback to be scheduled.


  root.callbackNode = null;
  root.callbackExpirationTime = NoWork;
  root.callbackPriority = NoPriority;
  root.nextKnownPendingLevel = NoWork;
  startCommitTimer(); // Update the first and last pending times on this root. The new first
  // pending time is whatever is left on the root fiber.

  var remainingExpirationTimeBeforeCommit = getRemainingExpirationTime(finishedWork);
  markRootFinishedAtTime(root, expirationTime, remainingExpirationTimeBeforeCommit);

  if (root === workInProgressRoot) {
    // We can reset these now that they are finished.
    workInProgressRoot = null;
    workInProgress = null;
    renderExpirationTime$1 = NoWork;
  } // This indicates that the last root we worked on is not the same one that
  // we're committing now. This most commonly happens when a suspended root
  // times out.
  // Get the list of effects.


  var firstEffect;

  if (finishedWork.effectTag > PerformedWork) {
    // A fiber's effect list consists only of its children, not itself. So if
    // the root has an effect, we need to add it to the end of the list. The
    // resulting list is the set that would belong to the root's parent, if it
    // had one; that is, all the effects in the tree including the root.
    if (finishedWork.lastEffect !== null) {
      finishedWork.lastEffect.nextEffect = finishedWork;
      firstEffect = finishedWork.firstEffect;
    } else {
      firstEffect = finishedWork;
    }
  } else {
    // There is no effect on the root.
    firstEffect = finishedWork.firstEffect;
  }

  if (firstEffect !== null) {
    var prevExecutionContext = executionContext;
    executionContext |= CommitContext;
    var prevInteractions = pushInteractions(root); // Reset this to null before calling lifecycles

    ReactCurrentOwner$2.current = null; // The commit phase is broken into several sub-phases. We do a separate pass
    // of the effect list for each phase: all mutation effects come before all
    // layout effects, and so on.
    // The first phase a "before mutation" phase. We use this phase to read the
    // state of the host tree right before we mutate it. This is where
    // getSnapshotBeforeUpdate is called.

    startCommitSnapshotEffectsTimer();
    prepareForCommit(root.containerInfo);
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitBeforeMutationEffects, null);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var error = clearCaughtError();
          captureCommitPhaseError(nextEffect, error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitSnapshotEffectsTimer();

    {
      // Mark the current commit time to be shared by all Profilers in this
      // batch. This enables them to be grouped later.
      recordCommitTime();
    } // The next phase is the mutation phase, where we mutate the host tree.


    startCommitHostEffectsTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitMutationEffects, null, root, renderPriorityLevel);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitHostEffectsTimer();
    resetAfterCommit(root.containerInfo); // The work-in-progress tree is now the current tree. This must come after
    // the mutation phase, so that the previous tree is still current during
    // componentWillUnmount, but before the layout phase, so that the finished
    // work is current during componentDidMount/Update.

    root.current = finishedWork; // The next phase is the layout phase, where we call effects that read
    // the host tree after it's been mutated. The idiomatic use case for this is
    // layout, but class component lifecycles also fire here for legacy reasons.

    startCommitLifeCyclesTimer();
    nextEffect = firstEffect;

    do {
      {
        invokeGuardedCallback(null, commitLayoutEffects, null, root, expirationTime);

        if (hasCaughtError()) {
          if (!(nextEffect !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error2 = clearCaughtError();

          captureCommitPhaseError(nextEffect, _error2);
          nextEffect = nextEffect.nextEffect;
        }
      }
    } while (nextEffect !== null);

    stopCommitLifeCyclesTimer();
    nextEffect = null; // Tell Scheduler to yield at the end of the frame, so the browser has an
    // opportunity to paint.

    requestPaint();

    {
      popInteractions(prevInteractions);
    }

    executionContext = prevExecutionContext;
  } else {
    // No effects.
    root.current = finishedWork; // Measure these anyway so the flamegraph explicitly shows that there were
    // no effects.
    // TODO: Maybe there's a better way to report this.

    startCommitSnapshotEffectsTimer();
    stopCommitSnapshotEffectsTimer();

    {
      recordCommitTime();
    }

    startCommitHostEffectsTimer();
    stopCommitHostEffectsTimer();
    startCommitLifeCyclesTimer();
    stopCommitLifeCyclesTimer();
  }

  stopCommitTimer();
  var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;

  if (rootDoesHavePassiveEffects) {
    // This commit has passive effects. Stash a reference to them. But don't
    // schedule a callback until after flushing layout work.
    rootDoesHavePassiveEffects = false;
    rootWithPendingPassiveEffects = root;
    pendingPassiveEffectsExpirationTime = expirationTime;
    pendingPassiveEffectsRenderPriority = renderPriorityLevel;
  } else {
    // We are done with the effect chain at this point so let's clear the
    // nextEffect pointers to assist with GC. If we have passive effects, we'll
    // clear this in flushPassiveEffects.
    nextEffect = firstEffect;

    while (nextEffect !== null) {
      var nextNextEffect = nextEffect.nextEffect;
      nextEffect.nextEffect = null;
      nextEffect = nextNextEffect;
    }
  } // Check if there's remaining work on this root


  var remainingExpirationTime = root.firstPendingTime;

  if (remainingExpirationTime !== NoWork) {
    {
      if (spawnedWorkDuringRender !== null) {
        var expirationTimes = spawnedWorkDuringRender;
        spawnedWorkDuringRender = null;

        for (var i = 0; i < expirationTimes.length; i++) {
          scheduleInteractions(root, expirationTimes[i], root.memoizedInteractions);
        }
      }

      schedulePendingInteractions(root, remainingExpirationTime);
    }
  } else {
    // If there's no remaining work, we can clear the set of already failed
    // error boundaries.
    legacyErrorBoundariesThatAlreadyFailed = null;
  }

  {
    if (!rootDidHavePassiveEffects) {
      // If there are no passive effects, then we can complete the pending interactions.
      // Otherwise, we'll wait until after the passive effects are flushed.
      // Wait to do this until after remaining work has been scheduled,
      // so that we don't prematurely signal complete for interactions when there's e.g. hidden work.
      finishPendingInteractions(root, expirationTime);
    }
  }

  if (remainingExpirationTime === Sync) {
    // Count the number of times the root synchronously re-renders without
    // finishing. If there are too many, it indicates an infinite update loop.
    if (root === rootWithNestedUpdates) {
      nestedUpdateCount++;
    } else {
      nestedUpdateCount = 0;
      rootWithNestedUpdates = root;
    }
  } else {
    nestedUpdateCount = 0;
  }

  onCommitRoot(finishedWork.stateNode, expirationTime); // Always call this before exiting `commitRoot`, to ensure that any
  // additional work on this root is scheduled.

  ensureRootIsScheduled(root);

  if (hasUncaughtError) {
    hasUncaughtError = false;
    var _error3 = firstUncaughtError;
    firstUncaughtError = null;
    throw _error3;
  }

  if ((executionContext & LegacyUnbatchedContext) !== NoContext) {
    // This is a legacy edge case. We just committed the initial mount of
    // a ReactDOM.render-ed root inside of batchedUpdates. The commit fired
    // synchronously, but layout updates should be deferred until the end
    // of the batch.
    return null;
  } // If layout work was scheduled, flush it now.


  flushSyncCallbackQueue();
  return null;
}

function commitBeforeMutationEffects() {
  while (nextEffect !== null) {
    var effectTag = nextEffect.effectTag;

    if ((effectTag & Snapshot) !== NoEffect) {
      setCurrentFiber(nextEffect);
      recordEffect();
      var current = nextEffect.alternate;
      commitBeforeMutationLifeCycles(current, nextEffect);
      resetCurrentFiber();
    }

    if ((effectTag & Passive) !== NoEffect) {
      // If there are passive effects, schedule a callback to flush at
      // the earliest opportunity.
      if (!rootDoesHavePassiveEffects) {
        rootDoesHavePassiveEffects = true;
        scheduleCallback(NormalPriority, function () {
          flushPassiveEffects();
          return null;
        });
      }
    }

    nextEffect = nextEffect.nextEffect;
  }
}

function commitMutationEffects(root, renderPriorityLevel) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & ContentReset) {
      commitResetTextContent(nextEffect);
    }

    if (effectTag & Ref) {
      var current = nextEffect.alternate;

      if (current !== null) {
        commitDetachRef(current);
      }
    } // The following switch statement is only concerned about placement,
    // updates, and deletions. To avoid needing to add a case for every possible
    // bitmap value, we remove the secondary effects from the effect tag and
    // switch on that value.


    var primaryEffectTag = effectTag & (Placement | Update | Deletion | Hydrating);

    switch (primaryEffectTag) {
      case Placement:
        {
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.
          // TODO: findDOMNode doesn't rely on this any more but isMounted does
          // and isMounted is deprecated anyway so we should be able to kill this.

          nextEffect.effectTag &= ~Placement;
          break;
        }

      case PlacementAndUpdate:
        {
          // Placement
          commitPlacement(nextEffect); // Clear the "placement" from effect tag so that we know that this is
          // inserted, before any life-cycles like componentDidMount gets called.

          nextEffect.effectTag &= ~Placement; // Update

          var _current = nextEffect.alternate;
          commitWork(_current, nextEffect);
          break;
        }

      case Hydrating:
        {
          nextEffect.effectTag &= ~Hydrating;
          break;
        }

      case HydratingAndUpdate:
        {
          nextEffect.effectTag &= ~Hydrating; // Update

          var _current2 = nextEffect.alternate;
          commitWork(_current2, nextEffect);
          break;
        }

      case Update:
        {
          var _current3 = nextEffect.alternate;
          commitWork(_current3, nextEffect);
          break;
        }

      case Deletion:
        {
          commitDeletion(root, nextEffect, renderPriorityLevel);
          break;
        }
    } // TODO: Only record a mutation effect if primaryEffectTag is non-zero.


    recordEffect();
    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function commitLayoutEffects(root, committedExpirationTime) {
  // TODO: Should probably move the bulk of this function to commitWork.
  while (nextEffect !== null) {
    setCurrentFiber(nextEffect);
    var effectTag = nextEffect.effectTag;

    if (effectTag & (Update | Callback)) {
      recordEffect();
      var current = nextEffect.alternate;
      commitLifeCycles(root, current, nextEffect);
    }

    if (effectTag & Ref) {
      recordEffect();
      commitAttachRef(nextEffect);
    }

    resetCurrentFiber();
    nextEffect = nextEffect.nextEffect;
  }
}

function flushPassiveEffects() {
  if (pendingPassiveEffectsRenderPriority !== NoPriority) {
    var priorityLevel = pendingPassiveEffectsRenderPriority > NormalPriority ? NormalPriority : pendingPassiveEffectsRenderPriority;
    pendingPassiveEffectsRenderPriority = NoPriority;
    return runWithPriority$1(priorityLevel, flushPassiveEffectsImpl);
  }
}

function flushPassiveEffectsImpl() {
  if (rootWithPendingPassiveEffects === null) {
    return false;
  }

  var root = rootWithPendingPassiveEffects;
  var expirationTime = pendingPassiveEffectsExpirationTime;
  rootWithPendingPassiveEffects = null;
  pendingPassiveEffectsExpirationTime = NoWork;

  if (!((executionContext & (RenderContext | CommitContext)) === NoContext)) {
    {
      throw Error( "Cannot flush passive effects while already rendering." );
    }
  }

  var prevExecutionContext = executionContext;
  executionContext |= CommitContext;
  var prevInteractions = pushInteractions(root);

  {
    // Note: This currently assumes there are no passive effects on the root fiber
    // because the root is not part of its own effect list.
    // This could change in the future.
    var _effect2 = root.current.firstEffect;

    while (_effect2 !== null) {
      {
        setCurrentFiber(_effect2);
        invokeGuardedCallback(null, commitPassiveHookEffects, null, _effect2);

        if (hasCaughtError()) {
          if (!(_effect2 !== null)) {
            {
              throw Error( "Should be working on an effect." );
            }
          }

          var _error5 = clearCaughtError();

          captureCommitPhaseError(_effect2, _error5);
        }

        resetCurrentFiber();
      }

      var nextNextEffect = _effect2.nextEffect; // Remove nextEffect pointer to assist GC

      _effect2.nextEffect = null;
      _effect2 = nextNextEffect;
    }
  }

  {
    popInteractions(prevInteractions);
    finishPendingInteractions(root, expirationTime);
  }

  executionContext = prevExecutionContext;
  flushSyncCallbackQueue(); // If additional passive effects were scheduled, increment a counter. If this
  // exceeds the limit, we'll fire a warning.

  nestedPassiveUpdateCount = rootWithPendingPassiveEffects === null ? 0 : nestedPassiveUpdateCount + 1;
  return true;
}

function isAlreadyFailedLegacyErrorBoundary(instance) {
  return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
}
function markLegacyErrorBoundaryAsFailed(instance) {
  if (legacyErrorBoundariesThatAlreadyFailed === null) {
    legacyErrorBoundariesThatAlreadyFailed = new Set([instance]);
  } else {
    legacyErrorBoundariesThatAlreadyFailed.add(instance);
  }
}

function prepareToThrowUncaughtError(error) {
  if (!hasUncaughtError) {
    hasUncaughtError = true;
    firstUncaughtError = error;
  }
}

var onUncaughtError = prepareToThrowUncaughtError;

function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error) {
  var errorInfo = createCapturedValue(error, sourceFiber);
  var update = createRootErrorUpdate(rootFiber, errorInfo, Sync);
  enqueueUpdate(rootFiber, update);
  var root = markUpdateTimeFromFiberToRoot(rootFiber, Sync);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, Sync);
  }
}

function captureCommitPhaseError(sourceFiber, error) {
  if (sourceFiber.tag === HostRoot) {
    // Error was thrown at the root. There is no parent, so the root
    // itself should capture it.
    captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error);
    return;
  }

  var fiber = sourceFiber.return;

  while (fiber !== null) {
    if (fiber.tag === HostRoot) {
      captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error);
      return;
    } else if (fiber.tag === ClassComponent) {
      var ctor = fiber.type;
      var instance = fiber.stateNode;

      if (typeof ctor.getDerivedStateFromError === 'function' || typeof instance.componentDidCatch === 'function' && !isAlreadyFailedLegacyErrorBoundary(instance)) {
        var errorInfo = createCapturedValue(error, sourceFiber);
        var update = createClassErrorUpdate(fiber, errorInfo, // TODO: This is always sync
        Sync);
        enqueueUpdate(fiber, update);
        var root = markUpdateTimeFromFiberToRoot(fiber, Sync);

        if (root !== null) {
          ensureRootIsScheduled(root);
          schedulePendingInteractions(root, Sync);
        }

        return;
      }
    }

    fiber = fiber.return;
  }
}
function pingSuspendedRoot(root, thenable, suspendedTime) {
  var pingCache = root.pingCache;

  if (pingCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    pingCache.delete(thenable);
  }

  if (workInProgressRoot === root && renderExpirationTime$1 === suspendedTime) {
    // Received a ping at the same priority level at which we're currently
    // rendering. We might want to restart this render. This should mirror
    // the logic of whether or not a root suspends once it completes.
    // TODO: If we're rendering sync either due to Sync, Batched or expired,
    // we should probably never restart.
    // If we're suspended with delay, we'll always suspend so we can always
    // restart. If we're suspended without any updates, it might be a retry.
    // If it's early in the retry we can restart. We can't know for sure
    // whether we'll eventually process an update during this render pass,
    // but it's somewhat unlikely that we get to a ping before that, since
    // getting to the root most update is usually very fast.
    if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && workInProgressRootLatestProcessedExpirationTime === Sync && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
      // Restart from the root. Don't need to schedule a ping because
      // we're already working on this tree.
      prepareFreshStack(root, renderExpirationTime$1);
    } else {
      // Even though we can't restart right now, we might get an
      // opportunity later. So we mark this render as having a ping.
      workInProgressRootHasPendingPing = true;
    }

    return;
  }

  if (!isRootSuspendedAtTime(root, suspendedTime)) {
    // The root is no longer suspended at this time.
    return;
  }

  var lastPingedTime = root.lastPingedTime;

  if (lastPingedTime !== NoWork && lastPingedTime < suspendedTime) {
    // There's already a lower priority ping scheduled.
    return;
  } // Mark the time at which this ping was scheduled.


  root.lastPingedTime = suspendedTime;

  ensureRootIsScheduled(root);
  schedulePendingInteractions(root, suspendedTime);
}

function retryTimedOutBoundary(boundaryFiber, retryTime) {
  // The boundary fiber (a Suspense component or SuspenseList component)
  // previously was rendered in its fallback state. One of the promises that
  // suspended it has resolved, which means at least part of the tree was
  // likely unblocked. Try rendering again, at a new expiration time.
  if (retryTime === NoWork) {
    var suspenseConfig = null; // Retries don't carry over the already committed update.

    var currentTime = requestCurrentTimeForUpdate();
    retryTime = computeExpirationForFiber(currentTime, boundaryFiber, suspenseConfig);
  } // TODO: Special case idle priority?


  var root = markUpdateTimeFromFiberToRoot(boundaryFiber, retryTime);

  if (root !== null) {
    ensureRootIsScheduled(root);
    schedulePendingInteractions(root, retryTime);
  }
}
function resolveRetryThenable(boundaryFiber, thenable) {
  var retryTime = NoWork; // Default

  var retryCache;

  {
    retryCache = boundaryFiber.stateNode;
  }

  if (retryCache !== null) {
    // The thenable resolved, so we no longer need to memoize, because it will
    // never be thrown again.
    retryCache.delete(thenable);
  }

  retryTimedOutBoundary(boundaryFiber, retryTime);
} // Computes the next Just Noticeable Difference (JND) boundary.
// The theory is that a person can't tell the difference between small differences in time.
// Therefore, if we wait a bit longer than necessary that won't translate to a noticeable
// difference in the experience. However, waiting for longer might mean that we can avoid
// showing an intermediate loading state. The longer we have already waited, the harder it
// is to tell small differences in time. Therefore, the longer we've already waited,
// the longer we can wait additionally. At some point we have to give up though.
// We pick a train model where the next boundary commits at a consistent schedule.
// These particular numbers are vague estimates. We expect to adjust them based on research.

function jnd(timeElapsed) {
  return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3000 ? 3000 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
}

function computeMsUntilSuspenseLoadingDelay(mostRecentEventTime, committedExpirationTime, suspenseConfig) {
  var busyMinDurationMs = suspenseConfig.busyMinDurationMs | 0;

  if (busyMinDurationMs <= 0) {
    return 0;
  }

  var busyDelayMs = suspenseConfig.busyDelayMs | 0; // Compute the time until this render pass would expire.

  var currentTimeMs = now();
  var eventTimeMs = inferTimeFromExpirationTimeWithSuspenseConfig(mostRecentEventTime, suspenseConfig);
  var timeElapsed = currentTimeMs - eventTimeMs;

  if (timeElapsed <= busyDelayMs) {
    // If we haven't yet waited longer than the initial delay, we don't
    // have to wait any additional time.
    return 0;
  }

  var msUntilTimeout = busyDelayMs + busyMinDurationMs - timeElapsed; // This is the value that is passed to `setTimeout`.

  return msUntilTimeout;
}

function checkForNestedUpdates() {
  if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
    nestedUpdateCount = 0;
    rootWithNestedUpdates = null;

    {
      {
        throw Error( "Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops." );
      }
    }
  }

  {
    if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
      nestedPassiveUpdateCount = 0;

      error('Maximum update depth exceeded. This can happen when a component ' + "calls setState inside useEffect, but useEffect either doesn't " + 'have a dependency array, or one of the dependencies changes on ' + 'every render.');
    }
  }
}

function flushRenderPhaseStrictModeWarningsInDEV() {
  {
    ReactStrictModeWarnings.flushLegacyContextWarning();

    {
      ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
    }
  }
}

function stopFinishedWorkLoopTimer() {
  var didCompleteRoot = true;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function stopInterruptedWorkLoopTimer() {
  // TODO: Track which fiber caused the interruption.
  var didCompleteRoot = false;
  stopWorkLoopTimer(interruptedBy, didCompleteRoot);
  interruptedBy = null;
}

function checkForInterruption(fiberThatReceivedUpdate, updateExpirationTime) {
  if ( workInProgressRoot !== null && updateExpirationTime > renderExpirationTime$1) {
    interruptedBy = fiberThatReceivedUpdate;
  }
}

var didWarnStateUpdateForUnmountedComponent = null;

function warnAboutUpdateOnUnmountedFiberInDEV(fiber) {
  {
    var tag = fiber.tag;

    if (tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent && tag !== Block) {
      // Only warn for user-defined components, not internal ones like Suspense.
      return;
    }
    // the problematic code almost always lies inside that component.


    var componentName = getComponentName(fiber.type) || 'ReactComponent';

    if (didWarnStateUpdateForUnmountedComponent !== null) {
      if (didWarnStateUpdateForUnmountedComponent.has(componentName)) {
        return;
      }

      didWarnStateUpdateForUnmountedComponent.add(componentName);
    } else {
      didWarnStateUpdateForUnmountedComponent = new Set([componentName]);
    }

    error("Can't perform a React state update on an unmounted component. This " + 'is a no-op, but it indicates a memory leak in your application. To ' + 'fix, cancel all subscriptions and asynchronous tasks in %s.%s', tag === ClassComponent ? 'the componentWillUnmount method' : 'a useEffect cleanup function', getStackByFiberInDevAndProd(fiber));
  }
}

var beginWork$1;

{
  var dummyFiber = null;

  beginWork$1 = function (current, unitOfWork, expirationTime) {
    // If a component throws an error, we replay it again in a synchronously
    // dispatched event, so that the debugger will treat it as an uncaught
    // error See ReactErrorUtils for more information.
    // Before entering the begin phase, copy the work-in-progress onto a dummy
    // fiber. If beginWork throws, we'll use this to reset the state.
    var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);

    try {
      return beginWork(current, unitOfWork, expirationTime);
    } catch (originalError) {
      if (originalError !== null && typeof originalError === 'object' && typeof originalError.then === 'function') {
        // Don't replay promises. Treat everything else like an error.
        throw originalError;
      } // Keep this code in sync with handleError; any changes here must have
      // corresponding changes there.


      resetContextDependencies();
      resetHooksAfterThrow(); // Don't reset current debug fiber, since we're about to work on the
      // same fiber again.
      // Unwind the failed stack frame

      unwindInterruptedWork(unitOfWork); // Restore the original properties of the fiber.

      assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);

      if ( unitOfWork.mode & ProfileMode) {
        // Reset the profiler timer.
        startProfilerTimer(unitOfWork);
      } // Run beginWork again.


      invokeGuardedCallback(null, beginWork, null, current, unitOfWork, expirationTime);

      if (hasCaughtError()) {
        var replayError = clearCaughtError(); // `invokeGuardedCallback` sometimes sets an expando `_suppressLogging`.
        // Rethrow this error instead of the original one.

        throw replayError;
      } else {
        // This branch is reachable if the render phase is impure.
        throw originalError;
      }
    }
  };
}

var didWarnAboutUpdateInRender = false;
var didWarnAboutUpdateInRenderForAnotherComponent;

{
  didWarnAboutUpdateInRenderForAnotherComponent = new Set();
}

function warnAboutRenderPhaseUpdatesInDEV(fiber) {
  {
    if (isRendering && (executionContext & RenderContext) !== NoContext) {
      switch (fiber.tag) {
        case FunctionComponent:
        case ForwardRef:
        case SimpleMemoComponent:
          {
            var renderingComponentName = workInProgress && getComponentName(workInProgress.type) || 'Unknown'; // Dedupe by the rendering component because it's the one that needs to be fixed.

            var dedupeKey = renderingComponentName;

            if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
              didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
              var setStateComponentName = getComponentName(fiber.type) || 'Unknown';

              error('Cannot update a component (`%s`) while rendering a ' + 'different component (`%s`). To locate the bad setState() call inside `%s`, ' + 'follow the stack trace as described in https://fb.me/setstate-in-render', setStateComponentName, renderingComponentName, renderingComponentName);
            }

            break;
          }

        case ClassComponent:
          {
            if (!didWarnAboutUpdateInRender) {
              error('Cannot update during an existing state transition (such as ' + 'within `render`). Render methods should be a pure ' + 'function of props and state.');

              didWarnAboutUpdateInRender = true;
            }

            break;
          }
      }
    }
  }
} // a 'shared' variable that changes when act() opens/closes in tests.


var IsThisRendererActing = {
  current: false
};
function warnIfNotScopedWithMatchingAct(fiber) {
  {
    if ( IsSomeRendererActing.current === true && IsThisRendererActing.current !== true) {
      error("It looks like you're using the wrong act() around your test interactions.\n" + 'Be sure to use the matching version of act() corresponding to your renderer:\n\n' + '// for react-dom:\n' + "import {act} from 'react-dom/test-utils';\n" + '// ...\n' + 'act(() => ...);\n\n' + '// for react-test-renderer:\n' + "import TestRenderer from 'react-test-renderer';\n" + 'const {act} = TestRenderer;\n' + '// ...\n' + 'act(() => ...);' + '%s', getStackByFiberInDevAndProd(fiber));
    }
  }
}
function warnIfNotCurrentlyActingEffectsInDEV(fiber) {
  {
    if ( (fiber.mode & StrictMode) !== NoMode && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s ran an effect, but was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

function warnIfNotCurrentlyActingUpdatesInDEV(fiber) {
  {
    if ( executionContext === NoContext && IsSomeRendererActing.current === false && IsThisRendererActing.current === false) {
      error('An update to %s inside a test was not wrapped in act(...).\n\n' + 'When testing, code that causes React state updates should be ' + 'wrapped into act(...):\n\n' + 'act(() => {\n' + '  /* fire events that update state */\n' + '});\n' + '/* assert on the output */\n\n' + "This ensures that you're testing the behavior the user would see " + 'in the browser.' + ' Learn more at https://fb.me/react-wrap-tests-with-act' + '%s', getComponentName(fiber.type), getStackByFiberInDevAndProd(fiber));
    }
  }
}

var warnIfNotCurrentlyActingUpdatesInDev = warnIfNotCurrentlyActingUpdatesInDEV; // In tests, we want to enforce a mocked scheduler.

var didWarnAboutUnmockedScheduler = false; // TODO Before we release concurrent mode, revisit this and decide whether a mocked
// scheduler is the actual recommendation. The alternative could be a testing build,
// a new lib, or whatever; we dunno just yet. This message is for early adopters
// to get their tests right.

function warnIfUnmockedScheduler(fiber) {
  {
    if (didWarnAboutUnmockedScheduler === false && Scheduler.unstable_flushAllWithoutAsserting === undefined) {
      if (fiber.mode & BlockingMode || fiber.mode & ConcurrentMode) {
        didWarnAboutUnmockedScheduler = true;

        error('In Concurrent or Sync modes, the "scheduler" module needs to be mocked ' + 'to guarantee consistent behaviour across tests and browsers. ' + 'For example, with jest: \n' + "jest.mock('scheduler', () => require('scheduler/unstable_mock'));\n\n" + 'For more info, visit https://fb.me/react-mock-scheduler');
      }
    }
  }
}

function computeThreadID(root, expirationTime) {
  // Interaction threads are unique per root and expiration time.
  return expirationTime * 1000 + root.interactionThreadID;
}

function markSpawnedWork(expirationTime) {

  if (spawnedWorkDuringRender === null) {
    spawnedWorkDuringRender = [expirationTime];
  } else {
    spawnedWorkDuringRender.push(expirationTime);
  }
}

function scheduleInteractions(root, expirationTime, interactions) {

  if (interactions.size > 0) {
    var pendingInteractionMap = root.pendingInteractionMap;
    var pendingInteractions = pendingInteractionMap.get(expirationTime);

    if (pendingInteractions != null) {
      interactions.forEach(function (interaction) {
        if (!pendingInteractions.has(interaction)) {
          // Update the pending async work count for previously unscheduled interaction.
          interaction.__count++;
        }

        pendingInteractions.add(interaction);
      });
    } else {
      pendingInteractionMap.set(expirationTime, new Set(interactions)); // Update the pending async work count for the current interactions.

      interactions.forEach(function (interaction) {
        interaction.__count++;
      });
    }

    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);
      subscriber.onWorkScheduled(interactions, threadID);
    }
  }
}

function schedulePendingInteractions(root, expirationTime) {

  scheduleInteractions(root, expirationTime, tracing.__interactionsRef.current);
}

function startWorkOnPendingInteractions(root, expirationTime) {
  // we can accurately attribute time spent working on it, And so that cascading
  // work triggered during the render phase will be associated with it.


  var interactions = new Set();
  root.pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
    if (scheduledExpirationTime >= expirationTime) {
      scheduledInteractions.forEach(function (interaction) {
        return interactions.add(interaction);
      });
    }
  }); // Store the current set of interactions on the FiberRoot for a few reasons:
  // We can re-use it in hot functions like performConcurrentWorkOnRoot()
  // without having to recalculate it. We will also use it in commitWork() to
  // pass to any Profiler onRender() hooks. This also provides DevTools with a
  // way to access it when the onCommitRoot() hook is called.

  root.memoizedInteractions = interactions;

  if (interactions.size > 0) {
    var subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null) {
      var threadID = computeThreadID(root, expirationTime);

      try {
        subscriber.onWorkStarted(interactions, threadID);
      } catch (error) {
        // If the subscriber throws, rethrow it in a separate task
        scheduleCallback(ImmediatePriority, function () {
          throw error;
        });
      }
    }
  }
}

function finishPendingInteractions(root, committedExpirationTime) {

  var earliestRemainingTimeAfterCommit = root.firstPendingTime;
  var subscriber;

  try {
    subscriber = tracing.__subscriberRef.current;

    if (subscriber !== null && root.memoizedInteractions.size > 0) {
      var threadID = computeThreadID(root, committedExpirationTime);
      subscriber.onWorkStopped(root.memoizedInteractions, threadID);
    }
  } catch (error) {
    // If the subscriber throws, rethrow it in a separate task
    scheduleCallback(ImmediatePriority, function () {
      throw error;
    });
  } finally {
    // Clear completed interactions from the pending Map.
    // Unless the render was suspended or cascading work was scheduled,
    // In which case– leave pending interactions until the subsequent render.
    var pendingInteractionMap = root.pendingInteractionMap;
    pendingInteractionMap.forEach(function (scheduledInteractions, scheduledExpirationTime) {
      // Only decrement the pending interaction count if we're done.
      // If there's still work at the current priority,
      // That indicates that we are waiting for suspense data.
      if (scheduledExpirationTime > earliestRemainingTimeAfterCommit) {
        pendingInteractionMap.delete(scheduledExpirationTime);
        scheduledInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            try {
              subscriber.onInteractionScheduledWorkCompleted(interaction);
            } catch (error) {
              // If the subscriber throws, rethrow it in a separate task
              scheduleCallback(ImmediatePriority, function () {
                throw error;
              });
            }
          }
        });
      }
    });
  }
}

var onScheduleFiberRoot = null;
var onCommitFiberRoot = null;
var onCommitFiberUnmount = null;
var hasLoggedError = false;
var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== 'undefined';
function injectInternals(internals) {
  if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === 'undefined') {
    // No DevTools
    return false;
  }

  var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;

  if (hook.isDisabled) {
    // This isn't a real property on the hook, but it can be set to opt out
    // of DevTools integration and associated warnings and logs.
    // https://github.com/facebook/react/issues/3877
    return true;
  }

  if (!hook.supportsFiber) {
    {
      error('The installed version of React DevTools is too old and will not work ' + 'with the current version of React. Please update React DevTools. ' + 'https://fb.me/react-devtools');
    } // DevTools exists, even though it doesn't support Fiber.


    return true;
  }

  try {
    var rendererID = hook.inject(internals); // We have successfully injected, so now it is safe to set up hooks.

    if (true) {
      // Only used by Fast Refresh
      if (typeof hook.onScheduleFiberRoot === 'function') {
        onScheduleFiberRoot = function (root, children) {
          try {
            hook.onScheduleFiberRoot(rendererID, root, children);
          } catch (err) {
            if (true && !hasLoggedError) {
              hasLoggedError = true;

              error('React instrumentation encountered an error: %s', err);
            }
          }
        };
      }
    }

    onCommitFiberRoot = function (root, expirationTime) {
      try {
        var didError = (root.current.effectTag & DidCapture) === DidCapture;

        if (enableProfilerTimer) {
          var currentTime = getCurrentTime();
          var priorityLevel = inferPriorityFromExpirationTime(currentTime, expirationTime);
          hook.onCommitFiberRoot(rendererID, root, priorityLevel, didError);
        } else {
          hook.onCommitFiberRoot(rendererID, root, undefined, didError);
        }
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };

    onCommitFiberUnmount = function (fiber) {
      try {
        hook.onCommitFiberUnmount(rendererID, fiber);
      } catch (err) {
        if (true) {
          if (!hasLoggedError) {
            hasLoggedError = true;

            error('React instrumentation encountered an error: %s', err);
          }
        }
      }
    };
  } catch (err) {
    // Catch all errors because it is unsafe to throw during initialization.
    {
      error('React instrumentation encountered an error: %s.', err);
    }
  } // DevTools exists


  return true;
}
function onScheduleRoot(root, children) {
  if (typeof onScheduleFiberRoot === 'function') {
    onScheduleFiberRoot(root, children);
  }
}
function onCommitRoot(root, expirationTime) {
  if (typeof onCommitFiberRoot === 'function') {
    onCommitFiberRoot(root, expirationTime);
  }
}
function onCommitUnmount(fiber) {
  if (typeof onCommitFiberUnmount === 'function') {
    onCommitFiberUnmount(fiber);
  }
}

var hasBadMapPolyfill;

{
  hasBadMapPolyfill = false;

  try {
    var nonExtensibleObject = Object.preventExtensions({});
    var testMap = new Map([[nonExtensibleObject, null]]);
    var testSet = new Set([nonExtensibleObject]); // This is necessary for Rollup to not consider these unused.
    // https://github.com/rollup/rollup/issues/1771
    // TODO: we can remove these if Rollup fixes the bug.

    testMap.set(0, 0);
    testSet.add(0);
  } catch (e) {
    // TODO: Consider warning about bad polyfills
    hasBadMapPolyfill = true;
  }
}

var debugCounter = 1;

function FiberNode(tag, pendingProps, key, mode) {
  // Instance
  this.tag = tag;
  this.key = key;
  this.elementType = null;
  this.type = null;
  this.stateNode = null; // Fiber

  this.return = null;
  this.child = null;
  this.sibling = null;
  this.index = 0;
  this.ref = null;
  this.pendingProps = pendingProps;
  this.memoizedProps = null;
  this.updateQueue = null;
  this.memoizedState = null;
  this.dependencies = null;
  this.mode = mode; // Effects

  this.effectTag = NoEffect;
  this.nextEffect = null;
  this.firstEffect = null;
  this.lastEffect = null;
  this.expirationTime = NoWork;
  this.childExpirationTime = NoWork;
  this.alternate = null;

  {
    // Note: The following is done to avoid a v8 performance cliff.
    //
    // Initializing the fields below to smis and later updating them with
    // double values will cause Fibers to end up having separate shapes.
    // This behavior/bug has something to do with Object.preventExtension().
    // Fortunately this only impacts DEV builds.
    // Unfortunately it makes React unusably slow for some applications.
    // To work around this, initialize the fields below with doubles.
    //
    // Learn more about this here:
    // https://github.com/facebook/react/issues/14365
    // https://bugs.chromium.org/p/v8/issues/detail?id=8538
    this.actualDuration = Number.NaN;
    this.actualStartTime = Number.NaN;
    this.selfBaseDuration = Number.NaN;
    this.treeBaseDuration = Number.NaN; // It's okay to replace the initial doubles with smis after initialization.
    // This won't trigger the performance cliff mentioned above,
    // and it simplifies other profiler code (including DevTools).

    this.actualDuration = 0;
    this.actualStartTime = -1;
    this.selfBaseDuration = 0;
    this.treeBaseDuration = 0;
  } // This is normally DEV-only except www when it adds listeners.
  // TODO: remove the User Timing integration in favor of Root Events.


  {
    this._debugID = debugCounter++;
    this._debugIsCurrentlyTiming = false;
  }

  {
    this._debugSource = null;
    this._debugOwner = null;
    this._debugNeedsRemount = false;
    this._debugHookTypes = null;

    if (!hasBadMapPolyfill && typeof Object.preventExtensions === 'function') {
      Object.preventExtensions(this);
    }
  }
} // This is a constructor function, rather than a POJO constructor, still
// please ensure we do the following:
// 1) Nobody should add any instance methods on this. Instance methods can be
//    more difficult to predict when they get optimized and they are almost
//    never inlined properly in static compilers.
// 2) Nobody should rely on `instanceof Fiber` for type testing. We should
//    always know when it is a fiber.
// 3) We might want to experiment with using numeric keys since they are easier
//    to optimize in a non-JIT environment.
// 4) We can easily go from a constructor to a createFiber object literal if that
//    is faster.
// 5) It should be easy to port this to a C struct and keep a C implementation
//    compatible.


var createFiber = function (tag, pendingProps, key, mode) {
  // $FlowFixMe: the shapes are exact here but Flow doesn't like constructors
  return new FiberNode(tag, pendingProps, key, mode);
};

function shouldConstruct(Component) {
  var prototype = Component.prototype;
  return !!(prototype && prototype.isReactComponent);
}

function isSimpleFunctionComponent(type) {
  return typeof type === 'function' && !shouldConstruct(type) && type.defaultProps === undefined;
}
function resolveLazyComponentTag(Component) {
  if (typeof Component === 'function') {
    return shouldConstruct(Component) ? ClassComponent : FunctionComponent;
  } else if (Component !== undefined && Component !== null) {
    var $$typeof = Component.$$typeof;

    if ($$typeof === REACT_FORWARD_REF_TYPE) {
      return ForwardRef;
    }

    if ($$typeof === REACT_MEMO_TYPE) {
      return MemoComponent;
    }
  }

  return IndeterminateComponent;
} // This is used to create an alternate fiber to do work on.

function createWorkInProgress(current, pendingProps) {
  var workInProgress = current.alternate;

  if (workInProgress === null) {
    // We use a double buffering pooling technique because we know that we'll
    // only ever need at most two versions of a tree. We pool the "other" unused
    // node that we're free to reuse. This is lazily created to avoid allocating
    // extra objects for things that are never updated. It also allow us to
    // reclaim the extra memory if needed.
    workInProgress = createFiber(current.tag, pendingProps, current.key, current.mode);
    workInProgress.elementType = current.elementType;
    workInProgress.type = current.type;
    workInProgress.stateNode = current.stateNode;

    {
      // DEV-only fields
      {
        workInProgress._debugID = current._debugID;
      }

      workInProgress._debugSource = current._debugSource;
      workInProgress._debugOwner = current._debugOwner;
      workInProgress._debugHookTypes = current._debugHookTypes;
    }

    workInProgress.alternate = current;
    current.alternate = workInProgress;
  } else {
    workInProgress.pendingProps = pendingProps; // We already have an alternate.
    // Reset the effect tag.

    workInProgress.effectTag = NoEffect; // The effect list is no longer valid.

    workInProgress.nextEffect = null;
    workInProgress.firstEffect = null;
    workInProgress.lastEffect = null;

    {
      // We intentionally reset, rather than copy, actualDuration & actualStartTime.
      // This prevents time from endlessly accumulating in new commits.
      // This has the downside of resetting values for different priority renders,
      // But works for yielding (the common case) and should support resuming.
      workInProgress.actualDuration = 0;
      workInProgress.actualStartTime = -1;
    }
  }

  workInProgress.childExpirationTime = current.childExpirationTime;
  workInProgress.expirationTime = current.expirationTime;
  workInProgress.child = current.child;
  workInProgress.memoizedProps = current.memoizedProps;
  workInProgress.memoizedState = current.memoizedState;
  workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
  // it cannot be shared with the current fiber.

  var currentDependencies = current.dependencies;
  workInProgress.dependencies = currentDependencies === null ? null : {
    expirationTime: currentDependencies.expirationTime,
    firstContext: currentDependencies.firstContext,
    responders: currentDependencies.responders
  }; // These will be overridden during the parent's reconciliation

  workInProgress.sibling = current.sibling;
  workInProgress.index = current.index;
  workInProgress.ref = current.ref;

  {
    workInProgress.selfBaseDuration = current.selfBaseDuration;
    workInProgress.treeBaseDuration = current.treeBaseDuration;
  }

  {
    workInProgress._debugNeedsRemount = current._debugNeedsRemount;

    switch (workInProgress.tag) {
      case IndeterminateComponent:
      case FunctionComponent:
      case SimpleMemoComponent:
        workInProgress.type = resolveFunctionForHotReloading(current.type);
        break;

      case ClassComponent:
        workInProgress.type = resolveClassForHotReloading(current.type);
        break;

      case ForwardRef:
        workInProgress.type = resolveForwardRefForHotReloading(current.type);
        break;
    }
  }

  return workInProgress;
} // Used to reuse a Fiber for a second pass.

function resetWorkInProgress(workInProgress, renderExpirationTime) {
  // This resets the Fiber to what createFiber or createWorkInProgress would
  // have set the values to before during the first pass. Ideally this wouldn't
  // be necessary but unfortunately many code paths reads from the workInProgress
  // when they should be reading from current and writing to workInProgress.
  // We assume pendingProps, index, key, ref, return are still untouched to
  // avoid doing another reconciliation.
  // Reset the effect tag but keep any Placement tags, since that's something
  // that child fiber is setting, not the reconciliation.
  workInProgress.effectTag &= Placement; // The effect list is no longer valid.

  workInProgress.nextEffect = null;
  workInProgress.firstEffect = null;
  workInProgress.lastEffect = null;
  var current = workInProgress.alternate;

  if (current === null) {
    // Reset to createFiber's initial values.
    workInProgress.childExpirationTime = NoWork;
    workInProgress.expirationTime = renderExpirationTime;
    workInProgress.child = null;
    workInProgress.memoizedProps = null;
    workInProgress.memoizedState = null;
    workInProgress.updateQueue = null;
    workInProgress.dependencies = null;

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = 0;
      workInProgress.treeBaseDuration = 0;
    }
  } else {
    // Reset to the cloned values that createWorkInProgress would've.
    workInProgress.childExpirationTime = current.childExpirationTime;
    workInProgress.expirationTime = current.expirationTime;
    workInProgress.child = current.child;
    workInProgress.memoizedProps = current.memoizedProps;
    workInProgress.memoizedState = current.memoizedState;
    workInProgress.updateQueue = current.updateQueue; // Clone the dependencies object. This is mutated during the render phase, so
    // it cannot be shared with the current fiber.

    var currentDependencies = current.dependencies;
    workInProgress.dependencies = currentDependencies === null ? null : {
      expirationTime: currentDependencies.expirationTime,
      firstContext: currentDependencies.firstContext,
      responders: currentDependencies.responders
    };

    {
      // Note: We don't reset the actualTime counts. It's useful to accumulate
      // actual time across multiple render passes.
      workInProgress.selfBaseDuration = current.selfBaseDuration;
      workInProgress.treeBaseDuration = current.treeBaseDuration;
    }
  }

  return workInProgress;
}
function createHostRootFiber(tag) {
  var mode;

  if (tag === ConcurrentRoot) {
    mode = ConcurrentMode | BlockingMode | StrictMode;
  } else if (tag === BlockingRoot) {
    mode = BlockingMode | StrictMode;
  } else {
    mode = NoMode;
  }

  if ( isDevToolsPresent) {
    // Always collect profile timings when DevTools are present.
    // This enables DevTools to start capturing timing at any point–
    // Without some nodes in the tree having empty base times.
    mode |= ProfileMode;
  }

  return createFiber(HostRoot, null, null, mode);
}
function createFiberFromTypeAndProps(type, // React$ElementType
key, pendingProps, owner, mode, expirationTime) {
  var fiber;
  var fiberTag = IndeterminateComponent; // The resolved type is set if we know what the final type will be. I.e. it's not lazy.

  var resolvedType = type;

  if (typeof type === 'function') {
    if (shouldConstruct(type)) {
      fiberTag = ClassComponent;

      {
        resolvedType = resolveClassForHotReloading(resolvedType);
      }
    } else {
      {
        resolvedType = resolveFunctionForHotReloading(resolvedType);
      }
    }
  } else if (typeof type === 'string') {
    fiberTag = HostComponent;
  } else {
    getTag: switch (type) {
      case REACT_FRAGMENT_TYPE:
        return createFiberFromFragment(pendingProps.children, mode, expirationTime, key);

      case REACT_CONCURRENT_MODE_TYPE:
        fiberTag = Mode;
        mode |= ConcurrentMode | BlockingMode | StrictMode;
        break;

      case REACT_STRICT_MODE_TYPE:
        fiberTag = Mode;
        mode |= StrictMode;
        break;

      case REACT_PROFILER_TYPE:
        return createFiberFromProfiler(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_TYPE:
        return createFiberFromSuspense(pendingProps, mode, expirationTime, key);

      case REACT_SUSPENSE_LIST_TYPE:
        return createFiberFromSuspenseList(pendingProps, mode, expirationTime, key);

      default:
        {
          if (typeof type === 'object' && type !== null) {
            switch (type.$$typeof) {
              case REACT_PROVIDER_TYPE:
                fiberTag = ContextProvider;
                break getTag;

              case REACT_CONTEXT_TYPE:
                // This is a consumer
                fiberTag = ContextConsumer;
                break getTag;

              case REACT_FORWARD_REF_TYPE:
                fiberTag = ForwardRef;

                {
                  resolvedType = resolveForwardRefForHotReloading(resolvedType);
                }

                break getTag;

              case REACT_MEMO_TYPE:
                fiberTag = MemoComponent;
                break getTag;

              case REACT_LAZY_TYPE:
                fiberTag = LazyComponent;
                resolvedType = null;
                break getTag;

              case REACT_BLOCK_TYPE:
                fiberTag = Block;
                break getTag;

            }
          }

          var info = '';

          {
            if (type === undefined || typeof type === 'object' && type !== null && Object.keys(type).length === 0) {
              info += ' You likely forgot to export your component from the file ' + "it's defined in, or you might have mixed up default and " + 'named imports.';
            }

            var ownerName = owner ? getComponentName(owner.type) : null;

            if (ownerName) {
              info += '\n\nCheck the render method of `' + ownerName + '`.';
            }
          }

          {
            {
              throw Error( "Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) but got: " + (type == null ? type : typeof type) + "." + info );
            }
          }
        }
    }
  }

  fiber = createFiber(fiberTag, pendingProps, key, mode);
  fiber.elementType = type;
  fiber.type = resolvedType;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromElement(element, mode, expirationTime) {
  var owner = null;

  {
    owner = element._owner;
  }

  var type = element.type;
  var key = element.key;
  var pendingProps = element.props;
  var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, expirationTime);

  {
    fiber._debugSource = element._source;
    fiber._debugOwner = element._owner;
  }

  return fiber;
}
function createFiberFromFragment(elements, mode, expirationTime, key) {
  var fiber = createFiber(Fragment, elements, key, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromProfiler(pendingProps, mode, expirationTime, key) {
  {
    if (typeof pendingProps.id !== 'string' || typeof pendingProps.onRender !== 'function') {
      error('Profiler must specify an "id" string and "onRender" function as props');
    }
  }

  var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode); // TODO: The Profiler fiber shouldn't have a type. It has a tag.

  fiber.elementType = REACT_PROFILER_TYPE;
  fiber.type = REACT_PROFILER_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}

function createFiberFromSuspense(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseComponent, pendingProps, key, mode); // TODO: The SuspenseComponent fiber shouldn't have a type. It has a tag.
  // This needs to be fixed in getComponentName so that it relies on the tag
  // instead.

  fiber.type = REACT_SUSPENSE_TYPE;
  fiber.elementType = REACT_SUSPENSE_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromSuspenseList(pendingProps, mode, expirationTime, key) {
  var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);

  {
    // TODO: The SuspenseListComponent fiber shouldn't have a type. It has a tag.
    // This needs to be fixed in getComponentName so that it relies on the tag
    // instead.
    fiber.type = REACT_SUSPENSE_LIST_TYPE;
  }

  fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromText(content, mode, expirationTime) {
  var fiber = createFiber(HostText, content, null, mode);
  fiber.expirationTime = expirationTime;
  return fiber;
}
function createFiberFromHostInstanceForDeletion() {
  var fiber = createFiber(HostComponent, null, null, NoMode); // TODO: These should not need a type.

  fiber.elementType = 'DELETED';
  fiber.type = 'DELETED';
  return fiber;
}
function createFiberFromPortal(portal, mode, expirationTime) {
  var pendingProps = portal.children !== null ? portal.children : [];
  var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
  fiber.expirationTime = expirationTime;
  fiber.stateNode = {
    containerInfo: portal.containerInfo,
    pendingChildren: null,
    // Used by persistent updates
    implementation: portal.implementation
  };
  return fiber;
} // Used for stashing WIP properties to replay failed work in DEV.

function assignFiberPropertiesInDEV(target, source) {
  if (target === null) {
    // This Fiber's initial properties will always be overwritten.
    // We only use a Fiber to ensure the same hidden class so DEV isn't slow.
    target = createFiber(IndeterminateComponent, null, null, NoMode);
  } // This is intentionally written as a list of all properties.
  // We tried to use Object.assign() instead but this is called in
  // the hottest path, and Object.assign() was too slow:
  // https://github.com/facebook/react/issues/12502
  // This code is DEV-only so size is not a concern.


  target.tag = source.tag;
  target.key = source.key;
  target.elementType = source.elementType;
  target.type = source.type;
  target.stateNode = source.stateNode;
  target.return = source.return;
  target.child = source.child;
  target.sibling = source.sibling;
  target.index = source.index;
  target.ref = source.ref;
  target.pendingProps = source.pendingProps;
  target.memoizedProps = source.memoizedProps;
  target.updateQueue = source.updateQueue;
  target.memoizedState = source.memoizedState;
  target.dependencies = source.dependencies;
  target.mode = source.mode;
  target.effectTag = source.effectTag;
  target.nextEffect = source.nextEffect;
  target.firstEffect = source.firstEffect;
  target.lastEffect = source.lastEffect;
  target.expirationTime = source.expirationTime;
  target.childExpirationTime = source.childExpirationTime;
  target.alternate = source.alternate;

  {
    target.actualDuration = source.actualDuration;
    target.actualStartTime = source.actualStartTime;
    target.selfBaseDuration = source.selfBaseDuration;
    target.treeBaseDuration = source.treeBaseDuration;
  }

  {
    target._debugID = source._debugID;
  }

  target._debugSource = source._debugSource;
  target._debugOwner = source._debugOwner;
  target._debugIsCurrentlyTiming = source._debugIsCurrentlyTiming;
  target._debugNeedsRemount = source._debugNeedsRemount;
  target._debugHookTypes = source._debugHookTypes;
  return target;
}

function FiberRootNode(containerInfo, tag, hydrate) {
  this.tag = tag;
  this.current = null;
  this.containerInfo = containerInfo;
  this.pendingChildren = null;
  this.pingCache = null;
  this.finishedExpirationTime = NoWork;
  this.finishedWork = null;
  this.timeoutHandle = noTimeout;
  this.context = null;
  this.pendingContext = null;
  this.hydrate = hydrate;
  this.callbackNode = null;
  this.callbackPriority = NoPriority;
  this.firstPendingTime = NoWork;
  this.firstSuspendedTime = NoWork;
  this.lastSuspendedTime = NoWork;
  this.nextKnownPendingLevel = NoWork;
  this.lastPingedTime = NoWork;
  this.lastExpiredTime = NoWork;

  {
    this.interactionThreadID = tracing.unstable_getThreadID();
    this.memoizedInteractions = new Set();
    this.pendingInteractionMap = new Map();
  }
}

function createFiberRoot(containerInfo, tag, hydrate, hydrationCallbacks) {
  var root = new FiberRootNode(containerInfo, tag, hydrate);
  // stateNode is any.


  var uninitializedFiber = createHostRootFiber(tag);
  root.current = uninitializedFiber;
  uninitializedFiber.stateNode = root;
  initializeUpdateQueue(uninitializedFiber);
  return root;
}
function isRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;
  return firstSuspendedTime !== NoWork && firstSuspendedTime >= expirationTime && lastSuspendedTime <= expirationTime;
}
function markRootSuspendedAtTime(root, expirationTime) {
  var firstSuspendedTime = root.firstSuspendedTime;
  var lastSuspendedTime = root.lastSuspendedTime;

  if (firstSuspendedTime < expirationTime) {
    root.firstSuspendedTime = expirationTime;
  }

  if (lastSuspendedTime > expirationTime || firstSuspendedTime === NoWork) {
    root.lastSuspendedTime = expirationTime;
  }

  if (expirationTime <= root.lastPingedTime) {
    root.lastPingedTime = NoWork;
  }

  if (expirationTime <= root.lastExpiredTime) {
    root.lastExpiredTime = NoWork;
  }
}
function markRootUpdatedAtTime(root, expirationTime) {
  // Update the range of pending times
  var firstPendingTime = root.firstPendingTime;

  if (expirationTime > firstPendingTime) {
    root.firstPendingTime = expirationTime;
  } // Update the range of suspended times. Treat everything lower priority or
  // equal to this update as unsuspended.


  var firstSuspendedTime = root.firstSuspendedTime;

  if (firstSuspendedTime !== NoWork) {
    if (expirationTime >= firstSuspendedTime) {
      // The entire suspended range is now unsuspended.
      root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
    } else if (expirationTime >= root.lastSuspendedTime) {
      root.lastSuspendedTime = expirationTime + 1;
    } // This is a pending level. Check if it's higher priority than the next
    // known pending level.


    if (expirationTime > root.nextKnownPendingLevel) {
      root.nextKnownPendingLevel = expirationTime;
    }
  }
}
function markRootFinishedAtTime(root, finishedExpirationTime, remainingExpirationTime) {
  // Update the range of pending times
  root.firstPendingTime = remainingExpirationTime; // Update the range of suspended times. Treat everything higher priority or
  // equal to this update as unsuspended.

  if (finishedExpirationTime <= root.lastSuspendedTime) {
    // The entire suspended range is now unsuspended.
    root.firstSuspendedTime = root.lastSuspendedTime = root.nextKnownPendingLevel = NoWork;
  } else if (finishedExpirationTime <= root.firstSuspendedTime) {
    // Part of the suspended range is now unsuspended. Narrow the range to
    // include everything between the unsuspended time (non-inclusive) and the
    // last suspended time.
    root.firstSuspendedTime = finishedExpirationTime - 1;
  }

  if (finishedExpirationTime <= root.lastPingedTime) {
    // Clear the pinged time
    root.lastPingedTime = NoWork;
  }

  if (finishedExpirationTime <= root.lastExpiredTime) {
    // Clear the expired time
    root.lastExpiredTime = NoWork;
  }
}
function markRootExpiredAtTime(root, expirationTime) {
  var lastExpiredTime = root.lastExpiredTime;

  if (lastExpiredTime === NoWork || lastExpiredTime > expirationTime) {
    root.lastExpiredTime = expirationTime;
  }
}

var didWarnAboutNestedUpdates;
var didWarnAboutFindNodeInStrictMode;

{
  didWarnAboutNestedUpdates = false;
  didWarnAboutFindNodeInStrictMode = {};
}

function getContextForSubtree(parentComponent) {
  if (!parentComponent) {
    return emptyContextObject;
  }

  var fiber = get(parentComponent);
  var parentContext = findCurrentUnmaskedContext(fiber);

  if (fiber.tag === ClassComponent) {
    var Component = fiber.type;

    if (isContextProvider(Component)) {
      return processChildContext(fiber, Component, parentContext);
    }
  }

  return parentContext;
}

function findHostInstanceWithWarning(component, methodName) {
  {
    var fiber = get(component);

    if (fiber === undefined) {
      if (typeof component.render === 'function') {
        {
          {
            throw Error( "Unable to find node on an unmounted component." );
          }
        }
      } else {
        {
          {
            throw Error( "Argument appears to not be a ReactComponent. Keys: " + Object.keys(component) );
          }
        }
      }
    }

    var hostFiber = findCurrentHostFiber(fiber);

    if (hostFiber === null) {
      return null;
    }

    if (hostFiber.mode & StrictMode) {
      var componentName = getComponentName(fiber.type) || 'Component';

      if (!didWarnAboutFindNodeInStrictMode[componentName]) {
        didWarnAboutFindNodeInStrictMode[componentName] = true;

        if (fiber.mode & StrictMode) {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which is inside StrictMode. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        } else {
          error('%s is deprecated in StrictMode. ' + '%s was passed an instance of %s which renders StrictMode children. ' + 'Instead, add a ref directly to the element you want to reference. ' + 'Learn more about using refs safely here: ' + 'https://fb.me/react-strict-mode-find-node%s', methodName, methodName, componentName, getStackByFiberInDevAndProd(hostFiber));
        }
      }
    }

    return hostFiber.stateNode;
  }
}

function createContainer(containerInfo, tag, hydrate, hydrationCallbacks) {
  return createFiberRoot(containerInfo, tag, hydrate);
}
function updateContainer(element, container, parentComponent, callback) {
  {
    onScheduleRoot(container, element);
  }

  var current$1 = container.current;
  var currentTime = requestCurrentTimeForUpdate();

  {
    // $FlowExpectedError - jest isn't a global, and isn't recognized outside of tests
    if ('undefined' !== typeof jest) {
      warnIfUnmockedScheduler(current$1);
      warnIfNotScopedWithMatchingAct(current$1);
    }
  }

  var suspenseConfig = requestCurrentSuspenseConfig();
  var expirationTime = computeExpirationForFiber(currentTime, current$1, suspenseConfig);
  var context = getContextForSubtree(parentComponent);

  if (container.context === null) {
    container.context = context;
  } else {
    container.pendingContext = context;
  }

  {
    if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
      didWarnAboutNestedUpdates = true;

      error('Render methods should be a pure function of props and state; ' + 'triggering nested component updates from render is not allowed. ' + 'If necessary, trigger nested updates in componentDidUpdate.\n\n' + 'Check the render method of %s.', getComponentName(current.type) || 'Unknown');
    }
  }

  var update = createUpdate(expirationTime, suspenseConfig); // Caution: React DevTools currently depends on this property
  // being called "element".

  update.payload = {
    element: element
  };
  callback = callback === undefined ? null : callback;

  if (callback !== null) {
    {
      if (typeof callback !== 'function') {
        error('render(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callback);
      }
    }

    update.callback = callback;
  }

  enqueueUpdate(current$1, update);
  scheduleWork(current$1, expirationTime);
  return expirationTime;
}
function getPublicRootInstance(container) {
  var containerFiber = container.current;

  if (!containerFiber.child) {
    return null;
  }

  switch (containerFiber.child.tag) {
    case HostComponent:
      return getPublicInstance(containerFiber.child.stateNode);

    default:
      return containerFiber.child.stateNode;
  }
}

function markRetryTimeImpl(fiber, retryTime) {
  var suspenseState = fiber.memoizedState;

  if (suspenseState !== null && suspenseState.dehydrated !== null) {
    if (suspenseState.retryTime < retryTime) {
      suspenseState.retryTime = retryTime;
    }
  }
} // Increases the priority of thennables when they resolve within this boundary.


function markRetryTimeIfNotHydrated(fiber, retryTime) {
  markRetryTimeImpl(fiber, retryTime);
  var alternate = fiber.alternate;

  if (alternate) {
    markRetryTimeImpl(alternate, retryTime);
  }
}

function attemptUserBlockingHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  var expTime = computeInteractiveExpiration(requestCurrentTimeForUpdate());
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function attemptContinuousHydration$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority and they should not suspend on I/O,
    // since you have to wrap anything that might suspend in
    // Suspense.
    return;
  }

  scheduleWork(fiber, ContinuousHydration);
  markRetryTimeIfNotHydrated(fiber, ContinuousHydration);
}
function attemptHydrationAtCurrentPriority$1(fiber) {
  if (fiber.tag !== SuspenseComponent) {
    // We ignore HostRoots here because we can't increase
    // their priority other than synchronously flush it.
    return;
  }

  var currentTime = requestCurrentTimeForUpdate();
  var expTime = computeExpirationForFiber(currentTime, fiber, null);
  scheduleWork(fiber, expTime);
  markRetryTimeIfNotHydrated(fiber, expTime);
}
function findHostInstanceWithNoPortals(fiber) {
  var hostFiber = findCurrentHostFiberWithNoPortals(fiber);

  if (hostFiber === null) {
    return null;
  }

  if (hostFiber.tag === FundamentalComponent) {
    return hostFiber.stateNode.instance;
  }

  return hostFiber.stateNode;
}

var shouldSuspendImpl = function (fiber) {
  return false;
};

function shouldSuspend(fiber) {
  return shouldSuspendImpl(fiber);
}
var overrideHookState = null;
var overrideProps = null;
var scheduleUpdate = null;
var setSuspenseHandler = null;

{
  var copyWithSetImpl = function (obj, path, idx, value) {
    if (idx >= path.length) {
      return value;
    }

    var key = path[idx];
    var updated = Array.isArray(obj) ? obj.slice() : _assign({}, obj); // $FlowFixMe number or string is fine here

    updated[key] = copyWithSetImpl(obj[key], path, idx + 1, value);
    return updated;
  };

  var copyWithSet = function (obj, path, value) {
    return copyWithSetImpl(obj, path, 0, value);
  }; // Support DevTools editable values for useState and useReducer.


  overrideHookState = function (fiber, id, path, value) {
    // For now, the "id" of stateful hooks is just the stateful hook index.
    // This may change in the future with e.g. nested hooks.
    var currentHook = fiber.memoizedState;

    while (currentHook !== null && id > 0) {
      currentHook = currentHook.next;
      id--;
    }

    if (currentHook !== null) {
      var newState = copyWithSet(currentHook.memoizedState, path, value);
      currentHook.memoizedState = newState;
      currentHook.baseState = newState; // We aren't actually adding an update to the queue,
      // because there is no update we can add for useReducer hooks that won't trigger an error.
      // (There's no appropriate action type for DevTools overrides.)
      // As a result though, React will see the scheduled update as a noop and bailout.
      // Shallow cloning props works as a workaround for now to bypass the bailout check.

      fiber.memoizedProps = _assign({}, fiber.memoizedProps);
      scheduleWork(fiber, Sync);
    }
  }; // Support DevTools props for function components, forwardRef, memo, host components, etc.


  overrideProps = function (fiber, path, value) {
    fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);

    if (fiber.alternate) {
      fiber.alternate.pendingProps = fiber.pendingProps;
    }

    scheduleWork(fiber, Sync);
  };

  scheduleUpdate = function (fiber) {
    scheduleWork(fiber, Sync);
  };

  setSuspenseHandler = function (newShouldSuspendImpl) {
    shouldSuspendImpl = newShouldSuspendImpl;
  };
}

function injectIntoDevTools(devToolsConfig) {
  var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
  var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
  return injectInternals(_assign({}, devToolsConfig, {
    overrideHookState: overrideHookState,
    overrideProps: overrideProps,
    setSuspenseHandler: setSuspenseHandler,
    scheduleUpdate: scheduleUpdate,
    currentDispatcherRef: ReactCurrentDispatcher,
    findHostInstanceByFiber: function (fiber) {
      var hostFiber = findCurrentHostFiber(fiber);

      if (hostFiber === null) {
        return null;
      }

      return hostFiber.stateNode;
    },
    findFiberByHostInstance: function (instance) {
      if (!findFiberByHostInstance) {
        // Might not be implemented by the renderer.
        return null;
      }

      return findFiberByHostInstance(instance);
    },
    // React Refresh
    findHostInstancesForRefresh:  findHostInstancesForRefresh ,
    scheduleRefresh:  scheduleRefresh ,
    scheduleRoot:  scheduleRoot ,
    setRefreshHandler:  setRefreshHandler ,
    // Enables DevTools to append owner stacks to error messages in DEV mode.
    getCurrentFiber:  function () {
      return current;
    }
  }));
}
var IsSomeRendererActing$1 = ReactSharedInternals.IsSomeRendererActing;

function ReactDOMRoot(container, options) {
  this._internalRoot = createRootImpl(container, ConcurrentRoot, options);
}

function ReactDOMBlockingRoot(container, tag, options) {
  this._internalRoot = createRootImpl(container, tag, options);
}

ReactDOMRoot.prototype.render = ReactDOMBlockingRoot.prototype.render = function (children) {
  var root = this._internalRoot;

  {
    if (typeof arguments[1] === 'function') {
      error('render(...): does not support the second callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }

    var container = root.containerInfo;

    if (container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(root.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of the ' + 'root container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + "root.unmount() to empty a root's container.");
        }
      }
    }
  }

  updateContainer(children, root, null, null);
};

ReactDOMRoot.prototype.unmount = ReactDOMBlockingRoot.prototype.unmount = function () {
  {
    if (typeof arguments[0] === 'function') {
      error('unmount(...): does not support a callback argument. ' + 'To execute a side effect after rendering, declare it in a component body with useEffect().');
    }
  }

  var root = this._internalRoot;
  var container = root.containerInfo;
  updateContainer(null, root, null, function () {
    unmarkContainerAsRoot(container);
  });
};

function createRootImpl(container, tag, options) {
  // Tag is either LegacyRoot or Concurrent Root
  var hydrate = options != null && options.hydrate === true;
  var hydrationCallbacks = options != null && options.hydrationOptions || null;
  var root = createContainer(container, tag, hydrate);
  markContainerAsRoot(root.current, container);

  if (hydrate && tag !== LegacyRoot) {
    var doc = container.nodeType === DOCUMENT_NODE ? container : container.ownerDocument;
    eagerlyTrapReplayableEvents(container, doc);
  }

  return root;
}
function createLegacyRoot(container, options) {
  return new ReactDOMBlockingRoot(container, LegacyRoot, options);
}
function isValidContainer(node) {
  return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === ' react-mount-point-unstable '));
}

var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
var topLevelUpdateWarnings;
var warnedAboutHydrateAPI = false;

{
  topLevelUpdateWarnings = function (container) {
    if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
      var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer._internalRoot.current);

      if (hostInstance) {
        if (hostInstance.parentNode !== container) {
          error('render(...): It looks like the React-rendered content of this ' + 'container was removed without using React. This is not ' + 'supported and will cause errors. Instead, call ' + 'ReactDOM.unmountComponentAtNode to empty a container.');
        }
      }
    }

    var isRootRenderedBySomeReact = !!container._reactRootContainer;
    var rootEl = getReactRootElementInContainer(container);
    var hasNonRootReactChild = !!(rootEl && getInstanceFromNode$1(rootEl));

    if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
      error('render(...): Replacing React-rendered children with a new root ' + 'component. If you intended to update the children of this node, ' + 'you should instead have the existing children update their state ' + 'and render the new components instead of calling ReactDOM.render.');
    }

    if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === 'BODY') {
      error('render(): Rendering components directly into document.body is ' + 'discouraged, since its children are often manipulated by third-party ' + 'scripts and browser extensions. This may lead to subtle ' + 'reconciliation issues. Try rendering into a container element created ' + 'for your app.');
    }
  };
}

function getReactRootElementInContainer(container) {
  if (!container) {
    return null;
  }

  if (container.nodeType === DOCUMENT_NODE) {
    return container.documentElement;
  } else {
    return container.firstChild;
  }
}

function shouldHydrateDueToLegacyHeuristic(container) {
  var rootElement = getReactRootElementInContainer(container);
  return !!(rootElement && rootElement.nodeType === ELEMENT_NODE && rootElement.hasAttribute(ROOT_ATTRIBUTE_NAME));
}

function legacyCreateRootFromDOMContainer(container, forceHydrate) {
  var shouldHydrate = forceHydrate || shouldHydrateDueToLegacyHeuristic(container); // First clear any existing content.

  if (!shouldHydrate) {
    var warned = false;
    var rootSibling;

    while (rootSibling = container.lastChild) {
      {
        if (!warned && rootSibling.nodeType === ELEMENT_NODE && rootSibling.hasAttribute(ROOT_ATTRIBUTE_NAME)) {
          warned = true;

          error('render(): Target node has markup rendered by React, but there ' + 'are unrelated nodes as well. This is most commonly caused by ' + 'white-space inserted around server-rendered markup.');
        }
      }

      container.removeChild(rootSibling);
    }
  }

  {
    if (shouldHydrate && !forceHydrate && !warnedAboutHydrateAPI) {
      warnedAboutHydrateAPI = true;

      warn('render(): Calling ReactDOM.render() to hydrate server-rendered markup ' + 'will stop working in React v17. Replace the ReactDOM.render() call ' + 'with ReactDOM.hydrate() if you want React to attach to the server HTML.');
    }
  }

  return createLegacyRoot(container, shouldHydrate ? {
    hydrate: true
  } : undefined);
}

function warnOnInvalidCallback$1(callback, callerName) {
  {
    if (callback !== null && typeof callback !== 'function') {
      error('%s(...): Expected the last optional `callback` argument to be a ' + 'function. Instead received: %s.', callerName, callback);
    }
  }
}

function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
  {
    topLevelUpdateWarnings(container);
    warnOnInvalidCallback$1(callback === undefined ? null : callback, 'render');
  } // TODO: Without `any` type, Flow says "Property cannot be accessed on any
  // member of intersection type." Whyyyyyy.


  var root = container._reactRootContainer;
  var fiberRoot;

  if (!root) {
    // Initial mount
    root = container._reactRootContainer = legacyCreateRootFromDOMContainer(container, forceHydrate);
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);
        originalCallback.call(instance);
      };
    } // Initial mount should not be batched.


    unbatchedUpdates(function () {
      updateContainer(children, fiberRoot, parentComponent, callback);
    });
  } else {
    fiberRoot = root._internalRoot;

    if (typeof callback === 'function') {
      var _originalCallback = callback;

      callback = function () {
        var instance = getPublicRootInstance(fiberRoot);

        _originalCallback.call(instance);
      };
    } // Update


    updateContainer(children, fiberRoot, parentComponent, callback);
  }

  return getPublicRootInstance(fiberRoot);
}

function findDOMNode(componentOrElement) {
  {
    var owner = ReactCurrentOwner$3.current;

    if (owner !== null && owner.stateNode !== null) {
      var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;

      if (!warnedAboutRefsInRender) {
        error('%s is accessing findDOMNode inside its render(). ' + 'render() should be a pure function of props and state. It should ' + 'never access something that requires stale data from the previous ' + 'render, such as refs. Move this logic to componentDidMount and ' + 'componentDidUpdate instead.', getComponentName(owner.type) || 'A component');
      }

      owner.stateNode._warnedAboutRefsInRender = true;
    }
  }

  if (componentOrElement == null) {
    return null;
  }

  if (componentOrElement.nodeType === ELEMENT_NODE) {
    return componentOrElement;
  }

  {
    return findHostInstanceWithWarning(componentOrElement, 'findDOMNode');
  }
}
function hydrate(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.hydrate() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call createRoot(container, {hydrate: true}).render(element)?');
    }
  } // TODO: throw or warn if we couldn't hydrate?


  return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
}
function render(element, container, callback) {
  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.render() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. ' + 'Did you mean to call root.render(element)?');
    }
  }

  return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
}
function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
  if (!isValidContainer(containerNode)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  }

  if (!(parentComponent != null && has(parentComponent))) {
    {
      throw Error( "parentComponent must be a valid React Component" );
    }
  }

  return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
}
function unmountComponentAtNode(container) {
  if (!isValidContainer(container)) {
    {
      throw Error( "unmountComponentAtNode(...): Target container is not a DOM element." );
    }
  }

  {
    var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === undefined;

    if (isModernRoot) {
      error('You are calling ReactDOM.unmountComponentAtNode() on a container that was previously ' + 'passed to ReactDOM.createRoot(). This is not supported. Did you mean to call root.unmount()?');
    }
  }

  if (container._reactRootContainer) {
    {
      var rootEl = getReactRootElementInContainer(container);
      var renderedByDifferentReact = rootEl && !getInstanceFromNode$1(rootEl);

      if (renderedByDifferentReact) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by another copy of React.');
      }
    } // Unmount should not be batched.


    unbatchedUpdates(function () {
      legacyRenderSubtreeIntoContainer(null, null, container, false, function () {
        // $FlowFixMe This should probably use `delete container._reactRootContainer`
        container._reactRootContainer = null;
        unmarkContainerAsRoot(container);
      });
    }); // If you call unmountComponentAtNode twice in quick succession, you'll
    // get `true` twice. That's probably fine?

    return true;
  } else {
    {
      var _rootEl = getReactRootElementInContainer(container);

      var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode$1(_rootEl)); // Check if the container itself is a React root node.

      var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainer(container.parentNode) && !!container.parentNode._reactRootContainer;

      if (hasNonRootReactChild) {
        error("unmountComponentAtNode(): The node you're attempting to unmount " + 'was rendered by React and is not a top-level container. %s', isContainerReactRoot ? 'You may have accidentally passed in a React root node instead ' + 'of its container.' : 'Instead, have the parent component update its state and ' + 'rerender in order to remove this component.');
      }
    }

    return false;
  }
}

function createPortal(children, containerInfo, // TODO: figure out the API for cross-renderer implementation.
implementation) {
  var key = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;
  return {
    // This tag allow us to uniquely identify this as a React Portal
    $$typeof: REACT_PORTAL_TYPE,
    key: key == null ? null : '' + key,
    children: children,
    containerInfo: containerInfo,
    implementation: implementation
  };
}

var ReactVersion = '16.14.0';

setAttemptUserBlockingHydration(attemptUserBlockingHydration$1);
setAttemptContinuousHydration(attemptContinuousHydration$1);
setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
var didWarnAboutUnstableCreatePortal = false;

{
  if (typeof Map !== 'function' || // $FlowIssue Flow incorrectly thinks Map has no prototype
  Map.prototype == null || typeof Map.prototype.forEach !== 'function' || typeof Set !== 'function' || // $FlowIssue Flow incorrectly thinks Set has no prototype
  Set.prototype == null || typeof Set.prototype.clear !== 'function' || typeof Set.prototype.forEach !== 'function') {
    error('React depends on Map and Set built-in types. Make sure that you load a ' + 'polyfill in older browsers. https://fb.me/react-polyfills');
  }
}

setRestoreImplementation(restoreControlledState$3);
setBatchingImplementation(batchedUpdates$1, discreteUpdates$1, flushDiscreteUpdates, batchedEventUpdates$1);

function createPortal$1(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  if (!isValidContainer(container)) {
    {
      throw Error( "Target container is not a DOM element." );
    }
  } // TODO: pass ReactDOM portal implementation as third argument
  // $FlowFixMe The Flow type is opaque but there's no way to actually create it.


  return createPortal(children, container, null, key);
}

function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {

  return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
}

function unstable_createPortal(children, container) {
  var key = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;

  {
    if (!didWarnAboutUnstableCreatePortal) {
      didWarnAboutUnstableCreatePortal = true;

      warn('The ReactDOM.unstable_createPortal() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactDOM.createPortal() instead. It has the exact same API, ' + 'but without the "unstable_" prefix.');
    }
  }

  return createPortal$1(children, container, key);
}

var Internals = {
  // Keep in sync with ReactDOMUnstableNativeDependencies.js
  // ReactTestUtils.js, and ReactTestUtilsAct.js. This is an array for better minification.
  Events: [getInstanceFromNode$1, getNodeFromInstance$1, getFiberCurrentPropsFromNode$1, injectEventPluginsByName, eventNameDispatchConfigs, accumulateTwoPhaseDispatches, accumulateDirectDispatches, enqueueStateRestore, restoreStateIfNeeded, dispatchEvent, runEventsInBatch, flushPassiveEffects, IsThisRendererActing]
};
var foundDevTools = injectIntoDevTools({
  findFiberByHostInstance: getClosestInstanceFromNode,
  bundleType:  1 ,
  version: ReactVersion,
  rendererPackageName: 'react-dom'
});

{
  if (!foundDevTools && canUseDOM && window.top === window.self) {
    // If we're in Chrome or Firefox, provide a download link if not installed.
    if (navigator.userAgent.indexOf('Chrome') > -1 && navigator.userAgent.indexOf('Edge') === -1 || navigator.userAgent.indexOf('Firefox') > -1) {
      var protocol = window.location.protocol; // Don't warn in exotic cases like chrome-extension://.

      if (/^(https?|file):$/.test(protocol)) {
        // eslint-disable-next-line react-internal/no-production-logging
        console.info('%cDownload the React DevTools ' + 'for a better development experience: ' + 'https://fb.me/react-devtools' + (protocol === 'file:' ? '\nYou might need to use a local HTTP server (instead of file://): ' + 'https://fb.me/react-devtools-faq' : ''), 'font-weight:bold');
      }
    }
  }
}

exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
exports.createPortal = createPortal$1;
exports.findDOMNode = findDOMNode;
exports.flushSync = flushSync;
exports.hydrate = hydrate;
exports.render = render;
exports.unmountComponentAtNode = unmountComponentAtNode;
exports.unstable_batchedUpdates = batchedUpdates$1;
exports.unstable_createPortal = unstable_createPortal;
exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
exports.version = ReactVersion;
  })();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 85 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {

if (process.env.NODE_ENV === 'production') {
  module.exports = __webpack_require__(86);
} else {
  module.exports = __webpack_require__(87);
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 86 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v0.19.1
 * scheduler-tracing.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var b=0;exports.__interactionsRef=null;exports.__subscriberRef=null;exports.unstable_clear=function(a){return a()};exports.unstable_getCurrent=function(){return null};exports.unstable_getThreadID=function(){return++b};exports.unstable_subscribe=function(){};exports.unstable_trace=function(a,d,c){return c()};exports.unstable_unsubscribe=function(){};exports.unstable_wrap=function(a){return a};


/***/ }),
/* 87 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v0.19.1
 * scheduler-tracing.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

var DEFAULT_THREAD_ID = 0; // Counters used to generate unique IDs.

var interactionIDCounter = 0;
var threadIDCounter = 0; // Set of currently traced interactions.
// Interactions "stack"–
// Meaning that newly traced interactions are appended to the previously active set.
// When an interaction goes out of scope, the previous set (if any) is restored.

exports.__interactionsRef = null; // Listener(s) to notify when interactions begin and end.

exports.__subscriberRef = null;

{
  exports.__interactionsRef = {
    current: new Set()
  };
  exports.__subscriberRef = {
    current: null
  };
}
function unstable_clear(callback) {

  var prevInteractions = exports.__interactionsRef.current;
  exports.__interactionsRef.current = new Set();

  try {
    return callback();
  } finally {
    exports.__interactionsRef.current = prevInteractions;
  }
}
function unstable_getCurrent() {
  {
    return exports.__interactionsRef.current;
  }
}
function unstable_getThreadID() {
  return ++threadIDCounter;
}
function unstable_trace(name, timestamp, callback) {
  var threadID = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : DEFAULT_THREAD_ID;

  var interaction = {
    __count: 1,
    id: interactionIDCounter++,
    name: name,
    timestamp: timestamp
  };
  var prevInteractions = exports.__interactionsRef.current; // Traced interactions should stack/accumulate.
  // To do that, clone the current interactions.
  // The previous set will be restored upon completion.

  var interactions = new Set(prevInteractions);
  interactions.add(interaction);
  exports.__interactionsRef.current = interactions;
  var subscriber = exports.__subscriberRef.current;
  var returnValue;

  try {
    if (subscriber !== null) {
      subscriber.onInteractionTraced(interaction);
    }
  } finally {
    try {
      if (subscriber !== null) {
        subscriber.onWorkStarted(interactions, threadID);
      }
    } finally {
      try {
        returnValue = callback();
      } finally {
        exports.__interactionsRef.current = prevInteractions;

        try {
          if (subscriber !== null) {
            subscriber.onWorkStopped(interactions, threadID);
          }
        } finally {
          interaction.__count--; // If no async work was scheduled for this interaction,
          // Notify subscribers that it's completed.

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        }
      }
    }
  }

  return returnValue;
}
function unstable_wrap(callback) {
  var threadID = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : DEFAULT_THREAD_ID;

  var wrappedInteractions = exports.__interactionsRef.current;
  var subscriber = exports.__subscriberRef.current;

  if (subscriber !== null) {
    subscriber.onWorkScheduled(wrappedInteractions, threadID);
  } // Update the pending async work count for the current interactions.
  // Update after calling subscribers in case of error.


  wrappedInteractions.forEach(function (interaction) {
    interaction.__count++;
  });
  var hasRun = false;

  function wrapped() {
    var prevInteractions = exports.__interactionsRef.current;
    exports.__interactionsRef.current = wrappedInteractions;
    subscriber = exports.__subscriberRef.current;

    try {
      var returnValue;

      try {
        if (subscriber !== null) {
          subscriber.onWorkStarted(wrappedInteractions, threadID);
        }
      } finally {
        try {
          returnValue = callback.apply(undefined, arguments);
        } finally {
          exports.__interactionsRef.current = prevInteractions;

          if (subscriber !== null) {
            subscriber.onWorkStopped(wrappedInteractions, threadID);
          }
        }
      }

      return returnValue;
    } finally {
      if (!hasRun) {
        // We only expect a wrapped function to be executed once,
        // But in the event that it's executed more than once–
        // Only decrement the outstanding interaction counts once.
        hasRun = true; // Update pending async counts for all wrapped interactions.
        // If this was the last scheduled async work for any of them,
        // Mark them as completed.

        wrappedInteractions.forEach(function (interaction) {
          interaction.__count--;

          if (subscriber !== null && interaction.__count === 0) {
            subscriber.onInteractionScheduledWorkCompleted(interaction);
          }
        });
      }
    }
  }

  wrapped.cancel = function cancel() {
    subscriber = exports.__subscriberRef.current;

    try {
      if (subscriber !== null) {
        subscriber.onWorkCanceled(wrappedInteractions, threadID);
      }
    } finally {
      // Update pending async counts for all wrapped interactions.
      // If this was the last scheduled async work for any of them,
      // Mark them as completed.
      wrappedInteractions.forEach(function (interaction) {
        interaction.__count--;

        if (subscriber && interaction.__count === 0) {
          subscriber.onInteractionScheduledWorkCompleted(interaction);
        }
      });
    }
  };

  return wrapped;
}

var subscribers = null;

{
  subscribers = new Set();
}

function unstable_subscribe(subscriber) {
  {
    subscribers.add(subscriber);

    if (subscribers.size === 1) {
      exports.__subscriberRef.current = {
        onInteractionScheduledWorkCompleted: onInteractionScheduledWorkCompleted,
        onInteractionTraced: onInteractionTraced,
        onWorkCanceled: onWorkCanceled,
        onWorkScheduled: onWorkScheduled,
        onWorkStarted: onWorkStarted,
        onWorkStopped: onWorkStopped
      };
    }
  }
}
function unstable_unsubscribe(subscriber) {
  {
    subscribers.delete(subscriber);

    if (subscribers.size === 0) {
      exports.__subscriberRef.current = null;
    }
  }
}

function onInteractionTraced(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionTraced(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onInteractionScheduledWorkCompleted(interaction) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onInteractionScheduledWorkCompleted(interaction);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkScheduled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkScheduled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStarted(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStarted(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkStopped(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkStopped(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

function onWorkCanceled(interactions, threadID) {
  var didCatchError = false;
  var caughtError = null;
  subscribers.forEach(function (subscriber) {
    try {
      subscriber.onWorkCanceled(interactions, threadID);
    } catch (error) {
      if (!didCatchError) {
        didCatchError = true;
        caughtError = error;
      }
    }
  });

  if (didCatchError) {
    throw caughtError;
  }
}

exports.unstable_clear = unstable_clear;
exports.unstable_getCurrent = unstable_getCurrent;
exports.unstable_getThreadID = unstable_getThreadID;
exports.unstable_subscribe = unstable_subscribe;
exports.unstable_trace = unstable_trace;
exports.unstable_unsubscribe = unstable_unsubscribe;
exports.unstable_wrap = unstable_wrap;
  })();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 88 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(28);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







/**
 * The public API for a <Router> that uses HTML5 history.
 */

var BrowserRouter = function (_React$Component) {
  _inherits(BrowserRouter, _React$Component);

  function BrowserRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, BrowserRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = Object(__WEBPACK_IMPORTED_MODULE_3_history__["a" /* createBrowserHistory */])(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  BrowserRouter.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, "<BrowserRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { BrowserRouter as Router }`.");
  };

  BrowserRouter.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], { history: this.history, children: this.props.children });
  };

  return BrowserRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);

BrowserRouter.propTypes = {
  basename: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.string,
  forceRefresh: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.bool,
  getUserConfirmation: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
  keyLength: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
  children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node
};


/* harmony default export */ __webpack_exports__["a"] = (BrowserRouter);

/***/ }),
/* 89 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/** @license React v16.13.1
 * react-is.production.min.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

var b="function"===typeof Symbol&&Symbol.for,c=b?Symbol.for("react.element"):60103,d=b?Symbol.for("react.portal"):60106,e=b?Symbol.for("react.fragment"):60107,f=b?Symbol.for("react.strict_mode"):60108,g=b?Symbol.for("react.profiler"):60114,h=b?Symbol.for("react.provider"):60109,k=b?Symbol.for("react.context"):60110,l=b?Symbol.for("react.async_mode"):60111,m=b?Symbol.for("react.concurrent_mode"):60111,n=b?Symbol.for("react.forward_ref"):60112,p=b?Symbol.for("react.suspense"):60113,q=b?
Symbol.for("react.suspense_list"):60120,r=b?Symbol.for("react.memo"):60115,t=b?Symbol.for("react.lazy"):60116,v=b?Symbol.for("react.block"):60121,w=b?Symbol.for("react.fundamental"):60117,x=b?Symbol.for("react.responder"):60118,y=b?Symbol.for("react.scope"):60119;
function z(a){if("object"===typeof a&&null!==a){var u=a.$$typeof;switch(u){case c:switch(a=a.type,a){case l:case m:case e:case g:case f:case p:return a;default:switch(a=a&&a.$$typeof,a){case k:case n:case t:case r:case h:return a;default:return u}}case d:return u}}}function A(a){return z(a)===m}exports.AsyncMode=l;exports.ConcurrentMode=m;exports.ContextConsumer=k;exports.ContextProvider=h;exports.Element=c;exports.ForwardRef=n;exports.Fragment=e;exports.Lazy=t;exports.Memo=r;exports.Portal=d;
exports.Profiler=g;exports.StrictMode=f;exports.Suspense=p;exports.isAsyncMode=function(a){return A(a)||z(a)===l};exports.isConcurrentMode=A;exports.isContextConsumer=function(a){return z(a)===k};exports.isContextProvider=function(a){return z(a)===h};exports.isElement=function(a){return"object"===typeof a&&null!==a&&a.$$typeof===c};exports.isForwardRef=function(a){return z(a)===n};exports.isFragment=function(a){return z(a)===e};exports.isLazy=function(a){return z(a)===t};
exports.isMemo=function(a){return z(a)===r};exports.isPortal=function(a){return z(a)===d};exports.isProfiler=function(a){return z(a)===g};exports.isStrictMode=function(a){return z(a)===f};exports.isSuspense=function(a){return z(a)===p};
exports.isValidElementType=function(a){return"string"===typeof a||"function"===typeof a||a===e||a===m||a===g||a===f||a===p||a===q||"object"===typeof a&&null!==a&&(a.$$typeof===t||a.$$typeof===r||a.$$typeof===h||a.$$typeof===k||a.$$typeof===n||a.$$typeof===w||a.$$typeof===x||a.$$typeof===y||a.$$typeof===v)};exports.typeOf=z;


/***/ }),
/* 90 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/** @license React v16.13.1
 * react-is.development.js
 *
 * Copyright (c) Facebook, Inc. and its affiliates.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */





if (process.env.NODE_ENV !== "production") {
  (function() {
'use strict';

// The Symbol used to tag the ReactElement-like types. If there is no native Symbol
// nor polyfill, then a plain number is used for performance.
var hasSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = hasSymbol ? Symbol.for('react.element') : 0xeac7;
var REACT_PORTAL_TYPE = hasSymbol ? Symbol.for('react.portal') : 0xeaca;
var REACT_FRAGMENT_TYPE = hasSymbol ? Symbol.for('react.fragment') : 0xeacb;
var REACT_STRICT_MODE_TYPE = hasSymbol ? Symbol.for('react.strict_mode') : 0xeacc;
var REACT_PROFILER_TYPE = hasSymbol ? Symbol.for('react.profiler') : 0xead2;
var REACT_PROVIDER_TYPE = hasSymbol ? Symbol.for('react.provider') : 0xeacd;
var REACT_CONTEXT_TYPE = hasSymbol ? Symbol.for('react.context') : 0xeace; // TODO: We don't use AsyncMode or ConcurrentMode anymore. They were temporary
// (unstable) APIs that have been removed. Can we remove the symbols?

var REACT_ASYNC_MODE_TYPE = hasSymbol ? Symbol.for('react.async_mode') : 0xeacf;
var REACT_CONCURRENT_MODE_TYPE = hasSymbol ? Symbol.for('react.concurrent_mode') : 0xeacf;
var REACT_FORWARD_REF_TYPE = hasSymbol ? Symbol.for('react.forward_ref') : 0xead0;
var REACT_SUSPENSE_TYPE = hasSymbol ? Symbol.for('react.suspense') : 0xead1;
var REACT_SUSPENSE_LIST_TYPE = hasSymbol ? Symbol.for('react.suspense_list') : 0xead8;
var REACT_MEMO_TYPE = hasSymbol ? Symbol.for('react.memo') : 0xead3;
var REACT_LAZY_TYPE = hasSymbol ? Symbol.for('react.lazy') : 0xead4;
var REACT_BLOCK_TYPE = hasSymbol ? Symbol.for('react.block') : 0xead9;
var REACT_FUNDAMENTAL_TYPE = hasSymbol ? Symbol.for('react.fundamental') : 0xead5;
var REACT_RESPONDER_TYPE = hasSymbol ? Symbol.for('react.responder') : 0xead6;
var REACT_SCOPE_TYPE = hasSymbol ? Symbol.for('react.scope') : 0xead7;

function isValidElementType(type) {
  return typeof type === 'string' || typeof type === 'function' || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
  type === REACT_FRAGMENT_TYPE || type === REACT_CONCURRENT_MODE_TYPE || type === REACT_PROFILER_TYPE || type === REACT_STRICT_MODE_TYPE || type === REACT_SUSPENSE_TYPE || type === REACT_SUSPENSE_LIST_TYPE || typeof type === 'object' && type !== null && (type.$$typeof === REACT_LAZY_TYPE || type.$$typeof === REACT_MEMO_TYPE || type.$$typeof === REACT_PROVIDER_TYPE || type.$$typeof === REACT_CONTEXT_TYPE || type.$$typeof === REACT_FORWARD_REF_TYPE || type.$$typeof === REACT_FUNDAMENTAL_TYPE || type.$$typeof === REACT_RESPONDER_TYPE || type.$$typeof === REACT_SCOPE_TYPE || type.$$typeof === REACT_BLOCK_TYPE);
}

function typeOf(object) {
  if (typeof object === 'object' && object !== null) {
    var $$typeof = object.$$typeof;

    switch ($$typeof) {
      case REACT_ELEMENT_TYPE:
        var type = object.type;

        switch (type) {
          case REACT_ASYNC_MODE_TYPE:
          case REACT_CONCURRENT_MODE_TYPE:
          case REACT_FRAGMENT_TYPE:
          case REACT_PROFILER_TYPE:
          case REACT_STRICT_MODE_TYPE:
          case REACT_SUSPENSE_TYPE:
            return type;

          default:
            var $$typeofType = type && type.$$typeof;

            switch ($$typeofType) {
              case REACT_CONTEXT_TYPE:
              case REACT_FORWARD_REF_TYPE:
              case REACT_LAZY_TYPE:
              case REACT_MEMO_TYPE:
              case REACT_PROVIDER_TYPE:
                return $$typeofType;

              default:
                return $$typeof;
            }

        }

      case REACT_PORTAL_TYPE:
        return $$typeof;
    }
  }

  return undefined;
} // AsyncMode is deprecated along with isAsyncMode

var AsyncMode = REACT_ASYNC_MODE_TYPE;
var ConcurrentMode = REACT_CONCURRENT_MODE_TYPE;
var ContextConsumer = REACT_CONTEXT_TYPE;
var ContextProvider = REACT_PROVIDER_TYPE;
var Element = REACT_ELEMENT_TYPE;
var ForwardRef = REACT_FORWARD_REF_TYPE;
var Fragment = REACT_FRAGMENT_TYPE;
var Lazy = REACT_LAZY_TYPE;
var Memo = REACT_MEMO_TYPE;
var Portal = REACT_PORTAL_TYPE;
var Profiler = REACT_PROFILER_TYPE;
var StrictMode = REACT_STRICT_MODE_TYPE;
var Suspense = REACT_SUSPENSE_TYPE;
var hasWarnedAboutDeprecatedIsAsyncMode = false; // AsyncMode should be deprecated

function isAsyncMode(object) {
  {
    if (!hasWarnedAboutDeprecatedIsAsyncMode) {
      hasWarnedAboutDeprecatedIsAsyncMode = true; // Using console['warn'] to evade Babel and ESLint

      console['warn']('The ReactIs.isAsyncMode() alias has been deprecated, ' + 'and will be removed in React 17+. Update your code to use ' + 'ReactIs.isConcurrentMode() instead. It has the exact same API.');
    }
  }

  return isConcurrentMode(object) || typeOf(object) === REACT_ASYNC_MODE_TYPE;
}
function isConcurrentMode(object) {
  return typeOf(object) === REACT_CONCURRENT_MODE_TYPE;
}
function isContextConsumer(object) {
  return typeOf(object) === REACT_CONTEXT_TYPE;
}
function isContextProvider(object) {
  return typeOf(object) === REACT_PROVIDER_TYPE;
}
function isElement(object) {
  return typeof object === 'object' && object !== null && object.$$typeof === REACT_ELEMENT_TYPE;
}
function isForwardRef(object) {
  return typeOf(object) === REACT_FORWARD_REF_TYPE;
}
function isFragment(object) {
  return typeOf(object) === REACT_FRAGMENT_TYPE;
}
function isLazy(object) {
  return typeOf(object) === REACT_LAZY_TYPE;
}
function isMemo(object) {
  return typeOf(object) === REACT_MEMO_TYPE;
}
function isPortal(object) {
  return typeOf(object) === REACT_PORTAL_TYPE;
}
function isProfiler(object) {
  return typeOf(object) === REACT_PROFILER_TYPE;
}
function isStrictMode(object) {
  return typeOf(object) === REACT_STRICT_MODE_TYPE;
}
function isSuspense(object) {
  return typeOf(object) === REACT_SUSPENSE_TYPE;
}

exports.AsyncMode = AsyncMode;
exports.ConcurrentMode = ConcurrentMode;
exports.ContextConsumer = ContextConsumer;
exports.ContextProvider = ContextProvider;
exports.Element = Element;
exports.ForwardRef = ForwardRef;
exports.Fragment = Fragment;
exports.Lazy = Lazy;
exports.Memo = Memo;
exports.Portal = Portal;
exports.Profiler = Profiler;
exports.StrictMode = StrictMode;
exports.Suspense = Suspense;
exports.isAsyncMode = isAsyncMode;
exports.isConcurrentMode = isConcurrentMode;
exports.isContextConsumer = isContextConsumer;
exports.isContextProvider = isContextProvider;
exports.isElement = isElement;
exports.isForwardRef = isForwardRef;
exports.isFragment = isFragment;
exports.isLazy = isLazy;
exports.isMemo = isMemo;
exports.isPortal = isPortal;
exports.isProfiler = isProfiler;
exports.isStrictMode = isStrictMode;
exports.isSuspense = isSuspense;
exports.isValidElementType = isValidElementType;
exports.typeOf = typeOf;
  })();
}

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 91 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactIs = __webpack_require__(19);
var assign = __webpack_require__(12);

var ReactPropTypesSecret = __webpack_require__(26);
var has = __webpack_require__(37);
var checkPropTypes = __webpack_require__(24);

var printWarning = function() {};

if (process.env.NODE_ENV !== 'production') {
  printWarning = function(text) {
    var message = 'Warning: ' + text;
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
}

function emptyFunctionThatReturnsNull() {
  return null;
}

module.exports = function(isValidElement, throwOnDirectAccess) {
  /* global Symbol */
  var ITERATOR_SYMBOL = typeof Symbol === 'function' && Symbol.iterator;
  var FAUX_ITERATOR_SYMBOL = '@@iterator'; // Before Symbol spec.

  /**
   * Returns the iterator method function contained on the iterable object.
   *
   * Be sure to invoke the function with the iterable as context:
   *
   *     var iteratorFn = getIteratorFn(myIterable);
   *     if (iteratorFn) {
   *       var iterator = iteratorFn.call(myIterable);
   *       ...
   *     }
   *
   * @param {?object} maybeIterable
   * @return {?function}
   */
  function getIteratorFn(maybeIterable) {
    var iteratorFn = maybeIterable && (ITERATOR_SYMBOL && maybeIterable[ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL]);
    if (typeof iteratorFn === 'function') {
      return iteratorFn;
    }
  }

  /**
   * Collection of methods that allow declaration and validation of props that are
   * supplied to React components. Example usage:
   *
   *   var Props = require('ReactPropTypes');
   *   var MyArticle = React.createClass({
   *     propTypes: {
   *       // An optional string prop named "description".
   *       description: Props.string,
   *
   *       // A required enum prop named "category".
   *       category: Props.oneOf(['News','Photos']).isRequired,
   *
   *       // A prop named "dialog" that requires an instance of Dialog.
   *       dialog: Props.instanceOf(Dialog).isRequired
   *     },
   *     render: function() { ... }
   *   });
   *
   * A more formal specification of how these methods are used:
   *
   *   type := array|bool|func|object|number|string|oneOf([...])|instanceOf(...)
   *   decl := ReactPropTypes.{type}(.isRequired)?
   *
   * Each and every declaration produces a function with the same signature. This
   * allows the creation of custom validation functions. For example:
   *
   *  var MyLink = React.createClass({
   *    propTypes: {
   *      // An optional string or URI prop named "href".
   *      href: function(props, propName, componentName) {
   *        var propValue = props[propName];
   *        if (propValue != null && typeof propValue !== 'string' &&
   *            !(propValue instanceof URI)) {
   *          return new Error(
   *            'Expected a string or an URI for ' + propName + ' in ' +
   *            componentName
   *          );
   *        }
   *      }
   *    },
   *    render: function() {...}
   *  });
   *
   * @internal
   */

  var ANONYMOUS = '<<anonymous>>';

  // Important!
  // Keep this list in sync with production version in `./factoryWithThrowingShims.js`.
  var ReactPropTypes = {
    array: createPrimitiveTypeChecker('array'),
    bigint: createPrimitiveTypeChecker('bigint'),
    bool: createPrimitiveTypeChecker('boolean'),
    func: createPrimitiveTypeChecker('function'),
    number: createPrimitiveTypeChecker('number'),
    object: createPrimitiveTypeChecker('object'),
    string: createPrimitiveTypeChecker('string'),
    symbol: createPrimitiveTypeChecker('symbol'),

    any: createAnyTypeChecker(),
    arrayOf: createArrayOfTypeChecker,
    element: createElementTypeChecker(),
    elementType: createElementTypeTypeChecker(),
    instanceOf: createInstanceTypeChecker,
    node: createNodeChecker(),
    objectOf: createObjectOfTypeChecker,
    oneOf: createEnumTypeChecker,
    oneOfType: createUnionTypeChecker,
    shape: createShapeTypeChecker,
    exact: createStrictShapeTypeChecker,
  };

  /**
   * inlined Object.is polyfill to avoid requiring consumers ship their own
   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Object/is
   */
  /*eslint-disable no-self-compare*/
  function is(x, y) {
    // SameValue algorithm
    if (x === y) {
      // Steps 1-5, 7-10
      // Steps 6.b-6.e: +0 != -0
      return x !== 0 || 1 / x === 1 / y;
    } else {
      // Step 6.a: NaN == NaN
      return x !== x && y !== y;
    }
  }
  /*eslint-enable no-self-compare*/

  /**
   * We use an Error-like object for backward compatibility as people may call
   * PropTypes directly and inspect their output. However, we don't use real
   * Errors anymore. We don't inspect their stack anyway, and creating them
   * is prohibitively expensive if they are created too often, such as what
   * happens in oneOfType() for any type before the one that matched.
   */
  function PropTypeError(message, data) {
    this.message = message;
    this.data = data && typeof data === 'object' ? data: {};
    this.stack = '';
  }
  // Make `instanceof Error` still work for returned errors.
  PropTypeError.prototype = Error.prototype;

  function createChainableTypeChecker(validate) {
    if (process.env.NODE_ENV !== 'production') {
      var manualPropTypeCallCache = {};
      var manualPropTypeWarningCount = 0;
    }
    function checkType(isRequired, props, propName, componentName, location, propFullName, secret) {
      componentName = componentName || ANONYMOUS;
      propFullName = propFullName || propName;

      if (secret !== ReactPropTypesSecret) {
        if (throwOnDirectAccess) {
          // New behavior only for users of `prop-types` package
          var err = new Error(
            'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
            'Use `PropTypes.checkPropTypes()` to call them. ' +
            'Read more at http://fb.me/use-check-prop-types'
          );
          err.name = 'Invariant Violation';
          throw err;
        } else if (process.env.NODE_ENV !== 'production' && typeof console !== 'undefined') {
          // Old behavior for people using React.PropTypes
          var cacheKey = componentName + ':' + propName;
          if (
            !manualPropTypeCallCache[cacheKey] &&
            // Avoid spamming the console because they are often not actionable except for lib authors
            manualPropTypeWarningCount < 3
          ) {
            printWarning(
              'You are manually calling a React.PropTypes validation ' +
              'function for the `' + propFullName + '` prop on `' + componentName + '`. This is deprecated ' +
              'and will throw in the standalone `prop-types` package. ' +
              'You may be seeing this warning due to a third-party PropTypes ' +
              'library. See https://fb.me/react-warning-dont-call-proptypes ' + 'for details.'
            );
            manualPropTypeCallCache[cacheKey] = true;
            manualPropTypeWarningCount++;
          }
        }
      }
      if (props[propName] == null) {
        if (isRequired) {
          if (props[propName] === null) {
            return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required ' + ('in `' + componentName + '`, but its value is `null`.'));
          }
          return new PropTypeError('The ' + location + ' `' + propFullName + '` is marked as required in ' + ('`' + componentName + '`, but its value is `undefined`.'));
        }
        return null;
      } else {
        return validate(props, propName, componentName, location, propFullName);
      }
    }

    var chainedCheckType = checkType.bind(null, false);
    chainedCheckType.isRequired = checkType.bind(null, true);

    return chainedCheckType;
  }

  function createPrimitiveTypeChecker(expectedType) {
    function validate(props, propName, componentName, location, propFullName, secret) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== expectedType) {
        // `propValue` being instance of, say, date/regexp, pass the 'object'
        // check, but we can offer a more precise error message here rather than
        // 'of type `object`'.
        var preciseType = getPreciseType(propValue);

        return new PropTypeError(
          'Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + preciseType + '` supplied to `' + componentName + '`, expected ') + ('`' + expectedType + '`.'),
          {expectedType: expectedType}
        );
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createAnyTypeChecker() {
    return createChainableTypeChecker(emptyFunctionThatReturnsNull);
  }

  function createArrayOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside arrayOf.');
      }
      var propValue = props[propName];
      if (!Array.isArray(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an array.'));
      }
      for (var i = 0; i < propValue.length; i++) {
        var error = typeChecker(propValue, i, componentName, location, propFullName + '[' + i + ']', ReactPropTypesSecret);
        if (error instanceof Error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!isValidElement(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createElementTypeTypeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      if (!ReactIs.isValidElementType(propValue)) {
        var propType = getPropType(propValue);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected a single ReactElement type.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createInstanceTypeChecker(expectedClass) {
    function validate(props, propName, componentName, location, propFullName) {
      if (!(props[propName] instanceof expectedClass)) {
        var expectedClassName = expectedClass.name || ANONYMOUS;
        var actualClassName = getClassName(props[propName]);
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + actualClassName + '` supplied to `' + componentName + '`, expected ') + ('instance of `' + expectedClassName + '`.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createEnumTypeChecker(expectedValues) {
    if (!Array.isArray(expectedValues)) {
      if (process.env.NODE_ENV !== 'production') {
        if (arguments.length > 1) {
          printWarning(
            'Invalid arguments supplied to oneOf, expected an array, got ' + arguments.length + ' arguments. ' +
            'A common mistake is to write oneOf(x, y, z) instead of oneOf([x, y, z]).'
          );
        } else {
          printWarning('Invalid argument supplied to oneOf, expected an array.');
        }
      }
      return emptyFunctionThatReturnsNull;
    }

    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      for (var i = 0; i < expectedValues.length; i++) {
        if (is(propValue, expectedValues[i])) {
          return null;
        }
      }

      var valuesString = JSON.stringify(expectedValues, function replacer(key, value) {
        var type = getPreciseType(value);
        if (type === 'symbol') {
          return String(value);
        }
        return value;
      });
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of value `' + String(propValue) + '` ' + ('supplied to `' + componentName + '`, expected one of ' + valuesString + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createObjectOfTypeChecker(typeChecker) {
    function validate(props, propName, componentName, location, propFullName) {
      if (typeof typeChecker !== 'function') {
        return new PropTypeError('Property `' + propFullName + '` of component `' + componentName + '` has invalid PropType notation inside objectOf.');
      }
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type ' + ('`' + propType + '` supplied to `' + componentName + '`, expected an object.'));
      }
      for (var key in propValue) {
        if (has(propValue, key)) {
          var error = typeChecker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
          if (error instanceof Error) {
            return error;
          }
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createUnionTypeChecker(arrayOfTypeCheckers) {
    if (!Array.isArray(arrayOfTypeCheckers)) {
      process.env.NODE_ENV !== 'production' ? printWarning('Invalid argument supplied to oneOfType, expected an instance of array.') : void 0;
      return emptyFunctionThatReturnsNull;
    }

    for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
      var checker = arrayOfTypeCheckers[i];
      if (typeof checker !== 'function') {
        printWarning(
          'Invalid argument supplied to oneOfType. Expected an array of check functions, but ' +
          'received ' + getPostfixForTypeWarning(checker) + ' at index ' + i + '.'
        );
        return emptyFunctionThatReturnsNull;
      }
    }

    function validate(props, propName, componentName, location, propFullName) {
      var expectedTypes = [];
      for (var i = 0; i < arrayOfTypeCheckers.length; i++) {
        var checker = arrayOfTypeCheckers[i];
        var checkerResult = checker(props, propName, componentName, location, propFullName, ReactPropTypesSecret);
        if (checkerResult == null) {
          return null;
        }
        if (checkerResult.data && has(checkerResult.data, 'expectedType')) {
          expectedTypes.push(checkerResult.data.expectedType);
        }
      }
      var expectedTypesMessage = (expectedTypes.length > 0) ? ', expected one of type [' + expectedTypes.join(', ') + ']': '';
      return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`' + expectedTypesMessage + '.'));
    }
    return createChainableTypeChecker(validate);
  }

  function createNodeChecker() {
    function validate(props, propName, componentName, location, propFullName) {
      if (!isNode(props[propName])) {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` supplied to ' + ('`' + componentName + '`, expected a ReactNode.'));
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function invalidValidatorError(componentName, location, propFullName, key, type) {
    return new PropTypeError(
      (componentName || 'React class') + ': ' + location + ' type `' + propFullName + '.' + key + '` is invalid; ' +
      'it must be a function, usually from the `prop-types` package, but received `' + type + '`.'
    );
  }

  function createShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      for (var key in shapeTypes) {
        var checker = shapeTypes[key];
        if (typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }
    return createChainableTypeChecker(validate);
  }

  function createStrictShapeTypeChecker(shapeTypes) {
    function validate(props, propName, componentName, location, propFullName) {
      var propValue = props[propName];
      var propType = getPropType(propValue);
      if (propType !== 'object') {
        return new PropTypeError('Invalid ' + location + ' `' + propFullName + '` of type `' + propType + '` ' + ('supplied to `' + componentName + '`, expected `object`.'));
      }
      // We need to check all keys in case some are required but missing from props.
      var allKeys = assign({}, props[propName], shapeTypes);
      for (var key in allKeys) {
        var checker = shapeTypes[key];
        if (has(shapeTypes, key) && typeof checker !== 'function') {
          return invalidValidatorError(componentName, location, propFullName, key, getPreciseType(checker));
        }
        if (!checker) {
          return new PropTypeError(
            'Invalid ' + location + ' `' + propFullName + '` key `' + key + '` supplied to `' + componentName + '`.' +
            '\nBad object: ' + JSON.stringify(props[propName], null, '  ') +
            '\nValid keys: ' + JSON.stringify(Object.keys(shapeTypes), null, '  ')
          );
        }
        var error = checker(propValue, key, componentName, location, propFullName + '.' + key, ReactPropTypesSecret);
        if (error) {
          return error;
        }
      }
      return null;
    }

    return createChainableTypeChecker(validate);
  }

  function isNode(propValue) {
    switch (typeof propValue) {
      case 'number':
      case 'string':
      case 'undefined':
        return true;
      case 'boolean':
        return !propValue;
      case 'object':
        if (Array.isArray(propValue)) {
          return propValue.every(isNode);
        }
        if (propValue === null || isValidElement(propValue)) {
          return true;
        }

        var iteratorFn = getIteratorFn(propValue);
        if (iteratorFn) {
          var iterator = iteratorFn.call(propValue);
          var step;
          if (iteratorFn !== propValue.entries) {
            while (!(step = iterator.next()).done) {
              if (!isNode(step.value)) {
                return false;
              }
            }
          } else {
            // Iterator will provide entry [k,v] tuples rather than values.
            while (!(step = iterator.next()).done) {
              var entry = step.value;
              if (entry) {
                if (!isNode(entry[1])) {
                  return false;
                }
              }
            }
          }
        } else {
          return false;
        }

        return true;
      default:
        return false;
    }
  }

  function isSymbol(propType, propValue) {
    // Native Symbol.
    if (propType === 'symbol') {
      return true;
    }

    // falsy value can't be a Symbol
    if (!propValue) {
      return false;
    }

    // 19.4.3.5 Symbol.prototype[@@toStringTag] === 'Symbol'
    if (propValue['@@toStringTag'] === 'Symbol') {
      return true;
    }

    // Fallback for non-spec compliant Symbols which are polyfilled.
    if (typeof Symbol === 'function' && propValue instanceof Symbol) {
      return true;
    }

    return false;
  }

  // Equivalent of `typeof` but with special handling for array and regexp.
  function getPropType(propValue) {
    var propType = typeof propValue;
    if (Array.isArray(propValue)) {
      return 'array';
    }
    if (propValue instanceof RegExp) {
      // Old webkits (at least until Android 4.0) return 'function' rather than
      // 'object' for typeof a RegExp. We'll normalize this here so that /bla/
      // passes PropTypes.object.
      return 'object';
    }
    if (isSymbol(propType, propValue)) {
      return 'symbol';
    }
    return propType;
  }

  // This handles more types than `getPropType`. Only used for error messages.
  // See `createPrimitiveTypeChecker`.
  function getPreciseType(propValue) {
    if (typeof propValue === 'undefined' || propValue === null) {
      return '' + propValue;
    }
    var propType = getPropType(propValue);
    if (propType === 'object') {
      if (propValue instanceof Date) {
        return 'date';
      } else if (propValue instanceof RegExp) {
        return 'regexp';
      }
    }
    return propType;
  }

  // Returns a string that is postfixed to a warning about an invalid type.
  // For example, "undefined" or "of type array"
  function getPostfixForTypeWarning(value) {
    var type = getPreciseType(value);
    switch (type) {
      case 'array':
      case 'object':
        return 'an ' + type;
      case 'boolean':
      case 'date':
      case 'regexp':
        return 'a ' + type;
      default:
        return type;
    }
  }

  // Returns class name of the object, if any.
  function getClassName(propValue) {
    if (!propValue.constructor || !propValue.constructor.name) {
      return ANONYMOUS;
    }
    return propValue.constructor.name;
  }

  ReactPropTypes.checkPropTypes = checkPropTypes;
  ReactPropTypes.resetWarningCache = checkPropTypes.resetWarningCache;
  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};

/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(1)))

/***/ }),
/* 92 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
/**
 * Copyright (c) 2013-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */



var ReactPropTypesSecret = __webpack_require__(26);

function emptyFunction() {}
function emptyFunctionWithReset() {}
emptyFunctionWithReset.resetWarningCache = emptyFunction;

module.exports = function() {
  function shim(props, propName, componentName, location, propFullName, secret) {
    if (secret === ReactPropTypesSecret) {
      // It is still safe when called from React.
      return;
    }
    var err = new Error(
      'Calling PropTypes validators directly is not supported by the `prop-types` package. ' +
      'Use PropTypes.checkPropTypes() to call them. ' +
      'Read more at http://fb.me/use-check-prop-types'
    );
    err.name = 'Invariant Violation';
    throw err;
  };
  shim.isRequired = shim;
  function getShim() {
    return shim;
  };
  // Important!
  // Keep this list in sync with production version in `./factoryWithTypeCheckers.js`.
  var ReactPropTypes = {
    array: shim,
    bigint: shim,
    bool: shim,
    func: shim,
    number: shim,
    object: shim,
    string: shim,
    symbol: shim,

    any: shim,
    arrayOf: getShim,
    element: shim,
    elementType: shim,
    instanceOf: getShim,
    node: shim,
    objectOf: getShim,
    oneOf: getShim,
    oneOfType: getShim,
    shape: getShim,
    exact: getShim,

    checkPropTypes: emptyFunctionWithReset,
    resetWarningCache: emptyFunction
  };

  ReactPropTypes.PropTypes = ReactPropTypes;

  return ReactPropTypes;
};


/***/ }),
/* 93 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PathUtils__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DOMUtils__ = __webpack_require__(40);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };








var PopStateEvent = 'popstate';
var HashChangeEvent = 'hashchange';

var getHistoryState = function getHistoryState() {
  try {
    return window.history.state || {};
  } catch (e) {
    // IE 11 sometimes throws when accessing window.history.state
    // See https://github.com/ReactTraining/history/pull/289
    return {};
  }
};

/**
 * Creates a history object that uses the HTML5 history API including
 * pushState, replaceState, and the popstate event.
 */
var createBrowserHistory = function createBrowserHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  __WEBPACK_IMPORTED_MODULE_1_invariant___default()(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["b" /* canUseDOM */], 'Browser history needs a DOM');

  var globalHistory = window.history;
  var canUseHistory = Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["g" /* supportsHistory */])();
  var needsHashChangeListener = !Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["h" /* supportsPopStateOnHashChange */])();

  var _props$forceRefresh = props.forceRefresh,
      forceRefresh = _props$forceRefresh === undefined ? false : _props$forceRefresh,
      _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? __WEBPACK_IMPORTED_MODULE_5__DOMUtils__["c" /* getConfirmation */] : _props$getUserConfirm,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;

  var basename = props.basename ? Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["g" /* stripTrailingSlash */])(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */])(props.basename)) : '';

  var getDOMLocation = function getDOMLocation(historyState) {
    var _ref = historyState || {},
        key = _ref.key,
        state = _ref.state;

    var _window$location = window.location,
        pathname = _window$location.pathname,
        search = _window$location.search,
        hash = _window$location.hash;


    var path = pathname + search + hash;

    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!basename || Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["c" /* hasBasename */])(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

    if (basename) path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["e" /* stripBasename */])(path, basename);

    return Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, key);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var transitionManager = Object(__WEBPACK_IMPORTED_MODULE_4__createTransitionManager__["a" /* default */])();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var handlePopState = function handlePopState(event) {
    // Ignore extraneous popstate events in WebKit.
    if (Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["d" /* isExtraneousPopstateEvent */])(event)) return;

    handlePop(getDOMLocation(event.state));
  };

  var handleHashChange = function handleHashChange() {
    handlePop(getDOMLocation(getHistoryState()));
  };

  var forceNextPop = false;

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({ action: action, location: location });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of keys we've seen in sessionStorage.
    // Instead, we just default to 0 for keys we don't know.

    var toIndex = allKeys.indexOf(toLocation.key);

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allKeys.indexOf(fromLocation.key);

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  var initialLocation = getDOMLocation(getHistoryState());
  var allKeys = [initialLocation.key];

  // Public interface

  var createHref = function createHref(location) {
    return basename + Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location);
  };

  var push = function push(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'PUSH';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;


      if (canUseHistory) {
        globalHistory.pushState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.href = href;
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);
          var nextKeys = allKeys.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

          nextKeys.push(location.key);
          allKeys = nextKeys;

          setState({ action: action, location: location });
        }
      } else {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Browser history cannot push state in browsers that do not support HTML5 history');

        window.location.href = href;
      }
    });
  };

  var replace = function replace(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'REPLACE';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var href = createHref(location);
      var key = location.key,
          state = location.state;


      if (canUseHistory) {
        globalHistory.replaceState({ key: key, state: state }, null, href);

        if (forceRefresh) {
          window.location.replace(href);
        } else {
          var prevIndex = allKeys.indexOf(history.location.key);

          if (prevIndex !== -1) allKeys[prevIndex] = location.key;

          setState({ action: action, location: location });
        }
      } else {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Browser history cannot replace state in browsers that do not support HTML5 history');

        window.location.replace(href);
      }
    });
  };

  var go = function go(n) {
    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["a" /* addEventListener */])(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["a" /* addEventListener */])(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["e" /* removeEventListener */])(window, PopStateEvent, handlePopState);

      if (needsHashChangeListener) Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["e" /* removeEventListener */])(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

/* harmony default export */ __webpack_exports__["a"] = (createBrowserHistory);

/***/ }),
/* 94 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
function isAbsolute(pathname) {
  return pathname.charAt(0) === '/';
}

// About 1.5x faster than the two-arg version of Array#splice()
function spliceOne(list, index) {
  for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1) {
    list[i] = list[k];
  }

  list.pop();
}

// This implementation is based heavily on node's url.parse
function resolvePathname(to) {
  var from = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : '';

  var toParts = to && to.split('/') || [];
  var fromParts = from && from.split('/') || [];

  var isToAbs = to && isAbsolute(to);
  var isFromAbs = from && isAbsolute(from);
  var mustEndAbs = isToAbs || isFromAbs;

  if (to && isAbsolute(to)) {
    // to is absolute
    fromParts = toParts;
  } else if (toParts.length) {
    // to is relative, drop the filename
    fromParts.pop();
    fromParts = fromParts.concat(toParts);
  }

  if (!fromParts.length) return '/';

  var hasTrailingSlash = void 0;
  if (fromParts.length) {
    var last = fromParts[fromParts.length - 1];
    hasTrailingSlash = last === '.' || last === '..' || last === '';
  } else {
    hasTrailingSlash = false;
  }

  var up = 0;
  for (var i = fromParts.length; i >= 0; i--) {
    var part = fromParts[i];

    if (part === '.') {
      spliceOne(fromParts, i);
    } else if (part === '..') {
      spliceOne(fromParts, i);
      up++;
    } else if (up) {
      spliceOne(fromParts, i);
      up--;
    }
  }

  if (!mustEndAbs) for (; up--; up) {
    fromParts.unshift('..');
  }if (mustEndAbs && fromParts[0] !== '' && (!fromParts[0] || !isAbsolute(fromParts[0]))) fromParts.unshift('');

  var result = fromParts.join('/');

  if (hasTrailingSlash && result.substr(-1) !== '/') result += '/';

  return result;
}

/* harmony default export */ __webpack_exports__["a"] = (resolvePathname);

/***/ }),
/* 95 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function valueEqual(a, b) {
  if (a === b) return true;

  if (a == null || b == null) return false;

  if (Array.isArray(a)) {
    return Array.isArray(b) && a.length === b.length && a.every(function (item, index) {
      return valueEqual(item, b[index]);
    });
  }

  var aType = typeof a === 'undefined' ? 'undefined' : _typeof(a);
  var bType = typeof b === 'undefined' ? 'undefined' : _typeof(b);

  if (aType !== bType) return false;

  if (aType === 'object') {
    var aValue = a.valueOf();
    var bValue = b.valueOf();

    if (aValue !== a || bValue !== b) return valueEqual(aValue, bValue);

    var aKeys = Object.keys(a);
    var bKeys = Object.keys(b);

    if (aKeys.length !== bKeys.length) return false;

    return aKeys.every(function (key) {
      return valueEqual(a[key], b[key]);
    });
  }

  return false;
}

/* harmony default export */ __webpack_exports__["a"] = (valueEqual);

/***/ }),
/* 96 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__PathUtils__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__createTransitionManager__ = __webpack_require__(27);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__DOMUtils__ = __webpack_require__(40);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };








var HashChangeEvent = 'hashchange';

var HashPathCoders = {
  hashbang: {
    encodePath: function encodePath(path) {
      return path.charAt(0) === '!' ? path : '!/' + Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["f" /* stripLeadingSlash */])(path);
    },
    decodePath: function decodePath(path) {
      return path.charAt(0) === '!' ? path.substr(1) : path;
    }
  },
  noslash: {
    encodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["f" /* stripLeadingSlash */],
    decodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */]
  },
  slash: {
    encodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */],
    decodePath: __WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */]
  }
};

var getHashPath = function getHashPath() {
  // We can't use window.location.hash here because it's not
  // consistent across browsers - Firefox will pre-decode it!
  var href = window.location.href;
  var hashIndex = href.indexOf('#');
  return hashIndex === -1 ? '' : href.substring(hashIndex + 1);
};

var pushHashPath = function pushHashPath(path) {
  return window.location.hash = path;
};

var replaceHashPath = function replaceHashPath(path) {
  var hashIndex = window.location.href.indexOf('#');

  window.location.replace(window.location.href.slice(0, hashIndex >= 0 ? hashIndex : 0) + '#' + path);
};

var createHashHistory = function createHashHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  __WEBPACK_IMPORTED_MODULE_1_invariant___default()(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["b" /* canUseDOM */], 'Hash history needs a DOM');

  var globalHistory = window.history;
  var canGoWithoutReload = Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["f" /* supportsGoWithoutReloadUsingHash */])();

  var _props$getUserConfirm = props.getUserConfirmation,
      getUserConfirmation = _props$getUserConfirm === undefined ? __WEBPACK_IMPORTED_MODULE_5__DOMUtils__["c" /* getConfirmation */] : _props$getUserConfirm,
      _props$hashType = props.hashType,
      hashType = _props$hashType === undefined ? 'slash' : _props$hashType;

  var basename = props.basename ? Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["g" /* stripTrailingSlash */])(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["a" /* addLeadingSlash */])(props.basename)) : '';

  var _HashPathCoders$hashT = HashPathCoders[hashType],
      encodePath = _HashPathCoders$hashT.encodePath,
      decodePath = _HashPathCoders$hashT.decodePath;


  var getDOMLocation = function getDOMLocation() {
    var path = decodePath(getHashPath());

    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!basename || Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["c" /* hasBasename */])(path, basename), 'You are attempting to use a basename on a page whose URL path does not begin ' + 'with the basename. Expected path "' + path + '" to begin with "' + basename + '".');

    if (basename) path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["e" /* stripBasename */])(path, basename);

    return Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path);
  };

  var transitionManager = Object(__WEBPACK_IMPORTED_MODULE_4__createTransitionManager__["a" /* default */])();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = globalHistory.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var forceNextPop = false;
  var ignorePath = null;

  var handleHashChange = function handleHashChange() {
    var path = getHashPath();
    var encodedPath = encodePath(path);

    if (path !== encodedPath) {
      // Ensure we always have a properly-encoded hash.
      replaceHashPath(encodedPath);
    } else {
      var location = getDOMLocation();
      var prevLocation = history.location;

      if (!forceNextPop && Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["b" /* locationsAreEqual */])(prevLocation, location)) return; // A hashchange doesn't always == location change.

      if (ignorePath === Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location)) return; // Ignore this change; we already setState in push/replace.

      ignorePath = null;

      handlePop(location);
    }
  };

  var handlePop = function handlePop(location) {
    if (forceNextPop) {
      forceNextPop = false;
      setState();
    } else {
      var action = 'POP';

      transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
        if (ok) {
          setState({ action: action, location: location });
        } else {
          revertPop(location);
        }
      });
    }
  };

  var revertPop = function revertPop(fromLocation) {
    var toLocation = history.location;

    // TODO: We could probably make this more reliable by
    // keeping a list of paths we've seen in sessionStorage.
    // Instead, we just default to 0 for paths we don't know.

    var toIndex = allPaths.lastIndexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(toLocation));

    if (toIndex === -1) toIndex = 0;

    var fromIndex = allPaths.lastIndexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(fromLocation));

    if (fromIndex === -1) fromIndex = 0;

    var delta = toIndex - fromIndex;

    if (delta) {
      forceNextPop = true;
      go(delta);
    }
  };

  // Ensure the hash is encoded properly before doing anything else.
  var path = getHashPath();
  var encodedPath = encodePath(path);

  if (path !== encodedPath) replaceHashPath(encodedPath);

  var initialLocation = getDOMLocation();
  var allPaths = [Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(initialLocation)];

  // Public interface

  var createHref = function createHref(location) {
    return '#' + encodePath(basename + Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location));
  };

  var push = function push(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Hash history cannot push state; it is ignored');

    var action = 'PUSH';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a PUSH, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        pushHashPath(encodedPath);

        var prevIndex = allPaths.lastIndexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(history.location));
        var nextPaths = allPaths.slice(0, prevIndex === -1 ? 0 : prevIndex + 1);

        nextPaths.push(path);
        allPaths = nextPaths;

        setState({ action: action, location: location });
      } else {
        __WEBPACK_IMPORTED_MODULE_0_warning___default()(false, 'Hash history cannot PUSH the same path; a new entry will not be added to the history stack');

        setState();
      }
    });
  };

  var replace = function replace(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(state === undefined, 'Hash history cannot replace state; it is ignored');

    var action = 'REPLACE';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, undefined, undefined, history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var path = Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(location);
      var encodedPath = encodePath(basename + path);
      var hashChanged = getHashPath() !== encodedPath;

      if (hashChanged) {
        // We cannot tell if a hashchange was caused by a REPLACE, so we'd
        // rather setState here and ignore the hashchange. The caveat here
        // is that other hash histories in the page will consider it a POP.
        ignorePath = path;
        replaceHashPath(encodedPath);
      }

      var prevIndex = allPaths.indexOf(Object(__WEBPACK_IMPORTED_MODULE_3__PathUtils__["b" /* createPath */])(history.location));

      if (prevIndex !== -1) allPaths[prevIndex] = path;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(canGoWithoutReload, 'Hash history go(n) causes a full page reload in this browser');

    globalHistory.go(n);
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var listenerCount = 0;

  var checkDOMListeners = function checkDOMListeners(delta) {
    listenerCount += delta;

    if (listenerCount === 1) {
      Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["a" /* addEventListener */])(window, HashChangeEvent, handleHashChange);
    } else if (listenerCount === 0) {
      Object(__WEBPACK_IMPORTED_MODULE_5__DOMUtils__["e" /* removeEventListener */])(window, HashChangeEvent, handleHashChange);
    }
  };

  var isBlocked = false;

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

    var unblock = transitionManager.setPrompt(prompt);

    if (!isBlocked) {
      checkDOMListeners(1);
      isBlocked = true;
    }

    return function () {
      if (isBlocked) {
        isBlocked = false;
        checkDOMListeners(-1);
      }

      return unblock();
    };
  };

  var listen = function listen(listener) {
    var unlisten = transitionManager.appendListener(listener);
    checkDOMListeners(1);

    return function () {
      checkDOMListeners(-1);
      unlisten();
    };
  };

  var history = {
    length: globalHistory.length,
    action: 'POP',
    location: initialLocation,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    block: block,
    listen: listen
  };

  return history;
};

/* harmony default export */ __webpack_exports__["a"] = (createHashHistory);

/***/ }),
/* 97 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(20);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__PathUtils__ = __webpack_require__(16);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__LocationUtils__ = __webpack_require__(21);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__createTransitionManager__ = __webpack_require__(27);
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };






var clamp = function clamp(n, lowerBound, upperBound) {
  return Math.min(Math.max(n, lowerBound), upperBound);
};

/**
 * Creates a history object that stores locations in memory.
 */
var createMemoryHistory = function createMemoryHistory() {
  var props = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var getUserConfirmation = props.getUserConfirmation,
      _props$initialEntries = props.initialEntries,
      initialEntries = _props$initialEntries === undefined ? ['/'] : _props$initialEntries,
      _props$initialIndex = props.initialIndex,
      initialIndex = _props$initialIndex === undefined ? 0 : _props$initialIndex,
      _props$keyLength = props.keyLength,
      keyLength = _props$keyLength === undefined ? 6 : _props$keyLength;


  var transitionManager = Object(__WEBPACK_IMPORTED_MODULE_3__createTransitionManager__["a" /* default */])();

  var setState = function setState(nextState) {
    _extends(history, nextState);

    history.length = history.entries.length;

    transitionManager.notifyListeners(history.location, history.action);
  };

  var createKey = function createKey() {
    return Math.random().toString(36).substr(2, keyLength);
  };

  var index = clamp(initialIndex, 0, initialEntries.length - 1);
  var entries = initialEntries.map(function (entry) {
    return typeof entry === 'string' ? Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(entry, undefined, createKey()) : Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(entry, undefined, entry.key || createKey());
  });

  // Public interface

  var createHref = __WEBPACK_IMPORTED_MODULE_1__PathUtils__["b" /* createPath */];

  var push = function push(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to push when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'PUSH';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      var prevIndex = history.index;
      var nextIndex = prevIndex + 1;

      var nextEntries = history.entries.slice(0);
      if (nextEntries.length > nextIndex) {
        nextEntries.splice(nextIndex, nextEntries.length - nextIndex, location);
      } else {
        nextEntries.push(location);
      }

      setState({
        action: action,
        location: location,
        index: nextIndex,
        entries: nextEntries
      });
    });
  };

  var replace = function replace(path, state) {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!((typeof path === 'undefined' ? 'undefined' : _typeof(path)) === 'object' && path.state !== undefined && state !== undefined), 'You should avoid providing a 2nd state argument to replace when the 1st ' + 'argument is a location-like object that already has state; it is ignored');

    var action = 'REPLACE';
    var location = Object(__WEBPACK_IMPORTED_MODULE_2__LocationUtils__["a" /* createLocation */])(path, state, createKey(), history.location);

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (!ok) return;

      history.entries[history.index] = location;

      setState({ action: action, location: location });
    });
  };

  var go = function go(n) {
    var nextIndex = clamp(history.index + n, 0, history.entries.length - 1);

    var action = 'POP';
    var location = history.entries[nextIndex];

    transitionManager.confirmTransitionTo(location, action, getUserConfirmation, function (ok) {
      if (ok) {
        setState({
          action: action,
          location: location,
          index: nextIndex
        });
      } else {
        // Mimic the behavior of DOM histories by
        // causing a render after a cancelled POP.
        setState();
      }
    });
  };

  var goBack = function goBack() {
    return go(-1);
  };

  var goForward = function goForward() {
    return go(1);
  };

  var canGo = function canGo(n) {
    var nextIndex = history.index + n;
    return nextIndex >= 0 && nextIndex < history.entries.length;
  };

  var block = function block() {
    var prompt = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
    return transitionManager.setPrompt(prompt);
  };

  var listen = function listen(listener) {
    return transitionManager.appendListener(listener);
  };

  var history = {
    length: entries.length,
    action: 'POP',
    location: entries[index],
    index: index,
    entries: entries,
    createHref: createHref,
    push: push,
    replace: replace,
    go: go,
    goBack: goBack,
    goForward: goForward,
    canGo: canGo,
    block: block,
    listen: listen
  };

  return history;
};

/* harmony default export */ __webpack_exports__["a"] = (createMemoryHistory);

/***/ }),
/* 98 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(28);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







/**
 * The public API for a <Router> that uses window.location.hash.
 */

var HashRouter = function (_React$Component) {
  _inherits(HashRouter, _React$Component);

  function HashRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, HashRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = Object(__WEBPACK_IMPORTED_MODULE_3_history__["b" /* createHashHistory */])(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  HashRouter.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, "<HashRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { HashRouter as Router }`.");
  };

  HashRouter.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], { history: this.history, children: this.props.children });
  };

  return HashRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);

HashRouter.propTypes = {
  basename: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.string,
  getUserConfirmation: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
  hashType: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.oneOf(["hashbang", "noslash", "slash"]),
  children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node
};


/* harmony default export */ __webpack_exports__["a"] = (HashRouter);

/***/ }),
/* 99 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_MemoryRouter__ = __webpack_require__(100);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_MemoryRouter__["a" /* default */]);

/***/ }),
/* 100 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_history__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__Router__ = __webpack_require__(29);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







/**
 * The public API for a <Router> that stores location in memory.
 */

var MemoryRouter = function (_React$Component) {
  _inherits(MemoryRouter, _React$Component);

  function MemoryRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, MemoryRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.history = Object(__WEBPACK_IMPORTED_MODULE_3_history__["d" /* createMemoryHistory */])(_this.props), _temp), _possibleConstructorReturn(_this, _ret);
  }

  MemoryRouter.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, "<MemoryRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { MemoryRouter as Router }`.");
  };

  MemoryRouter.prototype.render = function render() {
    return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_4__Router__["a" /* default */], { history: this.history, children: this.props.children });
  };

  return MemoryRouter;
}(__WEBPACK_IMPORTED_MODULE_1_react___default.a.Component);

MemoryRouter.propTypes = {
  initialEntries: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.array,
  initialIndex: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
  getUserConfirmation: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func,
  keyLength: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.number,
  children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.node
};


/* harmony default export */ __webpack_exports__["a"] = (MemoryRouter);

/***/ }),
/* 101 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__Route__ = __webpack_require__(42);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Link__ = __webpack_require__(41);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }






/**
 * A <Link> wrapper that knows if it's "active" or not.
 */
var NavLink = function NavLink(_ref) {
  var to = _ref.to,
      exact = _ref.exact,
      strict = _ref.strict,
      location = _ref.location,
      activeClassName = _ref.activeClassName,
      className = _ref.className,
      activeStyle = _ref.activeStyle,
      style = _ref.style,
      getIsActive = _ref.isActive,
      ariaCurrent = _ref["aria-current"],
      rest = _objectWithoutProperties(_ref, ["to", "exact", "strict", "location", "activeClassName", "className", "activeStyle", "style", "isActive", "aria-current"]);

  var path = (typeof to === "undefined" ? "undefined" : _typeof(to)) === "object" ? to.pathname : to;

  // Regex taken from: https://github.com/pillarjs/path-to-regexp/blob/master/index.js#L202
  var escapedPath = path && path.replace(/([.+*?=^!:${}()[\]|/\\])/g, "\\$1");

  return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_2__Route__["a" /* default */], {
    path: escapedPath,
    exact: exact,
    strict: strict,
    location: location,
    children: function children(_ref2) {
      var location = _ref2.location,
          match = _ref2.match;

      var isActive = !!(getIsActive ? getIsActive(match, location) : match);

      return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Link__["a" /* default */], _extends({
        to: to,
        className: isActive ? [className, activeClassName].filter(function (i) {
          return i;
        }).join(" ") : className,
        style: isActive ? _extends({}, style, activeStyle) : style,
        "aria-current": isActive && ariaCurrent || null
      }, rest));
    }
  });
};

NavLink.propTypes = {
  to: __WEBPACK_IMPORTED_MODULE_3__Link__["a" /* default */].propTypes.to,
  exact: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  strict: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  location: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  activeClassName: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  className: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  activeStyle: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  style: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object,
  isActive: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func,
  "aria-current": __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOf(["page", "step", "location", "date", "time", "true"])
};

NavLink.defaultProps = {
  activeClassName: "active",
  "aria-current": "page"
};

/* harmony default export */ __webpack_exports__["a"] = (NavLink);

/***/ }),
/* 102 */
/***/ (function(module, exports) {

module.exports = Array.isArray || function (arr) {
  return Object.prototype.toString.call(arr) == '[object Array]';
};


/***/ }),
/* 103 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Prompt__ = __webpack_require__(104);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Prompt__["a" /* default */]);

/***/ }),
/* 104 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_invariant__);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }





/**
 * The public API for prompting the user before navigating away
 * from a screen with a component.
 */

var Prompt = function (_React$Component) {
  _inherits(Prompt, _React$Component);

  function Prompt() {
    _classCallCheck(this, Prompt);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Prompt.prototype.enable = function enable(message) {
    if (this.unblock) this.unblock();

    this.unblock = this.context.router.history.block(message);
  };

  Prompt.prototype.disable = function disable() {
    if (this.unblock) {
      this.unblock();
      this.unblock = null;
    }
  };

  Prompt.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_2_invariant___default()(this.context.router, "You should not use <Prompt> outside a <Router>");

    if (this.props.when) this.enable(this.props.message);
  };

  Prompt.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    if (nextProps.when) {
      if (!this.props.when || this.props.message !== nextProps.message) this.enable(nextProps.message);
    } else {
      this.disable();
    }
  };

  Prompt.prototype.componentWillUnmount = function componentWillUnmount() {
    this.disable();
  };

  Prompt.prototype.render = function render() {
    return null;
  };

  return Prompt;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Prompt.propTypes = {
  when: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  message: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string]).isRequired
};
Prompt.defaultProps = {
  when: true
};
Prompt.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
      block: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
    }).isRequired
  }).isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Prompt);

/***/ }),
/* 105 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Redirect__ = __webpack_require__(106);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Redirect__["a" /* default */]);

/***/ }),
/* 106 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__generatePath__ = __webpack_require__(45);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }








/**
 * The public API for updating the location programmatically
 * with a component.
 */

var Redirect = function (_React$Component) {
  _inherits(Redirect, _React$Component);

  function Redirect() {
    _classCallCheck(this, Redirect);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Redirect.prototype.isStatic = function isStatic() {
    return this.context.router && this.context.router.staticContext;
  };

  Redirect.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_3_invariant___default()(this.context.router, "You should not use <Redirect> outside a <Router>");

    if (this.isStatic()) this.perform();
  };

  Redirect.prototype.componentDidMount = function componentDidMount() {
    if (!this.isStatic()) this.perform();
  };

  Redirect.prototype.componentDidUpdate = function componentDidUpdate(prevProps) {
    var prevTo = Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(prevProps.to);
    var nextTo = Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(this.props.to);

    if (Object(__WEBPACK_IMPORTED_MODULE_4_history__["f" /* locationsAreEqual */])(prevTo, nextTo)) {
      __WEBPACK_IMPORTED_MODULE_2_warning___default()(false, "You tried to redirect to the same route you're currently on: " + ("\"" + nextTo.pathname + nextTo.search + "\""));
      return;
    }

    this.perform();
  };

  Redirect.prototype.computeTo = function computeTo(_ref) {
    var computedMatch = _ref.computedMatch,
        to = _ref.to;

    if (computedMatch) {
      if (typeof to === "string") {
        return Object(__WEBPACK_IMPORTED_MODULE_5__generatePath__["a" /* default */])(to, computedMatch.params);
      } else {
        return _extends({}, to, {
          pathname: Object(__WEBPACK_IMPORTED_MODULE_5__generatePath__["a" /* default */])(to.pathname, computedMatch.params)
        });
      }
    }

    return to;
  };

  Redirect.prototype.perform = function perform() {
    var history = this.context.router.history;
    var push = this.props.push;

    var to = this.computeTo(this.props);

    if (push) {
      history.push(to);
    } else {
      history.replace(to);
    }
  };

  Redirect.prototype.render = function render() {
    return null;
  };

  return Redirect;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Redirect.propTypes = {
  computedMatch: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object, // private, from <Switch>
  push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.bool,
  from: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string,
  to: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object]).isRequired
};
Redirect.defaultProps = {
  push: false
};
Redirect.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    history: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
      push: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired,
      replace: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func.isRequired
    }).isRequired,
    staticContext: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object
  }).isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (Redirect);

/***/ }),
/* 107 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_StaticRouter__ = __webpack_require__(108);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_StaticRouter__["a" /* default */]);

/***/ }),
/* 108 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4_history__ = __webpack_require__(13);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__Router__ = __webpack_require__(29);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }








var addLeadingSlash = function addLeadingSlash(path) {
  return path.charAt(0) === "/" ? path : "/" + path;
};

var addBasename = function addBasename(basename, location) {
  if (!basename) return location;

  return _extends({}, location, {
    pathname: addLeadingSlash(basename) + location.pathname
  });
};

var stripBasename = function stripBasename(basename, location) {
  if (!basename) return location;

  var base = addLeadingSlash(basename);

  if (location.pathname.indexOf(base) !== 0) return location;

  return _extends({}, location, {
    pathname: location.pathname.substr(base.length)
  });
};

var createURL = function createURL(location) {
  return typeof location === "string" ? location : Object(__WEBPACK_IMPORTED_MODULE_4_history__["e" /* createPath */])(location);
};

var staticHandler = function staticHandler(methodName) {
  return function () {
    __WEBPACK_IMPORTED_MODULE_1_invariant___default()(false, "You cannot %s with <StaticRouter>", methodName);
  };
};

var noop = function noop() {};

/**
 * The public top-level API for a "static" <Router>, so-called because it
 * can't actually change the current location. Instead, it just records
 * location changes in a context object. Useful mainly in testing and
 * server-rendering scenarios.
 */

var StaticRouter = function (_React$Component) {
  _inherits(StaticRouter, _React$Component);

  function StaticRouter() {
    var _temp, _this, _ret;

    _classCallCheck(this, StaticRouter);

    for (var _len = arguments.length, args = Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    return _ret = (_temp = (_this = _possibleConstructorReturn(this, _React$Component.call.apply(_React$Component, [this].concat(args))), _this), _this.createHref = function (path) {
      return addLeadingSlash(_this.props.basename + createURL(path));
    }, _this.handlePush = function (location) {
      var _this$props = _this.props,
          basename = _this$props.basename,
          context = _this$props.context;

      context.action = "PUSH";
      context.location = addBasename(basename, Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(location));
      context.url = createURL(context.location);
    }, _this.handleReplace = function (location) {
      var _this$props2 = _this.props,
          basename = _this$props2.basename,
          context = _this$props2.context;

      context.action = "REPLACE";
      context.location = addBasename(basename, Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(location));
      context.url = createURL(context.location);
    }, _this.handleListen = function () {
      return noop;
    }, _this.handleBlock = function () {
      return noop;
    }, _temp), _possibleConstructorReturn(_this, _ret);
  }

  StaticRouter.prototype.getChildContext = function getChildContext() {
    return {
      router: {
        staticContext: this.props.context
      }
    };
  };

  StaticRouter.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_0_warning___default()(!this.props.history, "<StaticRouter> ignores the history prop. To use a custom history, " + "use `import { Router }` instead of `import { StaticRouter as Router }`.");
  };

  StaticRouter.prototype.render = function render() {
    var _props = this.props,
        basename = _props.basename,
        context = _props.context,
        location = _props.location,
        props = _objectWithoutProperties(_props, ["basename", "context", "location"]);

    var history = {
      createHref: this.createHref,
      action: "POP",
      location: stripBasename(basename, Object(__WEBPACK_IMPORTED_MODULE_4_history__["c" /* createLocation */])(location)),
      push: this.handlePush,
      replace: this.handleReplace,
      go: staticHandler("go"),
      goBack: staticHandler("goBack"),
      goForward: staticHandler("goForward"),
      listen: this.handleListen,
      block: this.handleBlock
    };

    return __WEBPACK_IMPORTED_MODULE_2_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_5__Router__["a" /* default */], _extends({}, props, { history: history }));
  };

  return StaticRouter;
}(__WEBPACK_IMPORTED_MODULE_2_react___default.a.Component);

StaticRouter.propTypes = {
  basename: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string,
  context: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired,
  location: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.oneOfType([__WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.string, __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object])
};
StaticRouter.defaultProps = {
  basename: "",
  location: "/"
};
StaticRouter.childContextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_3_prop_types___default.a.object.isRequired
};


/* harmony default export */ __webpack_exports__["a"] = (StaticRouter);

/***/ }),
/* 109 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_Switch__ = __webpack_require__(110);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_Switch__["a" /* default */]);

/***/ }),
/* 110 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning__ = __webpack_require__(5);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_warning___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_warning__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant__ = __webpack_require__(3);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3_invariant___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_3_invariant__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__matchPath__ = __webpack_require__(30);
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }







/**
 * The public API for rendering the first <Route> that matches.
 */

var Switch = function (_React$Component) {
  _inherits(Switch, _React$Component);

  function Switch() {
    _classCallCheck(this, Switch);

    return _possibleConstructorReturn(this, _React$Component.apply(this, arguments));
  }

  Switch.prototype.componentWillMount = function componentWillMount() {
    __WEBPACK_IMPORTED_MODULE_3_invariant___default()(this.context.router, "You should not use <Switch> outside a <Router>");
  };

  Switch.prototype.componentWillReceiveProps = function componentWillReceiveProps(nextProps) {
    __WEBPACK_IMPORTED_MODULE_2_warning___default()(!(nextProps.location && !this.props.location), '<Switch> elements should not change from uncontrolled to controlled (or vice versa). You initially used no "location" prop and then provided one on a subsequent render.');

    __WEBPACK_IMPORTED_MODULE_2_warning___default()(!(!nextProps.location && this.props.location), '<Switch> elements should not change from controlled to uncontrolled (or vice versa). You provided a "location" prop initially but omitted it on a subsequent render.');
  };

  Switch.prototype.render = function render() {
    var route = this.context.router.route;
    var children = this.props.children;

    var location = this.props.location || route.location;

    var match = void 0,
        child = void 0;
    __WEBPACK_IMPORTED_MODULE_0_react___default.a.Children.forEach(children, function (element) {
      if (match == null && __WEBPACK_IMPORTED_MODULE_0_react___default.a.isValidElement(element)) {
        var _element$props = element.props,
            pathProp = _element$props.path,
            exact = _element$props.exact,
            strict = _element$props.strict,
            sensitive = _element$props.sensitive,
            from = _element$props.from;

        var path = pathProp || from;

        child = element;
        match = Object(__WEBPACK_IMPORTED_MODULE_4__matchPath__["a" /* default */])(location.pathname, { path: path, exact: exact, strict: strict, sensitive: sensitive }, route.match);
      }
    });

    return match ? __WEBPACK_IMPORTED_MODULE_0_react___default.a.cloneElement(child, { location: location, computedMatch: match }) : null;
  };

  return Switch;
}(__WEBPACK_IMPORTED_MODULE_0_react___default.a.Component);

Switch.contextTypes = {
  router: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.shape({
    route: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object.isRequired
  }).isRequired
};
Switch.propTypes = {
  children: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.node,
  location: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.object
};


/* harmony default export */ __webpack_exports__["a"] = (Switch);

/***/ }),
/* 111 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_generatePath__ = __webpack_require__(45);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_generatePath__["a" /* default */]);

/***/ }),
/* 112 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_matchPath__ = __webpack_require__(30);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_matchPath__["a" /* default */]);

/***/ }),
/* 113 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react_router_es_withRouter__ = __webpack_require__(114);
// Written in this round about way for babel-transform-imports


/* harmony default export */ __webpack_exports__["a"] = (__WEBPACK_IMPORTED_MODULE_0_react_router_es_withRouter__["a" /* default */]);

/***/ }),
/* 114 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_0_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__ = __webpack_require__(115);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Route__ = __webpack_require__(43);
var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _objectWithoutProperties(obj, keys) { var target = {}; for (var i in obj) { if (keys.indexOf(i) >= 0) continue; if (!Object.prototype.hasOwnProperty.call(obj, i)) continue; target[i] = obj[i]; } return target; }






/**
 * A public higher-order component to access the imperative API
 */
var withRouter = function withRouter(Component) {
  var C = function C(props) {
    var wrappedComponentRef = props.wrappedComponentRef,
        remainingProps = _objectWithoutProperties(props, ["wrappedComponentRef"]);

    return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(__WEBPACK_IMPORTED_MODULE_3__Route__["a" /* default */], {
      children: function children(routeComponentProps) {
        return __WEBPACK_IMPORTED_MODULE_0_react___default.a.createElement(Component, _extends({}, remainingProps, routeComponentProps, {
          ref: wrappedComponentRef
        }));
      }
    });
  };

  C.displayName = "withRouter(" + (Component.displayName || Component.name) + ")";
  C.WrappedComponent = Component;
  C.propTypes = {
    wrappedComponentRef: __WEBPACK_IMPORTED_MODULE_1_prop_types___default.a.func
  };

  return __WEBPACK_IMPORTED_MODULE_2_hoist_non_react_statics___default()(C, Component);
};

/* harmony default export */ __webpack_exports__["a"] = (withRouter);

/***/ }),
/* 115 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


/**
 * Copyright 2015, Yahoo! Inc.
 * Copyrights licensed under the New BSD License. See the accompanying LICENSE file for terms.
 */
var REACT_STATICS = {
    childContextTypes: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
};

var KNOWN_STATICS = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
};

var defineProperty = Object.defineProperty;
var getOwnPropertyNames = Object.getOwnPropertyNames;
var getOwnPropertySymbols = Object.getOwnPropertySymbols;
var getOwnPropertyDescriptor = Object.getOwnPropertyDescriptor;
var getPrototypeOf = Object.getPrototypeOf;
var objectPrototype = getPrototypeOf && getPrototypeOf(Object);

function hoistNonReactStatics(targetComponent, sourceComponent, blacklist) {
    if (typeof sourceComponent !== 'string') { // don't hoist over string (html) components

        if (objectPrototype) {
            var inheritedComponent = getPrototypeOf(sourceComponent);
            if (inheritedComponent && inheritedComponent !== objectPrototype) {
                hoistNonReactStatics(targetComponent, inheritedComponent, blacklist);
            }
        }

        var keys = getOwnPropertyNames(sourceComponent);

        if (getOwnPropertySymbols) {
            keys = keys.concat(getOwnPropertySymbols(sourceComponent));
        }

        for (var i = 0; i < keys.length; ++i) {
            var key = keys[i];
            if (!REACT_STATICS[key] && !KNOWN_STATICS[key] && (!blacklist || !blacklist[key])) {
                var descriptor = getOwnPropertyDescriptor(sourceComponent, key);
                try { // Avoid failures from read-only properties
                    defineProperty(targetComponent, key, descriptor);
                } catch (e) {}
            }
        }

        return targetComponent;
    }

    return targetComponent;
}

module.exports = hoistNonReactStatics;


/***/ }),
/* 116 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_inheritsLoose__ = __webpack_require__(36);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react__ = __webpack_require__(0);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1_react___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_1_react__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types__ = __webpack_require__(2);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2_prop_types___default = __webpack_require__.n(__WEBPACK_IMPORTED_MODULE_2_prop_types__);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__Context__ = __webpack_require__(31);





var Provider =
/*#__PURE__*/
function (_Component) {
  Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_inheritsLoose__["a" /* default */])(Provider, _Component);

  function Provider(props) {
    var _this;

    _this = _Component.call(this, props) || this;
    var store = props.store;
    _this.state = {
      storeState: store.getState(),
      store: store
    };
    return _this;
  }

  var _proto = Provider.prototype;

  _proto.componentDidMount = function componentDidMount() {
    this._isMounted = true;
    this.subscribe();
  };

  _proto.componentWillUnmount = function componentWillUnmount() {
    if (this.unsubscribe) this.unsubscribe();
    this._isMounted = false;
  };

  _proto.componentDidUpdate = function componentDidUpdate(prevProps) {
    if (this.props.store !== prevProps.store) {
      if (this.unsubscribe) this.unsubscribe();
      this.subscribe();
    }
  };

  _proto.subscribe = function subscribe() {
    var _this2 = this;

    var store = this.props.store;
    this.unsubscribe = store.subscribe(function () {
      var newStoreState = store.getState();

      if (!_this2._isMounted) {
        return;
      }

      _this2.setState(function (providerState) {
        // If the value is the same, skip the unnecessary state update.
        if (providerState.storeState === newStoreState) {
          return null;
        }

        return {
          storeState: newStoreState
        };
      });
    }); // Actions might have been dispatched between render and mount - handle those

    var postMountStoreState = store.getState();

    if (postMountStoreState !== this.state.storeState) {
      this.setState({
        storeState: postMountStoreState
      });
    }
  };

  _proto.render = function render() {
    var Context = this.props.context || __WEBPACK_IMPORTED_MODULE_3__Context__["a" /* ReactReduxContext */];
    return __WEBPACK_IMPORTED_MODULE_1_react___default.a.createElement(Context.Provider, {
      value: this.state
    }, this.props.children);
  };

  return Provider;
}(__WEBPACK_IMPORTED_MODULE_1_react__["Component"]);

Provider.propTypes = {
  store: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.shape({
    subscribe: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func.isRequired,
    dispatch: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func.isRequired,
    getState: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.func.isRequired
  }),
  context: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.object,
  children: __WEBPACK_IMPORTED_MODULE_2_prop_types___default.a.any
};
/* harmony default export */ __webpack_exports__["a"] = (Provider);

/***/ }),
/* 117 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export createConnect */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_2__components_connectAdvanced__ = __webpack_require__(48);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_3__utils_shallowEqual__ = __webpack_require__(118);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_4__mapDispatchToProps__ = __webpack_require__(119);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_5__mapStateToProps__ = __webpack_require__(122);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_6__mergeProps__ = __webpack_require__(123);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_7__selectorFactory__ = __webpack_require__(124);








/*
  connect is a facade over connectAdvanced. It turns its args into a compatible
  selectorFactory, which has the signature:

    (dispatch, options) => (nextState, nextOwnProps) => nextFinalProps
  
  connect passes its args to connectAdvanced as options, which will in turn pass them to
  selectorFactory each time a Connect component instance is instantiated or hot reloaded.

  selectorFactory returns a final props selector from its mapStateToProps,
  mapStateToPropsFactories, mapDispatchToProps, mapDispatchToPropsFactories, mergeProps,
  mergePropsFactories, and pure args.

  The resulting final props selector is called by the Connect component instance whenever
  it receives new props or store state.
 */

function match(arg, factories, name) {
  for (var i = factories.length - 1; i >= 0; i--) {
    var result = factories[i](arg);
    if (result) return result;
  }

  return function (dispatch, options) {
    throw new Error("Invalid value of type " + typeof arg + " for " + name + " argument when connecting component " + options.wrappedComponentName + ".");
  };
}

function strictEqual(a, b) {
  return a === b;
} // createConnect with default args builds the 'official' connect behavior. Calling it with
// different options opens up some testing and extensibility scenarios


function createConnect(_temp) {
  var _ref = _temp === void 0 ? {} : _temp,
      _ref$connectHOC = _ref.connectHOC,
      connectHOC = _ref$connectHOC === void 0 ? __WEBPACK_IMPORTED_MODULE_2__components_connectAdvanced__["a" /* default */] : _ref$connectHOC,
      _ref$mapStateToPropsF = _ref.mapStateToPropsFactories,
      mapStateToPropsFactories = _ref$mapStateToPropsF === void 0 ? __WEBPACK_IMPORTED_MODULE_5__mapStateToProps__["a" /* default */] : _ref$mapStateToPropsF,
      _ref$mapDispatchToPro = _ref.mapDispatchToPropsFactories,
      mapDispatchToPropsFactories = _ref$mapDispatchToPro === void 0 ? __WEBPACK_IMPORTED_MODULE_4__mapDispatchToProps__["a" /* default */] : _ref$mapDispatchToPro,
      _ref$mergePropsFactor = _ref.mergePropsFactories,
      mergePropsFactories = _ref$mergePropsFactor === void 0 ? __WEBPACK_IMPORTED_MODULE_6__mergeProps__["a" /* default */] : _ref$mergePropsFactor,
      _ref$selectorFactory = _ref.selectorFactory,
      selectorFactory = _ref$selectorFactory === void 0 ? __WEBPACK_IMPORTED_MODULE_7__selectorFactory__["a" /* default */] : _ref$selectorFactory;

  return function connect(mapStateToProps, mapDispatchToProps, mergeProps, _ref2) {
    if (_ref2 === void 0) {
      _ref2 = {};
    }

    var _ref3 = _ref2,
        _ref3$pure = _ref3.pure,
        pure = _ref3$pure === void 0 ? true : _ref3$pure,
        _ref3$areStatesEqual = _ref3.areStatesEqual,
        areStatesEqual = _ref3$areStatesEqual === void 0 ? strictEqual : _ref3$areStatesEqual,
        _ref3$areOwnPropsEqua = _ref3.areOwnPropsEqual,
        areOwnPropsEqual = _ref3$areOwnPropsEqua === void 0 ? __WEBPACK_IMPORTED_MODULE_3__utils_shallowEqual__["a" /* default */] : _ref3$areOwnPropsEqua,
        _ref3$areStatePropsEq = _ref3.areStatePropsEqual,
        areStatePropsEqual = _ref3$areStatePropsEq === void 0 ? __WEBPACK_IMPORTED_MODULE_3__utils_shallowEqual__["a" /* default */] : _ref3$areStatePropsEq,
        _ref3$areMergedPropsE = _ref3.areMergedPropsEqual,
        areMergedPropsEqual = _ref3$areMergedPropsE === void 0 ? __WEBPACK_IMPORTED_MODULE_3__utils_shallowEqual__["a" /* default */] : _ref3$areMergedPropsE,
        extraOptions = Object(__WEBPACK_IMPORTED_MODULE_1__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__["a" /* default */])(_ref3, ["pure", "areStatesEqual", "areOwnPropsEqual", "areStatePropsEqual", "areMergedPropsEqual"]);

    var initMapStateToProps = match(mapStateToProps, mapStateToPropsFactories, 'mapStateToProps');
    var initMapDispatchToProps = match(mapDispatchToProps, mapDispatchToPropsFactories, 'mapDispatchToProps');
    var initMergeProps = match(mergeProps, mergePropsFactories, 'mergeProps');
    return connectHOC(selectorFactory, Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__["a" /* default */])({
      // used in error messages
      methodName: 'connect',
      // used to compute Connect's displayName from the wrapped component's displayName.
      getDisplayName: function getDisplayName(name) {
        return "Connect(" + name + ")";
      },
      // if mapStateToProps is falsy, the Connect component doesn't subscribe to store state changes
      shouldHandleStateChanges: Boolean(mapStateToProps),
      // passed through to selectorFactory
      initMapStateToProps: initMapStateToProps,
      initMapDispatchToProps: initMapDispatchToProps,
      initMergeProps: initMergeProps,
      pure: pure,
      areStatesEqual: areStatesEqual,
      areOwnPropsEqual: areOwnPropsEqual,
      areStatePropsEqual: areStatePropsEqual,
      areMergedPropsEqual: areMergedPropsEqual
    }, extraOptions));
  };
}
/* harmony default export */ __webpack_exports__["a"] = (createConnect());

/***/ }),
/* 118 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = shallowEqual;
var hasOwn = Object.prototype.hasOwnProperty;

function is(x, y) {
  if (x === y) {
    return x !== 0 || y !== 0 || 1 / x === 1 / y;
  } else {
    return x !== x && y !== y;
  }
}

function shallowEqual(objA, objB) {
  if (is(objA, objB)) return true;

  if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) {
    return false;
  }

  var keysA = Object.keys(objA);
  var keysB = Object.keys(objB);
  if (keysA.length !== keysB.length) return false;

  for (var i = 0; i < keysA.length; i++) {
    if (!hasOwn.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]])) {
      return false;
    }
  }

  return true;
}

/***/ }),
/* 119 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export whenMapDispatchToPropsIsFunction */
/* unused harmony export whenMapDispatchToPropsIsMissing */
/* unused harmony export whenMapDispatchToPropsIsObject */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0_redux__ = __webpack_require__(15);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__ = __webpack_require__(49);


function whenMapDispatchToPropsIsFunction(mapDispatchToProps) {
  return typeof mapDispatchToProps === 'function' ? Object(__WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__["b" /* wrapMapToPropsFunc */])(mapDispatchToProps, 'mapDispatchToProps') : undefined;
}
function whenMapDispatchToPropsIsMissing(mapDispatchToProps) {
  return !mapDispatchToProps ? Object(__WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__["a" /* wrapMapToPropsConstant */])(function (dispatch) {
    return {
      dispatch: dispatch
    };
  }) : undefined;
}
function whenMapDispatchToPropsIsObject(mapDispatchToProps) {
  return mapDispatchToProps && typeof mapDispatchToProps === 'object' ? Object(__WEBPACK_IMPORTED_MODULE_1__wrapMapToProps__["a" /* wrapMapToPropsConstant */])(function (dispatch) {
    return Object(__WEBPACK_IMPORTED_MODULE_0_redux__["bindActionCreators"])(mapDispatchToProps, dispatch);
  }) : undefined;
}
/* harmony default export */ __webpack_exports__["a"] = ([whenMapDispatchToPropsIsFunction, whenMapDispatchToPropsIsMissing, whenMapDispatchToPropsIsObject]);

/***/ }),
/* 120 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _objectSpread2;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__defineProperty_js__ = __webpack_require__(25);


function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      Object(__WEBPACK_IMPORTED_MODULE_0__defineProperty_js__["a" /* default */])(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }

  return target;
}

/***/ }),
/* 121 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = isPlainObject;
/**
 * @param {any} obj The object to inspect.
 * @returns {boolean} True if the argument appears to be a plain object.
 */
function isPlainObject(obj) {
  if (typeof obj !== 'object' || obj === null) return false;
  var proto = Object.getPrototypeOf(obj);
  if (proto === null) return true;
  var baseProto = proto;

  while (Object.getPrototypeOf(baseProto) !== null) {
    baseProto = Object.getPrototypeOf(baseProto);
  }

  return proto === baseProto;
}

/***/ }),
/* 122 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* unused harmony export whenMapStateToPropsIsFunction */
/* unused harmony export whenMapStateToPropsIsMissing */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__ = __webpack_require__(49);

function whenMapStateToPropsIsFunction(mapStateToProps) {
  return typeof mapStateToProps === 'function' ? Object(__WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__["b" /* wrapMapToPropsFunc */])(mapStateToProps, 'mapStateToProps') : undefined;
}
function whenMapStateToPropsIsMissing(mapStateToProps) {
  return !mapStateToProps ? Object(__WEBPACK_IMPORTED_MODULE_0__wrapMapToProps__["a" /* wrapMapToPropsConstant */])(function () {
    return {};
  }) : undefined;
}
/* harmony default export */ __webpack_exports__["a"] = ([whenMapStateToPropsIsFunction, whenMapStateToPropsIsMissing]);

/***/ }),
/* 123 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export defaultMergeProps */
/* unused harmony export wrapMergePropsFunc */
/* unused harmony export whenMergePropsIsFunction */
/* unused harmony export whenMergePropsIsOmitted */
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__ = __webpack_require__(18);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__utils_verifyPlainObject__ = __webpack_require__(50);


function defaultMergeProps(stateProps, dispatchProps, ownProps) {
  return Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_extends__["a" /* default */])({}, ownProps, stateProps, dispatchProps);
}
function wrapMergePropsFunc(mergeProps) {
  return function initMergePropsProxy(dispatch, _ref) {
    var displayName = _ref.displayName,
        pure = _ref.pure,
        areMergedPropsEqual = _ref.areMergedPropsEqual;
    var hasRunOnce = false;
    var mergedProps;
    return function mergePropsProxy(stateProps, dispatchProps, ownProps) {
      var nextMergedProps = mergeProps(stateProps, dispatchProps, ownProps);

      if (hasRunOnce) {
        if (!pure || !areMergedPropsEqual(nextMergedProps, mergedProps)) mergedProps = nextMergedProps;
      } else {
        hasRunOnce = true;
        mergedProps = nextMergedProps;
        if (process.env.NODE_ENV !== 'production') Object(__WEBPACK_IMPORTED_MODULE_1__utils_verifyPlainObject__["a" /* default */])(mergedProps, displayName, 'mergeProps');
      }

      return mergedProps;
    };
  };
}
function whenMergePropsIsFunction(mergeProps) {
  return typeof mergeProps === 'function' ? wrapMergePropsFunc(mergeProps) : undefined;
}
function whenMergePropsIsOmitted(mergeProps) {
  return !mergeProps ? function () {
    return defaultMergeProps;
  } : undefined;
}
/* harmony default export */ __webpack_exports__["a"] = ([whenMergePropsIsFunction, whenMergePropsIsOmitted]);
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 124 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* WEBPACK VAR INJECTION */(function(process) {/* unused harmony export impureFinalPropsSelectorFactory */
/* unused harmony export pureFinalPropsSelectorFactory */
/* harmony export (immutable) */ __webpack_exports__["a"] = finalPropsSelectorFactory;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__ = __webpack_require__(22);
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_1__verifySubselectors__ = __webpack_require__(125);


function impureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch) {
  return function impureFinalPropsSelector(state, ownProps) {
    return mergeProps(mapStateToProps(state, ownProps), mapDispatchToProps(dispatch, ownProps), ownProps);
  };
}
function pureFinalPropsSelectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, _ref) {
  var areStatesEqual = _ref.areStatesEqual,
      areOwnPropsEqual = _ref.areOwnPropsEqual,
      areStatePropsEqual = _ref.areStatePropsEqual;
  var hasRunAtLeastOnce = false;
  var state;
  var ownProps;
  var stateProps;
  var dispatchProps;
  var mergedProps;

  function handleFirstCall(firstState, firstOwnProps) {
    state = firstState;
    ownProps = firstOwnProps;
    stateProps = mapStateToProps(state, ownProps);
    dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    hasRunAtLeastOnce = true;
    return mergedProps;
  }

  function handleNewPropsAndNewState() {
    stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewProps() {
    if (mapStateToProps.dependsOnOwnProps) stateProps = mapStateToProps(state, ownProps);
    if (mapDispatchToProps.dependsOnOwnProps) dispatchProps = mapDispatchToProps(dispatch, ownProps);
    mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleNewState() {
    var nextStateProps = mapStateToProps(state, ownProps);
    var statePropsChanged = !areStatePropsEqual(nextStateProps, stateProps);
    stateProps = nextStateProps;
    if (statePropsChanged) mergedProps = mergeProps(stateProps, dispatchProps, ownProps);
    return mergedProps;
  }

  function handleSubsequentCalls(nextState, nextOwnProps) {
    var propsChanged = !areOwnPropsEqual(nextOwnProps, ownProps);
    var stateChanged = !areStatesEqual(nextState, state);
    state = nextState;
    ownProps = nextOwnProps;
    if (propsChanged && stateChanged) return handleNewPropsAndNewState();
    if (propsChanged) return handleNewProps();
    if (stateChanged) return handleNewState();
    return mergedProps;
  }

  return function pureFinalPropsSelector(nextState, nextOwnProps) {
    return hasRunAtLeastOnce ? handleSubsequentCalls(nextState, nextOwnProps) : handleFirstCall(nextState, nextOwnProps);
  };
} // TODO: Add more comments
// If pure is true, the selector returned by selectorFactory will memoize its results,
// allowing connectAdvanced's shouldComponentUpdate to return false if final
// props have not changed. If false, the selector will always return a new
// object and shouldComponentUpdate will always return true.

function finalPropsSelectorFactory(dispatch, _ref2) {
  var initMapStateToProps = _ref2.initMapStateToProps,
      initMapDispatchToProps = _ref2.initMapDispatchToProps,
      initMergeProps = _ref2.initMergeProps,
      options = Object(__WEBPACK_IMPORTED_MODULE_0__babel_runtime_helpers_esm_objectWithoutPropertiesLoose__["a" /* default */])(_ref2, ["initMapStateToProps", "initMapDispatchToProps", "initMergeProps"]);

  var mapStateToProps = initMapStateToProps(dispatch, options);
  var mapDispatchToProps = initMapDispatchToProps(dispatch, options);
  var mergeProps = initMergeProps(dispatch, options);

  if (process.env.NODE_ENV !== 'production') {
    Object(__WEBPACK_IMPORTED_MODULE_1__verifySubselectors__["a" /* default */])(mapStateToProps, mapDispatchToProps, mergeProps, options.displayName);
  }

  var selectorFactory = options.pure ? pureFinalPropsSelectorFactory : impureFinalPropsSelectorFactory;
  return selectorFactory(mapStateToProps, mapDispatchToProps, mergeProps, dispatch, options);
}
/* WEBPACK VAR INJECTION */}.call(__webpack_exports__, __webpack_require__(1)))

/***/ }),
/* 125 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = verifySubselectors;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__utils_warning__ = __webpack_require__(51);


function verify(selector, methodName, displayName) {
  if (!selector) {
    throw new Error("Unexpected value for " + methodName + " in " + displayName + ".");
  } else if (methodName === 'mapStateToProps' || methodName === 'mapDispatchToProps') {
    if (!selector.hasOwnProperty('dependsOnOwnProps')) {
      Object(__WEBPACK_IMPORTED_MODULE_0__utils_warning__["a" /* default */])("The selector for " + methodName + " of " + displayName + " did not specify a value for dependsOnOwnProps.");
    }
  }
}

function verifySubselectors(mapStateToProps, mapDispatchToProps, mergeProps, displayName) {
  verify(mapStateToProps, 'mapStateToProps', displayName);
  verify(mapDispatchToProps, 'mapDispatchToProps', displayName);
  verify(mergeProps, 'mergeProps', displayName);
}

/***/ }),
/* 126 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _arrayWithHoles;
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}

/***/ }),
/* 127 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _iterableToArrayLimit;
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];

  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;

  var _s, _e;

  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);

      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }

  return _arr;
}

/***/ }),
/* 128 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _nonIterableRest;
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),
/* 129 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _typeof;
function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}

/***/ }),
/* 130 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _arrayWithoutHoles;
/* harmony import */ var __WEBPACK_IMPORTED_MODULE_0__arrayLikeToArray_js__ = __webpack_require__(53);

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) return Object(__WEBPACK_IMPORTED_MODULE_0__arrayLikeToArray_js__["a" /* default */])(arr);
}

/***/ }),
/* 131 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _iterableToArray;
function _iterableToArray(iter) {
  if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter);
}

/***/ }),
/* 132 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
/* harmony export (immutable) */ __webpack_exports__["a"] = _nonIterableSpread;
function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}

/***/ }),
/* 133 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureStore;

var _redux = __webpack_require__(15);

var _rootReducer = __webpack_require__(54);

var _rootReducer2 = _interopRequireDefault(_rootReducer);

var _reduxThunk = __webpack_require__(58);

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

// Be sure to ONLY add this middleware in development!
var middleware = [_reduxThunk2.default];

function configureStore(initialState) {
  var store = (0, _redux.createStore)(_rootReducer2.default, initialState, _redux.applyMiddleware.apply(undefined, middleware));
  return store;
}

/***/ }),
/* 134 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = ajaxStatusReducer;

var _actionTypes = __webpack_require__(4);

var actionTypes = _interopRequireWildcard(_actionTypes);

var _initialState = __webpack_require__(11);

var _initialState2 = _interopRequireDefault(_initialState);

var _reactAddonsUpdate = __webpack_require__(9);

var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function ajaxStatusReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _initialState2.default.AjaxStatus;
  var action = arguments[1];

  switch (action.type) {
    case actionTypes.BEGIN_AJAX_CALL:
      return (0, _reactAddonsUpdate2.default)(state, { $set: { ajaxCallsInProgress: true, isShowError: false } });
    case actionTypes.END_AJAX_CALL:
      return (0, _reactAddonsUpdate2.default)(state, { $set: { ajaxCallsInProgress: false, isShowError: action.isShowError } });
    default:
      return state;
  }
}

/***/ }),
/* 135 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = documentReducer;

var _actionTypes = __webpack_require__(4);

var actionTypes = _interopRequireWildcard(_actionTypes);

var _initialState = __webpack_require__(11);

var _initialState2 = _interopRequireDefault(_initialState);

var _reactAddonsUpdate = __webpack_require__(9);

var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);

var _CommonUtils = __webpack_require__(8);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true });
  } else {
    obj[key] = value;
  }return obj;
}

function documentReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _initialState2.default.Document;
  var action = arguments[1];

  switch (action.type) {
    case actionTypes.DOCUMENT_GET_SUCCESS:
      {
        return (0, _reactAddonsUpdate2.default)(state, { $merge: action.document });
      }
    case actionTypes.DOCUMENT_CREATE_ID:
      {
        action.data.document.dateModified = (0, _CommonUtils.getValidDocDate)(action.data.document.dateModified);
        //The method will validates the date, if valid, returns the same date else current dateTime.
        action.data.document.dateCreated = (0, _CommonUtils.getValidDocDate)(action.data.document.dateCreated, action.data.document.dateModified);
        //The method will validates the date, if valid, returns the same date else modified date.
        var doc = (0, _reactAddonsUpdate2.default)(state, { $set: action.data.document });
        return doc;
      }
    case actionTypes.LOAD_DOCUMENT:
      {
        var doc = (0, _reactAddonsUpdate2.default)(state, { $set: action.data });
        return doc;
      }
    case actionTypes.ADD_SECTIONS:
      {

        var additionalSectionData = (0, _reactAddonsUpdate2.default)(state, { AdditionalSection: { $set: action.data },
          selectedSectionIndex: { $set: 0 } });
        return additionalSectionData;
      }
    case actionTypes.SET_SELECTED_SECTION_INDEX:
      {
        return (0, _reactAddonsUpdate2.default)(state, { selectedSectionIndex: { $set: action.data } });
      }
    case actionTypes.SET_MAX_SECTION_COUNT:
      {
        return (0, _reactAddonsUpdate2.default)(state, { maxSectionCount: { $set: action.data } });
      }
    case actionTypes.UPDATE_DOC_STYLES:
      {
        var stateCopy = state;

        var _loop = function _loop(i) {
          var tempIndex = state.docStyles.findIndex(function (x) {
            return x.styleTypeCD == action.field[i].styleTypeCD;
          });
          stateCopy = (0, _reactAddonsUpdate2.default)(stateCopy, { docStyles: _defineProperty({}, tempIndex, { value: { $set: action.field[i].value } }) });
        };

        for (var i = 0; i < action.field.length; i++) {
          _loop(i);
        }
        return stateCopy;
      }
    case actionTypes.ADD_PARAGRAPH:
      {
        var index = state.sections.findIndex(function (sec) {
          return sec.id == action.paragraph.sectionID;
        });
        var section = state.sections[index];
        section.paragraphs.push(action.paragraph);
        var data = (0, _reactAddonsUpdate2.default)(state, { sections: _defineProperty({}, index, { $merge: section }) });
        return data;
      }
    case actionTypes.UPDATE_PARAGRAPH:
      {
        var _index = state.sections.findIndex(function (sec) {
          return sec.id == action.paragraph.sectionID;
        });
        var _section = state.sections[_index];
        var paraIndex = _section.paragraphs.findIndex(function (para) {
          return para.id == action.paragraph.id;
        });
        _section = (0, _reactAddonsUpdate2.default)(_section, { paragraphs: _defineProperty({}, paraIndex, { $merge: action.paragraph }) });
        var _data = (0, _reactAddonsUpdate2.default)(state, { sections: _defineProperty({}, _index, { $merge: _section }) });
        return _data;
      }
    case actionTypes.REMOVE_PARAGRAPH:
      {
        var _index2 = state.sections.findIndex(function (sec) {
          return sec.id == action.data.sectionID;
        });
        var _section2 = state.sections[_index2];
        var _paraIndex = _section2.paragraphs.findIndex(function (para) {
          return para.id == action.data.id;
        });
        _section2 = (0, _reactAddonsUpdate2.default)(_section2, { paragraphs: { $splice: [[_paraIndex, 1]] } });
        var _data2 = (0, _reactAddonsUpdate2.default)(state, { sections: _defineProperty({}, _index2, { $merge: _section2 }) });
        return _data2;
      }
    case actionTypes.REMOVE_SECTION:
      {
        var _index3 = state.sections.findIndex(function (sec) {
          return sec.id == action.data.sectionId;
        });
        if (_index3 > -1) {
          var lstSections = state.sections;
          lstSections.splice(_index3, 1);
          lstSections = lstSections.map(function (section) {
            section.index = section.index > _index3 ? section.index - 1 : section.index;
            return section;
          });

          var _data3 = (0, _reactAddonsUpdate2.default)(state, { sections: { $splice: [[_index3, 1]] } });
          _data3 = (0, _reactAddonsUpdate2.default)(state, { sections: { $merge: lstSections } });
          return _data3;
        } else return state;
      }
    case actionTypes.UPDATE_SECTIONS:
      {
        state = (0, _reactAddonsUpdate2.default)(state, { sections: { $set: action.data } });
        return state;
      }
    case actionTypes.REORDER_SECTIONS:
      {
        return (0, _reactAddonsUpdate2.default)(state, { sections: { $set: action.sections } });
      }
    case actionTypes.REORDER_PARA:
      {
        var _index4 = state.sections.findIndex(function (sec) {
          return sec.id == action.paragraphs[0].sectionID;
        });
        var _section3 = state.sections[_index4];
        _section3 = (0, _reactAddonsUpdate2.default)(_section3, { paragraphs: { $set: action.paragraphs } });
        var _data4 = (0, _reactAddonsUpdate2.default)(state, { sections: _defineProperty({}, _index4, { $set: _section3 }) });
        return _data4;
      }
    case actionTypes.HIDE_TIPS_COMPONENT:
      {

        return (0, _reactAddonsUpdate2.default)(state, { ShowHideTipsComponent: { $set: false } });
      }

    case actionTypes.DOCUMENT_SAVE_COMPLETE:
      {
        return state;
      }
    case actionTypes.LOAD_EXPERIENCE1:
      {

        var expData = (0, _reactAddonsUpdate2.default)(state, { Experience: { $set: action.document.Experience } });
        return expData;
      }
    case actionTypes.UPDATE_SKIN:
      {
        return (0, _reactAddonsUpdate2.default)(state, { skinCD: { $set: action.data.skinCd } });
      }
    case actionTypes.UPDATE_TEMPLATEID:
      {
        return (0, _reactAddonsUpdate2.default)(state, { templateID: { $set: action.data.templateId } });
      }
    case actionTypes.UPDATE_DOC_USER:
      {
        return (0, _reactAddonsUpdate2.default)(state, { userUid: { $set: action.request } });
      }
    case actionTypes.RESET_DOCUMENT:
      {
        return (0, _reactAddonsUpdate2.default)(state, { $set: _initialState2.default.Document });
      }
    case actionTypes.RENAME_DOCUMENT:
      {
        return (0, _reactAddonsUpdate2.default)(state, { Name: { $set: action.newDocName } });
      }
    case actionTypes.UPDATE_DOC_PREFERENCE:
      {
        return (0, _reactAddonsUpdate2.default)(state, { $merge: { preferences: action.preferences } });
      }
    case actionTypes.UPDATE_DOC_USER:
      {
        state = (0, _reactAddonsUpdate2.default)(state, { userId: { $set: action.request } });
        return state;
      }
    default:
      return state;
  }
}

/***/ }),
/* 136 */
/***/ (function(module, exports) {

module.exports=function(t){var i={};function e(o){if(i[o])return i[o].exports;var s=i[o]={i:o,l:!1,exports:{}};return t[o].call(s.exports,s,s.exports,e),s.l=!0,s.exports}return e.m=t,e.c=i,e.d=function(t,i,o){e.o(t,i)||Object.defineProperty(t,i,{configurable:!1,enumerable:!0,get:o})},e.n=function(t){var i=t&&t.__esModule?function(){return t.default}:function(){return t};return e.d(i,"a",i),i},e.o=function(t,i){return Object.prototype.hasOwnProperty.call(t,i)},e.p="",e(e.s=0)}([function(t,i,e){"use strict";var o=e(1),s=e(2),n=e(3),a=e(4),r=e(5),d=e(6),c=e(7),h=e(8),u=e(9),l=e(10),v=e(11),p=e(12);t.exports={DocData:s,Content:o,Employer:n,JobTitle:a,Paragraph:r,School:d,Section:c,Survey:h,SurveyResponse:u,User:l,TrackRequest:v,UploadDocument:p}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.htmlString,o=void 0===e?"":e,s=i.identifier,n=void 0===s?"":s,a=i.searchItemType,r=void 0===a?"":a,d=i.contentItemUID,c=void 0===d?"":d,h=i.contentTypeCD,u=void 0===h?"":h,l=i.documentTypeCD,v=void 0===l?"":l,p=i.isCore,f=void 0===p?"":p,D=i.tagText,y=void 0===D?"":D,m=i.tagType,C=void 0===m?"":m;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.HTMLString=o,this.identifier=n,this.searchItemType=r,this.contentItemUID=c,this.ContentTypeCD=u,this.DocumentTypeCD=v,this.isCore=f,this.tagText=y,this.tagType=C}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.id,o=void 0===e?"":e,s=i.paragraphID,n=void 0===s?"":s,a=i.fieldCD,r=void 0===a?"":a,d=i.userId,c=void 0===d?"":d,h=i.charValue,u=void 0===h?"":h,l=i.dateTimeValue,v=void 0===l?"":l,p=i.docDataInfo,f=void 0===p?"":p,D=i.index,y=void 0===D?1:D,m=i.category,C=void 0===m?"":m,T=i.isValid,I=void 0===T||T,x=i.errorMessage,g=void 0===x?"":x;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=o,this.paragraphID=n,this.fieldCD=r,this.userId=c,this.charValue=u,this.dateTimeValue=v,this.isValid=I,this.category=C,this.docDataInfo=f,this.index=y,this.errorMessage=g}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.displayValue,o=void 0===e?"":e,s=i.selectedValue,n=void 0===s?"":s,a=i.address,r=void 0===a?{city:"",state:"",stateCD:"",countryCD:"",country:""}:a,d=i.sno,c=void 0===d?"":d;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.displayValue=o,this.selectedValue=n,this.address=r,this.sno=c}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.displayValue,o=void 0===e?"":e,s=i.selectedValue,n=void 0===s?"":s,a=i.rank,r=void 0===a?"":a,d=i.relatedJobTitles,c=void 0===d?[]:d,h=i.occupation,u=void 0===h?[]:h,l=i.isAmbiguous,v=void 0===l?"":l,p=i.majorFunction,f=void 0===p?"":p,D=i.minorFunction,y=void 0===D?"":D,m=i.riasec,C=void 0===m?"":m,T=i.primaryJobTitle,I=void 0===T?"":T,x=i.selectedJobGender,g=void 0===x?"":x;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.displayValue=o,this.selectedValue=n,this.rank=r,this.relatedJobTitles=c,this.occupation=u,this.isAmbiguous=v,this.majorFunction=f,this.minorFunction=y,this.riasec=C,this.primaryJobTitle=I,this.selectedJobGender=g}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.id,o=void 0===e?"":e,s=i.sectionID,n=void 0===s?"":s,a=i.index,r=void 0===a?0:a,d=i.paragraphTemplateCD,c=void 0===d?"":d,h=i.topPadding,u=void 0===h?0:h,l=i.docDatas,v=void 0===l?[]:l;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=o,this.sectionID=n,this.index=r,this.paragraphTemplateCD=c,this.docDatas=v,this.topPadding=u}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.typeAheadDisplayName,o=void 0===e?"":e,s=i.name,n=void 0===s?"":s,a=i.city,r=void 0===a?"":a,d=i.state,c=void 0===d?"":d,h=i.stateCD,u=void 0===h?"":h,l=i.country,v=void 0===l?"":l;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.typeAheadDisplayName=o,this.country=v,this.city=r,this.state=c,this.name=n,this.stateCD=u}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.id,o=void 0===e?"":e,s=i.documentID,n=void 0===s?"":s,a=i.index,r=void 0===a?"":a,d=i.sectionTypeCD,c=void 0===d?"":d,h=i.name,u=void 0===h?"":h,l=i.docZoneTypeCD,v=void 0===l?"":l,p=i.topPadding,f=void 0===p?0:p,D=i.paragraphs,y=void 0===D?[]:D,m=i.sectionContainerIndex,C=void 0===m?0:m;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.id=o,this.documentID=n,this.index=r,this.sectionTypeCD=c,this.name=u,this.docZoneTypeCD=v,this.paragraphs=y,this.topPadding=f,this.sectionContainerIndex=C}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.questionID,o=void 0===e?0:e,s=i.surveyID,n=void 0===s?0:s,a=i.documentID,r=void 0===a?0:a,d=i.userUID,c=void 0===d?0:d,h=i.surveyResponses,u=void 0===h?[]:h;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.SurveyID=n,this.QuestionID=o,this.SurveyResponses=u,this.UserUID=c,this.DocumentID=r}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.displayText,o=void 0===e?"":e,s=i.responseCD,n=void 0===s?"":s,a=i.responseID,r=void 0===a?"":a,d=i.sortOrder,c=void 0===d?0:d;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.DisplayText=o,this.ResponseCD=n,this.ResponseID=r,this.SortOrder=c}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.token,o=void 0===e?"":e,s=i.firstName,n=void 0===s?"":s,a=i.lastName,r=void 0===a?"":a,d=i.emailAddress,c=void 0===d?"":d,h=i.phoneNumber,u=void 0===h?"":h,l=i.mobileNumber,v=void 0===l?"":l,p=i.userUID,f=void 0===p?"":p,D=i.partyID,y=void 0===D?0:D,m=i.sessionIdentity,C=void 0===m?0:m,T=i.role,I=void 0===T?"":T,x=i.city,g=void 0===x?"":x,w=i.postalcd,E=void 0===w?"":w,S=i.state,b=void 0===S?"":S,N=i.country,U=void 0===N?"":N,k=i.reset_passWord,P=void 0!==k&&k,A=(i.portalcd,i.createdOn),R=void 0===A?new Date:A,V=i.socialToken,O=void 0===V?"":V,J=i.PUID,M=void 0===J?"":J,F=i.addressLine1,j=void 0===F?"":F,L=i.userOptins,_=void 0===L?[]:L,q=i.userPreferences,z=void 0===q?[]:q;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.Token=o,this.FirstName=n,this.LastName=r,this.EmailAddress=c,this.PhoneNumber=u,this.MobileNumber=v,this.UserUID=f,this.PartyID=y,this.SessionIdentity=C,this.Role=I,this.City=g,this.PostalCD=E,this.State=b,this.Country=U,this.Reset_Password=P,this.PortalCD=this.portalcd,this.CreatedOn=R,this.SocialToken=O,this.PUID=M,this.AddressLine1=j,this.UserOptins=_,this.UserPreferences=z}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.eventType,o=void 0===e?"ttc":e,s=i.eventSubType,n=void 0===s?"clicked":s,a=i.eventContext,r=void 0===a?"track":a,d=i.portalCD,c=void 0===d?"":d,h=i.userID,u=void 0===h?"":h,l=i.actionType,v=void 0===l?0:l,p=i.clientCD,f=void 0===p?"":p,D=i.sourceAppUID,y=void 0===D?"":D,m=i.sourceAppCD,C=void 0===m?"":m,T=i.eventDetails,I=void 0===T?[]:T;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.EventType=o,this.EventSubType=n,this.EventContext=r,this.PortalCD=c,this.UserID=u,this.ActionType=v,this.EventDetails=I,this.ClientCD=f,this.SourceAppUID=y,this.SourceAppCD=C}},function(t,i,e){"use strict";t.exports=function t(){var i=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},e=i.data,o=void 0===e?[]:e,s=i.uploadFileTypeCD,n=void 0===s?"":s,a=i.templateID,r=void 0===a?0:a,d=i.cultureCD,c=void 0===d?"":d,h=i.sectionTypesToExclude,u=void 0===h?[]:h,l=i.sortJobExperience,v=void 0!==l&&l,p=i.sortEducation,f=void 0!==p&&p,D=i.preserveBullets,y=void 0!==D&&D,m=i.includeCanonSkills,C=void 0!==m&&m,T=i.skipTextExtractionAndSimilarityMeasure,I=void 0!==T&&T,x=i.portalID,g=void 0===x?0:x,w=i.uploadOriginalResumeSampleRate,E=void 0===w?0:w,S=i.uploadedResumeCounter,b=void 0===S?0:S,N=i.userUID,U=void 0===N?"":N,k=i.skinCD,P=void 0===k?"":k,A=i.portalCD,R=void 0===A?"":A,V=i.isIntl,O=void 0!==V&&V,J=i.firstName,M=void 0===J?"":J,F=i.lastName,j=void 0===F?"":F,L=i.localizedDocumentText,_=void 0===L?"":L,q=i.isChangeSectionNames,z=void 0!==q&&q,B=i.sectionNameTemplateId,G=void 0===B?0:B,Z=i.skinColor,H=void 0===Z?"":Z,Q=i.flowName,W=void 0===Q?"":Q,K=i.uploadMethod,X=void 0===K?"":K,Y=i.docStyles,$=void 0===Y?[]:Y,tt=i.documentName,it=void 0===tt?"":tt,et=i.country,ot=void 0===et?{}:et;!function(t,i){if(!(t instanceof i))throw new TypeError("Cannot call a class as a function")}(this,t),this.data=o,this.uploadFileTypeCD=n,this.templateID=r,this.cultureCD=c,this.sectionTypesToExclude=u,this.sortJobExperience=v,this.sortEducation=f,this.preserveBullets=y,this.includeCanonSkills=C,this.skipTextExtractionAndSimilarityMeasure=I,this.portalID=g,this.uploadOriginalResumeSampleRate=E,this.uploadedResumeCounter=b,this.userUID=U,this.skinCD=P,this.portalCD=R,this.isIntl=O,this.firstName=M,this.lastName=j,this.localizedDocumentText=_,this.isChangeSectionNames=z,this.sectionNameTemplateId=G,this.skinColor=H,this.flowName=W,this.uploadMethod=X,this.docStyles=$,this.documentName=it,this.country=ot}}]);

/***/ }),
/* 137 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.guid = guid;

//export const apiPath = 'http://localhost:50498/api/v1/';
//export const apiPath = 'https://api-dev-builder.livecareer.com/api/v1/';
var apiPath = exports.apiPath = window.globalCompVars.BaseApiUrl;
var apiPathV2 = exports.apiPathV2 = window.globalCompVars.BaseApiUrlV2;
function guid() {
  return ([1e7] + -1e3 + -4e3 + -8e3 + -1e11).replace(/[018]/g, function (c) {
    return (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16);
  });
}

/***/ }),
/* 138 */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_RESULT__;/* Web Font Loader v1.6.28 - (c) Adobe Systems, Google. License: Apache 2.0 */(function(){function aa(a,b,c){return a.call.apply(a.bind,arguments)}function ba(a,b,c){if(!a)throw Error();if(2<arguments.length){var d=Array.prototype.slice.call(arguments,2);return function(){var c=Array.prototype.slice.call(arguments);Array.prototype.unshift.apply(c,d);return a.apply(b,c)}}return function(){return a.apply(b,arguments)}}function p(a,b,c){p=Function.prototype.bind&&-1!=Function.prototype.bind.toString().indexOf("native code")?aa:ba;return p.apply(null,arguments)}var q=Date.now||function(){return+new Date};function ca(a,b){this.a=a;this.o=b||a;this.c=this.o.document}var da=!!window.FontFace;function t(a,b,c,d){b=a.c.createElement(b);if(c)for(var e in c)c.hasOwnProperty(e)&&("style"==e?b.style.cssText=c[e]:b.setAttribute(e,c[e]));d&&b.appendChild(a.c.createTextNode(d));return b}function u(a,b,c){a=a.c.getElementsByTagName(b)[0];a||(a=document.documentElement);a.insertBefore(c,a.lastChild)}function v(a){a.parentNode&&a.parentNode.removeChild(a)}
function w(a,b,c){b=b||[];c=c||[];for(var d=a.className.split(/\s+/),e=0;e<b.length;e+=1){for(var f=!1,g=0;g<d.length;g+=1)if(b[e]===d[g]){f=!0;break}f||d.push(b[e])}b=[];for(e=0;e<d.length;e+=1){f=!1;for(g=0;g<c.length;g+=1)if(d[e]===c[g]){f=!0;break}f||b.push(d[e])}a.className=b.join(" ").replace(/\s+/g," ").replace(/^\s+|\s+$/,"")}function y(a,b){for(var c=a.className.split(/\s+/),d=0,e=c.length;d<e;d++)if(c[d]==b)return!0;return!1}
function ea(a){return a.o.location.hostname||a.a.location.hostname}function z(a,b,c){function d(){m&&e&&f&&(m(g),m=null)}b=t(a,"link",{rel:"stylesheet",href:b,media:"all"});var e=!1,f=!0,g=null,m=c||null;da?(b.onload=function(){e=!0;d()},b.onerror=function(){e=!0;g=Error("Stylesheet failed to load");d()}):setTimeout(function(){e=!0;d()},0);u(a,"head",b)}
function A(a,b,c,d){var e=a.c.getElementsByTagName("head")[0];if(e){var f=t(a,"script",{src:b}),g=!1;f.onload=f.onreadystatechange=function(){g||this.readyState&&"loaded"!=this.readyState&&"complete"!=this.readyState||(g=!0,c&&c(null),f.onload=f.onreadystatechange=null,"HEAD"==f.parentNode.tagName&&e.removeChild(f))};e.appendChild(f);setTimeout(function(){g||(g=!0,c&&c(Error("Script load timeout")))},d||5E3);return f}return null};function B(){this.a=0;this.c=null}function C(a){a.a++;return function(){a.a--;D(a)}}function E(a,b){a.c=b;D(a)}function D(a){0==a.a&&a.c&&(a.c(),a.c=null)};function F(a){this.a=a||"-"}F.prototype.c=function(a){for(var b=[],c=0;c<arguments.length;c++)b.push(arguments[c].replace(/[\W_]+/g,"").toLowerCase());return b.join(this.a)};function G(a,b){this.c=a;this.f=4;this.a="n";var c=(b||"n4").match(/^([nio])([1-9])$/i);c&&(this.a=c[1],this.f=parseInt(c[2],10))}function fa(a){return H(a)+" "+(a.f+"00")+" 300px "+I(a.c)}function I(a){var b=[];a=a.split(/,\s*/);for(var c=0;c<a.length;c++){var d=a[c].replace(/['"]/g,"");-1!=d.indexOf(" ")||/^\d/.test(d)?b.push("'"+d+"'"):b.push(d)}return b.join(",")}function J(a){return a.a+a.f}function H(a){var b="normal";"o"===a.a?b="oblique":"i"===a.a&&(b="italic");return b}
function ga(a){var b=4,c="n",d=null;a&&((d=a.match(/(normal|oblique|italic)/i))&&d[1]&&(c=d[1].substr(0,1).toLowerCase()),(d=a.match(/([1-9]00|normal|bold)/i))&&d[1]&&(/bold/i.test(d[1])?b=7:/[1-9]00/.test(d[1])&&(b=parseInt(d[1].substr(0,1),10))));return c+b};function ha(a,b){this.c=a;this.f=a.o.document.documentElement;this.h=b;this.a=new F("-");this.j=!1!==b.events;this.g=!1!==b.classes}function ia(a){a.g&&w(a.f,[a.a.c("wf","loading")]);K(a,"loading")}function L(a){if(a.g){var b=y(a.f,a.a.c("wf","active")),c=[],d=[a.a.c("wf","loading")];b||c.push(a.a.c("wf","inactive"));w(a.f,c,d)}K(a,"inactive")}function K(a,b,c){if(a.j&&a.h[b])if(c)a.h[b](c.c,J(c));else a.h[b]()};function ja(){this.c={}}function ka(a,b,c){var d=[],e;for(e in b)if(b.hasOwnProperty(e)){var f=a.c[e];f&&d.push(f(b[e],c))}return d};function M(a,b){this.c=a;this.f=b;this.a=t(this.c,"span",{"aria-hidden":"true"},this.f)}function N(a){u(a.c,"body",a.a)}function O(a){return"display:block;position:absolute;top:-9999px;left:-9999px;font-size:300px;width:auto;height:auto;line-height:normal;margin:0;padding:0;font-variant:normal;white-space:nowrap;font-family:"+I(a.c)+";"+("font-style:"+H(a)+";font-weight:"+(a.f+"00")+";")};function P(a,b,c,d,e,f){this.g=a;this.j=b;this.a=d;this.c=c;this.f=e||3E3;this.h=f||void 0}P.prototype.start=function(){var a=this.c.o.document,b=this,c=q(),d=new Promise(function(d,e){function f(){q()-c>=b.f?e():a.fonts.load(fa(b.a),b.h).then(function(a){1<=a.length?d():setTimeout(f,25)},function(){e()})}f()}),e=null,f=new Promise(function(a,d){e=setTimeout(d,b.f)});Promise.race([f,d]).then(function(){e&&(clearTimeout(e),e=null);b.g(b.a)},function(){b.j(b.a)})};function Q(a,b,c,d,e,f,g){this.v=a;this.B=b;this.c=c;this.a=d;this.s=g||"BESbswy";this.f={};this.w=e||3E3;this.u=f||null;this.m=this.j=this.h=this.g=null;this.g=new M(this.c,this.s);this.h=new M(this.c,this.s);this.j=new M(this.c,this.s);this.m=new M(this.c,this.s);a=new G(this.a.c+",serif",J(this.a));a=O(a);this.g.a.style.cssText=a;a=new G(this.a.c+",sans-serif",J(this.a));a=O(a);this.h.a.style.cssText=a;a=new G("serif",J(this.a));a=O(a);this.j.a.style.cssText=a;a=new G("sans-serif",J(this.a));a=
O(a);this.m.a.style.cssText=a;N(this.g);N(this.h);N(this.j);N(this.m)}var R={D:"serif",C:"sans-serif"},S=null;function T(){if(null===S){var a=/AppleWebKit\/([0-9]+)(?:\.([0-9]+))/.exec(window.navigator.userAgent);S=!!a&&(536>parseInt(a[1],10)||536===parseInt(a[1],10)&&11>=parseInt(a[2],10))}return S}Q.prototype.start=function(){this.f.serif=this.j.a.offsetWidth;this.f["sans-serif"]=this.m.a.offsetWidth;this.A=q();U(this)};
function la(a,b,c){for(var d in R)if(R.hasOwnProperty(d)&&b===a.f[R[d]]&&c===a.f[R[d]])return!0;return!1}function U(a){var b=a.g.a.offsetWidth,c=a.h.a.offsetWidth,d;(d=b===a.f.serif&&c===a.f["sans-serif"])||(d=T()&&la(a,b,c));d?q()-a.A>=a.w?T()&&la(a,b,c)&&(null===a.u||a.u.hasOwnProperty(a.a.c))?V(a,a.v):V(a,a.B):ma(a):V(a,a.v)}function ma(a){setTimeout(p(function(){U(this)},a),50)}function V(a,b){setTimeout(p(function(){v(this.g.a);v(this.h.a);v(this.j.a);v(this.m.a);b(this.a)},a),0)};function W(a,b,c){this.c=a;this.a=b;this.f=0;this.m=this.j=!1;this.s=c}var X=null;W.prototype.g=function(a){var b=this.a;b.g&&w(b.f,[b.a.c("wf",a.c,J(a).toString(),"active")],[b.a.c("wf",a.c,J(a).toString(),"loading"),b.a.c("wf",a.c,J(a).toString(),"inactive")]);K(b,"fontactive",a);this.m=!0;na(this)};
W.prototype.h=function(a){var b=this.a;if(b.g){var c=y(b.f,b.a.c("wf",a.c,J(a).toString(),"active")),d=[],e=[b.a.c("wf",a.c,J(a).toString(),"loading")];c||d.push(b.a.c("wf",a.c,J(a).toString(),"inactive"));w(b.f,d,e)}K(b,"fontinactive",a);na(this)};function na(a){0==--a.f&&a.j&&(a.m?(a=a.a,a.g&&w(a.f,[a.a.c("wf","active")],[a.a.c("wf","loading"),a.a.c("wf","inactive")]),K(a,"active")):L(a.a))};function oa(a){this.j=a;this.a=new ja;this.h=0;this.f=this.g=!0}oa.prototype.load=function(a){this.c=new ca(this.j,a.context||this.j);this.g=!1!==a.events;this.f=!1!==a.classes;pa(this,new ha(this.c,a),a)};
function qa(a,b,c,d,e){var f=0==--a.h;(a.f||a.g)&&setTimeout(function(){var a=e||null,m=d||null||{};if(0===c.length&&f)L(b.a);else{b.f+=c.length;f&&(b.j=f);var h,l=[];for(h=0;h<c.length;h++){var k=c[h],n=m[k.c],r=b.a,x=k;r.g&&w(r.f,[r.a.c("wf",x.c,J(x).toString(),"loading")]);K(r,"fontloading",x);r=null;if(null===X)if(window.FontFace){var x=/Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent),xa=/OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent)&&/Apple/.exec(window.navigator.vendor);
X=x?42<parseInt(x[1],10):xa?!1:!0}else X=!1;X?r=new P(p(b.g,b),p(b.h,b),b.c,k,b.s,n):r=new Q(p(b.g,b),p(b.h,b),b.c,k,b.s,a,n);l.push(r)}for(h=0;h<l.length;h++)l[h].start()}},0)}function pa(a,b,c){var d=[],e=c.timeout;ia(b);var d=ka(a.a,c,a.c),f=new W(a.c,b,e);a.h=d.length;b=0;for(c=d.length;b<c;b++)d[b].load(function(b,d,c){qa(a,f,b,d,c)})};function ra(a,b){this.c=a;this.a=b}
ra.prototype.load=function(a){function b(){if(f["__mti_fntLst"+d]){var c=f["__mti_fntLst"+d](),e=[],h;if(c)for(var l=0;l<c.length;l++){var k=c[l].fontfamily;void 0!=c[l].fontStyle&&void 0!=c[l].fontWeight?(h=c[l].fontStyle+c[l].fontWeight,e.push(new G(k,h))):e.push(new G(k))}a(e)}else setTimeout(function(){b()},50)}var c=this,d=c.a.projectId,e=c.a.version;if(d){var f=c.c.o;A(this.c,(c.a.api||"https://fast.fonts.net/jsapi")+"/"+d+".js"+(e?"?v="+e:""),function(e){e?a([]):(f["__MonotypeConfiguration__"+
d]=function(){return c.a},b())}).id="__MonotypeAPIScript__"+d}else a([])};function sa(a,b){this.c=a;this.a=b}sa.prototype.load=function(a){var b,c,d=this.a.urls||[],e=this.a.families||[],f=this.a.testStrings||{},g=new B;b=0;for(c=d.length;b<c;b++)z(this.c,d[b],C(g));var m=[];b=0;for(c=e.length;b<c;b++)if(d=e[b].split(":"),d[1])for(var h=d[1].split(","),l=0;l<h.length;l+=1)m.push(new G(d[0],h[l]));else m.push(new G(d[0]));E(g,function(){a(m,f)})};function ta(a,b){a?this.c=a:this.c=ua;this.a=[];this.f=[];this.g=b||""}var ua="https://fonts.googleapis.com/css";function va(a,b){for(var c=b.length,d=0;d<c;d++){var e=b[d].split(":");3==e.length&&a.f.push(e.pop());var f="";2==e.length&&""!=e[1]&&(f=":");a.a.push(e.join(f))}}
function wa(a){if(0==a.a.length)throw Error("No fonts to load!");if(-1!=a.c.indexOf("kit="))return a.c;for(var b=a.a.length,c=[],d=0;d<b;d++)c.push(a.a[d].replace(/ /g,"+"));b=a.c+"?family="+c.join("%7C");0<a.f.length&&(b+="&subset="+a.f.join(","));0<a.g.length&&(b+="&text="+encodeURIComponent(a.g));return b};function ya(a){this.f=a;this.a=[];this.c={}}
var za={latin:"BESbswy","latin-ext":"\u00e7\u00f6\u00fc\u011f\u015f",cyrillic:"\u0439\u044f\u0416",greek:"\u03b1\u03b2\u03a3",khmer:"\u1780\u1781\u1782",Hanuman:"\u1780\u1781\u1782"},Aa={thin:"1",extralight:"2","extra-light":"2",ultralight:"2","ultra-light":"2",light:"3",regular:"4",book:"4",medium:"5","semi-bold":"6",semibold:"6","demi-bold":"6",demibold:"6",bold:"7","extra-bold":"8",extrabold:"8","ultra-bold":"8",ultrabold:"8",black:"9",heavy:"9",l:"3",r:"4",b:"7"},Ba={i:"i",italic:"i",n:"n",normal:"n"},
Ca=/^(thin|(?:(?:extra|ultra)-?)?light|regular|book|medium|(?:(?:semi|demi|extra|ultra)-?)?bold|black|heavy|l|r|b|[1-9]00)?(n|i|normal|italic)?$/;
function Da(a){for(var b=a.f.length,c=0;c<b;c++){var d=a.f[c].split(":"),e=d[0].replace(/\+/g," "),f=["n4"];if(2<=d.length){var g;var m=d[1];g=[];if(m)for(var m=m.split(","),h=m.length,l=0;l<h;l++){var k;k=m[l];if(k.match(/^[\w-]+$/)){var n=Ca.exec(k.toLowerCase());if(null==n)k="";else{k=n[2];k=null==k||""==k?"n":Ba[k];n=n[1];if(null==n||""==n)n="4";else var r=Aa[n],n=r?r:isNaN(n)?"4":n.substr(0,1);k=[k,n].join("")}}else k="";k&&g.push(k)}0<g.length&&(f=g);3==d.length&&(d=d[2],g=[],d=d?d.split(","):
g,0<d.length&&(d=za[d[0]])&&(a.c[e]=d))}a.c[e]||(d=za[e])&&(a.c[e]=d);for(d=0;d<f.length;d+=1)a.a.push(new G(e,f[d]))}};function Ea(a,b){this.c=a;this.a=b}var Fa={Arimo:!0,Cousine:!0,Tinos:!0};Ea.prototype.load=function(a){var b=new B,c=this.c,d=new ta(this.a.api,this.a.text),e=this.a.families;va(d,e);var f=new ya(e);Da(f);z(c,wa(d),C(b));E(b,function(){a(f.a,f.c,Fa)})};function Ga(a,b){this.c=a;this.a=b}Ga.prototype.load=function(a){var b=this.a.id,c=this.c.o;b?A(this.c,(this.a.api||"https://use.typekit.net")+"/"+b+".js",function(b){if(b)a([]);else if(c.Typekit&&c.Typekit.config&&c.Typekit.config.fn){b=c.Typekit.config.fn;for(var e=[],f=0;f<b.length;f+=2)for(var g=b[f],m=b[f+1],h=0;h<m.length;h++)e.push(new G(g,m[h]));try{c.Typekit.load({events:!1,classes:!1,async:!0})}catch(l){}a(e)}},2E3):a([])};function Ha(a,b){this.c=a;this.f=b;this.a=[]}Ha.prototype.load=function(a){var b=this.f.id,c=this.c.o,d=this;b?(c.__webfontfontdeckmodule__||(c.__webfontfontdeckmodule__={}),c.__webfontfontdeckmodule__[b]=function(b,c){for(var g=0,m=c.fonts.length;g<m;++g){var h=c.fonts[g];d.a.push(new G(h.name,ga("font-weight:"+h.weight+";font-style:"+h.style)))}a(d.a)},A(this.c,(this.f.api||"https://f.fontdeck.com/s/css/js/")+ea(this.c)+"/"+b+".js",function(b){b&&a([])})):a([])};var Y=new oa(window);Y.a.c.custom=function(a,b){return new sa(b,a)};Y.a.c.fontdeck=function(a,b){return new Ha(b,a)};Y.a.c.monotype=function(a,b){return new ra(b,a)};Y.a.c.typekit=function(a,b){return new Ga(b,a)};Y.a.c.google=function(a,b){return new Ea(b,a)};var Z={load:p(Y.load,Y)}; true?!(__WEBPACK_AMD_DEFINE_RESULT__ = (function(){return Z}).call(exports, __webpack_require__, exports, module),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)):"undefined"!==typeof module&&module.exports?module.exports=Z:(window.WebFont=Z,window.WebFontConfig&&Y.load(window.WebFontConfig));}());


/***/ }),
/* 139 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = TransparentOverlay;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function TransparentOverlay(props) {
  var zIndexValue = props.setZindex || 999999;
  var overLayStyle = {
    zIndex: zIndexValue
  };
  return _react2.default.createElement("div", { className: "overlay-transparent", style: overLayStyle });
}

/***/ }),
/* 140 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = WarningBanner;

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function WarningBanner(props) {
  return _react2.default.createElement(
    "section",
    { className: "warning-banner" },
    _react2.default.createElement(
      "p",
      { className: "warning-text" },
      props.bannerText
    )
  );
}

/***/ }),
/* 141 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.GenerateHTMLFromRaw = GenerateHTMLFromRaw;
exports.getHTMLFromRawJSON = getHTMLFromRawJSON;
exports.replacedUnwantedTags = replacedUnwantedTags;
exports.encodeData = encodeData;
exports.decodeData = decodeData;
var AttributedString = function () {
  var aString = void 0,
      StringRange = void 0,
      RangesList = void 0,
      HtmlSerializer = void 0,
      plainStringSerializer = void 0,
      _ = {},
      entityMap = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': '&quot;',
    "'": '&#39;',
    "/": '&#x2F;'
  };

  _.htmlTag = function (tag, text) {
    var attributes = _.map(attributes, function (key, value) {
      if (key === "style") {
        value = _.map(value, function (style, value) {
          return "" + style + ": " + _.escapeHtml(value);
        }).join("; ");
      } else if (_.isArray(value)) {
        value = value.join(" ");
      }
      return "" + key + '="' + value + '"';
    });

    attributes = attributes.length > 0 ? " " + attributes.join(" ") : "";
    if (tag.indexOf(";") > -1) {
      var tagArray = tag.split(";");
      var finalTagString = '';
      for (var i = 0; i < tagArray.length; i++) {
        finalTagString += ["<", tagArray[i], attributes, ">"].join("");
      }
      finalTagString += _.escapeHtml(text);
      for (var _i = tagArray.length - 1; _i >= 0; _i--) {
        finalTagString += "</" + tagArray[_i] + ">";
      }
      return finalTagString;
    } else {
      return ["<", tag, attributes, ">", _.escapeHtml(text), "</" + tag + ">"].join("");
    }
  };

  _.escapeHtml = function (string) {
    return String(string).replace(/[&<>"'\/]/g, function (s) {
      return entityMap[s];
    });
  };

  _.extend = function (main, obj) {
    for (var i in obj) {
      main[i] = obj[i];
    }
  };

  _.isString = function (obj) {
    return Object.prototype.toString.call(obj) == '[object String]';
  };

  _.isObject = function (obj) {
    return obj == new Object(obj);
  };

  _.isArray = function (obj) {
    return Array.isArray(obj);
  };

  _.clone = function (obj) {
    var result = {};

    if (obj === undefined || obj === null || _.isString(obj) || !_.isObject(obj)) {
      return obj;
    } else if (_.isArray(obj)) {
      return _.map(obj.slice(), function (i, obj1) {
        return _.clone(obj1);
      });
    } else {
      _.each(obj, function (key, value) {
        result[key] = _.clone(value);
      });
      return result;
    }
  };

  _.each = function (obj, callback) {
    for (var i in obj) {
      callback.call(obj[i], i, obj[i]);
    }
  };

  _.map = function (obj, callback) {
    var array = [];
    _.each(obj, function (key, value) {
      array.push(callback(key, value));
    });
    return array;
  };

  _.eachApply = function (ranges, methodName, args) {
    _.each(ranges, function (i, obj) {
      obj[methodName].apply(obj, args);
    });
  };

  aString = function aString(text) {
    var startNode = new StringRange(text);
    return {
      filter: function filter(callback) {
        return new RangesList(startNode.filter([], callback));
      },
      each: function each(callback) {
        startNode.each(0, callback);
        return this;
      },
      map: function map(callback) {
        return startNode.map([], callback);
      },
      toArray: function toArray() {
        return startNode.toArray([]);
      },
      range: function range(a, b) {
        var start = Math.min(a, b),
            end = Math.max(a, b),
            node1 = void 0,
            node2 = void 0;
        node1 = startNode.split(start);
        node2 = node1.split(end - start);
        return RangesList.build(node1, node2);
      },
      toHtml: function toHtml() {
        return this.map(function (i, range) {
          return range.toHtml();
        }).join("");
      },
      getText: function getText() {
        return this.map(function (i, range) {
          return range.text;
        }).join("");
      }
    };
  };

  StringRange = function StringRange(text, next) {
    this.text = text;
    this.next = next;
    this.attributes = {};
  };

  _.extend(StringRange.prototype, {
    each: function each(index, callback) {
      callback.call(this, index, this);
      this.next && this.next.each(index + 1, callback);
    },
    map: function map(array, callback) {
      array.push(callback.call(this, array.length, this));
      this.next && this.next.map(array, callback);
      return array;
    },
    filter: function filter(array, callback) {
      var value = callback.call(this, array.length, this);
      value && array.push(this);
      this.next && this.next.filter(array, callback);
      return array;
    },
    toArray: function toArray(array) {
      return this.map(array, function (i, range) {
        return {
          text: this.text,
          attributes: this.attributes
        };
      });
    },
    toHtml: function toHtml() {
      if (this.attributes && Object.keys(this.attributes).length > 0) {
        return _.htmlTag(this.tagName || "ins", this.text, this.attributes);
      } else if (this.tagName) {
        return _.htmlTag(this.tagName, this.text, this.attributes);
      }
      return this.text;
    },
    split: function split(index) {
      if (index == 0) {
        return this;
      } else if (index < this.text.length) {
        var newRange = new StringRange(this.text.slice(index), this.next);
        newRange.attributes = _.clone(this.attributes);
        this.next = newRange;
        this.text = this.text.slice(0, index);
        return newRange;
      } else {
        if (this.next) {
          return this.next.split(index - this.text.length);
        }
      }
    }
  });

  StringRange.prototype.css = function (name, val) {
    this.attributes.style = this.attributes.style || {};
    if (arguments.length > 1) {
      this.attributes.style[name] = val;
    } else if (name === Object(name)) {
      for (var key in name) {
        this.css(key, name[key]);
      }
    } else {
      return this.attributes.style[name];
    }
    return this;
  };

  StringRange.prototype.attr = function (name, val) {
    if (arguments.length > 1) {
      this.attributes[name] = val;
    } else if (name === Object(name)) {
      for (var key in name) {
        this.attr(key, name[key]);
      }
    } else {
      return this.attributes[name];
    }
    return this;
  };

  StringRange.prototype.tag = function (tagName) {
    if (!this.tagName) {
      this.tagName = tagName;
    } else {
      this.tagName += ";" + tagName;
    }
    return this;
  };

  StringRange.prototype.hasClass = function (className) {
    return -1 < (this.attributes.class || []).indexOf(className);
  };

  StringRange.prototype.addClass = function (classNames) {
    var array = this.attributes.class || [];
    _.each(classNames.split(" "), function (i, className) {
      array.indexOf(className) < 0 && array.push(className);
    });
    this.attributes.class = array;
    return this;
  };

  StringRange.prototype.removeClass = function (className) {
    var array = this.attributes.class || [],
        i = array.indexOf(className);

    i >= 0 && array.splice(i, 1);
    this.attributes.class = array;
    return this;
  };

  RangesList = function RangesList(ranges) {
    this.ranges = ranges;
  };

  RangesList.build = function (start, end) {
    var ranges = [];
    while (start !== end) {
      ranges.push(start);
      start = start.next;
    }
    return new RangesList(ranges);
  };

  RangesList.prototype.get = function (i) {
    return this.ranges[i];
  };

  _.each("css attr tag addClass removeClass".split(" "), function (i, name) {
    RangesList.prototype[name] = function () {
      _.eachApply(this.ranges, name, arguments);
      return this;
    };
  });

  return aString;
}();

var blockTypeMap = {
  'header-one': 'h1',
  'header-two': 'h2',
  blockquote: 'blockquote',
  unstyled: 'p',
  'ordered-list-item': 'li',
  'unordered-list-item': 'li'
};

var isListType = function isListType(type) {
  return type === 'ordered-list-item' || type === 'unordered-list-item';
};

var wrapperTagNameForListType = function wrapperTagNameForListType(type) {
  if (type === 'ordered-list-item') {
    return 'ol';
  } else if (type === 'unordered-list-item') {
    return 'ul';
  }
  return null;
};

var defaultStyleMap = {
  BOLD: {
    tag: 'strong'
  },
  ITALIC: {
    tag: 'em'
  },
  UNDERLINE: {
    tag: 'ins'
  }
};

function GenerateHTMLFromRaw(blockData) {
  var styleMap = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : defaultStyleMap;

  var htmlBlocks = [];
  var previousBlockType = '';
  for (var i = 0; i < blockData.blocks.length; i++) {
    var block = blockData.blocks[i];
    var stringLength = block.text.length;
    var attributedString = AttributedString(block.text);
    var stringRange = attributedString.range(0, stringLength);
    for (var e = 0; e < block.inlineStyleRanges.length; e++) {
      var styleRange = block.inlineStyleRanges[e];
      var updateRange = attributedString.range(styleRange.offset, styleRange.offset + styleRange.length);
      var style = styleMap[styleRange.style] || null;
      if (style) {
        style.tag && updateRange.tag(style.tag);
      }
    }
    for (var _e = 0; _e < block.entityRanges.length; _e++) {
      var entityRange = block.entityRanges[_e];
      var entity = blockData.entityMap[entityRange.key];
      var _updateRange = attributedString.range(entityRange.offset, entityRange.offset + entityRange.length);
      if (entity.type === "link") {
        _updateRange.tag('a');
        _updateRange.attr('href', entity.data.href);
        _updateRange.attr('target', '_blank');
      }
    }
    var tagName = blockTypeMap[block.type] || 'p';
    if (isListType(block.type) && block.type != previousBlockType) {
      htmlBlocks.push("<" + wrapperTagNameForListType(block.type) + ">");
    }
    if (isListType(previousBlockType) && !isListType(block.type)) {
      htmlBlocks.push("</" + wrapperTagNameForListType(previousBlockType) + ">");
    }
    if (!(stringLength < 1 && tagName.toLowerCase() === 'p')) {
      htmlBlocks.push("<" + tagName + ">" + attributedString.toHtml() + "</" + tagName + ">");
    }
    previousBlockType = block.type;
  }

  if (isListType(previousBlockType)) {
    htmlBlocks.push("</" + wrapperTagNameForListType(previousBlockType) + ">");
  }
  return htmlBlocks.join("\n") + "<p><br></p>";
}

function getHTMLFromRawJSON(blockData) {
  return blockData ? GenerateHTMLFromRaw(JSON.parse(blockData)) : null;
}

function replacedUnwantedTags(value, isAdd, replaceCommon) {
  if (replaceCommon) value = value.replace(/<ul>|<\/ul>|<\/li>/gi, '').replace(/<\s*(FONT|SPAN)[^>]*>/gi, '<del>').replace(/<\s*\/\s*(FONT|SPAN)\s*>/gi, '</del>').replace(/<li>/gi, '<br>').replace(/<I>|<i>/g, '<em>').replace(/<\/I>|<\/i>/g, '</em>').replace(/&apos;/g, "'").replace(/<b>|<\/b>/gi, '');
  if (isAdd == null) return value;else if (isAdd) return value.replace(/<\s*(FONT|SPAN)[^>]*>/gi, '<del>').replace(/<\s*\/\s*(FONT|SPAN)\s*>/gi, '</del>').replace("<li><br></li>", "").replace(/<ul>|<\/ul>/g, "").replace(/<br>\n/g, "<br>").replace(/<b>|<\/b>/gi, '');else if (!isAdd) return decodeData(value.replace(/<br>/g, '\n').replace(/<\/?del>/gi, '').replace(/<em>|<\/em>/g, ''));
}
function encodeData(str) {
  return String(str).replace(/&/g, '&amp;').replace(/"/g, '&quot;').replace(/'/g, '&#39;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
}

function decodeData(value) {
  return String(value).replace(/&quot;/g, '"').replace(/&#39;/g, "'").replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&amp;/g, '&');
}

/***/ }),
/* 142 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = chooseTemplateReducer;

var _actionTypes = __webpack_require__(4);

var actionTypes = _interopRequireWildcard(_actionTypes);

var _initialState = __webpack_require__(11);

var _initialState2 = _interopRequireDefault(_initialState);

var _reactAddonsUpdate = __webpack_require__(9);

var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function chooseTemplateReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _initialState2.default.ChooseTemplate;
  var action = arguments[1];

  switch (action.type) {
    case actionTypes.UPDATE_TEMPLATE:
      {
        var test = (0, _reactAddonsUpdate2.default)(state, { $merge: { documentId: action.document.id, templateCd: action.document.templateCd } });
        return test;
      }
    default:
      return state;
  }
}

/***/ }),
/* 143 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = UserReducer;

var _actionTypes = __webpack_require__(4);

var actionTypes = _interopRequireWildcard(_actionTypes);

var _reactAddonsUpdate = __webpack_require__(9);

var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);

var _initialState = __webpack_require__(11);

var _initialState2 = _interopRequireDefault(_initialState);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function UserReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _initialState2.default.User;
  var action = arguments[1];

  switch (action.type) {
    case actionTypes.REGISTER_GUEST_USER:
      return (0, _reactAddonsUpdate2.default)(state, { UserUID: { $set: action.request } });
    case actionTypes.LOGIN_USER:
      return (0, _reactAddonsUpdate2.default)(state, { UserUID: { $set: action.request.user_uid }, PartyID: { $set: action.request.partyid } });
    case actionTypes.UPDATE_USER:
      return (0, _reactAddonsUpdate2.default)(state, { $set: action.request });
    case actionTypes.USER_CREATED_ON:
      return (0, _reactAddonsUpdate2.default)(state, { CreatedOn: { $set: action.request } });
    case actionTypes.UPDATE_USER_CONTACT:
      return (0, _reactAddonsUpdate2.default)(state, { City: { $set: action.request.City },
        PhoneNumber: { $set: action.request.PhoneNumber }, State: { $set: action.request.State } });
    case actionTypes.RESET_USER:
      return (0, _reactAddonsUpdate2.default)(state, { $set: _initialState2.default.User });
    default:
      return state;
  }
}

/***/ }),
/* 144 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = commonReducer;

var _actionTypes = __webpack_require__(4);

var actionTypes = _interopRequireWildcard(_actionTypes);

var _initialState = __webpack_require__(11);

var _initialState2 = _interopRequireDefault(_initialState);

var _reactAddonsUpdate = __webpack_require__(9);

var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function commonReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _initialState2.default.Common;
  var action = arguments[1];

  switch (action.type) {
    case actionTypes.SET_JOBTITLE:
      return (0, _reactAddonsUpdate2.default)(state, { $set: { JobTitle: action.data } });
    case actionTypes.RESET_COMMON:
      return (0, _reactAddonsUpdate2.default)(state, { $set: _initialState2.default.Common });
    default:
      return state;
  }
}

/***/ }),
/* 145 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = onboardingReducer;

var _actionTypes = __webpack_require__(4);

var actionTypes = _interopRequireWildcard(_actionTypes);

var _initialState = __webpack_require__(11);

var _initialState2 = _interopRequireDefault(_initialState);

var _reactAddonsUpdate = __webpack_require__(9);

var _reactAddonsUpdate2 = _interopRequireDefault(_reactAddonsUpdate);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function updateVisitedStepArr(state, stepArr) {
  var visitedStepArr = Object.assign([], state.onboardingVisitedStepArr);
  var recentStep = stepArr[stepArr.length - 1];
  var prevStep = stepArr.length >= 2 && stepArr[stepArr.length - 2];
  var prevStepIndex = visitedStepArr.indexOf(prevStep);
  if (!visitedStepArr.includes(recentStep)) {
    if (prevStep && prevStepIndex != visitedStepArr.length - 1) {
      visitedStepArr.splice(prevStepIndex + 1, 0, recentStep);
    } else visitedStepArr.push(recentStep);
  } else if (prevStepIndex) {
    var recentStepIndex = visitedStepArr.indexOf(recentStep);
    if (recentStepIndex - prevStepIndex != 1) {
      //Not consecutive in visited arr
      visitedStepArr.splice(prevStepIndex + 1, recentStepIndex - prevStepIndex - 1);
      //Remove in between steps to make it in sync with onbboardingstepArr
    }
  }
  return visitedStepArr;
}

function onboardingReducer() {
  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : _initialState2.default.Onboarding;
  var action = arguments[1];

  switch (action.type) {
    case actionTypes.SAVE_ONBOARDING_STEP_ARR:
      var visitedStepArr = updateVisitedStepArr(state, action.data);
      return (0, _reactAddonsUpdate2.default)(state, {
        onboardingStepArr: { $set: action.data },
        onboardingVisitedStepArr: { $set: visitedStepArr }
      });
    case actionTypes.SAVE_ONBOARDING_USER_INPUT:
      return (0, _reactAddonsUpdate2.default)(state, { onboardingUserInput: { $set: action.data } });
    case actionTypes.SAVE_JOB_SKILLS_LIST:
      return (0, _reactAddonsUpdate2.default)(state, { jobSkillsList: { $set: action.data } });
    case actionTypes.SAVE_PREVIOUS_FLOW_ARR:
      return (0, _reactAddonsUpdate2.default)(state, { previousFlowArr: { $set: action.data } });
    case actionTypes.SET_INPUT_MODIFIED:
      return (0, _reactAddonsUpdate2.default)(state, { isInputModified: { $set: action.data } });
    case actionTypes.UPDATE_REVIEW_STATE:
      return (0, _reactAddonsUpdate2.default)(state, { isReviewMode: { $set: action.data } });
    case actionTypes.RESET_ONBOARDING_DATA:
      return (0, _reactAddonsUpdate2.default)(state, { $set: _initialState2.default.Onboarding });
    case actionTypes.SET_SKIP_STEPS_ARR:
      return (0, _reactAddonsUpdate2.default)(state, { skipStepsArr: { $set: action.data } });
    case actionTypes.SAVE_RESUME_ARR:
      return (0, _reactAddonsUpdate2.default)(state, { resumeArr: { $set: action.data } });
    case actionTypes.DOC_FROM_RESUME:
      return (0, _reactAddonsUpdate2.default)(state, { documentCreatedFromResume: { $set: action.data } });
    case actionTypes.SAVE_REVIEW_ARR:
      return (0, _reactAddonsUpdate2.default)(state, { resumeReviewArr: { $set: action.data } });
    case actionTypes.SAVE_UPLOAD_REVIEW_ARR:
      return (0, _reactAddonsUpdate2.default)(state, { uploadResumeReviewArr: { $set: action.data } });
    case actionTypes.RESET_RESUME_ONBOARDING:
      var isImportResume = state.onboardingUserInput.isImportResume;

      return (0, _reactAddonsUpdate2.default)(state, {
        documentCreatedFromResume: { $set: _initialState2.default.Onboarding.documentCreatedFromResume },
        skipStepsArr: { $set: _initialState2.default.Onboarding.skipStepsArr },
        onboardingUserInput: { $set: { isImportResume: isImportResume } }
      });
    case actionTypes.SAVE_RESUME_USER_INPUT:
      return (0, _reactAddonsUpdate2.default)(state, { resumeUserInput: { $set: action.data } });
    case actionTypes.SAVE_CUSTOM_SKILLS:
      return (0, _reactAddonsUpdate2.default)(state, { customSkillsArray: { $set: action.data } });
    case actionTypes.SET_SIGN_UP_MODAL_SKIP:
      return (0, _reactAddonsUpdate2.default)(state, { signUpModalSkipped: { $set: action.data } });
    case actionTypes.SAVE_DOC_COLOR:
      return (0, _reactAddonsUpdate2.default)(state, { docColor: { $set: action.data } });
    case actionTypes.CONTACT_SIGNUP_STATUS:
      return (0, _reactAddonsUpdate2.default)(state, { registrationOnContactStatus: { $set: action.data } });
    case actionTypes.SET_PERSONALIZATION_INPUT_MODIFIED:
      return (0, _reactAddonsUpdate2.default)(state, { isPersonalizationInputModified: { $set: action.data } });
    case actionTypes.SET_USER_INTERACTED_ON_YOE:
      return (0, _reactAddonsUpdate2.default)(state, { userInteractedOnYOE: { $set: action.data } });
    case actionTypes.SET_SHOW_JOB_IN_PREVIEW:
      return (0, _reactAddonsUpdate2.default)(state, { showJobInPreview: { $set: action.data } });
    case actionTypes.SAVE_ENHANCED_SKILLS_LIST:
      return (0, _reactAddonsUpdate2.default)(state, { enhancedSkillsList: { $set: action.data } });
    case actionTypes.SET_ONBOARDING_HISTORY_LENGTH:
      return (0, _reactAddonsUpdate2.default)(state, { historyLength: { $set: action.data } });
    default:
      return state;
  }
}

/***/ }),
/* 146 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = configureStore;

var _redux = __webpack_require__(15);

var _rootReducer = __webpack_require__(54);

var _rootReducer2 = _interopRequireDefault(_rootReducer);

var _reduxThunk = __webpack_require__(58);

var _reduxThunk2 = _interopRequireDefault(_reduxThunk);

var _queueHandler2 = __webpack_require__(33);

var _queueHandler3 = _interopRequireDefault(_queueHandler2);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

var middleware = [interceptor, _reduxThunk2.default];
var _queueHandler = new _queueHandler3.default();

function interceptor(_ref) {
  var dispatch = _ref.dispatch,
      getState = _ref.getState;

  return function (next) {
    return function (action) {

      // var _action = Object.assign({}, action);

      var returnValue = null;
      var oldState = getState();
      // Call the next dispatch method in the middleware chain.
      returnValue = next(action);
      var newState = getState();

      if (oldState != newState) {
        //console.log('state updated');
        _queueHandler.enqueue('document_clb', newState);
      } else {}
      //console.log('state unchanged');

      //console.log(oldState, newState);
      return returnValue;
    };
  };
}

function configureStore(initialState) {
  var store = (0, _redux.createStore)(_rootReducer2.default, initialState, _redux.applyMiddleware.apply(undefined, middleware));
  return store;
}

/***/ }),
/* 147 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _react = __webpack_require__(0);

var _react2 = _interopRequireDefault(_react);

var _reactRouterDom = __webpack_require__(39);

var _componentlist = __webpack_require__(32);

var _ErrorBoundary = __webpack_require__(148);

var _ErrorBoundary2 = _interopRequireDefault(_ErrorBoundary);

function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : { default: obj };
}

exports.default = _react2.default.createElement(_reactRouterDom.Switch, null, _react2.default.createElement(_reactRouterDom.Route, { exact: !window.RDL.enableReactRoutes, path: window.RDL.Paths.BasePath,
  component: _componentlist.ComponentList.Editor.Component, title: _componentlist.ComponentList.Editor.Title }));

/***/ }),
/* 148 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () {
  function defineProperties(target, props) {
    for (var i = 0; i < props.length; i++) {
      var descriptor = props[i];descriptor.enumerable = descriptor.enumerable || false;descriptor.configurable = true;if ("value" in descriptor) descriptor.writable = true;Object.defineProperty(target, descriptor.key, descriptor);
    }
  }return function (Constructor, protoProps, staticProps) {
    if (protoProps) defineProperties(Constructor.prototype, protoProps);if (staticProps) defineProperties(Constructor, staticProps);return Constructor;
  };
}();

var _react = __webpack_require__(0);

var _localforage = __webpack_require__(10);

var localforage = _interopRequireWildcard(_localforage);

var _typeCodes = __webpack_require__(6);

var typeCd = _interopRequireWildcard(_typeCodes);

var _helper = __webpack_require__(7);

function _interopRequireWildcard(obj) {
  if (obj && obj.__esModule) {
    return obj;
  } else {
    var newObj = {};if (obj != null) {
      for (var key in obj) {
        if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key];
      }
    }newObj.default = obj;return newObj;
  }
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _possibleConstructorReturn(self, call) {
  if (!self) {
    throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  }return call && ((typeof call === "undefined" ? "undefined" : _typeof(call)) === "object" || typeof call === "function") ? call : self;
}

function _inherits(subClass, superClass) {
  if (typeof superClass !== "function" && superClass !== null) {
    throw new TypeError("Super expression must either be null or a function, not " + (typeof superClass === "undefined" ? "undefined" : _typeof(superClass)));
  }subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } });if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;
}

var ErrorBoundary = function (_Component) {
  _inherits(ErrorBoundary, _Component);

  function ErrorBoundary(props) {
    _classCallCheck(this, ErrorBoundary);

    var _this = _possibleConstructorReturn(this, (ErrorBoundary.__proto__ || Object.getPrototypeOf(ErrorBoundary)).call(this, props));

    _this.checkExistingError = function (prevErrors, error) {
      var errorObj = prevErrors.find(function (prevError) {
        return prevError.message == error.message;
      });
      return errorObj;
    };

    _this.isErrorToBeSuppressed = function (errorMessage) {
      if (errorMessage.indexOf('React error #185') != -1) {
        return true;
      }
      return false;
    };

    _this.logErrorAsInfo = function (errorMessage) {
      // if (errorMessage.indexOf('React error #185') != -1) {
      //   return true;
      // }
      return false;
    };

    _this.componentDidCatch = function (error, errorInfo) {
      var logMessage = (error ? error.toString() : '') + '- V2 Client Error';
      var prevErrors = _this.state.prevErrors,
          existingError = void 0;
      localforage.getItem(typeCd.ForageKeyNames.documentCLB).then(function (value) {
        var isSuppressError = _this.isErrorToBeSuppressed(logMessage);
        if (!isSuppressError) {
          var docID = null;
          if (value.Document.id) docID = value.Document.id;
          var logAsInfo = _this.logErrorAsInfo(logMessage) || false;
          RDL.LogError(logMessage, errorInfo.componentStack, logAsInfo, docID);
        }
        existingError = _this.checkExistingError(prevErrors, error);
        if (existingError && performance.now() - existingError.timeStamp < _this.thresholdTimeMS) {
          var redirectURL = RDL.objClaims.role == _helper.TypeCodes.userRoles.User ? window.RDL.Paths.BaseUrl : window.RDL.Paths.rootURL;
          window.location.href = redirectURL;
        } else if (existingError) {
          existingError.timeStamp = performance.now();
          _this.setState({ error: error, errorInfo: errorInfo, prevErrors: prevErrors });
        } else {
          prevErrors.push({
            message: error.message,
            timeStamp: performance.now()
          });
          _this.setState({ error: error, errorInfo: errorInfo, prevErrors: prevErrors });
        }
      });
    };

    _this.state = {
      error: {},
      errorInfo: {},
      prevErrors: []
    };
    _this.thresholdTimeMS = 1000;
    return _this;
  }

  _createClass(ErrorBoundary, [{
    key: 'render',
    value: function render() {
      return this.props.children;
    }
  }]);

  return ErrorBoundary;
}(_react.Component);

exports.default = ErrorBoundary;

/***/ }),
/* 149 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
Object.defineProperty(__webpack_exports__, "__esModule", { value: true });
/* harmony export (immutable) */ __webpack_exports__["Headers"] = Headers;
/* harmony export (immutable) */ __webpack_exports__["Request"] = Request;
/* harmony export (immutable) */ __webpack_exports__["Response"] = Response;
/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, "DOMException", function() { return DOMException; });
/* harmony export (immutable) */ __webpack_exports__["fetch"] = fetch;
var global =
  (typeof globalThis !== 'undefined' && globalThis) ||
  (typeof self !== 'undefined' && self) ||
  (typeof global !== 'undefined' && global)

var support = {
  searchParams: 'URLSearchParams' in global,
  iterable: 'Symbol' in global && 'iterator' in Symbol,
  blob:
    'FileReader' in global &&
    'Blob' in global &&
    (function() {
      try {
        new Blob()
        return true
      } catch (e) {
        return false
      }
    })(),
  formData: 'FormData' in global,
  arrayBuffer: 'ArrayBuffer' in global
}

function isDataView(obj) {
  return obj && DataView.prototype.isPrototypeOf(obj)
}

if (support.arrayBuffer) {
  var viewClasses = [
    '[object Int8Array]',
    '[object Uint8Array]',
    '[object Uint8ClampedArray]',
    '[object Int16Array]',
    '[object Uint16Array]',
    '[object Int32Array]',
    '[object Uint32Array]',
    '[object Float32Array]',
    '[object Float64Array]'
  ]

  var isArrayBufferView =
    ArrayBuffer.isView ||
    function(obj) {
      return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
    }
}

function normalizeName(name) {
  if (typeof name !== 'string') {
    name = String(name)
  }
  if (/[^a-z0-9\-#$%&'*+.^_`|~!]/i.test(name) || name === '') {
    throw new TypeError('Invalid character in header field name: "' + name + '"')
  }
  return name.toLowerCase()
}

function normalizeValue(value) {
  if (typeof value !== 'string') {
    value = String(value)
  }
  return value
}

// Build a destructive iterator for the value list
function iteratorFor(items) {
  var iterator = {
    next: function() {
      var value = items.shift()
      return {done: value === undefined, value: value}
    }
  }

  if (support.iterable) {
    iterator[Symbol.iterator] = function() {
      return iterator
    }
  }

  return iterator
}

function Headers(headers) {
  this.map = {}

  if (headers instanceof Headers) {
    headers.forEach(function(value, name) {
      this.append(name, value)
    }, this)
  } else if (Array.isArray(headers)) {
    headers.forEach(function(header) {
      this.append(header[0], header[1])
    }, this)
  } else if (headers) {
    Object.getOwnPropertyNames(headers).forEach(function(name) {
      this.append(name, headers[name])
    }, this)
  }
}

Headers.prototype.append = function(name, value) {
  name = normalizeName(name)
  value = normalizeValue(value)
  var oldValue = this.map[name]
  this.map[name] = oldValue ? oldValue + ', ' + value : value
}

Headers.prototype['delete'] = function(name) {
  delete this.map[normalizeName(name)]
}

Headers.prototype.get = function(name) {
  name = normalizeName(name)
  return this.has(name) ? this.map[name] : null
}

Headers.prototype.has = function(name) {
  return this.map.hasOwnProperty(normalizeName(name))
}

Headers.prototype.set = function(name, value) {
  this.map[normalizeName(name)] = normalizeValue(value)
}

Headers.prototype.forEach = function(callback, thisArg) {
  for (var name in this.map) {
    if (this.map.hasOwnProperty(name)) {
      callback.call(thisArg, this.map[name], name, this)
    }
  }
}

Headers.prototype.keys = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push(name)
  })
  return iteratorFor(items)
}

Headers.prototype.values = function() {
  var items = []
  this.forEach(function(value) {
    items.push(value)
  })
  return iteratorFor(items)
}

Headers.prototype.entries = function() {
  var items = []
  this.forEach(function(value, name) {
    items.push([name, value])
  })
  return iteratorFor(items)
}

if (support.iterable) {
  Headers.prototype[Symbol.iterator] = Headers.prototype.entries
}

function consumed(body) {
  if (body.bodyUsed) {
    return Promise.reject(new TypeError('Already read'))
  }
  body.bodyUsed = true
}

function fileReaderReady(reader) {
  return new Promise(function(resolve, reject) {
    reader.onload = function() {
      resolve(reader.result)
    }
    reader.onerror = function() {
      reject(reader.error)
    }
  })
}

function readBlobAsArrayBuffer(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsArrayBuffer(blob)
  return promise
}

function readBlobAsText(blob) {
  var reader = new FileReader()
  var promise = fileReaderReady(reader)
  reader.readAsText(blob)
  return promise
}

function readArrayBufferAsText(buf) {
  var view = new Uint8Array(buf)
  var chars = new Array(view.length)

  for (var i = 0; i < view.length; i++) {
    chars[i] = String.fromCharCode(view[i])
  }
  return chars.join('')
}

function bufferClone(buf) {
  if (buf.slice) {
    return buf.slice(0)
  } else {
    var view = new Uint8Array(buf.byteLength)
    view.set(new Uint8Array(buf))
    return view.buffer
  }
}

function Body() {
  this.bodyUsed = false

  this._initBody = function(body) {
    /*
      fetch-mock wraps the Response object in an ES6 Proxy to
      provide useful test harness features such as flush. However, on
      ES5 browsers without fetch or Proxy support pollyfills must be used;
      the proxy-pollyfill is unable to proxy an attribute unless it exists
      on the object before the Proxy is created. This change ensures
      Response.bodyUsed exists on the instance, while maintaining the
      semantic of setting Request.bodyUsed in the constructor before
      _initBody is called.
    */
    this.bodyUsed = this.bodyUsed
    this._bodyInit = body
    if (!body) {
      this._bodyText = ''
    } else if (typeof body === 'string') {
      this._bodyText = body
    } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
      this._bodyBlob = body
    } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
      this._bodyFormData = body
    } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
      this._bodyText = body.toString()
    } else if (support.arrayBuffer && support.blob && isDataView(body)) {
      this._bodyArrayBuffer = bufferClone(body.buffer)
      // IE 10-11 can't handle a DataView body.
      this._bodyInit = new Blob([this._bodyArrayBuffer])
    } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
      this._bodyArrayBuffer = bufferClone(body)
    } else {
      this._bodyText = body = Object.prototype.toString.call(body)
    }

    if (!this.headers.get('content-type')) {
      if (typeof body === 'string') {
        this.headers.set('content-type', 'text/plain;charset=UTF-8')
      } else if (this._bodyBlob && this._bodyBlob.type) {
        this.headers.set('content-type', this._bodyBlob.type)
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8')
      }
    }
  }

  if (support.blob) {
    this.blob = function() {
      var rejected = consumed(this)
      if (rejected) {
        return rejected
      }

      if (this._bodyBlob) {
        return Promise.resolve(this._bodyBlob)
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(new Blob([this._bodyArrayBuffer]))
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as blob')
      } else {
        return Promise.resolve(new Blob([this._bodyText]))
      }
    }

    this.arrayBuffer = function() {
      if (this._bodyArrayBuffer) {
        var isConsumed = consumed(this)
        if (isConsumed) {
          return isConsumed
        }
        if (ArrayBuffer.isView(this._bodyArrayBuffer)) {
          return Promise.resolve(
            this._bodyArrayBuffer.buffer.slice(
              this._bodyArrayBuffer.byteOffset,
              this._bodyArrayBuffer.byteOffset + this._bodyArrayBuffer.byteLength
            )
          )
        } else {
          return Promise.resolve(this._bodyArrayBuffer)
        }
      } else {
        return this.blob().then(readBlobAsArrayBuffer)
      }
    }
  }

  this.text = function() {
    var rejected = consumed(this)
    if (rejected) {
      return rejected
    }

    if (this._bodyBlob) {
      return readBlobAsText(this._bodyBlob)
    } else if (this._bodyArrayBuffer) {
      return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer))
    } else if (this._bodyFormData) {
      throw new Error('could not read FormData body as text')
    } else {
      return Promise.resolve(this._bodyText)
    }
  }

  if (support.formData) {
    this.formData = function() {
      return this.text().then(decode)
    }
  }

  this.json = function() {
    return this.text().then(JSON.parse)
  }

  return this
}

// HTTP methods whose capitalization should be normalized
var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT']

function normalizeMethod(method) {
  var upcased = method.toUpperCase()
  return methods.indexOf(upcased) > -1 ? upcased : method
}

function Request(input, options) {
  if (!(this instanceof Request)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }

  options = options || {}
  var body = options.body

  if (input instanceof Request) {
    if (input.bodyUsed) {
      throw new TypeError('Already read')
    }
    this.url = input.url
    this.credentials = input.credentials
    if (!options.headers) {
      this.headers = new Headers(input.headers)
    }
    this.method = input.method
    this.mode = input.mode
    this.signal = input.signal
    if (!body && input._bodyInit != null) {
      body = input._bodyInit
      input.bodyUsed = true
    }
  } else {
    this.url = String(input)
  }

  this.credentials = options.credentials || this.credentials || 'same-origin'
  if (options.headers || !this.headers) {
    this.headers = new Headers(options.headers)
  }
  this.method = normalizeMethod(options.method || this.method || 'GET')
  this.mode = options.mode || this.mode || null
  this.signal = options.signal || this.signal
  this.referrer = null

  if ((this.method === 'GET' || this.method === 'HEAD') && body) {
    throw new TypeError('Body not allowed for GET or HEAD requests')
  }
  this._initBody(body)

  if (this.method === 'GET' || this.method === 'HEAD') {
    if (options.cache === 'no-store' || options.cache === 'no-cache') {
      // Search for a '_' parameter in the query string
      var reParamSearch = /([?&])_=[^&]*/
      if (reParamSearch.test(this.url)) {
        // If it already exists then set the value with the current time
        this.url = this.url.replace(reParamSearch, '$1_=' + new Date().getTime())
      } else {
        // Otherwise add a new '_' parameter to the end with the current time
        var reQueryString = /\?/
        this.url += (reQueryString.test(this.url) ? '&' : '?') + '_=' + new Date().getTime()
      }
    }
  }
}

Request.prototype.clone = function() {
  return new Request(this, {body: this._bodyInit})
}

function decode(body) {
  var form = new FormData()
  body
    .trim()
    .split('&')
    .forEach(function(bytes) {
      if (bytes) {
        var split = bytes.split('=')
        var name = split.shift().replace(/\+/g, ' ')
        var value = split.join('=').replace(/\+/g, ' ')
        form.append(decodeURIComponent(name), decodeURIComponent(value))
      }
    })
  return form
}

function parseHeaders(rawHeaders) {
  var headers = new Headers()
  // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
  // https://tools.ietf.org/html/rfc7230#section-3.2
  var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ')
  // Avoiding split via regex to work around a common IE11 bug with the core-js 3.6.0 regex polyfill
  // https://github.com/github/fetch/issues/748
  // https://github.com/zloirock/core-js/issues/751
  preProcessedHeaders
    .split('\r')
    .map(function(header) {
      return header.indexOf('\n') === 0 ? header.substr(1, header.length) : header
    })
    .forEach(function(line) {
      var parts = line.split(':')
      var key = parts.shift().trim()
      if (key) {
        var value = parts.join(':').trim()
        headers.append(key, value)
      }
    })
  return headers
}

Body.call(Request.prototype)

function Response(bodyInit, options) {
  if (!(this instanceof Response)) {
    throw new TypeError('Please use the "new" operator, this DOM object constructor cannot be called as a function.')
  }
  if (!options) {
    options = {}
  }

  this.type = 'default'
  this.status = options.status === undefined ? 200 : options.status
  this.ok = this.status >= 200 && this.status < 300
  this.statusText = options.statusText === undefined ? '' : '' + options.statusText
  this.headers = new Headers(options.headers)
  this.url = options.url || ''
  this._initBody(bodyInit)
}

Body.call(Response.prototype)

Response.prototype.clone = function() {
  return new Response(this._bodyInit, {
    status: this.status,
    statusText: this.statusText,
    headers: new Headers(this.headers),
    url: this.url
  })
}

Response.error = function() {
  var response = new Response(null, {status: 0, statusText: ''})
  response.type = 'error'
  return response
}

var redirectStatuses = [301, 302, 303, 307, 308]

Response.redirect = function(url, status) {
  if (redirectStatuses.indexOf(status) === -1) {
    throw new RangeError('Invalid status code')
  }

  return new Response(null, {status: status, headers: {location: url}})
}

var DOMException = global.DOMException
try {
  new DOMException()
} catch (err) {
  DOMException = function(message, name) {
    this.message = message
    this.name = name
    var error = Error(message)
    this.stack = error.stack
  }
  DOMException.prototype = Object.create(Error.prototype)
  DOMException.prototype.constructor = DOMException
}

function fetch(input, init) {
  return new Promise(function(resolve, reject) {
    var request = new Request(input, init)

    if (request.signal && request.signal.aborted) {
      return reject(new DOMException('Aborted', 'AbortError'))
    }

    var xhr = new XMLHttpRequest()

    function abortXhr() {
      xhr.abort()
    }

    xhr.onload = function() {
      var options = {
        status: xhr.status,
        statusText: xhr.statusText,
        headers: parseHeaders(xhr.getAllResponseHeaders() || '')
      }
      options.url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL')
      var body = 'response' in xhr ? xhr.response : xhr.responseText
      setTimeout(function() {
        resolve(new Response(body, options))
      }, 0)
    }

    xhr.onerror = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.ontimeout = function() {
      setTimeout(function() {
        reject(new TypeError('Network request failed'))
      }, 0)
    }

    xhr.onabort = function() {
      setTimeout(function() {
        reject(new DOMException('Aborted', 'AbortError'))
      }, 0)
    }

    function fixUrl(url) {
      try {
        return url === '' && global.location.href ? global.location.href : url
      } catch (e) {
        return url
      }
    }

    xhr.open(request.method, fixUrl(request.url), true)

    if (request.credentials === 'include') {
      xhr.withCredentials = true
    } else if (request.credentials === 'omit') {
      xhr.withCredentials = false
    }

    if ('responseType' in xhr) {
      if (support.blob) {
        xhr.responseType = 'blob'
      } else if (
        support.arrayBuffer &&
        request.headers.get('Content-Type') &&
        request.headers.get('Content-Type').indexOf('application/octet-stream') !== -1
      ) {
        xhr.responseType = 'arraybuffer'
      }
    }

    if (init && typeof init.headers === 'object' && !(init.headers instanceof Headers)) {
      Object.getOwnPropertyNames(init.headers).forEach(function(name) {
        xhr.setRequestHeader(name, normalizeValue(init.headers[name]))
      })
    } else {
      request.headers.forEach(function(value, name) {
        xhr.setRequestHeader(name, value)
      })
    }

    if (request.signal) {
      request.signal.addEventListener('abort', abortXhr)

      xhr.onreadystatechange = function() {
        // DONE (success or failure)
        if (xhr.readyState === 4) {
          request.signal.removeEventListener('abort', abortXhr)
        }
      }
    }

    xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit)
  })
}

fetch.polyfill = true

if (!global.fetch) {
  global.fetch = fetch
  global.Headers = Headers
  global.Request = Request
  global.Response = Response
}


/***/ })
/******/ ]);